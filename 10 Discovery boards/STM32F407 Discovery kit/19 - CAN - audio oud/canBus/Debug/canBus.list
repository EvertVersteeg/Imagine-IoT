
canBus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000104a0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  08010628  08010628  00020628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010b50  08010b50  000300cc  2**0
                  CONTENTS
  4 .ARM          00000008  08010b50  08010b50  00020b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010b58  08010b58  000300cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010b58  08010b58  00020b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010b5c  08010b5c  00020b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08010b60  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300cc  2**0
                  CONTENTS
 10 .bss          00002ba0  200000cc  200000cc  000300cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002c6c  20002c6c  000300cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003081f  00000000  00000000  000300fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006316  00000000  00000000  0006091b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016e0  00000000  00000000  00066c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014a0  00000000  00000000  00068318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028325  00000000  00000000  000697b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024257  00000000  00000000  00091add  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf63c  00000000  00000000  000b5d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00185370  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ec8  00000000  00000000  001853c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000cc 	.word	0x200000cc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08010610 	.word	0x08010610

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000d0 	.word	0x200000d0
 80001c4:	08010610 	.word	0x08010610

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	603a      	str	r2, [r7, #0]
 80004ca:	80fb      	strh	r3, [r7, #6]
 80004cc:	460b      	mov	r3, r1
 80004ce:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 80004d0:	2300      	movs	r3, #0
 80004d2:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 80004d4:	2200      	movs	r2, #0
 80004d6:	6839      	ldr	r1, [r7, #0]
 80004d8:	481c      	ldr	r0, [pc, #112]	; (800054c <AUDIO_OUT_Init+0x8c>)
 80004da:	f000 f8f9 	bl	80006d0 <AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 80004de:	4b1b      	ldr	r3, [pc, #108]	; (800054c <AUDIO_OUT_Init+0x8c>)
 80004e0:	4a1b      	ldr	r2, [pc, #108]	; (8000550 <AUDIO_OUT_Init+0x90>)
 80004e2:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 80004e4:	4819      	ldr	r0, [pc, #100]	; (800054c <AUDIO_OUT_Init+0x8c>)
 80004e6:	f006 ffb3 	bl	8007450 <HAL_I2S_GetState>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d103      	bne.n	80004f8 <AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 80004f0:	2100      	movs	r1, #0
 80004f2:	4816      	ldr	r0, [pc, #88]	; (800054c <AUDIO_OUT_Init+0x8c>)
 80004f4:	f000 f94a 	bl	800078c <AUDIO_OUT_MspInit>
  }

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 80004f8:	6838      	ldr	r0, [r7, #0]
 80004fa:	f000 fa0f 	bl	800091c <I2S3_Init>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 8000504:	2301      	movs	r3, #1
 8000506:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 8000508:	7bfb      	ldrb	r3, [r7, #15]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d10e      	bne.n	800052c <AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 800050e:	4b11      	ldr	r3, [pc, #68]	; (8000554 <AUDIO_OUT_Init+0x94>)
 8000510:	689b      	ldr	r3, [r3, #8]
 8000512:	2094      	movs	r0, #148	; 0x94
 8000514:	4798      	blx	r3
 8000516:	4603      	mov	r3, r0
 8000518:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800051c:	2be0      	cmp	r3, #224	; 0xe0
 800051e:	d103      	bne.n	8000528 <AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 8000520:	4b0d      	ldr	r3, [pc, #52]	; (8000558 <AUDIO_OUT_Init+0x98>)
 8000522:	4a0c      	ldr	r2, [pc, #48]	; (8000554 <AUDIO_OUT_Init+0x94>)
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	e001      	b.n	800052c <AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 8000528:	2301      	movs	r3, #1
 800052a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 800052c:	7bfb      	ldrb	r3, [r7, #15]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d107      	bne.n	8000542 <AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <AUDIO_OUT_Init+0x98>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	681c      	ldr	r4, [r3, #0]
 8000538:	797a      	ldrb	r2, [r7, #5]
 800053a:	88f9      	ldrh	r1, [r7, #6]
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	2094      	movs	r0, #148	; 0x94
 8000540:	47a0      	blx	r4
  }
  
  return ret;
 8000542:	7bfb      	ldrb	r3, [r7, #15]
}
 8000544:	4618      	mov	r0, r3
 8000546:	3714      	adds	r7, #20
 8000548:	46bd      	mov	sp, r7
 800054a:	bd90      	pop	{r4, r7, pc}
 800054c:	2000140c 	.word	0x2000140c
 8000550:	40003c00 	.word	0x40003c00
 8000554:	20000004 	.word	0x20000004
 8000558:	200000e8 	.word	0x200000e8

0800055c <AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <AUDIO_OUT_Play+0x4c>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	683a      	ldr	r2, [r7, #0]
 800056e:	b292      	uxth	r2, r2
 8000570:	6879      	ldr	r1, [r7, #4]
 8000572:	2094      	movs	r0, #148	; 0x94
 8000574:	4798      	blx	r3
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 800057c:	2301      	movs	r3, #1
 800057e:	e00f      	b.n	80005a0 <AUDIO_OUT_Play+0x44>
  }
  else 
  {
    /* Update the Media layer and enable it for play */  
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000586:	d203      	bcs.n	8000590 <AUDIO_OUT_Play+0x34>
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	085b      	lsrs	r3, r3, #1
 800058c:	b29b      	uxth	r3, r3
 800058e:	e001      	b.n	8000594 <AUDIO_OUT_Play+0x38>
 8000590:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000594:	461a      	mov	r2, r3
 8000596:	6879      	ldr	r1, [r7, #4]
 8000598:	4804      	ldr	r0, [pc, #16]	; (80005ac <AUDIO_OUT_Play+0x50>)
 800059a:	f006 fbd7 	bl	8006d4c <HAL_I2S_Transmit_DMA>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800059e:	2300      	movs	r3, #0
  }
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	200000e8 	.word	0x200000e8
 80005ac:	2000140c 	.word	0x2000140c

080005b0 <AUDIO_OUT_Pause>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Pause(void)
{    
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 80005b4:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <AUDIO_OUT_Pause+0x24>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	691b      	ldr	r3, [r3, #16]
 80005ba:	2094      	movs	r0, #148	; 0x94
 80005bc:	4798      	blx	r3
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <AUDIO_OUT_Pause+0x18>
  {
    return AUDIO_ERROR;
 80005c4:	2301      	movs	r3, #1
 80005c6:	e003      	b.n	80005d0 <AUDIO_OUT_Pause+0x20>
  }
  else
  {
    /* Call the Media layer pause function */
    HAL_I2S_DMAPause(&hAudioOutI2s);
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <AUDIO_OUT_Pause+0x28>)
 80005ca:	f006 fc67 	bl	8006e9c <HAL_I2S_DMAPause>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005ce:	2300      	movs	r3, #0
  }
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200000e8 	.word	0x200000e8
 80005d8:	2000140c 	.word	0x2000140c

080005dc <AUDIO_OUT_Resume>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Resume(void)
{    
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <AUDIO_OUT_Resume+0x24>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	2094      	movs	r0, #148	; 0x94
 80005e8:	4798      	blx	r3
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <AUDIO_OUT_Resume+0x18>
  {
    return AUDIO_ERROR;
 80005f0:	2301      	movs	r3, #1
 80005f2:	e003      	b.n	80005fc <AUDIO_OUT_Resume+0x20>
  }
  else
  {
    /* Call the Media layer resume function */
    HAL_I2S_DMAResume(&hAudioOutI2s);
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <AUDIO_OUT_Resume+0x28>)
 80005f6:	f006 fcb3 	bl	8006f60 <HAL_I2S_DMAResume>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005fa:	2300      	movs	r3, #0
  }
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200000e8 	.word	0x200000e8
 8000604:	2000140c 	.word	0x2000140c

08000608 <AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Stop(uint32_t Option)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  /* Call DMA Stop to disable DMA stream before stopping codec */
  HAL_I2S_DMAStop(&hAudioOutI2s);
 8000610:	480e      	ldr	r0, [pc, #56]	; (800064c <AUDIO_OUT_Stop+0x44>)
 8000612:	f006 fd39 	bl	8007088 <HAL_I2S_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <AUDIO_OUT_Stop+0x48>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	6879      	ldr	r1, [r7, #4]
 800061e:	2094      	movs	r0, #148	; 0x94
 8000620:	4798      	blx	r3
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 8000628:	2301      	movs	r3, #1
 800062a:	e00b      	b.n	8000644 <AUDIO_OUT_Stop+0x3c>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d107      	bne.n	8000642 <AUDIO_OUT_Stop+0x3a>
    { 
      /* Wait at least 1ms */
      HAL_Delay(1);
 8000632:	2001      	movs	r0, #1
 8000634:	f001 fe0e 	bl	8002254 <HAL_Delay>
      
      /* Reset the pin */
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2110      	movs	r1, #16
 800063c:	4805      	ldr	r0, [pc, #20]	; (8000654 <AUDIO_OUT_Stop+0x4c>)
 800063e:	f003 fc99 	bl	8003f74 <HAL_GPIO_WritePin>
    }
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000642:	2300      	movs	r3, #0
  }
}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000140c 	.word	0x2000140c
 8000650:	200000e8 	.word	0x200000e8
 8000654:	40020c00 	.word	0x40020c00

08000658 <AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_SetVolume(uint8_t Volume)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <AUDIO_OUT_SetVolume+0x2c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	6a1b      	ldr	r3, [r3, #32]
 8000668:	79fa      	ldrb	r2, [r7, #7]
 800066a:	4611      	mov	r1, r2
 800066c:	2094      	movs	r0, #148	; 0x94
 800066e:	4798      	blx	r3
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 8000676:	2301      	movs	r3, #1
 8000678:	e000      	b.n	800067c <AUDIO_OUT_SetVolume+0x24>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800067a:	2300      	movs	r3, #0
  }
}
 800067c:	4618      	mov	r0, r3
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200000e8 	.word	0x200000e8

08000688 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a04      	ldr	r2, [pc, #16]	; (80006a8 <HAL_I2S_TxCpltCallback+0x20>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d101      	bne.n	800069e <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
 800069a:	f001 fd17 	bl	80020cc <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40003c00 	.word	0x40003c00

080006ac <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a04      	ldr	r2, [pc, #16]	; (80006cc <HAL_I2S_TxHalfCpltCallback+0x20>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d101      	bne.n	80006c2 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    AUDIO_OUT_HalfTransfer_CallBack();
 80006be:	f001 fd19 	bl	80020f4 <AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40003c00 	.word	0x40003c00

080006d0 <AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 80006dc:	2300      	movs	r3, #0
 80006de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80006e2:	23ff      	movs	r3, #255	; 0xff
 80006e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
  for(index = 0; index < 8; index++)
 80006e8:	2300      	movs	r3, #0
 80006ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80006ee:	e010      	b.n	8000712 <AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 80006f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006f4:	4a22      	ldr	r2, [pc, #136]	; (8000780 <AUDIO_OUT_ClockConfig+0xb0>)
 80006f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fa:	68ba      	ldr	r2, [r7, #8]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d103      	bne.n	8000708 <AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 8000700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000704:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  for(index = 0; index < 8; index++)
 8000708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800070c:	3301      	adds	r3, #1
 800070e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000712:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000716:	2b07      	cmp	r3, #7
 8000718:	d9ea      	bls.n	80006f0 <AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4618      	mov	r0, r3
 8000720:	f007 ffb6 	bl	8008690 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8000724:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000728:	f003 0307 	and.w	r3, r3, #7
 800072c:	2b00      	cmp	r3, #0
 800072e:	d115      	bne.n	800075c <AUDIO_OUT_ClockConfig+0x8c>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000730:	2301      	movs	r3, #1
 8000732:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SN = 8;
 8000734:	2308      	movs	r3, #8
 8000736:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8000738:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800073c:	4a11      	ldr	r2, [pc, #68]	; (8000784 <AUDIO_OUT_ClockConfig+0xb4>)
 800073e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000742:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8000744:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000748:	4a0f      	ldr	r2, [pc, #60]	; (8000788 <AUDIO_OUT_ClockConfig+0xb8>)
 800074a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800074e:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	4618      	mov	r0, r3
 8000756:	f007 feb9 	bl	80084cc <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PLLI2S.PLLI2SN = 8;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 800075a:	e00d      	b.n	8000778 <AUDIO_OUT_ClockConfig+0xa8>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800075c:	2301      	movs	r3, #1
 800075e:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SN = 8;
 8000760:	2308      	movs	r3, #8
 8000762:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8000764:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000768:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 800076a:	2303      	movs	r3, #3
 800076c:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4618      	mov	r0, r3
 8000774:	f007 feaa 	bl	80084cc <HAL_RCCEx_PeriphCLKConfig>
}
 8000778:	bf00      	nop
 800077a:	3728      	adds	r7, #40	; 0x28
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	0801067c 	.word	0x0801067c
 8000784:	0801069c 	.word	0x0801069c
 8000788:	080106bc 	.word	0x080106bc

0800078c <AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08c      	sub	sp, #48	; 0x30
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	4b56      	ldr	r3, [pc, #344]	; (80008f4 <AUDIO_OUT_MspInit+0x168>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079e:	4a55      	ldr	r2, [pc, #340]	; (80008f4 <AUDIO_OUT_MspInit+0x168>)
 80007a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007a4:	6413      	str	r3, [r2, #64]	; 0x40
 80007a6:	4b53      	ldr	r3, [pc, #332]	; (80008f4 <AUDIO_OUT_MspInit+0x168>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007ae:	61bb      	str	r3, [r7, #24]
 80007b0:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
 80007b6:	4b4f      	ldr	r3, [pc, #316]	; (80008f4 <AUDIO_OUT_MspInit+0x168>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a4e      	ldr	r2, [pc, #312]	; (80008f4 <AUDIO_OUT_MspInit+0x168>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b4c      	ldr	r3, [pc, #304]	; (80008f4 <AUDIO_OUT_MspInit+0x168>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	4b48      	ldr	r3, [pc, #288]	; (80008f4 <AUDIO_OUT_MspInit+0x168>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a47      	ldr	r2, [pc, #284]	; (80008f4 <AUDIO_OUT_MspInit+0x168>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b45      	ldr	r3, [pc, #276]	; (80008f4 <AUDIO_OUT_MspInit+0x168>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]

  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 80007ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 80007f0:	2302      	movs	r3, #2
 80007f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 80007f8:	2302      	movs	r3, #2
 80007fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 80007fc:	2306      	movs	r3, #6
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	4619      	mov	r1, r3
 8000806:	483c      	ldr	r0, [pc, #240]	; (80008f8 <AUDIO_OUT_MspInit+0x16c>)
 8000808:	f003 f904 	bl	8003a14 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 800080c:	2310      	movs	r3, #16
 800080e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	4839      	ldr	r0, [pc, #228]	; (80008fc <AUDIO_OUT_MspInit+0x170>)
 8000818:	f003 f8fc 	bl	8003a14 <HAL_GPIO_Init>

  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	4b34      	ldr	r3, [pc, #208]	; (80008f4 <AUDIO_OUT_MspInit+0x168>)
 8000822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000824:	4a33      	ldr	r2, [pc, #204]	; (80008f4 <AUDIO_OUT_MspInit+0x168>)
 8000826:	f043 0304 	orr.w	r3, r3, #4
 800082a:	6313      	str	r3, [r2, #48]	; 0x30
 800082c:	4b31      	ldr	r3, [pc, #196]	; (80008f4 <AUDIO_OUT_MspInit+0x168>)
 800082e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000830:	f003 0304 	and.w	r3, r3, #4
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	4619      	mov	r1, r3
 8000842:	482d      	ldr	r0, [pc, #180]	; (80008f8 <AUDIO_OUT_MspInit+0x16c>)
 8000844:	f003 f8e6 	bl	8003a14 <HAL_GPIO_Init>

  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 8000848:	2300      	movs	r3, #0
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	4b29      	ldr	r3, [pc, #164]	; (80008f4 <AUDIO_OUT_MspInit+0x168>)
 800084e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000850:	4a28      	ldr	r2, [pc, #160]	; (80008f4 <AUDIO_OUT_MspInit+0x168>)
 8000852:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000856:	6313      	str	r3, [r2, #48]	; 0x30
 8000858:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <AUDIO_OUT_MspInit+0x168>)
 800085a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a25      	ldr	r2, [pc, #148]	; (8000900 <AUDIO_OUT_MspInit+0x174>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d136      	bne.n	80008dc <AUDIO_OUT_MspInit+0x150>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 800086e:	4b25      	ldr	r3, [pc, #148]	; (8000904 <AUDIO_OUT_MspInit+0x178>)
 8000870:	2200      	movs	r2, #0
 8000872:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000874:	4b23      	ldr	r3, [pc, #140]	; (8000904 <AUDIO_OUT_MspInit+0x178>)
 8000876:	2240      	movs	r2, #64	; 0x40
 8000878:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800087a:	4b22      	ldr	r3, [pc, #136]	; (8000904 <AUDIO_OUT_MspInit+0x178>)
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 8000880:	4b20      	ldr	r3, [pc, #128]	; (8000904 <AUDIO_OUT_MspInit+0x178>)
 8000882:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000886:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8000888:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <AUDIO_OUT_MspInit+0x178>)
 800088a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800088e:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 8000890:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <AUDIO_OUT_MspInit+0x178>)
 8000892:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000896:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 8000898:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <AUDIO_OUT_MspInit+0x178>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 800089e:	4b19      	ldr	r3, [pc, #100]	; (8000904 <AUDIO_OUT_MspInit+0x178>)
 80008a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008a4:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <AUDIO_OUT_MspInit+0x178>)
 80008a8:	2204      	movs	r2, #4
 80008aa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <AUDIO_OUT_MspInit+0x178>)
 80008ae:	2203      	movs	r2, #3
 80008b0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <AUDIO_OUT_MspInit+0x178>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <AUDIO_OUT_MspInit+0x178>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <AUDIO_OUT_MspInit+0x178>)
 80008c0:	4a11      	ldr	r2, [pc, #68]	; (8000908 <AUDIO_OUT_MspInit+0x17c>)
 80008c2:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a0f      	ldr	r2, [pc, #60]	; (8000904 <AUDIO_OUT_MspInit+0x178>)
 80008c8:	639a      	str	r2, [r3, #56]	; 0x38
 80008ca:	4a0e      	ldr	r2, [pc, #56]	; (8000904 <AUDIO_OUT_MspInit+0x178>)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 80008d0:	480c      	ldr	r0, [pc, #48]	; (8000904 <AUDIO_OUT_MspInit+0x178>)
 80008d2:	f002 fd0f 	bl	80032f4 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 80008d6:	480b      	ldr	r0, [pc, #44]	; (8000904 <AUDIO_OUT_MspInit+0x178>)
 80008d8:	f002 fc5e 	bl	8003198 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80008dc:	2200      	movs	r2, #0
 80008de:	210e      	movs	r1, #14
 80008e0:	202f      	movs	r0, #47	; 0x2f
 80008e2:	f002 fc22 	bl	800312a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 80008e6:	202f      	movs	r0, #47	; 0x2f
 80008e8:	f002 fc3b 	bl	8003162 <HAL_NVIC_EnableIRQ>
}
 80008ec:	bf00      	nop
 80008ee:	3730      	adds	r7, #48	; 0x30
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020800 	.word	0x40020800
 80008fc:	40020000 	.word	0x40020000
 8000900:	40003c00 	.word	0x40003c00
 8000904:	200000ec 	.word	0x200000ec
 8000908:	400260b8 	.word	0x400260b8

0800090c <AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
	...

0800091c <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 8000924:	4b17      	ldr	r3, [pc, #92]	; (8000984 <I2S3_Init+0x68>)
 8000926:	4a18      	ldr	r2, [pc, #96]	; (8000988 <I2S3_Init+0x6c>)
 8000928:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 800092a:	4b16      	ldr	r3, [pc, #88]	; (8000984 <I2S3_Init+0x68>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	69da      	ldr	r2, [r3, #28]
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <I2S3_Init+0x68>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000938:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 800093a:	4a12      	ldr	r2, [pc, #72]	; (8000984 <I2S3_Init+0x68>)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8000940:	4b10      	ldr	r3, [pc, #64]	; (8000984 <I2S3_Init+0x68>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <I2S3_Init+0x68>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 800094c:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <I2S3_Init+0x68>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <I2S3_Init+0x68>)
 8000954:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000958:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <I2S3_Init+0x68>)
 800095c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000960:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <I2S3_Init+0x68>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8000968:	4806      	ldr	r0, [pc, #24]	; (8000984 <I2S3_Init+0x68>)
 800096a:	f006 f8af 	bl	8006acc <HAL_I2S_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 8000974:	2301      	movs	r3, #1
 8000976:	e000      	b.n	800097a <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 8000978:	2300      	movs	r3, #0
  }
}
 800097a:	4618      	mov	r0, r3
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	2000140c 	.word	0x2000140c
 8000988:	40003c00 	.word	0x40003c00

0800098c <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a04      	ldr	r2, [pc, #16]	; (80009ac <HAL_I2S_ErrorCallback+0x20>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d101      	bne.n	80009a2 <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 800099e:	f7ff ffb5 	bl	800090c <AUDIO_OUT_Error_CallBack>
  }
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40003c00 	.word	0x40003c00

080009b0 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80009b4:	4814      	ldr	r0, [pc, #80]	; (8000a08 <I2Cx_Init+0x58>)
 80009b6:	f005 fd1f 	bl	80063f8 <HAL_I2C_GetState>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d121      	bne.n	8000a04 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = AUDIO_I2Cx;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <I2Cx_Init+0x58>)
 80009c2:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <I2Cx_Init+0x5c>)
 80009c4:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <I2Cx_Init+0x58>)
 80009c8:	2243      	movs	r2, #67	; 0x43
 80009ca:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 80009cc:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <I2Cx_Init+0x58>)
 80009ce:	4a10      	ldr	r2, [pc, #64]	; (8000a10 <I2Cx_Init+0x60>)
 80009d0:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <I2Cx_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009d8:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <I2Cx_Init+0x58>)
 80009da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009de:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <I2Cx_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <I2Cx_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <I2Cx_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 80009f2:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <I2Cx_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80009f8:	4803      	ldr	r0, [pc, #12]	; (8000a08 <I2Cx_Init+0x58>)
 80009fa:	f000 f86b 	bl	8000ad4 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80009fe:	4802      	ldr	r0, [pc, #8]	; (8000a08 <I2Cx_Init+0x58>)
 8000a00:	f005 f866 	bl	8005ad0 <HAL_I2C_Init>
  }
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	2000014c 	.word	0x2000014c
 8000a0c:	40005400 	.word	0x40005400
 8000a10:	000186a0 	.word	0x000186a0

08000a14 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af04      	add	r7, sp, #16
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	80fb      	strh	r3, [r7, #6]
 8000a1e:	460b      	mov	r3, r1
 8000a20:	717b      	strb	r3, [r7, #5]
 8000a22:	4613      	mov	r3, r2
 8000a24:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a26:	2300      	movs	r3, #0
 8000a28:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8000a2a:	797b      	ldrb	r3, [r7, #5]
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <I2Cx_WriteData+0x48>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	88f9      	ldrh	r1, [r7, #6]
 8000a34:	9302      	str	r3, [sp, #8]
 8000a36:	2301      	movs	r3, #1
 8000a38:	9301      	str	r3, [sp, #4]
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2301      	movs	r3, #1
 8000a40:	4807      	ldr	r0, [pc, #28]	; (8000a60 <I2Cx_WriteData+0x4c>)
 8000a42:	f005 f9b9 	bl	8005db8 <HAL_I2C_Mem_Write>
 8000a46:	4603      	mov	r3, r0
 8000a48:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000a50:	f000 f834 	bl	8000abc <I2Cx_Error>
  }
}
 8000a54:	bf00      	nop
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000000 	.word	0x20000000
 8000a60:	2000014c 	.word	0x2000014c

08000a64 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af04      	add	r7, sp, #16
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	460a      	mov	r2, r1
 8000a6e:	80fb      	strh	r3, [r7, #6]
 8000a70:	4613      	mov	r3, r2
 8000a72:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000a74:	2300      	movs	r3, #0
 8000a76:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8000a7c:	797b      	ldrb	r3, [r7, #5]
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <I2Cx_ReadData+0x50>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	88f9      	ldrh	r1, [r7, #6]
 8000a86:	9302      	str	r3, [sp, #8]
 8000a88:	2301      	movs	r3, #1
 8000a8a:	9301      	str	r3, [sp, #4]
 8000a8c:	f107 030e 	add.w	r3, r7, #14
 8000a90:	9300      	str	r3, [sp, #0]
 8000a92:	2301      	movs	r3, #1
 8000a94:	4808      	ldr	r0, [pc, #32]	; (8000ab8 <I2Cx_ReadData+0x54>)
 8000a96:	f005 fa89 	bl	8005fac <HAL_I2C_Mem_Read>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000aa4:	f000 f80a 	bl	8000abc <I2Cx_Error>
  }
  return value;
 8000aa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000000 	.word	0x20000000
 8000ab8:	2000014c 	.word	0x2000014c

08000abc <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8000ac0:	4803      	ldr	r0, [pc, #12]	; (8000ad0 <I2Cx_Error+0x14>)
 8000ac2:	f005 f949 	bl	8005d58 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8000ac6:	f7ff ff73 	bl	80009b0 <I2Cx_Init>
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	2000014c 	.word	0x2000014c

08000ad4 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	; 0x28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 8000adc:	2300      	movs	r3, #0
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <I2Cx_MspInit+0xa4>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	4a24      	ldr	r2, [pc, #144]	; (8000b78 <I2Cx_MspInit+0xa4>)
 8000ae6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aea:	6413      	str	r3, [r2, #64]	; 0x40
 8000aec:	4b22      	ldr	r3, [pc, #136]	; (8000b78 <I2Cx_MspInit+0xa4>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <I2Cx_MspInit+0xa4>)
 8000afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b00:	4a1d      	ldr	r2, [pc, #116]	; (8000b78 <I2Cx_MspInit+0xa4>)
 8000b02:	f043 0302 	orr.w	r3, r3, #2
 8000b06:	6313      	str	r3, [r2, #48]	; 0x30
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <I2Cx_MspInit+0xa4>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0c:	f003 0302 	and.w	r3, r3, #2
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8000b14:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8000b1a:	2312      	movs	r3, #18
 8000b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000b22:	2302      	movs	r3, #2
 8000b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 8000b26:	2304      	movs	r3, #4
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4812      	ldr	r0, [pc, #72]	; (8000b7c <I2Cx_MspInit+0xa8>)
 8000b32:	f002 ff6f 	bl	8003a14 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <I2Cx_MspInit+0xa4>)
 8000b38:	6a1b      	ldr	r3, [r3, #32]
 8000b3a:	4a0f      	ldr	r2, [pc, #60]	; (8000b78 <I2Cx_MspInit+0xa4>)
 8000b3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b40:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <I2Cx_MspInit+0xa4>)
 8000b44:	6a1b      	ldr	r3, [r3, #32]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <I2Cx_MspInit+0xa4>)
 8000b48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000b4c:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	210f      	movs	r1, #15
 8000b52:	201f      	movs	r0, #31
 8000b54:	f002 fae9 	bl	800312a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 8000b58:	201f      	movs	r0, #31
 8000b5a:	f002 fb02 	bl	8003162 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	210f      	movs	r1, #15
 8000b62:	2020      	movs	r0, #32
 8000b64:	f002 fae1 	bl	800312a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 8000b68:	2020      	movs	r0, #32
 8000b6a:	f002 fafa 	bl	8003162 <HAL_NVIC_EnableIRQ>
}
 8000b6e:	bf00      	nop
 8000b70:	3728      	adds	r7, #40	; 0x28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020400 	.word	0x40020400

08000b80 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <AUDIO_IO_Init+0x68>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a16      	ldr	r2, [pc, #88]	; (8000be8 <AUDIO_IO_Init+0x68>)
 8000b90:	f043 0308 	orr.w	r3, r3, #8
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <AUDIO_IO_Init+0x68>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0308 	and.w	r3, r3, #8
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8000ba2:	2310      	movs	r3, #16
 8000ba4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000baa:	2302      	movs	r3, #2
 8000bac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480d      	ldr	r0, [pc, #52]	; (8000bec <AUDIO_IO_Init+0x6c>)
 8000bb8:	f002 ff2c 	bl	8003a14 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000bbc:	f7ff fef8 	bl	80009b0 <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2110      	movs	r1, #16
 8000bc4:	4809      	ldr	r0, [pc, #36]	; (8000bec <AUDIO_IO_Init+0x6c>)
 8000bc6:	f003 f9d5 	bl	8003f74 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000bca:	2005      	movs	r0, #5
 8000bcc:	f001 fb42 	bl	8002254 <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2110      	movs	r1, #16
 8000bd4:	4805      	ldr	r0, [pc, #20]	; (8000bec <AUDIO_IO_Init+0x6c>)
 8000bd6:	f003 f9cd 	bl	8003f74 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000bda:	2005      	movs	r0, #5
 8000bdc:	f001 fb3a 	bl	8002254 <HAL_Delay>
}
 8000be0:	bf00      	nop
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020c00 	.word	0x40020c00

08000bf0 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	4603      	mov	r3, r0
 8000c06:	71fb      	strb	r3, [r7, #7]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	71bb      	strb	r3, [r7, #6]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	797a      	ldrb	r2, [r7, #5]
 8000c16:	79b9      	ldrb	r1, [r7, #6]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fefb 	bl	8000a14 <I2Cx_WriteData>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	460a      	mov	r2, r1
 8000c30:	71fb      	strb	r3, [r7, #7]
 8000c32:	4613      	mov	r3, r2
 8000c34:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	79ba      	ldrb	r2, [r7, #6]
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff ff10 	bl	8000a64 <I2Cx_ReadData>
 8000c44:	4603      	mov	r3, r0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <AUDIO_StorageParse>:

USBH_HandleTypeDef hUSBHost;
uint16_t NumObs = 0;

FRESULT AUDIO_StorageParse(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b0d6      	sub	sp, #344	; 0x158
 8000c54:	af00      	add	r7, sp, #0
  FRESULT res = FR_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  FILINFO fno;
  DIR dir;
  char *fn;


  res = f_opendir(&dir, USBHPath);
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	4942      	ldr	r1, [pc, #264]	; (8000d68 <AUDIO_StorageParse+0x118>)
 8000c60:	4618      	mov	r0, r3
 8000c62:	f00e fe63 	bl	800f92c <f_opendir>
 8000c66:	4603      	mov	r3, r0
 8000c68:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  FileList.ptr = 0;
 8000c6c:	4b3f      	ldr	r3, [pc, #252]	; (8000d6c <AUDIO_StorageParse+0x11c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8

  if(res == FR_OK)
 8000c74:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d165      	bne.n	8000d48 <AUDIO_StorageParse+0xf8>
  {
    while(Appli_state == APPLICATION_READY)
 8000c7c:	e060      	b.n	8000d40 <AUDIO_StorageParse+0xf0>
    {
      res = f_readdir(&dir, &fno);
 8000c7e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	4611      	mov	r1, r2
 8000c86:	4618      	mov	r0, r3
 8000c88:	f00e fee9 	bl	800fa5e <f_readdir>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
      if(res != FR_OK || fno.fname[0] == 0)
 8000c92:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d156      	bne.n	8000d48 <AUDIO_StorageParse+0xf8>
 8000c9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c9e:	7d9b      	ldrb	r3, [r3, #22]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d051      	beq.n	8000d48 <AUDIO_StorageParse+0xf8>
      {
        break;
      }
      if(fno.fname[0] == '.')
 8000ca4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ca8:	7d9b      	ldrb	r3, [r3, #22]
 8000caa:	2b2e      	cmp	r3, #46	; 0x2e
 8000cac:	d100      	bne.n	8000cb0 <AUDIO_StorageParse+0x60>
      {
        continue;
 8000cae:	e047      	b.n	8000d40 <AUDIO_StorageParse+0xf0>
      }

      fn = fno.fname;
 8000cb0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cb4:	3316      	adds	r3, #22
 8000cb6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 8000cba:	4b2c      	ldr	r3, [pc, #176]	; (8000d6c <AUDIO_StorageParse+0x11c>)
 8000cbc:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000cc0:	2b17      	cmp	r3, #23
 8000cc2:	d83d      	bhi.n	8000d40 <AUDIO_StorageParse+0xf0>
      {
        if((fno.fattrib & AM_DIR) == 0)
 8000cc4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cc8:	7a1b      	ldrb	r3, [r3, #8]
 8000cca:	f003 0310 	and.w	r3, r3, #16
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d136      	bne.n	8000d40 <AUDIO_StorageParse+0xf0>
        {
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
 8000cd2:	4927      	ldr	r1, [pc, #156]	; (8000d70 <AUDIO_StorageParse+0x120>)
 8000cd4:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8000cd8:	f00f fc75 	bl	80105c6 <strstr>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d107      	bne.n	8000cf2 <AUDIO_StorageParse+0xa2>
 8000ce2:	4924      	ldr	r1, [pc, #144]	; (8000d74 <AUDIO_StorageParse+0x124>)
 8000ce4:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8000ce8:	f00f fc6d 	bl	80105c6 <strstr>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d026      	beq.n	8000d40 <AUDIO_StorageParse+0xf0>
          {
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 8000cf2:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <AUDIO_StorageParse+0x11c>)
 8000cf4:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	00db      	lsls	r3, r3, #3
 8000d02:	4413      	add	r3, r2
 8000d04:	4a19      	ldr	r2, [pc, #100]	; (8000d6c <AUDIO_StorageParse+0x11c>)
 8000d06:	4413      	add	r3, r2
 8000d08:	3301      	adds	r3, #1
 8000d0a:	2228      	movs	r2, #40	; 0x28
 8000d0c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8000d10:	4618      	mov	r0, r3
 8000d12:	f00f fc45 	bl	80105a0 <strncpy>
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <AUDIO_StorageParse+0x11c>)
 8000d18:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4913      	ldr	r1, [pc, #76]	; (8000d6c <AUDIO_StorageParse+0x11c>)
 8000d20:	4613      	mov	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	00db      	lsls	r3, r3, #3
 8000d28:	4413      	add	r3, r2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]
            FileList.ptr++;
 8000d30:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <AUDIO_StorageParse+0x11c>)
 8000d32:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d36:	3301      	adds	r3, #1
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <AUDIO_StorageParse+0x11c>)
 8000d3c:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8
    while(Appli_state == APPLICATION_READY)
 8000d40:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <AUDIO_StorageParse+0x128>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d09a      	beq.n	8000c7e <AUDIO_StorageParse+0x2e>
          }
        }
      }
    }
  }
  NumObs = FileList.ptr;
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <AUDIO_StorageParse+0x11c>)
 8000d4a:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	; 0x3d8
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <AUDIO_StorageParse+0x12c>)
 8000d50:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	4618      	mov	r0, r3
 8000d56:	f00e fe5c 	bl	800fa12 <f_closedir>
  return res;
 8000d5a:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20002114 	.word	0x20002114
 8000d6c:	20001b04 	.word	0x20001b04
 8000d70:	08010628 	.word	0x08010628
 8000d74:	0801062c 	.word	0x0801062c
 8000d78:	20001400 	.word	0x20001400
 8000d7c:	200001a0 	.word	0x200001a0

08000d80 <AUDIO_GetWavObjectNumber>:

uint16_t AUDIO_GetWavObjectNumber(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	if (AUDIO_StorageParse() == FR_OK)
 8000d84:	f7ff ff64 	bl	8000c50 <AUDIO_StorageParse>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d102      	bne.n	8000d94 <AUDIO_GetWavObjectNumber+0x14>
		{return NumObs;}
 8000d8e:	4b02      	ldr	r3, [pc, #8]	; (8000d98 <AUDIO_GetWavObjectNumber+0x18>)
 8000d90:	881b      	ldrh	r3, [r3, #0]
 8000d92:	e7ff      	b.n	8000d94 <AUDIO_GetWavObjectNumber+0x14>
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	200001a0 	.word	0x200001a0

08000d9c <Mount_USB>:

void Mount_USB (void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000da0:	2201      	movs	r2, #1
 8000da2:	4905      	ldr	r1, [pc, #20]	; (8000db8 <Mount_USB+0x1c>)
 8000da4:	4805      	ldr	r0, [pc, #20]	; (8000dbc <Mount_USB+0x20>)
 8000da6:	f00d ffcd 	bl	800ed44 <f_mount>
 8000daa:	4603      	mov	r3, r0
 8000dac:	461a      	mov	r2, r3
 8000dae:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <Mount_USB+0x24>)
 8000db0:	701a      	strb	r2, [r3, #0]
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20002114 	.word	0x20002114
 8000dbc:	20002348 	.word	0x20002348
 8000dc0:	20001834 	.word	0x20001834

08000dc4 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	4603      	mov	r3, r0
 8000dce:	81fb      	strh	r3, [r7, #14]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	81bb      	strh	r3, [r7, #12]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8000ddc:	f7ff fed0 	bl	8000b80 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000de0:	89fb      	ldrh	r3, [r7, #14]
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2201      	movs	r2, #1
 8000de6:	2102      	movs	r1, #2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 fb01 	bl	80013f0 <CODEC_IO_Write>
 8000dee:	4603      	mov	r3, r0
 8000df0:	461a      	mov	r2, r3
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	4413      	add	r3, r2
 8000df6:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8000df8:	89bb      	ldrh	r3, [r7, #12]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	2b03      	cmp	r3, #3
 8000dfe:	d81b      	bhi.n	8000e38 <cs43l22_Init+0x74>
 8000e00:	a201      	add	r2, pc, #4	; (adr r2, 8000e08 <cs43l22_Init+0x44>)
 8000e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e06:	bf00      	nop
 8000e08:	08000e19 	.word	0x08000e19
 8000e0c:	08000e21 	.word	0x08000e21
 8000e10:	08000e29 	.word	0x08000e29
 8000e14:	08000e31 	.word	0x08000e31
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8000e18:	4b5b      	ldr	r3, [pc, #364]	; (8000f88 <cs43l22_Init+0x1c4>)
 8000e1a:	22fa      	movs	r2, #250	; 0xfa
 8000e1c:	701a      	strb	r2, [r3, #0]
    break;
 8000e1e:	e00f      	b.n	8000e40 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8000e20:	4b59      	ldr	r3, [pc, #356]	; (8000f88 <cs43l22_Init+0x1c4>)
 8000e22:	22af      	movs	r2, #175	; 0xaf
 8000e24:	701a      	strb	r2, [r3, #0]
    break;
 8000e26:	e00b      	b.n	8000e40 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8000e28:	4b57      	ldr	r3, [pc, #348]	; (8000f88 <cs43l22_Init+0x1c4>)
 8000e2a:	22aa      	movs	r2, #170	; 0xaa
 8000e2c:	701a      	strb	r2, [r3, #0]
    break;
 8000e2e:	e007      	b.n	8000e40 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8000e30:	4b55      	ldr	r3, [pc, #340]	; (8000f88 <cs43l22_Init+0x1c4>)
 8000e32:	2205      	movs	r2, #5
 8000e34:	701a      	strb	r2, [r3, #0]
    break;    
 8000e36:	e003      	b.n	8000e40 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8000e38:	4b53      	ldr	r3, [pc, #332]	; (8000f88 <cs43l22_Init+0x1c4>)
 8000e3a:	2205      	movs	r2, #5
 8000e3c:	701a      	strb	r2, [r3, #0]
    break;    
 8000e3e:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000e40:	89fb      	ldrh	r3, [r7, #14]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	4a50      	ldr	r2, [pc, #320]	; (8000f88 <cs43l22_Init+0x1c4>)
 8000e46:	7812      	ldrb	r2, [r2, #0]
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	2104      	movs	r1, #4
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 facf 	bl	80013f0 <CODEC_IO_Write>
 8000e52:	4603      	mov	r3, r0
 8000e54:	461a      	mov	r2, r3
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	4413      	add	r3, r2
 8000e5a:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000e5c:	89fb      	ldrh	r3, [r7, #14]
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2281      	movs	r2, #129	; 0x81
 8000e62:	2105      	movs	r1, #5
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 fac3 	bl	80013f0 <CODEC_IO_Write>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	4413      	add	r3, r2
 8000e72:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000e74:	89fb      	ldrh	r3, [r7, #14]
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	2204      	movs	r2, #4
 8000e7a:	2106      	movs	r1, #6
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 fab7 	bl	80013f0 <CODEC_IO_Write>
 8000e82:	4603      	mov	r3, r0
 8000e84:	461a      	mov	r2, r3
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	4413      	add	r3, r2
 8000e8a:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000e8c:	7afa      	ldrb	r2, [r7, #11]
 8000e8e:	89fb      	ldrh	r3, [r7, #14]
 8000e90:	4611      	mov	r1, r2
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f964 	bl	8001160 <cs43l22_SetVolume>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000ea0:	89bb      	ldrh	r3, [r7, #12]
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d023      	beq.n	8000eee <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8000ea6:	89fb      	ldrh	r3, [r7, #14]
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2206      	movs	r2, #6
 8000eac:	210f      	movs	r1, #15
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 fa9e 	bl	80013f0 <CODEC_IO_Write>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	4413      	add	r3, r2
 8000ebc:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8000ebe:	89fb      	ldrh	r3, [r7, #14]
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2124      	movs	r1, #36	; 0x24
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 fa92 	bl	80013f0 <CODEC_IO_Write>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	461a      	mov	r2, r3
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8000ed6:	89fb      	ldrh	r3, [r7, #14]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2200      	movs	r2, #0
 8000edc:	2125      	movs	r1, #37	; 0x25
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 fa86 	bl	80013f0 <CODEC_IO_Write>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	4413      	add	r3, r2
 8000eec:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8000eee:	89fb      	ldrh	r3, [r7, #14]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	210a      	movs	r1, #10
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 fa7a 	bl	80013f0 <CODEC_IO_Write>
 8000efc:	4603      	mov	r3, r0
 8000efe:	461a      	mov	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	4413      	add	r3, r2
 8000f04:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000f06:	89fb      	ldrh	r3, [r7, #14]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2204      	movs	r2, #4
 8000f0c:	210e      	movs	r1, #14
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 fa6e 	bl	80013f0 <CODEC_IO_Write>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8000f1e:	89fb      	ldrh	r3, [r7, #14]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2200      	movs	r2, #0
 8000f24:	2127      	movs	r1, #39	; 0x27
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fa62 	bl	80013f0 <CODEC_IO_Write>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	461a      	mov	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	4413      	add	r3, r2
 8000f34:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8000f36:	89fb      	ldrh	r3, [r7, #14]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	220f      	movs	r2, #15
 8000f3c:	211f      	movs	r1, #31
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 fa56 	bl	80013f0 <CODEC_IO_Write>
 8000f44:	4603      	mov	r3, r0
 8000f46:	461a      	mov	r2, r3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8000f4e:	89fb      	ldrh	r3, [r7, #14]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	220a      	movs	r2, #10
 8000f54:	211a      	movs	r1, #26
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 fa4a 	bl	80013f0 <CODEC_IO_Write>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	461a      	mov	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	4413      	add	r3, r2
 8000f64:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8000f66:	89fb      	ldrh	r3, [r7, #14]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	220a      	movs	r2, #10
 8000f6c:	211b      	movs	r1, #27
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 fa3e 	bl	80013f0 <CODEC_IO_Write>
 8000f74:	4603      	mov	r3, r0
 8000f76:	461a      	mov	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8000f7e:	697b      	ldr	r3, [r7, #20]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	200001a2 	.word	0x200001a2

08000f8c <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8000f90:	f7ff fe2e 	bl	8000bf0 <AUDIO_IO_DeInit>
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 8000fa2:	f7ff fded 	bl	8000b80 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8000fa6:	88fb      	ldrh	r3, [r7, #6]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2101      	movs	r1, #1
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fe3a 	bl	8000c26 <AUDIO_IO_Read>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	f023 0307 	bic.w	r3, r3, #7
 8000fbc:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	80fb      	strh	r3, [r7, #6]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <cs43l22_Play+0x70>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d123      	bne.n	800102c <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8000fe4:	88fb      	ldrh	r3, [r7, #6]
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2206      	movs	r2, #6
 8000fea:	210e      	movs	r1, #14
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 f9ff 	bl	80013f0 <CODEC_IO_Write>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f000 f919 	bl	8001238 <cs43l22_SetMute>
 8001006:	4602      	mov	r2, r0
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4413      	add	r3, r2
 800100c:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	229e      	movs	r2, #158	; 0x9e
 8001014:	2102      	movs	r1, #2
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f9ea 	bl	80013f0 <CODEC_IO_Write>
 800101c:	4603      	mov	r3, r0
 800101e:	461a      	mov	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4413      	add	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 8001026:	4b04      	ldr	r3, [pc, #16]	; (8001038 <cs43l22_Play+0x70>)
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 800102c:	68fb      	ldr	r3, [r7, #12]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000034 	.word	0x20000034

0800103c <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800104a:	88fb      	ldrh	r3, [r7, #6]
 800104c:	2101      	movs	r1, #1
 800104e:	4618      	mov	r0, r3
 8001050:	f000 f8f2 	bl	8001238 <cs43l22_SetMute>
 8001054:	4602      	mov	r2, r0
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4413      	add	r3, r2
 800105a:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2201      	movs	r2, #1
 8001062:	2102      	movs	r1, #2
 8001064:	4618      	mov	r0, r3
 8001066:	f000 f9c3 	bl	80013f0 <CODEC_IO_Write>
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8001074:	68fb      	ldr	r3, [r7, #12]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 800108e:	2300      	movs	r3, #0
 8001090:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f8ce 	bl	8001238 <cs43l22_SetMute>
 800109c:	4602      	mov	r2, r0
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4413      	add	r3, r2
 80010a2:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	e002      	b.n	80010b0 <cs43l22_Resume+0x30>
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	3301      	adds	r3, #1
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	2bfe      	cmp	r3, #254	; 0xfe
 80010b4:	d9f9      	bls.n	80010aa <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80010b6:	88fb      	ldrh	r3, [r7, #6]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <cs43l22_Resume+0x74>)
 80010bc:	7812      	ldrb	r2, [r2, #0]
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	2104      	movs	r1, #4
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f994 	bl	80013f0 <CODEC_IO_Write>
 80010c8:	4603      	mov	r3, r0
 80010ca:	461a      	mov	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4413      	add	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	229e      	movs	r2, #158	; 0x9e
 80010d8:	2102      	movs	r1, #2
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f988 	bl	80013f0 <CODEC_IO_Write>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80010ea:	68fb      	ldr	r3, [r7, #12]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200001a2 	.word	0x200001a2

080010f8 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	2101      	movs	r1, #1
 800110c:	4618      	mov	r0, r3
 800110e:	f000 f893 	bl	8001238 <cs43l22_SetMute>
 8001112:	4602      	mov	r2, r0
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4413      	add	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800111a:	88fb      	ldrh	r3, [r7, #6]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2204      	movs	r2, #4
 8001120:	210e      	movs	r1, #14
 8001122:	4618      	mov	r0, r3
 8001124:	f000 f964 	bl	80013f0 <CODEC_IO_Write>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4413      	add	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	229f      	movs	r2, #159	; 0x9f
 8001138:	2102      	movs	r1, #2
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f958 	bl	80013f0 <CODEC_IO_Write>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 800114a:	4b04      	ldr	r3, [pc, #16]	; (800115c <cs43l22_Stop+0x64>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
  return counter;    
 8001150:	68fb      	ldr	r3, [r7, #12]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000034 	.word	0x20000034

08001160 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	460a      	mov	r2, r1
 800116a:	80fb      	strh	r3, [r7, #6]
 800116c:	4613      	mov	r3, r2
 800116e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001174:	797b      	ldrb	r3, [r7, #5]
 8001176:	2b64      	cmp	r3, #100	; 0x64
 8001178:	d80b      	bhi.n	8001192 <cs43l22_SetVolume+0x32>
 800117a:	797a      	ldrb	r2, [r7, #5]
 800117c:	4613      	mov	r3, r2
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	1a9b      	subs	r3, r3, r2
 8001182:	4a25      	ldr	r2, [pc, #148]	; (8001218 <cs43l22_SetVolume+0xb8>)
 8001184:	fb82 1203 	smull	r1, r2, r2, r3
 8001188:	1152      	asrs	r2, r2, #5
 800118a:	17db      	asrs	r3, r3, #31
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	b2db      	uxtb	r3, r3
 8001190:	e000      	b.n	8001194 <cs43l22_SetVolume+0x34>
 8001192:	23ff      	movs	r3, #255	; 0xff
 8001194:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 8001196:	7afb      	ldrb	r3, [r7, #11]
 8001198:	2be6      	cmp	r3, #230	; 0xe6
 800119a:	d91c      	bls.n	80011d6 <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	b2d8      	uxtb	r0, r3
 80011a0:	7afb      	ldrb	r3, [r7, #11]
 80011a2:	3319      	adds	r3, #25
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	461a      	mov	r2, r3
 80011a8:	2120      	movs	r1, #32
 80011aa:	f000 f921 	bl	80013f0 <CODEC_IO_Write>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4413      	add	r3, r2
 80011b6:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 80011b8:	88fb      	ldrh	r3, [r7, #6]
 80011ba:	b2d8      	uxtb	r0, r3
 80011bc:	7afb      	ldrb	r3, [r7, #11]
 80011be:	3319      	adds	r3, #25
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	461a      	mov	r2, r3
 80011c4:	2121      	movs	r1, #33	; 0x21
 80011c6:	f000 f913 	bl	80013f0 <CODEC_IO_Write>
 80011ca:	4603      	mov	r3, r0
 80011cc:	461a      	mov	r2, r3
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4413      	add	r3, r2
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	e01b      	b.n	800120e <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 80011d6:	88fb      	ldrh	r3, [r7, #6]
 80011d8:	b2d8      	uxtb	r0, r3
 80011da:	7afb      	ldrb	r3, [r7, #11]
 80011dc:	3319      	adds	r3, #25
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	461a      	mov	r2, r3
 80011e2:	2120      	movs	r1, #32
 80011e4:	f000 f904 	bl	80013f0 <CODEC_IO_Write>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4413      	add	r3, r2
 80011f0:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 80011f2:	88fb      	ldrh	r3, [r7, #6]
 80011f4:	b2d8      	uxtb	r0, r3
 80011f6:	7afb      	ldrb	r3, [r7, #11]
 80011f8:	3319      	adds	r3, #25
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	461a      	mov	r2, r3
 80011fe:	2121      	movs	r1, #33	; 0x21
 8001200:	f000 f8f6 	bl	80013f0 <CODEC_IO_Write>
 8001204:	4603      	mov	r3, r0
 8001206:	461a      	mov	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4413      	add	r3, r2
 800120c:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 800120e:	68fb      	ldr	r3, [r7, #12]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	51eb851f 	.word	0x51eb851f

0800121c <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	6039      	str	r1, [r7, #0]
 8001242:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d124      	bne.n	8001298 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	22ff      	movs	r2, #255	; 0xff
 8001254:	2104      	movs	r1, #4
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f8ca 	bl	80013f0 <CODEC_IO_Write>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4413      	add	r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 8001266:	88fb      	ldrh	r3, [r7, #6]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2201      	movs	r2, #1
 800126c:	2122      	movs	r1, #34	; 0x22
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f8be 	bl	80013f0 <CODEC_IO_Write>
 8001274:	4603      	mov	r3, r0
 8001276:	461a      	mov	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4413      	add	r3, r2
 800127c:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2201      	movs	r2, #1
 8001284:	2123      	movs	r1, #35	; 0x23
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f8b2 	bl	80013f0 <CODEC_IO_Write>
 800128c:	4603      	mov	r3, r0
 800128e:	461a      	mov	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4413      	add	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	e025      	b.n	80012e4 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8001298:	88fb      	ldrh	r3, [r7, #6]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2200      	movs	r2, #0
 800129e:	2122      	movs	r1, #34	; 0x22
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 f8a5 	bl	80013f0 <CODEC_IO_Write>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461a      	mov	r2, r3
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4413      	add	r3, r2
 80012ae:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2200      	movs	r2, #0
 80012b6:	2123      	movs	r1, #35	; 0x23
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 f899 	bl	80013f0 <CODEC_IO_Write>
 80012be:	4603      	mov	r3, r0
 80012c0:	461a      	mov	r2, r3
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4413      	add	r3, r2
 80012c6:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80012c8:	88fb      	ldrh	r3, [r7, #6]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	4a08      	ldr	r2, [pc, #32]	; (80012f0 <cs43l22_SetMute+0xb8>)
 80012ce:	7812      	ldrb	r2, [r2, #0]
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	2104      	movs	r1, #4
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 f88b 	bl	80013f0 <CODEC_IO_Write>
 80012da:	4603      	mov	r3, r0
 80012dc:	461a      	mov	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4413      	add	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80012e4:	68fb      	ldr	r3, [r7, #12]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200001a2 	.word	0x200001a2

080012f4 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	460a      	mov	r2, r1
 80012fe:	80fb      	strh	r3, [r7, #6]
 8001300:	4613      	mov	r3, r2
 8001302:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8001308:	797b      	ldrb	r3, [r7, #5]
 800130a:	3b01      	subs	r3, #1
 800130c:	2b03      	cmp	r3, #3
 800130e:	d84b      	bhi.n	80013a8 <cs43l22_SetOutputMode+0xb4>
 8001310:	a201      	add	r2, pc, #4	; (adr r2, 8001318 <cs43l22_SetOutputMode+0x24>)
 8001312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001316:	bf00      	nop
 8001318:	08001329 	.word	0x08001329
 800131c:	08001349 	.word	0x08001349
 8001320:	08001369 	.word	0x08001369
 8001324:	08001389 	.word	0x08001389
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	22fa      	movs	r2, #250	; 0xfa
 800132e:	2104      	movs	r1, #4
 8001330:	4618      	mov	r0, r3
 8001332:	f000 f85d 	bl	80013f0 <CODEC_IO_Write>
 8001336:	4603      	mov	r3, r0
 8001338:	461a      	mov	r2, r3
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4413      	add	r3, r2
 800133e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8001340:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <cs43l22_SetOutputMode+0xe0>)
 8001342:	22fa      	movs	r2, #250	; 0xfa
 8001344:	701a      	strb	r2, [r3, #0]
      break;
 8001346:	e03f      	b.n	80013c8 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	22af      	movs	r2, #175	; 0xaf
 800134e:	2104      	movs	r1, #4
 8001350:	4618      	mov	r0, r3
 8001352:	f000 f84d 	bl	80013f0 <CODEC_IO_Write>
 8001356:	4603      	mov	r3, r0
 8001358:	461a      	mov	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4413      	add	r3, r2
 800135e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8001360:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <cs43l22_SetOutputMode+0xe0>)
 8001362:	22af      	movs	r2, #175	; 0xaf
 8001364:	701a      	strb	r2, [r3, #0]
      break;
 8001366:	e02f      	b.n	80013c8 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	22aa      	movs	r2, #170	; 0xaa
 800136e:	2104      	movs	r1, #4
 8001370:	4618      	mov	r0, r3
 8001372:	f000 f83d 	bl	80013f0 <CODEC_IO_Write>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4413      	add	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <cs43l22_SetOutputMode+0xe0>)
 8001382:	22aa      	movs	r2, #170	; 0xaa
 8001384:	701a      	strb	r2, [r3, #0]
      break;
 8001386:	e01f      	b.n	80013c8 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	b2db      	uxtb	r3, r3
 800138c:	2205      	movs	r2, #5
 800138e:	2104      	movs	r1, #4
 8001390:	4618      	mov	r0, r3
 8001392:	f000 f82d 	bl	80013f0 <CODEC_IO_Write>
 8001396:	4603      	mov	r3, r0
 8001398:	461a      	mov	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4413      	add	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <cs43l22_SetOutputMode+0xe0>)
 80013a2:	2205      	movs	r2, #5
 80013a4:	701a      	strb	r2, [r3, #0]
      break;    
 80013a6:	e00f      	b.n	80013c8 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2205      	movs	r2, #5
 80013ae:	2104      	movs	r1, #4
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 f81d 	bl	80013f0 <CODEC_IO_Write>
 80013b6:	4603      	mov	r3, r0
 80013b8:	461a      	mov	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4413      	add	r3, r2
 80013be:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <cs43l22_SetOutputMode+0xe0>)
 80013c2:	2205      	movs	r2, #5
 80013c4:	701a      	strb	r2, [r3, #0]
      break;
 80013c6:	bf00      	nop
  }  
  return counter;
 80013c8:	68fb      	ldr	r3, [r7, #12]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200001a2 	.word	0x200001a2

080013d8 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	80fb      	strh	r3, [r7, #6]
  return 0;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
 80013fa:	460b      	mov	r3, r1
 80013fc:	71bb      	strb	r3, [r7, #6]
 80013fe:	4613      	mov	r3, r2
 8001400:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8001406:	797a      	ldrb	r2, [r7, #5]
 8001408:	79b9      	ldrb	r1, [r7, #6]
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fbf6 	bl	8000bfe <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	b2db      	uxtb	r3, r3
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001424:	f000 fea4 	bl	8002170 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001428:	f000 f882 	bl	8001530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800142c:	f000 f99c 	bl	8001768 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001430:	f000 f8e8 	bl	8001604 <MX_CAN1_Init>
  MX_DMA_Init();
 8001434:	f000 f978 	bl	8001728 <MX_DMA_Init>
  MX_I2C1_Init();
 8001438:	f000 f91a 	bl	8001670 <MX_I2C1_Init>
  MX_I2S3_Init();
 800143c:	f000 f946 	bl	80016cc <MX_I2S3_Init>
  MX_FATFS_Init();
 8001440:	f008 f968 	bl	8009714 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001444:	f00e fc6a 	bl	800fd1c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  FilterConfig.FilterBank = 0;  //MASTER
 8001448:	4b32      	ldr	r3, [pc, #200]	; (8001514 <main+0xf4>)
 800144a:	2200      	movs	r2, #0
 800144c:	615a      	str	r2, [r3, #20]
  FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800144e:	4b31      	ldr	r3, [pc, #196]	; (8001514 <main+0xf4>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  FilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001454:	4b2f      	ldr	r3, [pc, #188]	; (8001514 <main+0xf4>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
  FilterConfig.FilterIdHigh = 0x245<<5;
 800145a:	4b2e      	ldr	r3, [pc, #184]	; (8001514 <main+0xf4>)
 800145c:	f644 02a0 	movw	r2, #18592	; 0x48a0
 8001460:	601a      	str	r2, [r3, #0]
  FilterConfig.FilterIdLow = 0;
 8001462:	4b2c      	ldr	r3, [pc, #176]	; (8001514 <main+0xf4>)
 8001464:	2200      	movs	r2, #0
 8001466:	605a      	str	r2, [r3, #4]
  FilterConfig.FilterMaskIdHigh = 0;
 8001468:	4b2a      	ldr	r3, [pc, #168]	; (8001514 <main+0xf4>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  FilterConfig.FilterMaskIdLow = 0;
 800146e:	4b29      	ldr	r3, [pc, #164]	; (8001514 <main+0xf4>)
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
  FilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8001474:	4b27      	ldr	r3, [pc, #156]	; (8001514 <main+0xf4>)
 8001476:	2201      	movs	r2, #1
 8001478:	61da      	str	r2, [r3, #28]
  FilterConfig.FilterActivation= ENABLE;
 800147a:	4b26      	ldr	r3, [pc, #152]	; (8001514 <main+0xf4>)
 800147c:	2201      	movs	r2, #1
 800147e:	621a      	str	r2, [r3, #32]
  FilterConfig.SlaveStartFilterBank = 14;
 8001480:	4b24      	ldr	r3, [pc, #144]	; (8001514 <main+0xf4>)
 8001482:	220e      	movs	r2, #14
 8001484:	625a      	str	r2, [r3, #36]	; 0x24


  TxHeader.DLC = 8;            								// grote van bericht 1 - 8 in bytes
 8001486:	4b24      	ldr	r3, [pc, #144]	; (8001518 <main+0xf8>)
 8001488:	2208      	movs	r2, #8
 800148a:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;   								// standaard berichten versturen geen debug mode
 800148c:	4b22      	ldr	r3, [pc, #136]	; (8001518 <main+0xf8>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8001492:	4b21      	ldr	r3, [pc, #132]	; (8001518 <main+0xf8>)
 8001494:	2200      	movs	r2, #0
 8001496:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x244;        							// identificatie nummer van de CAN deelnemer
 8001498:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <main+0xf8>)
 800149a:	f44f 7211 	mov.w	r2, #580	; 0x244
 800149e:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 80014a0:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <main+0xf8>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	751a      	strb	r2, [r3, #20]

  HAL_CAN_ConfigFilter(&hcan1,&FilterConfig);
 80014a6:	491b      	ldr	r1, [pc, #108]	; (8001514 <main+0xf4>)
 80014a8:	481c      	ldr	r0, [pc, #112]	; (800151c <main+0xfc>)
 80014aa:	f000 fff3 	bl	8002494 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 80014ae:	481b      	ldr	r0, [pc, #108]	; (800151c <main+0xfc>)
 80014b0:	f001 f8d0 	bl	8002654 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING);
 80014b4:	2102      	movs	r1, #2
 80014b6:	4819      	ldr	r0, [pc, #100]	; (800151c <main+0xfc>)
 80014b8:	f001 fafd 	bl	8002ab6 <HAL_CAN_ActivateNotification>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 80014bc:	2201      	movs	r2, #1
 80014be:	2110      	movs	r1, #16
 80014c0:	4817      	ldr	r0, [pc, #92]	; (8001520 <main+0x100>)
 80014c2:	f002 fd57 	bl	8003f74 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80014c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014ca:	f000 fec3 	bl	8002254 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2110      	movs	r1, #16
 80014d2:	4813      	ldr	r0, [pc, #76]	; (8001520 <main+0x100>)
 80014d4:	f002 fd4e 	bl	8003f74 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80014d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014dc:	f000 feba 	bl	8002254 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80014e0:	f00e fc42 	bl	800fd68 <MX_USB_HOST_Process>


    /* USER CODE BEGIN 3 */

    if(Appli_state == APPLICATION_READY)
 80014e4:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <main+0x104>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d1f9      	bne.n	80014e0 <main+0xc0>
    {
    	Mount_USB();
 80014ec:	f7ff fc56 	bl	8000d9c <Mount_USB>
    	AUDIO_PLAYER_Start(0);  // 0 is de eerste file op de USB
 80014f0:	2000      	movs	r0, #0
 80014f2:	f000 fc6d 	bl	8001dd0 <AUDIO_PLAYER_Start>
    	if(!IsFinished)
 80014f6:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <main+0x108>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f0      	bne.n	80014e0 <main+0xc0>
    	{
    		AUDIO_PLAYER_Process(TRUE);
 80014fe:	2001      	movs	r0, #1
 8001500:	f000 fcc6 	bl	8001e90 <AUDIO_PLAYER_Process>
    		if(AudioState == AUDIO_STATE_STOP)
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <main+0x10c>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b09      	cmp	r3, #9
 800150a:	d1e9      	bne.n	80014e0 <main+0xc0>
    		{
    			IsFinished = 1;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <main+0x108>)
 800150e:	2201      	movs	r2, #1
 8001510:	601a      	str	r2, [r3, #0]
    MX_USB_HOST_Process();
 8001512:	e7e5      	b.n	80014e0 <main+0xc0>
 8001514:	20001a04 	.word	0x20001a04
 8001518:	20001a58 	.word	0x20001a58
 800151c:	20001a30 	.word	0x20001a30
 8001520:	40020c00 	.word	0x40020c00
 8001524:	20001400 	.word	0x20001400
 8001528:	200001b8 	.word	0x200001b8
 800152c:	20001ad4 	.word	0x20001ad4

08001530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b094      	sub	sp, #80	; 0x50
 8001534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001536:	f107 0320 	add.w	r3, r7, #32
 800153a:	2230      	movs	r2, #48	; 0x30
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f00e ff6c 	bl	801041c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001554:	2300      	movs	r3, #0
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	4b28      	ldr	r3, [pc, #160]	; (80015fc <SystemClock_Config+0xcc>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	4a27      	ldr	r2, [pc, #156]	; (80015fc <SystemClock_Config+0xcc>)
 800155e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001562:	6413      	str	r3, [r2, #64]	; 0x40
 8001564:	4b25      	ldr	r3, [pc, #148]	; (80015fc <SystemClock_Config+0xcc>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001570:	2300      	movs	r3, #0
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	4b22      	ldr	r3, [pc, #136]	; (8001600 <SystemClock_Config+0xd0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a21      	ldr	r2, [pc, #132]	; (8001600 <SystemClock_Config+0xd0>)
 800157a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <SystemClock_Config+0xd0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800158c:	2301      	movs	r3, #1
 800158e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001590:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001596:	2302      	movs	r3, #2
 8001598:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800159a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800159e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015a0:	2308      	movs	r3, #8
 80015a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015aa:	2302      	movs	r3, #2
 80015ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015ae:	2307      	movs	r3, #7
 80015b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b2:	f107 0320 	add.w	r3, r7, #32
 80015b6:	4618      	mov	r0, r3
 80015b8:	f006 fb28 	bl	8007c0c <HAL_RCC_OscConfig>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80015c2:	f000 f96b 	bl	800189c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c6:	230f      	movs	r3, #15
 80015c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ca:	2302      	movs	r3, #2
 80015cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	2105      	movs	r1, #5
 80015e4:	4618      	mov	r0, r3
 80015e6:	f006 fd89 	bl	80080fc <HAL_RCC_ClockConfig>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80015f0:	f000 f954 	bl	800189c <Error_Handler>
  }
}
 80015f4:	bf00      	nop
 80015f6:	3750      	adds	r7, #80	; 0x50
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40023800 	.word	0x40023800
 8001600:	40007000 	.word	0x40007000

08001604 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001608:	4b17      	ldr	r3, [pc, #92]	; (8001668 <MX_CAN1_Init+0x64>)
 800160a:	4a18      	ldr	r2, [pc, #96]	; (800166c <MX_CAN1_Init+0x68>)
 800160c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 14;
 800160e:	4b16      	ldr	r3, [pc, #88]	; (8001668 <MX_CAN1_Init+0x64>)
 8001610:	220e      	movs	r2, #14
 8001612:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001614:	4b14      	ldr	r3, [pc, #80]	; (8001668 <MX_CAN1_Init+0x64>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800161a:	4b13      	ldr	r3, [pc, #76]	; (8001668 <MX_CAN1_Init+0x64>)
 800161c:	2200      	movs	r2, #0
 800161e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <MX_CAN1_Init+0x64>)
 8001622:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8001626:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <MX_CAN1_Init+0x64>)
 800162a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800162e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001630:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <MX_CAN1_Init+0x64>)
 8001632:	2200      	movs	r2, #0
 8001634:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001636:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <MX_CAN1_Init+0x64>)
 8001638:	2200      	movs	r2, #0
 800163a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800163c:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <MX_CAN1_Init+0x64>)
 800163e:	2200      	movs	r2, #0
 8001640:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <MX_CAN1_Init+0x64>)
 8001644:	2200      	movs	r2, #0
 8001646:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <MX_CAN1_Init+0x64>)
 800164a:	2200      	movs	r2, #0
 800164c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <MX_CAN1_Init+0x64>)
 8001650:	2200      	movs	r2, #0
 8001652:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001654:	4804      	ldr	r0, [pc, #16]	; (8001668 <MX_CAN1_Init+0x64>)
 8001656:	f000 fe21 	bl	800229c <HAL_CAN_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001660:	f000 f91c 	bl	800189c <Error_Handler>
  /* USER CODE BEGIN CAN1_Init 2 */


  /* USER CODE END CAN1_Init 2 */

}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20001a30 	.word	0x20001a30
 800166c:	40006400 	.word	0x40006400

08001670 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <MX_I2C1_Init+0x50>)
 8001676:	4a13      	ldr	r2, [pc, #76]	; (80016c4 <MX_I2C1_Init+0x54>)
 8001678:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <MX_I2C1_Init+0x50>)
 800167c:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <MX_I2C1_Init+0x58>)
 800167e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <MX_I2C1_Init+0x50>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <MX_I2C1_Init+0x50>)
 8001688:	2200      	movs	r2, #0
 800168a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <MX_I2C1_Init+0x50>)
 800168e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001692:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <MX_I2C1_Init+0x50>)
 8001696:	2200      	movs	r2, #0
 8001698:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_I2C1_Init+0x50>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016a0:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <MX_I2C1_Init+0x50>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <MX_I2C1_Init+0x50>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016ac:	4804      	ldr	r0, [pc, #16]	; (80016c0 <MX_I2C1_Init+0x50>)
 80016ae:	f004 fa0f 	bl	8005ad0 <HAL_I2C_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016b8:	f000 f8f0 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20001950 	.word	0x20001950
 80016c4:	40005400 	.word	0x40005400
 80016c8:	000186a0 	.word	0x000186a0

080016cc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <MX_I2S3_Init+0x54>)
 80016d2:	4a14      	ldr	r2, [pc, #80]	; (8001724 <MX_I2S3_Init+0x58>)
 80016d4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80016d6:	4b12      	ldr	r3, [pc, #72]	; (8001720 <MX_I2S3_Init+0x54>)
 80016d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016dc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <MX_I2S3_Init+0x54>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80016e4:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <MX_I2S3_Init+0x54>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80016ea:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <MX_I2S3_Init+0x54>)
 80016ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016f0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <MX_I2S3_Init+0x54>)
 80016f4:	f64a 4244 	movw	r2, #44100	; 0xac44
 80016f8:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <MX_I2S3_Init+0x54>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001700:	4b07      	ldr	r3, [pc, #28]	; (8001720 <MX_I2S3_Init+0x54>)
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <MX_I2S3_Init+0x54>)
 8001708:	2200      	movs	r2, #0
 800170a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800170c:	4804      	ldr	r0, [pc, #16]	; (8001720 <MX_I2S3_Init+0x54>)
 800170e:	f005 f9dd 	bl	8006acc <HAL_I2S_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001718:	f000 f8c0 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20001a8c 	.word	0x20001a8c
 8001724:	40003c00 	.word	0x40003c00

08001728 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <MX_DMA_Init+0x3c>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a0b      	ldr	r2, [pc, #44]	; (8001764 <MX_DMA_Init+0x3c>)
 8001738:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <MX_DMA_Init+0x3c>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	2100      	movs	r1, #0
 800174e:	2010      	movs	r0, #16
 8001750:	f001 fceb 	bl	800312a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001754:	2010      	movs	r0, #16
 8001756:	f001 fd04 	bl	8003162 <HAL_NVIC_EnableIRQ>

}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800

08001768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	; 0x28
 800176c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
 800177c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	4b42      	ldr	r3, [pc, #264]	; (800188c <MX_GPIO_Init+0x124>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a41      	ldr	r2, [pc, #260]	; (800188c <MX_GPIO_Init+0x124>)
 8001788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b3f      	ldr	r3, [pc, #252]	; (800188c <MX_GPIO_Init+0x124>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	4b3b      	ldr	r3, [pc, #236]	; (800188c <MX_GPIO_Init+0x124>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a3a      	ldr	r2, [pc, #232]	; (800188c <MX_GPIO_Init+0x124>)
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b38      	ldr	r3, [pc, #224]	; (800188c <MX_GPIO_Init+0x124>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	4b34      	ldr	r3, [pc, #208]	; (800188c <MX_GPIO_Init+0x124>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a33      	ldr	r2, [pc, #204]	; (800188c <MX_GPIO_Init+0x124>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b31      	ldr	r3, [pc, #196]	; (800188c <MX_GPIO_Init+0x124>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	4b2d      	ldr	r3, [pc, #180]	; (800188c <MX_GPIO_Init+0x124>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a2c      	ldr	r2, [pc, #176]	; (800188c <MX_GPIO_Init+0x124>)
 80017dc:	f043 0308 	orr.w	r3, r3, #8
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b2a      	ldr	r3, [pc, #168]	; (800188c <MX_GPIO_Init+0x124>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	603b      	str	r3, [r7, #0]
 80017f2:	4b26      	ldr	r3, [pc, #152]	; (800188c <MX_GPIO_Init+0x124>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a25      	ldr	r2, [pc, #148]	; (800188c <MX_GPIO_Init+0x124>)
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b23      	ldr	r3, [pc, #140]	; (800188c <MX_GPIO_Init+0x124>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	603b      	str	r3, [r7, #0]
 8001808:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	2101      	movs	r1, #1
 800180e:	4820      	ldr	r0, [pc, #128]	; (8001890 <MX_GPIO_Init+0x128>)
 8001810:	f002 fbb0 	bl	8003f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001814:	2200      	movs	r2, #0
 8001816:	f24f 0110 	movw	r1, #61456	; 0xf010
 800181a:	481e      	ldr	r0, [pc, #120]	; (8001894 <MX_GPIO_Init+0x12c>)
 800181c:	f002 fbaa 	bl	8003f74 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001820:	2301      	movs	r3, #1
 8001822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001824:	2301      	movs	r3, #1
 8001826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	4619      	mov	r1, r3
 8001836:	4816      	ldr	r0, [pc, #88]	; (8001890 <MX_GPIO_Init+0x128>)
 8001838:	f002 f8ec 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800183c:	2301      	movs	r3, #1
 800183e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001840:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001846:	2302      	movs	r3, #2
 8001848:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	4811      	ldr	r0, [pc, #68]	; (8001898 <MX_GPIO_Init+0x130>)
 8001852:	f002 f8df 	bl	8003a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001856:	f24f 0310 	movw	r3, #61456	; 0xf010
 800185a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185c:	2301      	movs	r3, #1
 800185e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2300      	movs	r3, #0
 8001866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	4619      	mov	r1, r3
 800186e:	4809      	ldr	r0, [pc, #36]	; (8001894 <MX_GPIO_Init+0x12c>)
 8001870:	f002 f8d0 	bl	8003a14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 1);
 8001874:	2201      	movs	r2, #1
 8001876:	2100      	movs	r1, #0
 8001878:	2006      	movs	r0, #6
 800187a:	f001 fc56 	bl	800312a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800187e:	2006      	movs	r0, #6
 8001880:	f001 fc6f 	bl	8003162 <HAL_NVIC_EnableIRQ>

}
 8001884:	bf00      	nop
 8001886:	3728      	adds	r7, #40	; 0x28
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40023800 	.word	0x40023800
 8001890:	40020800 	.word	0x40020800
 8001894:	40020c00 	.word	0x40020c00
 8001898:	40020000 	.word	0x40020000

0800189c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a0:	b672      	cpsid	i
}
 80018a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <Error_Handler+0x8>
	...

080018a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	607b      	str	r3, [r7, #4]
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <HAL_MspInit+0x4c>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	4a0f      	ldr	r2, [pc, #60]	; (80018f4 <HAL_MspInit+0x4c>)
 80018b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018bc:	6453      	str	r3, [r2, #68]	; 0x44
 80018be:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <HAL_MspInit+0x4c>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c6:	607b      	str	r3, [r7, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	603b      	str	r3, [r7, #0]
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_MspInit+0x4c>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	4a08      	ldr	r2, [pc, #32]	; (80018f4 <HAL_MspInit+0x4c>)
 80018d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d8:	6413      	str	r3, [r2, #64]	; 0x40
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_MspInit+0x4c>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e2:	603b      	str	r3, [r7, #0]
 80018e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018e6:	2007      	movs	r0, #7
 80018e8:	f001 fc14 	bl	8003114 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40023800 	.word	0x40023800

080018f8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	; 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a1d      	ldr	r2, [pc, #116]	; (800198c <HAL_CAN_MspInit+0x94>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d133      	bne.n	8001982 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <HAL_CAN_MspInit+0x98>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	4a1b      	ldr	r2, [pc, #108]	; (8001990 <HAL_CAN_MspInit+0x98>)
 8001924:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001928:	6413      	str	r3, [r2, #64]	; 0x40
 800192a:	4b19      	ldr	r3, [pc, #100]	; (8001990 <HAL_CAN_MspInit+0x98>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <HAL_CAN_MspInit+0x98>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a14      	ldr	r2, [pc, #80]	; (8001990 <HAL_CAN_MspInit+0x98>)
 8001940:	f043 0308 	orr.w	r3, r3, #8
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_CAN_MspInit+0x98>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001952:	2303      	movs	r3, #3
 8001954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195e:	2303      	movs	r3, #3
 8001960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001962:	2309      	movs	r3, #9
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	4619      	mov	r1, r3
 800196c:	4809      	ldr	r0, [pc, #36]	; (8001994 <HAL_CAN_MspInit+0x9c>)
 800196e:	f002 f851 	bl	8003a14 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 2);
 8001972:	2202      	movs	r2, #2
 8001974:	2100      	movs	r1, #0
 8001976:	2014      	movs	r0, #20
 8001978:	f001 fbd7 	bl	800312a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800197c:	2014      	movs	r0, #20
 800197e:	f001 fbf0 	bl	8003162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001982:	bf00      	nop
 8001984:	3728      	adds	r7, #40	; 0x28
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40006400 	.word	0x40006400
 8001990:	40023800 	.word	0x40023800
 8001994:	40020c00 	.word	0x40020c00

08001998 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	; 0x28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a19      	ldr	r2, [pc, #100]	; (8001a1c <HAL_I2C_MspInit+0x84>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d12c      	bne.n	8001a14 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <HAL_I2C_MspInit+0x88>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a17      	ldr	r2, [pc, #92]	; (8001a20 <HAL_I2C_MspInit+0x88>)
 80019c4:	f043 0302 	orr.w	r3, r3, #2
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <HAL_I2C_MspInit+0x88>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80019d6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80019da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019dc:	2312      	movs	r3, #18
 80019de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e4:	2303      	movs	r3, #3
 80019e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019e8:	2304      	movs	r3, #4
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	4619      	mov	r1, r3
 80019f2:	480c      	ldr	r0, [pc, #48]	; (8001a24 <HAL_I2C_MspInit+0x8c>)
 80019f4:	f002 f80e 	bl	8003a14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <HAL_I2C_MspInit+0x88>)
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	4a07      	ldr	r2, [pc, #28]	; (8001a20 <HAL_I2C_MspInit+0x88>)
 8001a02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a06:	6413      	str	r3, [r2, #64]	; 0x40
 8001a08:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <HAL_I2C_MspInit+0x88>)
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a14:	bf00      	nop
 8001a16:	3728      	adds	r7, #40	; 0x28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40005400 	.word	0x40005400
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40020400 	.word	0x40020400

08001a28 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <HAL_I2C_MspDeInit+0x38>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d10e      	bne.n	8001a58 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <HAL_I2C_MspDeInit+0x3c>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	4a09      	ldr	r2, [pc, #36]	; (8001a64 <HAL_I2C_MspDeInit+0x3c>)
 8001a40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a44:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8001a46:	2140      	movs	r1, #64	; 0x40
 8001a48:	4807      	ldr	r0, [pc, #28]	; (8001a68 <HAL_I2C_MspDeInit+0x40>)
 8001a4a:	f002 f97f 	bl	8003d4c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001a4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a52:	4805      	ldr	r0, [pc, #20]	; (8001a68 <HAL_I2C_MspDeInit+0x40>)
 8001a54:	f002 f97a 	bl	8003d4c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40005400 	.word	0x40005400
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40020400 	.word	0x40020400

08001a6c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08e      	sub	sp, #56	; 0x38
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a4e      	ldr	r2, [pc, #312]	; (8001bd0 <HAL_I2S_MspInit+0x164>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	f040 8095 	bne.w	8001bc8 <HAL_I2S_MspInit+0x15c>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 271;
 8001aa2:	f240 130f 	movw	r3, #271	; 0x10f
 8001aa6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 8001aa8:	2306      	movs	r3, #6
 8001aaa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f006 fd0b 	bl	80084cc <HAL_RCCEx_PeriphCLKConfig>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_I2S_MspInit+0x54>
    {
      Error_Handler();
 8001abc:	f7ff feee 	bl	800189c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	4b43      	ldr	r3, [pc, #268]	; (8001bd4 <HAL_I2S_MspInit+0x168>)
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	4a42      	ldr	r2, [pc, #264]	; (8001bd4 <HAL_I2S_MspInit+0x168>)
 8001aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ace:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad0:	4b40      	ldr	r3, [pc, #256]	; (8001bd4 <HAL_I2S_MspInit+0x168>)
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	4b3c      	ldr	r3, [pc, #240]	; (8001bd4 <HAL_I2S_MspInit+0x168>)
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae4:	4a3b      	ldr	r2, [pc, #236]	; (8001bd4 <HAL_I2S_MspInit+0x168>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	6313      	str	r3, [r2, #48]	; 0x30
 8001aec:	4b39      	ldr	r3, [pc, #228]	; (8001bd4 <HAL_I2S_MspInit+0x168>)
 8001aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af8:	2300      	movs	r3, #0
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	4b35      	ldr	r3, [pc, #212]	; (8001bd4 <HAL_I2S_MspInit+0x168>)
 8001afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b00:	4a34      	ldr	r2, [pc, #208]	; (8001bd4 <HAL_I2S_MspInit+0x168>)
 8001b02:	f043 0304 	orr.w	r3, r3, #4
 8001b06:	6313      	str	r3, [r2, #48]	; 0x30
 8001b08:	4b32      	ldr	r3, [pc, #200]	; (8001bd4 <HAL_I2S_MspInit+0x168>)
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b14:	2310      	movs	r3, #16
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b20:	2300      	movs	r3, #0
 8001b22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b24:	2306      	movs	r3, #6
 8001b26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	482a      	ldr	r0, [pc, #168]	; (8001bd8 <HAL_I2S_MspInit+0x16c>)
 8001b30:	f001 ff70 	bl	8003a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001b34:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	2300      	movs	r3, #0
 8001b44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b46:	2306      	movs	r3, #6
 8001b48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4822      	ldr	r0, [pc, #136]	; (8001bdc <HAL_I2S_MspInit+0x170>)
 8001b52:	f001 ff5f 	bl	8003a14 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001b56:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <HAL_I2S_MspInit+0x174>)
 8001b58:	4a22      	ldr	r2, [pc, #136]	; (8001be4 <HAL_I2S_MspInit+0x178>)
 8001b5a:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001b5c:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <HAL_I2S_MspInit+0x174>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b62:	4b1f      	ldr	r3, [pc, #124]	; (8001be0 <HAL_I2S_MspInit+0x174>)
 8001b64:	2240      	movs	r2, #64	; 0x40
 8001b66:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b68:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <HAL_I2S_MspInit+0x174>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <HAL_I2S_MspInit+0x174>)
 8001b70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b74:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b76:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <HAL_I2S_MspInit+0x174>)
 8001b78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b7c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b7e:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <HAL_I2S_MspInit+0x174>)
 8001b80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b84:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001b86:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <HAL_I2S_MspInit+0x174>)
 8001b88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b8c:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b8e:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <HAL_I2S_MspInit+0x174>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_I2S_MspInit+0x174>)
 8001b96:	2204      	movs	r2, #4
 8001b98:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001b9a:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <HAL_I2S_MspInit+0x174>)
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_I2S_MspInit+0x174>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <HAL_I2S_MspInit+0x174>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001bac:	480c      	ldr	r0, [pc, #48]	; (8001be0 <HAL_I2S_MspInit+0x174>)
 8001bae:	f001 faf3 	bl	8003198 <HAL_DMA_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <HAL_I2S_MspInit+0x150>
    {
      Error_Handler();
 8001bb8:	f7ff fe70 	bl	800189c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a08      	ldr	r2, [pc, #32]	; (8001be0 <HAL_I2S_MspInit+0x174>)
 8001bc0:	639a      	str	r2, [r3, #56]	; 0x38
 8001bc2:	4a07      	ldr	r2, [pc, #28]	; (8001be0 <HAL_I2S_MspInit+0x174>)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001bc8:	bf00      	nop
 8001bca:	3738      	adds	r7, #56	; 0x38
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40003c00 	.word	0x40003c00
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40020000 	.word	0x40020000
 8001bdc:	40020800 	.word	0x40020800
 8001be0:	200019a4 	.word	0x200019a4
 8001be4:	40026088 	.word	0x40026088

08001be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bec:	e7fe      	b.n	8001bec <NMI_Handler+0x4>

08001bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf2:	e7fe      	b.n	8001bf2 <HardFault_Handler+0x4>

08001bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <MemManage_Handler+0x4>

08001bfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfe:	e7fe      	b.n	8001bfe <BusFault_Handler+0x4>

08001c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <UsageFault_Handler+0x4>

08001c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c34:	f000 faee 	bl	8002214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	for(int n=0;n<1000000;n++);
 8001c42:	2300      	movs	r3, #0
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	e002      	b.n	8001c4e <EXTI0_IRQHandler+0x12>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a11      	ldr	r2, [pc, #68]	; (8001c98 <EXTI0_IRQHandler+0x5c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	ddf8      	ble.n	8001c48 <EXTI0_IRQHandler+0xc>
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8001c56:	2101      	movs	r1, #1
 8001c58:	4810      	ldr	r0, [pc, #64]	; (8001c9c <EXTI0_IRQHandler+0x60>)
 8001c5a:	f002 f973 	bl	8003f44 <HAL_GPIO_ReadPin>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d012      	beq.n	8001c8a <EXTI0_IRQHandler+0x4e>
	{

		a++;
 8001c64:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <EXTI0_IRQHandler+0x64>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <EXTI0_IRQHandler+0x64>)
 8001c6e:	701a      	strb	r2, [r3, #0]
		TxData[0] = a;
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <EXTI0_IRQHandler+0x64>)
 8001c72:	781a      	ldrb	r2, [r3, #0]
 8001c74:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <EXTI0_IRQHandler+0x68>)
 8001c76:	701a      	strb	r2, [r3, #0]
		TxData[1] = 10;
 8001c78:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <EXTI0_IRQHandler+0x68>)
 8001c7a:	220a      	movs	r2, #10
 8001c7c:	705a      	strb	r2, [r3, #1]
		//verstuur data (a) naar andere bord, a wordt elke keer als er op de knop wordt gedrukt verhoogd ,et 1
		//a wordt gebruikt om vier ledjes (binair) aan te sturen   0001 brand ledje 12, 0010 brand ledje 13  (xxxx = 15,14,13,12)
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <EXTI0_IRQHandler+0x6c>)
 8001c80:	4a08      	ldr	r2, [pc, #32]	; (8001ca4 <EXTI0_IRQHandler+0x68>)
 8001c82:	490a      	ldr	r1, [pc, #40]	; (8001cac <EXTI0_IRQHandler+0x70>)
 8001c84:	480a      	ldr	r0, [pc, #40]	; (8001cb0 <EXTI0_IRQHandler+0x74>)
 8001c86:	f000 fd29 	bl	80026dc <HAL_CAN_AddTxMessage>

	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f002 f98c 	bl	8003fa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	000f423f 	.word	0x000f423f
 8001c9c:	40020000 	.word	0x40020000
 8001ca0:	200001b4 	.word	0x200001b4
 8001ca4:	200001a4 	.word	0x200001a4
 8001ca8:	20001a2c 	.word	0x20001a2c
 8001cac:	20001a58 	.word	0x20001a58
 8001cb0:	20001a30 	.word	0x20001a30

08001cb4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001cb8:	4802      	ldr	r0, [pc, #8]	; (8001cc4 <DMA1_Stream5_IRQHandler+0x10>)
 8001cba:	f001 fc41 	bl	8003540 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200019a4 	.word	0x200019a4

08001cc8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001ccc:	4807      	ldr	r0, [pc, #28]	; (8001cec <CAN1_RX0_IRQHandler+0x24>)
 8001cce:	f000 ff18 	bl	8002b02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  //Lezen binnenkomende bericht, data
  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8001cd2:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <CAN1_RX0_IRQHandler+0x28>)
 8001cd4:	4a07      	ldr	r2, [pc, #28]	; (8001cf4 <CAN1_RX0_IRQHandler+0x2c>)
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4804      	ldr	r0, [pc, #16]	; (8001cec <CAN1_RX0_IRQHandler+0x24>)
 8001cda:	f000 fdda 	bl	8002892 <HAL_CAN_GetRxMessage>
  //Aansturen leds
  GPIOD->ODR=RxData[0]<<12;
 8001cde:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <CAN1_RX0_IRQHandler+0x28>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	031a      	lsls	r2, r3, #12
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <CAN1_RX0_IRQHandler+0x30>)
 8001ce6:	615a      	str	r2, [r3, #20]

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20001a30 	.word	0x20001a30
 8001cf0:	200001ac 	.word	0x200001ac
 8001cf4:	20001a70 	.word	0x20001a70
 8001cf8:	40020c00 	.word	0x40020c00

08001cfc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001d00:	4802      	ldr	r0, [pc, #8]	; (8001d0c <OTG_FS_IRQHandler+0x10>)
 8001d02:	f002 fbdf 	bl	80044c4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20002958 	.word	0x20002958

08001d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d18:	4a14      	ldr	r2, [pc, #80]	; (8001d6c <_sbrk+0x5c>)
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <_sbrk+0x60>)
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d24:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <_sbrk+0x64>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d102      	bne.n	8001d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <_sbrk+0x64>)
 8001d2e:	4a12      	ldr	r2, [pc, #72]	; (8001d78 <_sbrk+0x68>)
 8001d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <_sbrk+0x64>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d207      	bcs.n	8001d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d40:	f00e fb24 	bl	801038c <__errno>
 8001d44:	4603      	mov	r3, r0
 8001d46:	220c      	movs	r2, #12
 8001d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4e:	e009      	b.n	8001d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <_sbrk+0x64>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d56:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <_sbrk+0x64>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	4a05      	ldr	r2, [pc, #20]	; (8001d74 <_sbrk+0x64>)
 8001d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d62:	68fb      	ldr	r3, [r7, #12]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20020000 	.word	0x20020000
 8001d70:	00000400 	.word	0x00000400
 8001d74:	200001bc 	.word	0x200001bc
 8001d78:	20002c70 	.word	0x20002c70

08001d7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <SystemInit+0x20>)
 8001d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d86:	4a05      	ldr	r2, [pc, #20]	; (8001d9c <SystemInit+0x20>)
 8001d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <PlayerInit>:

FIL WavFile;

/* Private function prototypes -----------------------------------------------*/
uint8_t PlayerInit(uint32_t AudioFreq)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	/* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */
	if(AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0)
 8001da8:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <PlayerInit+0x2c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	4619      	mov	r1, r3
 8001db2:	2003      	movs	r0, #3
 8001db4:	f7fe fb84 	bl	80004c0 <AUDIO_OUT_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <PlayerInit+0x22>
	{
		return 1;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <PlayerInit+0x24>
	}
	else
	{
		return 0;
 8001dc2:	2300      	movs	r3, #0
	}
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	2000003c 	.word	0x2000003c

08001dd0 <AUDIO_PLAYER_Start>:
  * @brief  Starts Audio streaming.    
  * @param  idx: File index
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
  uint bytesread;

  f_close(&WavFile);
 8001dda:	4828      	ldr	r0, [pc, #160]	; (8001e7c <AUDIO_PLAYER_Start+0xac>)
 8001ddc:	f00d fb73 	bl	800f4c6 <f_close>
  if(AUDIO_GetWavObjectNumber() > idx)
 8001de0:	f7fe ffce 	bl	8000d80 <AUDIO_GetWavObjectNumber>
 8001de4:	4603      	mov	r3, r0
 8001de6:	461a      	mov	r2, r3
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d940      	bls.n	8001e72 <AUDIO_PLAYER_Start+0xa2>
  {

    //Open WAV file
    f_open(&WavFile, (char *)FileList.file[idx].name, FA_READ);
 8001df0:	79fa      	ldrb	r2, [r7, #7]
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	4a20      	ldr	r2, [pc, #128]	; (8001e80 <AUDIO_PLAYER_Start+0xb0>)
 8001dfe:	4413      	add	r3, r2
 8001e00:	3301      	adds	r3, #1
 8001e02:	2201      	movs	r2, #1
 8001e04:	4619      	mov	r1, r3
 8001e06:	481d      	ldr	r0, [pc, #116]	; (8001e7c <AUDIO_PLAYER_Start+0xac>)
 8001e08:	f00c ffe2 	bl	800edd0 <f_open>
    //Read WAV file Header
    f_read(&WavFile, &WaveFormat, sizeof(WaveFormat), &bytesread);
 8001e0c:	f107 030c 	add.w	r3, r7, #12
 8001e10:	222c      	movs	r2, #44	; 0x2c
 8001e12:	491c      	ldr	r1, [pc, #112]	; (8001e84 <AUDIO_PLAYER_Start+0xb4>)
 8001e14:	4819      	ldr	r0, [pc, #100]	; (8001e7c <AUDIO_PLAYER_Start+0xac>)
 8001e16:	f00d f999 	bl	800f14c <f_read>
    
    /*Adjust the Audio frequency */
    PlayerInit(WaveFormat.SampleRate);
 8001e1a:	4b1a      	ldr	r3, [pc, #104]	; (8001e84 <AUDIO_PLAYER_Start+0xb4>)
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff ffbe 	bl	8001da0 <PlayerInit>
    
    BufferCtl.state = BUFFER_OFFSET_NONE;
 8001e24:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <AUDIO_PLAYER_Start+0xb8>)
 8001e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
    
    /* Get Data from USB Flash Disk */
    f_lseek(&WavFile, 0);
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4812      	ldr	r0, [pc, #72]	; (8001e7c <AUDIO_PLAYER_Start+0xac>)
 8001e32:	f00d fb72 	bl	800f51a <f_lseek>
    
    /* Fill whole buffer at first time */
    if(f_read(&WavFile,&BufferCtl.buff[0],AUDIO_OUT_BUFFER_SIZE,(void *)&bytesread) == FR_OK)
 8001e36:	f107 030c 	add.w	r3, r7, #12
 8001e3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e3e:	4912      	ldr	r1, [pc, #72]	; (8001e88 <AUDIO_PLAYER_Start+0xb8>)
 8001e40:	480e      	ldr	r0, [pc, #56]	; (8001e7c <AUDIO_PLAYER_Start+0xac>)
 8001e42:	f00d f983 	bl	800f14c <f_read>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d112      	bne.n	8001e72 <AUDIO_PLAYER_Start+0xa2>
    {
      AudioState = AUDIO_STATE_PLAY;
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <AUDIO_PLAYER_Start+0xbc>)
 8001e4e:	2203      	movs	r2, #3
 8001e50:	701a      	strb	r2, [r3, #0]
        if(bytesread != 0)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00c      	beq.n	8001e72 <AUDIO_PLAYER_Start+0xa2>
        {
          AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 8001e58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e5c:	480a      	ldr	r0, [pc, #40]	; (8001e88 <AUDIO_PLAYER_Start+0xb8>)
 8001e5e:	f7fe fb7d 	bl	800055c <AUDIO_OUT_Play>
          BufferCtl.fptr = bytesread;
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <AUDIO_PLAYER_Start+0xb8>)
 8001e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e6a:	3304      	adds	r3, #4
 8001e6c:	601a      	str	r2, [r3, #0]
          return AUDIO_ERROR_NONE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	e000      	b.n	8001e74 <AUDIO_PLAYER_Start+0xa4>
        }
      }
  }
  return AUDIO_ERROR_IO;
 8001e72:	2301      	movs	r3, #1
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20001ee0 	.word	0x20001ee0
 8001e80:	20001b04 	.word	0x20001b04
 8001e84:	20001ad8 	.word	0x20001ad8
 8001e88:	200001c0 	.word	0x200001c0
 8001e8c:	20001ad4 	.word	0x20001ad4

08001e90 <AUDIO_PLAYER_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_PLAYER_Process(bool isLoop)
{
 8001e90:	b590      	push	{r4, r7, lr}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	71fb      	strb	r3, [r7, #7]
  uint32_t bytesread;
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	73fb      	strb	r3, [r7, #15]
  
  switch(AudioState)
 8001e9e:	4b84      	ldr	r3, [pc, #528]	; (80020b0 <AUDIO_PLAYER_Process+0x220>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	3b03      	subs	r3, #3
 8001ea4:	2b0a      	cmp	r3, #10
 8001ea6:	f200 80fb 	bhi.w	80020a0 <AUDIO_PLAYER_Process+0x210>
 8001eaa:	a201      	add	r2, pc, #4	; (adr r2, 8001eb0 <AUDIO_PLAYER_Process+0x20>)
 8001eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb0:	08001edd 	.word	0x08001edd
 8001eb4:	080020a1 	.word	0x080020a1
 8001eb8:	08001fad 	.word	0x08001fad
 8001ebc:	08001ffb 	.word	0x08001ffb
 8001ec0:	080020a1 	.word	0x080020a1
 8001ec4:	080020a1 	.word	0x080020a1
 8001ec8:	08001f9b 	.word	0x08001f9b
 8001ecc:	0800203d 	.word	0x0800203d
 8001ed0:	08002049 	.word	0x08002049
 8001ed4:	08002055 	.word	0x08002055
 8001ed8:	0800207b 	.word	0x0800207b
  {
  case AUDIO_STATE_PLAY:
    if(BufferCtl.fptr >= WaveFormat.FileSize)
 8001edc:	4b75      	ldr	r3, [pc, #468]	; (80020b4 <AUDIO_PLAYER_Process+0x224>)
 8001ede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ee2:	3304      	adds	r3, #4
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	4b74      	ldr	r3, [pc, #464]	; (80020b8 <AUDIO_PLAYER_Process+0x228>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d305      	bcc.n	8001efa <AUDIO_PLAYER_Process+0x6a>
    {
      AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001eee:	2002      	movs	r0, #2
 8001ef0:	f7fe fb8a 	bl	8000608 <AUDIO_OUT_Stop>
      AudioState = AUDIO_STATE_NEXT;
 8001ef4:	4b6e      	ldr	r3, [pc, #440]	; (80020b0 <AUDIO_PLAYER_Process+0x220>)
 8001ef6:	2205      	movs	r2, #5
 8001ef8:	701a      	strb	r2, [r3, #0]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_HALF)
 8001efa:	4b6e      	ldr	r3, [pc, #440]	; (80020b4 <AUDIO_PLAYER_Process+0x224>)
 8001efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d120      	bne.n	8001f48 <AUDIO_PLAYER_Process+0xb8>
    {
      if(f_read(&WavFile, &BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8001f06:	f107 0308 	add.w	r3, r7, #8
 8001f0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f0e:	4969      	ldr	r1, [pc, #420]	; (80020b4 <AUDIO_PLAYER_Process+0x224>)
 8001f10:	486a      	ldr	r0, [pc, #424]	; (80020bc <AUDIO_PLAYER_Process+0x22c>)
 8001f12:	f00d f91b 	bl	800f14c <f_read>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d004      	beq.n	8001f26 <AUDIO_PLAYER_Process+0x96>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001f1c:	2002      	movs	r0, #2
 8001f1e:	f7fe fb73 	bl	8000608 <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8001f22:	2301      	movs	r3, #1
 8001f24:	e0c0      	b.n	80020a8 <AUDIO_PLAYER_Process+0x218>
      } 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8001f26:	4b63      	ldr	r3, [pc, #396]	; (80020b4 <AUDIO_PLAYER_Process+0x224>)
 8001f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8001f30:	4b60      	ldr	r3, [pc, #384]	; (80020b4 <AUDIO_PLAYER_Process+0x224>)
 8001f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f36:	3304      	adds	r3, #4
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	441a      	add	r2, r3
 8001f3e:	4b5d      	ldr	r3, [pc, #372]	; (80020b4 <AUDIO_PLAYER_Process+0x224>)
 8001f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f44:	3304      	adds	r3, #4
 8001f46:	601a      	str	r2, [r3, #0]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_FULL)
 8001f48:	4b5a      	ldr	r3, [pc, #360]	; (80020b4 <AUDIO_PLAYER_Process+0x224>)
 8001f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	f040 80a7 	bne.w	80020a4 <AUDIO_PLAYER_Process+0x214>
    {
      if(f_read(&WavFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE /2], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8001f56:	f107 0308 	add.w	r3, r7, #8
 8001f5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f5e:	4958      	ldr	r1, [pc, #352]	; (80020c0 <AUDIO_PLAYER_Process+0x230>)
 8001f60:	4856      	ldr	r0, [pc, #344]	; (80020bc <AUDIO_PLAYER_Process+0x22c>)
 8001f62:	f00d f8f3 	bl	800f14c <f_read>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d004      	beq.n	8001f76 <AUDIO_PLAYER_Process+0xe6>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001f6c:	2002      	movs	r0, #2
 8001f6e:	f7fe fb4b 	bl	8000608 <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8001f72:	2301      	movs	r3, #1
 8001f74:	e098      	b.n	80020a8 <AUDIO_PLAYER_Process+0x218>
      } 
 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8001f76:	4b4f      	ldr	r3, [pc, #316]	; (80020b4 <AUDIO_PLAYER_Process+0x224>)
 8001f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8001f80:	4b4c      	ldr	r3, [pc, #304]	; (80020b4 <AUDIO_PLAYER_Process+0x224>)
 8001f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f86:	3304      	adds	r3, #4
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	441a      	add	r2, r3
 8001f8e:	4b49      	ldr	r3, [pc, #292]	; (80020b4 <AUDIO_PLAYER_Process+0x224>)
 8001f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f94:	3304      	adds	r3, #4
 8001f96:	601a      	str	r2, [r3, #0]
    }
    break;
 8001f98:	e084      	b.n	80020a4 <AUDIO_PLAYER_Process+0x214>
    
  case AUDIO_STATE_STOP:
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001f9a:	2002      	movs	r0, #2
 8001f9c:	f7fe fb34 	bl	8000608 <AUDIO_OUT_Stop>
    AudioState = AUDIO_STATE_IDLE; 
 8001fa0:	4b43      	ldr	r3, [pc, #268]	; (80020b0 <AUDIO_PLAYER_Process+0x220>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	701a      	strb	r2, [r3, #0]
    audio_error = AUDIO_ERROR_IO;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	73fb      	strb	r3, [r7, #15]
    break;
 8001faa:	e07c      	b.n	80020a6 <AUDIO_PLAYER_Process+0x216>
    
  case AUDIO_STATE_NEXT:
    if(++FilePos >= AUDIO_GetWavObjectNumber())
 8001fac:	4b45      	ldr	r3, [pc, #276]	; (80020c4 <AUDIO_PLAYER_Process+0x234>)
 8001fae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	b21a      	sxth	r2, r3
 8001fba:	4b42      	ldr	r3, [pc, #264]	; (80020c4 <AUDIO_PLAYER_Process+0x234>)
 8001fbc:	801a      	strh	r2, [r3, #0]
 8001fbe:	4b41      	ldr	r3, [pc, #260]	; (80020c4 <AUDIO_PLAYER_Process+0x234>)
 8001fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc4:	461c      	mov	r4, r3
 8001fc6:	f7fe fedb 	bl	8000d80 <AUDIO_GetWavObjectNumber>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	429c      	cmp	r4, r3
 8001fce:	db09      	blt.n	8001fe4 <AUDIO_PLAYER_Process+0x154>
    {
    	if (isLoop)
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <AUDIO_PLAYER_Process+0x14e>
    	{
    		FilePos = 0;
 8001fd6:	4b3b      	ldr	r3, [pc, #236]	; (80020c4 <AUDIO_PLAYER_Process+0x234>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	801a      	strh	r2, [r3, #0]
 8001fdc:	e002      	b.n	8001fe4 <AUDIO_PLAYER_Process+0x154>
    	}
    	else
    	{
    		AudioState =AUDIO_STATE_STOP;
 8001fde:	4b34      	ldr	r3, [pc, #208]	; (80020b0 <AUDIO_PLAYER_Process+0x220>)
 8001fe0:	2209      	movs	r2, #9
 8001fe2:	701a      	strb	r2, [r3, #0]
    	}
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001fe4:	2002      	movs	r0, #2
 8001fe6:	f7fe fb0f 	bl	8000608 <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8001fea:	4b36      	ldr	r3, [pc, #216]	; (80020c4 <AUDIO_PLAYER_Process+0x234>)
 8001fec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff feec 	bl	8001dd0 <AUDIO_PLAYER_Start>
    break;    
 8001ff8:	e055      	b.n	80020a6 <AUDIO_PLAYER_Process+0x216>
    
  case AUDIO_STATE_PREVIOUS:
    if(--FilePos < 0)
 8001ffa:	4b32      	ldr	r3, [pc, #200]	; (80020c4 <AUDIO_PLAYER_Process+0x234>)
 8001ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002000:	b29b      	uxth	r3, r3
 8002002:	3b01      	subs	r3, #1
 8002004:	b29b      	uxth	r3, r3
 8002006:	b21a      	sxth	r2, r3
 8002008:	4b2e      	ldr	r3, [pc, #184]	; (80020c4 <AUDIO_PLAYER_Process+0x234>)
 800200a:	801a      	strh	r2, [r3, #0]
 800200c:	4b2d      	ldr	r3, [pc, #180]	; (80020c4 <AUDIO_PLAYER_Process+0x234>)
 800200e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002012:	2b00      	cmp	r3, #0
 8002014:	da07      	bge.n	8002026 <AUDIO_PLAYER_Process+0x196>
    {
      FilePos = AUDIO_GetWavObjectNumber() - 1;
 8002016:	f7fe feb3 	bl	8000d80 <AUDIO_GetWavObjectNumber>
 800201a:	4603      	mov	r3, r0
 800201c:	3b01      	subs	r3, #1
 800201e:	b29b      	uxth	r3, r3
 8002020:	b21a      	sxth	r2, r3
 8002022:	4b28      	ldr	r3, [pc, #160]	; (80020c4 <AUDIO_PLAYER_Process+0x234>)
 8002024:	801a      	strh	r2, [r3, #0]
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002026:	2002      	movs	r0, #2
 8002028:	f7fe faee 	bl	8000608 <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 800202c:	4b25      	ldr	r3, [pc, #148]	; (80020c4 <AUDIO_PLAYER_Process+0x234>)
 800202e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fecb 	bl	8001dd0 <AUDIO_PLAYER_Start>
    break;   
 800203a:	e034      	b.n	80020a6 <AUDIO_PLAYER_Process+0x216>
    
  case AUDIO_STATE_PAUSE:
    AUDIO_OUT_Pause();
 800203c:	f7fe fab8 	bl	80005b0 <AUDIO_OUT_Pause>
    AudioState = AUDIO_STATE_WAIT;
 8002040:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <AUDIO_PLAYER_Process+0x220>)
 8002042:	2201      	movs	r2, #1
 8002044:	701a      	strb	r2, [r3, #0]
    break;
 8002046:	e02e      	b.n	80020a6 <AUDIO_PLAYER_Process+0x216>
    
  case AUDIO_STATE_RESUME:
    AUDIO_OUT_Resume();
 8002048:	f7fe fac8 	bl	80005dc <AUDIO_OUT_Resume>
    AudioState = AUDIO_STATE_PLAY;
 800204c:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <AUDIO_PLAYER_Process+0x220>)
 800204e:	2203      	movs	r2, #3
 8002050:	701a      	strb	r2, [r3, #0]
    break;
 8002052:	e028      	b.n	80020a6 <AUDIO_PLAYER_Process+0x216>
    
  case AUDIO_STATE_VOLUME_UP: 
    if( uwVolume <= 90)
 8002054:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <AUDIO_PLAYER_Process+0x238>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b5a      	cmp	r3, #90	; 0x5a
 800205a:	d804      	bhi.n	8002066 <AUDIO_PLAYER_Process+0x1d6>
    {
      uwVolume += 10;
 800205c:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <AUDIO_PLAYER_Process+0x238>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	330a      	adds	r3, #10
 8002062:	4a19      	ldr	r2, [pc, #100]	; (80020c8 <AUDIO_PLAYER_Process+0x238>)
 8002064:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8002066:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <AUDIO_PLAYER_Process+0x238>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	b2db      	uxtb	r3, r3
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe faf3 	bl	8000658 <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8002072:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <AUDIO_PLAYER_Process+0x220>)
 8002074:	2203      	movs	r2, #3
 8002076:	701a      	strb	r2, [r3, #0]
    break;
 8002078:	e015      	b.n	80020a6 <AUDIO_PLAYER_Process+0x216>
    
  case AUDIO_STATE_VOLUME_DOWN:    
    if( uwVolume >= 10)
 800207a:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <AUDIO_PLAYER_Process+0x238>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2b09      	cmp	r3, #9
 8002080:	d904      	bls.n	800208c <AUDIO_PLAYER_Process+0x1fc>
    {
      uwVolume -= 10;
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <AUDIO_PLAYER_Process+0x238>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	3b0a      	subs	r3, #10
 8002088:	4a0f      	ldr	r2, [pc, #60]	; (80020c8 <AUDIO_PLAYER_Process+0x238>)
 800208a:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 800208c:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <AUDIO_PLAYER_Process+0x238>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fae0 	bl	8000658 <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <AUDIO_PLAYER_Process+0x220>)
 800209a:	2203      	movs	r2, #3
 800209c:	701a      	strb	r2, [r3, #0]
    break;
 800209e:	e002      	b.n	80020a6 <AUDIO_PLAYER_Process+0x216>
  case AUDIO_STATE_WAIT:
  case AUDIO_STATE_IDLE:
  case AUDIO_STATE_INIT:    
  default:
    /* Do Nothing */
    break;
 80020a0:	bf00      	nop
 80020a2:	e000      	b.n	80020a6 <AUDIO_PLAYER_Process+0x216>
    break;
 80020a4:	bf00      	nop
  }
  return audio_error;
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd90      	pop	{r4, r7, pc}
 80020b0:	20001ad4 	.word	0x20001ad4
 80020b4:	200001c0 	.word	0x200001c0
 80020b8:	20001ad8 	.word	0x20001ad8
 80020bc:	20001ee0 	.word	0x20001ee0
 80020c0:	200009c0 	.word	0x200009c0
 80020c4:	200011c8 	.word	0x200011c8
 80020c8:	2000003c 	.word	0x2000003c

080020cc <AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_TransferComplete_CallBack(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <AUDIO_OUT_TransferComplete_CallBack+0x20>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d104      	bne.n	80020e2 <AUDIO_OUT_TransferComplete_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_FULL;
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <AUDIO_OUT_TransferComplete_CallBack+0x24>)
 80020da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020de:	2202      	movs	r2, #2
 80020e0:	701a      	strb	r2, [r3, #0]
  }
}
 80020e2:	bf00      	nop
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	20001ad4 	.word	0x20001ad4
 80020f0:	200001c0 	.word	0x200001c0

080020f4 <AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d104      	bne.n	800210a <AUDIO_OUT_HalfTransfer_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_HALF;
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 8002102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002106:	2201      	movs	r2, #1
 8002108:	701a      	strb	r2, [r3, #0]
  }
}
 800210a:	bf00      	nop
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	20001ad4 	.word	0x20001ad4
 8002118:	200001c0 	.word	0x200001c0

0800211c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800211c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002154 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002120:	480d      	ldr	r0, [pc, #52]	; (8002158 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002122:	490e      	ldr	r1, [pc, #56]	; (800215c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002124:	4a0e      	ldr	r2, [pc, #56]	; (8002160 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002128:	e002      	b.n	8002130 <LoopCopyDataInit>

0800212a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800212a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800212c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800212e:	3304      	adds	r3, #4

08002130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002134:	d3f9      	bcc.n	800212a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002136:	4a0b      	ldr	r2, [pc, #44]	; (8002164 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002138:	4c0b      	ldr	r4, [pc, #44]	; (8002168 <LoopFillZerobss+0x26>)
  movs r3, #0
 800213a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800213c:	e001      	b.n	8002142 <LoopFillZerobss>

0800213e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800213e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002140:	3204      	adds	r2, #4

08002142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002144:	d3fb      	bcc.n	800213e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002146:	f7ff fe19 	bl	8001d7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800214a:	f00e f925 	bl	8010398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800214e:	f7ff f967 	bl	8001420 <main>
  bx  lr    
 8002152:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002154:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800215c:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8002160:	08010b60 	.word	0x08010b60
  ldr r2, =_sbss
 8002164:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8002168:	20002c6c 	.word	0x20002c6c

0800216c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800216c:	e7fe      	b.n	800216c <ADC_IRQHandler>
	...

08002170 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002174:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <HAL_Init+0x40>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a0d      	ldr	r2, [pc, #52]	; (80021b0 <HAL_Init+0x40>)
 800217a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800217e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002180:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <HAL_Init+0x40>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <HAL_Init+0x40>)
 8002186:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800218a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <HAL_Init+0x40>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a07      	ldr	r2, [pc, #28]	; (80021b0 <HAL_Init+0x40>)
 8002192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002196:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002198:	2003      	movs	r0, #3
 800219a:	f000 ffbb 	bl	8003114 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800219e:	2000      	movs	r0, #0
 80021a0:	f000 f808 	bl	80021b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021a4:	f7ff fb80 	bl	80018a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40023c00 	.word	0x40023c00

080021b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <HAL_InitTick+0x54>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4b12      	ldr	r3, [pc, #72]	; (800220c <HAL_InitTick+0x58>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	4619      	mov	r1, r3
 80021c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 ffd3 	bl	800317e <HAL_SYSTICK_Config>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e00e      	b.n	8002200 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b0f      	cmp	r3, #15
 80021e6:	d80a      	bhi.n	80021fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021e8:	2200      	movs	r2, #0
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	f04f 30ff 	mov.w	r0, #4294967295
 80021f0:	f000 ff9b 	bl	800312a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f4:	4a06      	ldr	r2, [pc, #24]	; (8002210 <HAL_InitTick+0x5c>)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	e000      	b.n	8002200 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
}
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20000038 	.word	0x20000038
 800220c:	20000044 	.word	0x20000044
 8002210:	20000040 	.word	0x20000040

08002214 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <HAL_IncTick+0x20>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	4b06      	ldr	r3, [pc, #24]	; (8002238 <HAL_IncTick+0x24>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4413      	add	r3, r2
 8002224:	4a04      	ldr	r2, [pc, #16]	; (8002238 <HAL_IncTick+0x24>)
 8002226:	6013      	str	r3, [r2, #0]
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	20000044 	.word	0x20000044
 8002238:	20002110 	.word	0x20002110

0800223c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return uwTick;
 8002240:	4b03      	ldr	r3, [pc, #12]	; (8002250 <HAL_GetTick+0x14>)
 8002242:	681b      	ldr	r3, [r3, #0]
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	20002110 	.word	0x20002110

08002254 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800225c:	f7ff ffee 	bl	800223c <HAL_GetTick>
 8002260:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226c:	d005      	beq.n	800227a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800226e:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <HAL_Delay+0x44>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4413      	add	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800227a:	bf00      	nop
 800227c:	f7ff ffde 	bl	800223c <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	429a      	cmp	r2, r3
 800228a:	d8f7      	bhi.n	800227c <HAL_Delay+0x28>
  {
  }
}
 800228c:	bf00      	nop
 800228e:	bf00      	nop
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000044 	.word	0x20000044

0800229c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e0ed      	b.n	800248a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d102      	bne.n	80022c0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff fb1c 	bl	80018f8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0201 	orr.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022d0:	f7ff ffb4 	bl	800223c <HAL_GetTick>
 80022d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022d6:	e012      	b.n	80022fe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022d8:	f7ff ffb0 	bl	800223c <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b0a      	cmp	r3, #10
 80022e4:	d90b      	bls.n	80022fe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2205      	movs	r2, #5
 80022f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e0c5      	b.n	800248a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0e5      	beq.n	80022d8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0202 	bic.w	r2, r2, #2
 800231a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800231c:	f7ff ff8e 	bl	800223c <HAL_GetTick>
 8002320:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002322:	e012      	b.n	800234a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002324:	f7ff ff8a 	bl	800223c <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b0a      	cmp	r3, #10
 8002330:	d90b      	bls.n	800234a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2205      	movs	r2, #5
 8002342:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e09f      	b.n	800248a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1e5      	bne.n	8002324 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	7e1b      	ldrb	r3, [r3, #24]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d108      	bne.n	8002372 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	e007      	b.n	8002382 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002380:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	7e5b      	ldrb	r3, [r3, #25]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d108      	bne.n	800239c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	e007      	b.n	80023ac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	7e9b      	ldrb	r3, [r3, #26]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d108      	bne.n	80023c6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0220 	orr.w	r2, r2, #32
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	e007      	b.n	80023d6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0220 	bic.w	r2, r2, #32
 80023d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	7edb      	ldrb	r3, [r3, #27]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d108      	bne.n	80023f0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0210 	bic.w	r2, r2, #16
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	e007      	b.n	8002400 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0210 	orr.w	r2, r2, #16
 80023fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	7f1b      	ldrb	r3, [r3, #28]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d108      	bne.n	800241a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0208 	orr.w	r2, r2, #8
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	e007      	b.n	800242a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0208 	bic.w	r2, r2, #8
 8002428:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	7f5b      	ldrb	r3, [r3, #29]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d108      	bne.n	8002444 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0204 	orr.w	r2, r2, #4
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	e007      	b.n	8002454 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0204 	bic.w	r2, r2, #4
 8002452:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	ea42 0103 	orr.w	r1, r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	1e5a      	subs	r2, r3, #1
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002494:	b480      	push	{r7}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024aa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80024ac:	7cfb      	ldrb	r3, [r7, #19]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d003      	beq.n	80024ba <HAL_CAN_ConfigFilter+0x26>
 80024b2:	7cfb      	ldrb	r3, [r7, #19]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	f040 80be 	bne.w	8002636 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80024ba:	4b65      	ldr	r3, [pc, #404]	; (8002650 <HAL_CAN_ConfigFilter+0x1bc>)
 80024bc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024c4:	f043 0201 	orr.w	r2, r3, #1
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024d4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	021b      	lsls	r3, r3, #8
 80024ea:	431a      	orrs	r2, r3
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	f003 031f 	and.w	r3, r3, #31
 80024fa:	2201      	movs	r2, #1
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	43db      	mvns	r3, r3
 800250c:	401a      	ands	r2, r3
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d123      	bne.n	8002564 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	43db      	mvns	r3, r3
 8002526:	401a      	ands	r2, r3
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800253e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	3248      	adds	r2, #72	; 0x48
 8002544:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002558:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800255a:	6979      	ldr	r1, [r7, #20]
 800255c:	3348      	adds	r3, #72	; 0x48
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	440b      	add	r3, r1
 8002562:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d122      	bne.n	80025b2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	431a      	orrs	r2, r3
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800258c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	3248      	adds	r2, #72	; 0x48
 8002592:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025a6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025a8:	6979      	ldr	r1, [r7, #20]
 80025aa:	3348      	adds	r3, #72	; 0x48
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	440b      	add	r3, r1
 80025b0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	43db      	mvns	r3, r3
 80025c4:	401a      	ands	r2, r3
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80025cc:	e007      	b.n	80025de <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d109      	bne.n	80025fa <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	43db      	mvns	r3, r3
 80025f0:	401a      	ands	r2, r3
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80025f8:	e007      	b.n	800260a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	431a      	orrs	r2, r3
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d107      	bne.n	8002622 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	431a      	orrs	r2, r3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002628:	f023 0201 	bic.w	r2, r3, #1
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002632:	2300      	movs	r3, #0
 8002634:	e006      	b.n	8002644 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
  }
}
 8002644:	4618      	mov	r0, r3
 8002646:	371c      	adds	r7, #28
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	40006400 	.word	0x40006400

08002654 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b01      	cmp	r3, #1
 8002666:	d12e      	bne.n	80026c6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2202      	movs	r2, #2
 800266c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0201 	bic.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002680:	f7ff fddc 	bl	800223c <HAL_GetTick>
 8002684:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002686:	e012      	b.n	80026ae <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002688:	f7ff fdd8 	bl	800223c <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b0a      	cmp	r3, #10
 8002694:	d90b      	bls.n	80026ae <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2205      	movs	r2, #5
 80026a6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e012      	b.n	80026d4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1e5      	bne.n	8002688 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	e006      	b.n	80026d4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
  }
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80026dc:	b480      	push	{r7}
 80026de:	b089      	sub	sp, #36	; 0x24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
 80026e8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026f0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80026fa:	7ffb      	ldrb	r3, [r7, #31]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d003      	beq.n	8002708 <HAL_CAN_AddTxMessage+0x2c>
 8002700:	7ffb      	ldrb	r3, [r7, #31]
 8002702:	2b02      	cmp	r3, #2
 8002704:	f040 80b8 	bne.w	8002878 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10a      	bne.n	8002728 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002718:	2b00      	cmp	r3, #0
 800271a:	d105      	bne.n	8002728 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 80a0 	beq.w	8002868 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	0e1b      	lsrs	r3, r3, #24
 800272c:	f003 0303 	and.w	r3, r3, #3
 8002730:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d907      	bls.n	8002748 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e09e      	b.n	8002886 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002748:	2201      	movs	r2, #1
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	409a      	lsls	r2, r3
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10d      	bne.n	8002776 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002764:	68f9      	ldr	r1, [r7, #12]
 8002766:	6809      	ldr	r1, [r1, #0]
 8002768:	431a      	orrs	r2, r3
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	3318      	adds	r3, #24
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	440b      	add	r3, r1
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	e00f      	b.n	8002796 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002780:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002786:	68f9      	ldr	r1, [r7, #12]
 8002788:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800278a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	3318      	adds	r3, #24
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	440b      	add	r3, r1
 8002794:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6819      	ldr	r1, [r3, #0]
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	691a      	ldr	r2, [r3, #16]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	3318      	adds	r3, #24
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	440b      	add	r3, r1
 80027a6:	3304      	adds	r3, #4
 80027a8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	7d1b      	ldrb	r3, [r3, #20]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d111      	bne.n	80027d6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	3318      	adds	r3, #24
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	4413      	add	r3, r2
 80027be:	3304      	adds	r3, #4
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	6811      	ldr	r1, [r2, #0]
 80027c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	3318      	adds	r3, #24
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	440b      	add	r3, r1
 80027d2:	3304      	adds	r3, #4
 80027d4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3307      	adds	r3, #7
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	061a      	lsls	r2, r3, #24
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3306      	adds	r3, #6
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	041b      	lsls	r3, r3, #16
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3305      	adds	r3, #5
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	021b      	lsls	r3, r3, #8
 80027f0:	4313      	orrs	r3, r2
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	3204      	adds	r2, #4
 80027f6:	7812      	ldrb	r2, [r2, #0]
 80027f8:	4610      	mov	r0, r2
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	6811      	ldr	r1, [r2, #0]
 80027fe:	ea43 0200 	orr.w	r2, r3, r0
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	440b      	add	r3, r1
 8002808:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800280c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3303      	adds	r3, #3
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	061a      	lsls	r2, r3, #24
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3302      	adds	r3, #2
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	041b      	lsls	r3, r3, #16
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3301      	adds	r3, #1
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	021b      	lsls	r3, r3, #8
 8002828:	4313      	orrs	r3, r2
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	7812      	ldrb	r2, [r2, #0]
 800282e:	4610      	mov	r0, r2
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	6811      	ldr	r1, [r2, #0]
 8002834:	ea43 0200 	orr.w	r2, r3, r0
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	440b      	add	r3, r1
 800283e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002842:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	3318      	adds	r3, #24
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	4413      	add	r3, r2
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	6811      	ldr	r1, [r2, #0]
 8002856:	f043 0201 	orr.w	r2, r3, #1
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	3318      	adds	r3, #24
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	440b      	add	r3, r1
 8002862:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002864:	2300      	movs	r3, #0
 8002866:	e00e      	b.n	8002886 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e006      	b.n	8002886 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
  }
}
 8002886:	4618      	mov	r0, r3
 8002888:	3724      	adds	r7, #36	; 0x24
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002892:	b480      	push	{r7}
 8002894:	b087      	sub	sp, #28
 8002896:	af00      	add	r7, sp, #0
 8002898:	60f8      	str	r0, [r7, #12]
 800289a:	60b9      	str	r1, [r7, #8]
 800289c:	607a      	str	r2, [r7, #4]
 800289e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028a6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80028a8:	7dfb      	ldrb	r3, [r7, #23]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d003      	beq.n	80028b6 <HAL_CAN_GetRxMessage+0x24>
 80028ae:	7dfb      	ldrb	r3, [r7, #23]
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	f040 80f3 	bne.w	8002a9c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10e      	bne.n	80028da <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d116      	bne.n	80028f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e0e7      	b.n	8002aaa <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d107      	bne.n	80028f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0d8      	b.n	8002aaa <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	331b      	adds	r3, #27
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	4413      	add	r3, r2
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0204 	and.w	r2, r3, #4
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10c      	bne.n	8002930 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	331b      	adds	r3, #27
 800291e:	011b      	lsls	r3, r3, #4
 8002920:	4413      	add	r3, r2
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	0d5b      	lsrs	r3, r3, #21
 8002926:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	e00b      	b.n	8002948 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	331b      	adds	r3, #27
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	4413      	add	r3, r2
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	08db      	lsrs	r3, r3, #3
 8002940:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	331b      	adds	r3, #27
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	4413      	add	r3, r2
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0202 	and.w	r2, r3, #2
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	331b      	adds	r3, #27
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	4413      	add	r3, r2
 800296a:	3304      	adds	r3, #4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 020f 	and.w	r2, r3, #15
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	331b      	adds	r3, #27
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	4413      	add	r3, r2
 8002982:	3304      	adds	r3, #4
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	0a1b      	lsrs	r3, r3, #8
 8002988:	b2da      	uxtb	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	331b      	adds	r3, #27
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	4413      	add	r3, r2
 800299a:	3304      	adds	r3, #4
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	0c1b      	lsrs	r3, r3, #16
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	4413      	add	r3, r2
 80029c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	0a1a      	lsrs	r2, r3, #8
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	3301      	adds	r3, #1
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	4413      	add	r3, r2
 80029e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	0c1a      	lsrs	r2, r3, #16
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	3302      	adds	r3, #2
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	0e1a      	lsrs	r2, r3, #24
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	3303      	adds	r3, #3
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	0a1a      	lsrs	r2, r3, #8
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	3305      	adds	r3, #5
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	4413      	add	r3, r2
 8002a46:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	0c1a      	lsrs	r2, r3, #16
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	3306      	adds	r3, #6
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	0e1a      	lsrs	r2, r3, #24
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	3307      	adds	r3, #7
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d108      	bne.n	8002a88 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f042 0220 	orr.w	r2, r2, #32
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	e007      	b.n	8002a98 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691a      	ldr	r2, [r3, #16]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0220 	orr.w	r2, r2, #32
 8002a96:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	e006      	b.n	8002aaa <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
  }
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	371c      	adds	r7, #28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b085      	sub	sp, #20
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ac6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d002      	beq.n	8002ad4 <HAL_CAN_ActivateNotification+0x1e>
 8002ace:	7bfb      	ldrb	r3, [r7, #15]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d109      	bne.n	8002ae8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6959      	ldr	r1, [r3, #20]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	e006      	b.n	8002af6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
  }
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b08a      	sub	sp, #40	; 0x28
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d07c      	beq.n	8002c42 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d023      	beq.n	8002b9a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2201      	movs	r2, #1
 8002b58:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f983 	bl	8002e70 <HAL_CAN_TxMailbox0CompleteCallback>
 8002b6a:	e016      	b.n	8002b9a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d004      	beq.n	8002b80 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7e:	e00c      	b.n	8002b9a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d004      	beq.n	8002b94 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b90:	627b      	str	r3, [r7, #36]	; 0x24
 8002b92:	e002      	b.n	8002b9a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f989 	bl	8002eac <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d024      	beq.n	8002bee <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f963 	bl	8002e84 <HAL_CAN_TxMailbox1CompleteCallback>
 8002bbe:	e016      	b.n	8002bee <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d004      	beq.n	8002bd4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd2:	e00c      	b.n	8002bee <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d004      	beq.n	8002be8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
 8002be6:	e002      	b.n	8002bee <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f969 	bl	8002ec0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d024      	beq.n	8002c42 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f943 	bl	8002e98 <HAL_CAN_TxMailbox2CompleteCallback>
 8002c12:	e016      	b.n	8002c42 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d004      	beq.n	8002c28 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
 8002c26:	e00c      	b.n	8002c42 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d004      	beq.n	8002c3c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3a:	e002      	b.n	8002c42 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f949 	bl	8002ed4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	f003 0308 	and.w	r3, r3, #8
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00c      	beq.n	8002c66 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d007      	beq.n	8002c66 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2210      	movs	r2, #16
 8002c64:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00b      	beq.n	8002c88 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d006      	beq.n	8002c88 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2208      	movs	r2, #8
 8002c80:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f93a 	bl	8002efc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d009      	beq.n	8002ca6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f921 	bl	8002ee8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00c      	beq.n	8002cca <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d007      	beq.n	8002cca <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2210      	movs	r2, #16
 8002cc8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	f003 0320 	and.w	r3, r3, #32
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00b      	beq.n	8002cec <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d006      	beq.n	8002cec <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2208      	movs	r2, #8
 8002ce4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f91c 	bl	8002f24 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d009      	beq.n	8002d0a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	f003 0303 	and.w	r3, r3, #3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f903 	bl	8002f10 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00b      	beq.n	8002d2c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f003 0310 	and.w	r3, r3, #16
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d006      	beq.n	8002d2c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2210      	movs	r2, #16
 8002d24:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f906 	bl	8002f38 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00b      	beq.n	8002d4e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d006      	beq.n	8002d4e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2208      	movs	r2, #8
 8002d46:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f8ff 	bl	8002f4c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d07b      	beq.n	8002e50 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f003 0304 	and.w	r3, r3, #4
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d072      	beq.n	8002e48 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d008      	beq.n	8002d7e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d008      	beq.n	8002d9a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	f043 0302 	orr.w	r3, r3, #2
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d008      	beq.n	8002db6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	f043 0304 	orr.w	r3, r3, #4
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d043      	beq.n	8002e48 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d03e      	beq.n	8002e48 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dd0:	2b60      	cmp	r3, #96	; 0x60
 8002dd2:	d02b      	beq.n	8002e2c <HAL_CAN_IRQHandler+0x32a>
 8002dd4:	2b60      	cmp	r3, #96	; 0x60
 8002dd6:	d82e      	bhi.n	8002e36 <HAL_CAN_IRQHandler+0x334>
 8002dd8:	2b50      	cmp	r3, #80	; 0x50
 8002dda:	d022      	beq.n	8002e22 <HAL_CAN_IRQHandler+0x320>
 8002ddc:	2b50      	cmp	r3, #80	; 0x50
 8002dde:	d82a      	bhi.n	8002e36 <HAL_CAN_IRQHandler+0x334>
 8002de0:	2b40      	cmp	r3, #64	; 0x40
 8002de2:	d019      	beq.n	8002e18 <HAL_CAN_IRQHandler+0x316>
 8002de4:	2b40      	cmp	r3, #64	; 0x40
 8002de6:	d826      	bhi.n	8002e36 <HAL_CAN_IRQHandler+0x334>
 8002de8:	2b30      	cmp	r3, #48	; 0x30
 8002dea:	d010      	beq.n	8002e0e <HAL_CAN_IRQHandler+0x30c>
 8002dec:	2b30      	cmp	r3, #48	; 0x30
 8002dee:	d822      	bhi.n	8002e36 <HAL_CAN_IRQHandler+0x334>
 8002df0:	2b10      	cmp	r3, #16
 8002df2:	d002      	beq.n	8002dfa <HAL_CAN_IRQHandler+0x2f8>
 8002df4:	2b20      	cmp	r3, #32
 8002df6:	d005      	beq.n	8002e04 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002df8:	e01d      	b.n	8002e36 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	f043 0308 	orr.w	r3, r3, #8
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e02:	e019      	b.n	8002e38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	f043 0310 	orr.w	r3, r3, #16
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e0c:	e014      	b.n	8002e38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	f043 0320 	orr.w	r3, r3, #32
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e16:	e00f      	b.n	8002e38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e20:	e00a      	b.n	8002e38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e2a:	e005      	b.n	8002e38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e34:	e000      	b.n	8002e38 <HAL_CAN_IRQHandler+0x336>
            break;
 8002e36:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699a      	ldr	r2, [r3, #24]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002e46:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2204      	movs	r2, #4
 8002e4e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d008      	beq.n	8002e68 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f87c 	bl	8002f60 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002e68:	bf00      	nop
 8002e6a:	3728      	adds	r7, #40	; 0x28
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f84:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f90:	4013      	ands	r3, r2
 8002f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fa6:	4a04      	ldr	r2, [pc, #16]	; (8002fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	60d3      	str	r3, [r2, #12]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	e000ed00 	.word	0xe000ed00

08002fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc0:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	0a1b      	lsrs	r3, r3, #8
 8002fc6:	f003 0307 	and.w	r3, r3, #7
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	db0b      	blt.n	8003002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	f003 021f 	and.w	r2, r3, #31
 8002ff0:	4907      	ldr	r1, [pc, #28]	; (8003010 <__NVIC_EnableIRQ+0x38>)
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8002ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	e000e100 	.word	0xe000e100

08003014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	6039      	str	r1, [r7, #0]
 800301e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003024:	2b00      	cmp	r3, #0
 8003026:	db0a      	blt.n	800303e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	b2da      	uxtb	r2, r3
 800302c:	490c      	ldr	r1, [pc, #48]	; (8003060 <__NVIC_SetPriority+0x4c>)
 800302e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003032:	0112      	lsls	r2, r2, #4
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	440b      	add	r3, r1
 8003038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800303c:	e00a      	b.n	8003054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	b2da      	uxtb	r2, r3
 8003042:	4908      	ldr	r1, [pc, #32]	; (8003064 <__NVIC_SetPriority+0x50>)
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	3b04      	subs	r3, #4
 800304c:	0112      	lsls	r2, r2, #4
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	440b      	add	r3, r1
 8003052:	761a      	strb	r2, [r3, #24]
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	e000e100 	.word	0xe000e100
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003068:	b480      	push	{r7}
 800306a:	b089      	sub	sp, #36	; 0x24
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f1c3 0307 	rsb	r3, r3, #7
 8003082:	2b04      	cmp	r3, #4
 8003084:	bf28      	it	cs
 8003086:	2304      	movcs	r3, #4
 8003088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	3304      	adds	r3, #4
 800308e:	2b06      	cmp	r3, #6
 8003090:	d902      	bls.n	8003098 <NVIC_EncodePriority+0x30>
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	3b03      	subs	r3, #3
 8003096:	e000      	b.n	800309a <NVIC_EncodePriority+0x32>
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800309c:	f04f 32ff 	mov.w	r2, #4294967295
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43da      	mvns	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	401a      	ands	r2, r3
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b0:	f04f 31ff 	mov.w	r1, #4294967295
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ba:	43d9      	mvns	r1, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c0:	4313      	orrs	r3, r2
         );
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3724      	adds	r7, #36	; 0x24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
	...

080030d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3b01      	subs	r3, #1
 80030dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030e0:	d301      	bcc.n	80030e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030e2:	2301      	movs	r3, #1
 80030e4:	e00f      	b.n	8003106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030e6:	4a0a      	ldr	r2, [pc, #40]	; (8003110 <SysTick_Config+0x40>)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ee:	210f      	movs	r1, #15
 80030f0:	f04f 30ff 	mov.w	r0, #4294967295
 80030f4:	f7ff ff8e 	bl	8003014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030f8:	4b05      	ldr	r3, [pc, #20]	; (8003110 <SysTick_Config+0x40>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030fe:	4b04      	ldr	r3, [pc, #16]	; (8003110 <SysTick_Config+0x40>)
 8003100:	2207      	movs	r2, #7
 8003102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	e000e010 	.word	0xe000e010

08003114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7ff ff29 	bl	8002f74 <__NVIC_SetPriorityGrouping>
}
 8003122:	bf00      	nop
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800312a:	b580      	push	{r7, lr}
 800312c:	b086      	sub	sp, #24
 800312e:	af00      	add	r7, sp, #0
 8003130:	4603      	mov	r3, r0
 8003132:	60b9      	str	r1, [r7, #8]
 8003134:	607a      	str	r2, [r7, #4]
 8003136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800313c:	f7ff ff3e 	bl	8002fbc <__NVIC_GetPriorityGrouping>
 8003140:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	68b9      	ldr	r1, [r7, #8]
 8003146:	6978      	ldr	r0, [r7, #20]
 8003148:	f7ff ff8e 	bl	8003068 <NVIC_EncodePriority>
 800314c:	4602      	mov	r2, r0
 800314e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003152:	4611      	mov	r1, r2
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff ff5d 	bl	8003014 <__NVIC_SetPriority>
}
 800315a:	bf00      	nop
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	4603      	mov	r3, r0
 800316a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800316c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff ff31 	bl	8002fd8 <__NVIC_EnableIRQ>
}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff ffa2 	bl	80030d0 <SysTick_Config>
 800318c:	4603      	mov	r3, r0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031a4:	f7ff f84a 	bl	800223c <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e099      	b.n	80032e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0201 	bic.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031d4:	e00f      	b.n	80031f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031d6:	f7ff f831 	bl	800223c <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b05      	cmp	r3, #5
 80031e2:	d908      	bls.n	80031f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2220      	movs	r2, #32
 80031e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2203      	movs	r2, #3
 80031ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e078      	b.n	80032e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1e8      	bne.n	80031d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	4b38      	ldr	r3, [pc, #224]	; (80032f0 <HAL_DMA_Init+0x158>)
 8003210:	4013      	ands	r3, r2
 8003212:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003222:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800322e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800323a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	2b04      	cmp	r3, #4
 800324e:	d107      	bne.n	8003260 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003258:	4313      	orrs	r3, r2
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	4313      	orrs	r3, r2
 800325e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f023 0307 	bic.w	r3, r3, #7
 8003276:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	4313      	orrs	r3, r2
 8003280:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	2b04      	cmp	r3, #4
 8003288:	d117      	bne.n	80032ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	4313      	orrs	r3, r2
 8003292:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00e      	beq.n	80032ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 fb3d 	bl	800391c <DMA_CheckFifoParam>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d008      	beq.n	80032ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2240      	movs	r2, #64	; 0x40
 80032ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80032b6:	2301      	movs	r3, #1
 80032b8:	e016      	b.n	80032e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 faf4 	bl	80038b0 <DMA_CalcBaseAndBitshift>
 80032c8:	4603      	mov	r3, r0
 80032ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d0:	223f      	movs	r2, #63	; 0x3f
 80032d2:	409a      	lsls	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	f010803f 	.word	0xf010803f

080032f4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e050      	b.n	80033a8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d101      	bne.n	8003316 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003312:	2302      	movs	r3, #2
 8003314:	e048      	b.n	80033a8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0201 	bic.w	r2, r2, #1
 8003324:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2200      	movs	r2, #0
 8003334:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2200      	movs	r2, #0
 800333c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2200      	movs	r2, #0
 8003344:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2200      	movs	r2, #0
 800334c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2221      	movs	r2, #33	; 0x21
 8003354:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 faaa 	bl	80038b0 <DMA_CalcBaseAndBitshift>
 800335c:	4603      	mov	r3, r0
 800335e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003388:	223f      	movs	r2, #63	; 0x3f
 800338a:	409a      	lsls	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
 80033bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_DMA_Start_IT+0x26>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e040      	b.n	8003458 <HAL_DMA_Start_IT+0xa8>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d12f      	bne.n	800344a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2202      	movs	r2, #2
 80033ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	68b9      	ldr	r1, [r7, #8]
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 fa28 	bl	8003854 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003408:	223f      	movs	r2, #63	; 0x3f
 800340a:	409a      	lsls	r2, r3
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 0216 	orr.w	r2, r2, #22
 800341e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	2b00      	cmp	r3, #0
 8003426:	d007      	beq.n	8003438 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0208 	orr.w	r2, r2, #8
 8003436:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f042 0201 	orr.w	r2, r2, #1
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	e005      	b.n	8003456 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003452:	2302      	movs	r3, #2
 8003454:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003456:	7dfb      	ldrb	r3, [r7, #23]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800346e:	f7fe fee5 	bl	800223c <HAL_GetTick>
 8003472:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d008      	beq.n	8003492 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2280      	movs	r2, #128	; 0x80
 8003484:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e052      	b.n	8003538 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0216 	bic.w	r2, r2, #22
 80034a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695a      	ldr	r2, [r3, #20]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d103      	bne.n	80034c2 <HAL_DMA_Abort+0x62>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d007      	beq.n	80034d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0208 	bic.w	r2, r2, #8
 80034d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0201 	bic.w	r2, r2, #1
 80034e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034e2:	e013      	b.n	800350c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034e4:	f7fe feaa 	bl	800223c <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b05      	cmp	r3, #5
 80034f0:	d90c      	bls.n	800350c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2220      	movs	r2, #32
 80034f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2203      	movs	r2, #3
 80034fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e015      	b.n	8003538 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1e4      	bne.n	80034e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351e:	223f      	movs	r2, #63	; 0x3f
 8003520:	409a      	lsls	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800354c:	4b92      	ldr	r3, [pc, #584]	; (8003798 <HAL_DMA_IRQHandler+0x258>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a92      	ldr	r2, [pc, #584]	; (800379c <HAL_DMA_IRQHandler+0x25c>)
 8003552:	fba2 2303 	umull	r2, r3, r2, r3
 8003556:	0a9b      	lsrs	r3, r3, #10
 8003558:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356a:	2208      	movs	r2, #8
 800356c:	409a      	lsls	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4013      	ands	r3, r2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d01a      	beq.n	80035ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d013      	beq.n	80035ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0204 	bic.w	r2, r2, #4
 8003592:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003598:	2208      	movs	r2, #8
 800359a:	409a      	lsls	r2, r3
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a4:	f043 0201 	orr.w	r2, r3, #1
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b0:	2201      	movs	r2, #1
 80035b2:	409a      	lsls	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4013      	ands	r3, r2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d012      	beq.n	80035e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00b      	beq.n	80035e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ce:	2201      	movs	r2, #1
 80035d0:	409a      	lsls	r2, r3
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035da:	f043 0202 	orr.w	r2, r3, #2
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e6:	2204      	movs	r2, #4
 80035e8:	409a      	lsls	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4013      	ands	r3, r2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d012      	beq.n	8003618 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00b      	beq.n	8003618 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003604:	2204      	movs	r2, #4
 8003606:	409a      	lsls	r2, r3
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003610:	f043 0204 	orr.w	r2, r3, #4
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361c:	2210      	movs	r2, #16
 800361e:	409a      	lsls	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4013      	ands	r3, r2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d043      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d03c      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363a:	2210      	movs	r2, #16
 800363c:	409a      	lsls	r2, r3
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d018      	beq.n	8003682 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d108      	bne.n	8003670 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	2b00      	cmp	r3, #0
 8003664:	d024      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	4798      	blx	r3
 800366e:	e01f      	b.n	80036b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003674:	2b00      	cmp	r3, #0
 8003676:	d01b      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	4798      	blx	r3
 8003680:	e016      	b.n	80036b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368c:	2b00      	cmp	r3, #0
 800368e:	d107      	bne.n	80036a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0208 	bic.w	r2, r2, #8
 800369e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b4:	2220      	movs	r2, #32
 80036b6:	409a      	lsls	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4013      	ands	r3, r2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 808e 	beq.w	80037de <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0310 	and.w	r3, r3, #16
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 8086 	beq.w	80037de <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d6:	2220      	movs	r2, #32
 80036d8:	409a      	lsls	r2, r3
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b05      	cmp	r3, #5
 80036e8:	d136      	bne.n	8003758 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0216 	bic.w	r2, r2, #22
 80036f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695a      	ldr	r2, [r3, #20]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003708:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	2b00      	cmp	r3, #0
 8003710:	d103      	bne.n	800371a <HAL_DMA_IRQHandler+0x1da>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003716:	2b00      	cmp	r3, #0
 8003718:	d007      	beq.n	800372a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0208 	bic.w	r2, r2, #8
 8003728:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372e:	223f      	movs	r2, #63	; 0x3f
 8003730:	409a      	lsls	r2, r3
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800374a:	2b00      	cmp	r3, #0
 800374c:	d07d      	beq.n	800384a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	4798      	blx	r3
        }
        return;
 8003756:	e078      	b.n	800384a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d01c      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d108      	bne.n	8003786 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003778:	2b00      	cmp	r3, #0
 800377a:	d030      	beq.n	80037de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	4798      	blx	r3
 8003784:	e02b      	b.n	80037de <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378a:	2b00      	cmp	r3, #0
 800378c:	d027      	beq.n	80037de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	4798      	blx	r3
 8003796:	e022      	b.n	80037de <HAL_DMA_IRQHandler+0x29e>
 8003798:	20000038 	.word	0x20000038
 800379c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10f      	bne.n	80037ce <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0210 	bic.w	r2, r2, #16
 80037bc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d032      	beq.n	800384c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d022      	beq.n	8003838 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2205      	movs	r2, #5
 80037f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0201 	bic.w	r2, r2, #1
 8003808:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	3301      	adds	r3, #1
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	429a      	cmp	r2, r3
 8003814:	d307      	bcc.n	8003826 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1f2      	bne.n	800380a <HAL_DMA_IRQHandler+0x2ca>
 8003824:	e000      	b.n	8003828 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003826:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	4798      	blx	r3
 8003848:	e000      	b.n	800384c <HAL_DMA_IRQHandler+0x30c>
        return;
 800384a:	bf00      	nop
    }
  }
}
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop

08003854 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
 8003860:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003870:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	2b40      	cmp	r3, #64	; 0x40
 8003880:	d108      	bne.n	8003894 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003892:	e007      	b.n	80038a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	60da      	str	r2, [r3, #12]
}
 80038a4:	bf00      	nop
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	3b10      	subs	r3, #16
 80038c0:	4a14      	ldr	r2, [pc, #80]	; (8003914 <DMA_CalcBaseAndBitshift+0x64>)
 80038c2:	fba2 2303 	umull	r2, r3, r2, r3
 80038c6:	091b      	lsrs	r3, r3, #4
 80038c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038ca:	4a13      	ldr	r2, [pc, #76]	; (8003918 <DMA_CalcBaseAndBitshift+0x68>)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4413      	add	r3, r2
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	461a      	mov	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d909      	bls.n	80038f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038e6:	f023 0303 	bic.w	r3, r3, #3
 80038ea:	1d1a      	adds	r2, r3, #4
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	659a      	str	r2, [r3, #88]	; 0x58
 80038f0:	e007      	b.n	8003902 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038fa:	f023 0303 	bic.w	r3, r3, #3
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003906:	4618      	mov	r0, r3
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	aaaaaaab 	.word	0xaaaaaaab
 8003918:	080106f4 	.word	0x080106f4

0800391c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003924:	2300      	movs	r3, #0
 8003926:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d11f      	bne.n	8003976 <DMA_CheckFifoParam+0x5a>
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2b03      	cmp	r3, #3
 800393a:	d856      	bhi.n	80039ea <DMA_CheckFifoParam+0xce>
 800393c:	a201      	add	r2, pc, #4	; (adr r2, 8003944 <DMA_CheckFifoParam+0x28>)
 800393e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003942:	bf00      	nop
 8003944:	08003955 	.word	0x08003955
 8003948:	08003967 	.word	0x08003967
 800394c:	08003955 	.word	0x08003955
 8003950:	080039eb 	.word	0x080039eb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d046      	beq.n	80039ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003964:	e043      	b.n	80039ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800396e:	d140      	bne.n	80039f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003974:	e03d      	b.n	80039f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800397e:	d121      	bne.n	80039c4 <DMA_CheckFifoParam+0xa8>
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b03      	cmp	r3, #3
 8003984:	d837      	bhi.n	80039f6 <DMA_CheckFifoParam+0xda>
 8003986:	a201      	add	r2, pc, #4	; (adr r2, 800398c <DMA_CheckFifoParam+0x70>)
 8003988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398c:	0800399d 	.word	0x0800399d
 8003990:	080039a3 	.word	0x080039a3
 8003994:	0800399d 	.word	0x0800399d
 8003998:	080039b5 	.word	0x080039b5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	73fb      	strb	r3, [r7, #15]
      break;
 80039a0:	e030      	b.n	8003a04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d025      	beq.n	80039fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039b2:	e022      	b.n	80039fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039bc:	d11f      	bne.n	80039fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039c2:	e01c      	b.n	80039fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d903      	bls.n	80039d2 <DMA_CheckFifoParam+0xb6>
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d003      	beq.n	80039d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039d0:	e018      	b.n	8003a04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	73fb      	strb	r3, [r7, #15]
      break;
 80039d6:	e015      	b.n	8003a04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00e      	beq.n	8003a02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	73fb      	strb	r3, [r7, #15]
      break;
 80039e8:	e00b      	b.n	8003a02 <DMA_CheckFifoParam+0xe6>
      break;
 80039ea:	bf00      	nop
 80039ec:	e00a      	b.n	8003a04 <DMA_CheckFifoParam+0xe8>
      break;
 80039ee:	bf00      	nop
 80039f0:	e008      	b.n	8003a04 <DMA_CheckFifoParam+0xe8>
      break;
 80039f2:	bf00      	nop
 80039f4:	e006      	b.n	8003a04 <DMA_CheckFifoParam+0xe8>
      break;
 80039f6:	bf00      	nop
 80039f8:	e004      	b.n	8003a04 <DMA_CheckFifoParam+0xe8>
      break;
 80039fa:	bf00      	nop
 80039fc:	e002      	b.n	8003a04 <DMA_CheckFifoParam+0xe8>
      break;   
 80039fe:	bf00      	nop
 8003a00:	e000      	b.n	8003a04 <DMA_CheckFifoParam+0xe8>
      break;
 8003a02:	bf00      	nop
    }
  } 
  
  return status; 
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop

08003a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b089      	sub	sp, #36	; 0x24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	e16b      	b.n	8003d08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a30:	2201      	movs	r2, #1
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	4013      	ands	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	f040 815a 	bne.w	8003d02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d005      	beq.n	8003a66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d130      	bne.n	8003ac8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	2203      	movs	r2, #3
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	43db      	mvns	r3, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	091b      	lsrs	r3, r3, #4
 8003ab2:	f003 0201 	and.w	r2, r3, #1
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f003 0303 	and.w	r3, r3, #3
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d017      	beq.n	8003b04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	2203      	movs	r2, #3
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f003 0303 	and.w	r3, r3, #3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d123      	bne.n	8003b58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	08da      	lsrs	r2, r3, #3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3208      	adds	r2, #8
 8003b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	220f      	movs	r2, #15
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	4013      	ands	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	691a      	ldr	r2, [r3, #16]
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	08da      	lsrs	r2, r3, #3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	3208      	adds	r2, #8
 8003b52:	69b9      	ldr	r1, [r7, #24]
 8003b54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	2203      	movs	r2, #3
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f003 0203 	and.w	r2, r3, #3
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 80b4 	beq.w	8003d02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	4b60      	ldr	r3, [pc, #384]	; (8003d20 <HAL_GPIO_Init+0x30c>)
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba2:	4a5f      	ldr	r2, [pc, #380]	; (8003d20 <HAL_GPIO_Init+0x30c>)
 8003ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8003baa:	4b5d      	ldr	r3, [pc, #372]	; (8003d20 <HAL_GPIO_Init+0x30c>)
 8003bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bb2:	60fb      	str	r3, [r7, #12]
 8003bb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bb6:	4a5b      	ldr	r2, [pc, #364]	; (8003d24 <HAL_GPIO_Init+0x310>)
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	089b      	lsrs	r3, r3, #2
 8003bbc:	3302      	adds	r3, #2
 8003bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	220f      	movs	r2, #15
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	43db      	mvns	r3, r3
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a52      	ldr	r2, [pc, #328]	; (8003d28 <HAL_GPIO_Init+0x314>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d02b      	beq.n	8003c3a <HAL_GPIO_Init+0x226>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a51      	ldr	r2, [pc, #324]	; (8003d2c <HAL_GPIO_Init+0x318>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d025      	beq.n	8003c36 <HAL_GPIO_Init+0x222>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a50      	ldr	r2, [pc, #320]	; (8003d30 <HAL_GPIO_Init+0x31c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d01f      	beq.n	8003c32 <HAL_GPIO_Init+0x21e>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a4f      	ldr	r2, [pc, #316]	; (8003d34 <HAL_GPIO_Init+0x320>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d019      	beq.n	8003c2e <HAL_GPIO_Init+0x21a>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a4e      	ldr	r2, [pc, #312]	; (8003d38 <HAL_GPIO_Init+0x324>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d013      	beq.n	8003c2a <HAL_GPIO_Init+0x216>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a4d      	ldr	r2, [pc, #308]	; (8003d3c <HAL_GPIO_Init+0x328>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d00d      	beq.n	8003c26 <HAL_GPIO_Init+0x212>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a4c      	ldr	r2, [pc, #304]	; (8003d40 <HAL_GPIO_Init+0x32c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d007      	beq.n	8003c22 <HAL_GPIO_Init+0x20e>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a4b      	ldr	r2, [pc, #300]	; (8003d44 <HAL_GPIO_Init+0x330>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d101      	bne.n	8003c1e <HAL_GPIO_Init+0x20a>
 8003c1a:	2307      	movs	r3, #7
 8003c1c:	e00e      	b.n	8003c3c <HAL_GPIO_Init+0x228>
 8003c1e:	2308      	movs	r3, #8
 8003c20:	e00c      	b.n	8003c3c <HAL_GPIO_Init+0x228>
 8003c22:	2306      	movs	r3, #6
 8003c24:	e00a      	b.n	8003c3c <HAL_GPIO_Init+0x228>
 8003c26:	2305      	movs	r3, #5
 8003c28:	e008      	b.n	8003c3c <HAL_GPIO_Init+0x228>
 8003c2a:	2304      	movs	r3, #4
 8003c2c:	e006      	b.n	8003c3c <HAL_GPIO_Init+0x228>
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e004      	b.n	8003c3c <HAL_GPIO_Init+0x228>
 8003c32:	2302      	movs	r3, #2
 8003c34:	e002      	b.n	8003c3c <HAL_GPIO_Init+0x228>
 8003c36:	2301      	movs	r3, #1
 8003c38:	e000      	b.n	8003c3c <HAL_GPIO_Init+0x228>
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	69fa      	ldr	r2, [r7, #28]
 8003c3e:	f002 0203 	and.w	r2, r2, #3
 8003c42:	0092      	lsls	r2, r2, #2
 8003c44:	4093      	lsls	r3, r2
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c4c:	4935      	ldr	r1, [pc, #212]	; (8003d24 <HAL_GPIO_Init+0x310>)
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	089b      	lsrs	r3, r3, #2
 8003c52:	3302      	adds	r3, #2
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c5a:	4b3b      	ldr	r3, [pc, #236]	; (8003d48 <HAL_GPIO_Init+0x334>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	43db      	mvns	r3, r3
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	4013      	ands	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c7e:	4a32      	ldr	r2, [pc, #200]	; (8003d48 <HAL_GPIO_Init+0x334>)
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c84:	4b30      	ldr	r3, [pc, #192]	; (8003d48 <HAL_GPIO_Init+0x334>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	4013      	ands	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ca8:	4a27      	ldr	r2, [pc, #156]	; (8003d48 <HAL_GPIO_Init+0x334>)
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cae:	4b26      	ldr	r3, [pc, #152]	; (8003d48 <HAL_GPIO_Init+0x334>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cd2:	4a1d      	ldr	r2, [pc, #116]	; (8003d48 <HAL_GPIO_Init+0x334>)
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cd8:	4b1b      	ldr	r3, [pc, #108]	; (8003d48 <HAL_GPIO_Init+0x334>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cfc:	4a12      	ldr	r2, [pc, #72]	; (8003d48 <HAL_GPIO_Init+0x334>)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	3301      	adds	r3, #1
 8003d06:	61fb      	str	r3, [r7, #28]
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	2b0f      	cmp	r3, #15
 8003d0c:	f67f ae90 	bls.w	8003a30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d10:	bf00      	nop
 8003d12:	bf00      	nop
 8003d14:	3724      	adds	r7, #36	; 0x24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40023800 	.word	0x40023800
 8003d24:	40013800 	.word	0x40013800
 8003d28:	40020000 	.word	0x40020000
 8003d2c:	40020400 	.word	0x40020400
 8003d30:	40020800 	.word	0x40020800
 8003d34:	40020c00 	.word	0x40020c00
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	40021400 	.word	0x40021400
 8003d40:	40021800 	.word	0x40021800
 8003d44:	40021c00 	.word	0x40021c00
 8003d48:	40013c00 	.word	0x40013c00

08003d4c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	e0cd      	b.n	8003f04 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d68:	2201      	movs	r2, #1
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	4013      	ands	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	f040 80bd 	bne.w	8003efe <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003d84:	4a65      	ldr	r2, [pc, #404]	; (8003f1c <HAL_GPIO_DeInit+0x1d0>)
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	089b      	lsrs	r3, r3, #2
 8003d8a:	3302      	adds	r3, #2
 8003d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d90:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f003 0303 	and.w	r3, r3, #3
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	220f      	movs	r2, #15
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	4013      	ands	r3, r2
 8003da4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a5d      	ldr	r2, [pc, #372]	; (8003f20 <HAL_GPIO_DeInit+0x1d4>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d02b      	beq.n	8003e06 <HAL_GPIO_DeInit+0xba>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a5c      	ldr	r2, [pc, #368]	; (8003f24 <HAL_GPIO_DeInit+0x1d8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d025      	beq.n	8003e02 <HAL_GPIO_DeInit+0xb6>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a5b      	ldr	r2, [pc, #364]	; (8003f28 <HAL_GPIO_DeInit+0x1dc>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d01f      	beq.n	8003dfe <HAL_GPIO_DeInit+0xb2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a5a      	ldr	r2, [pc, #360]	; (8003f2c <HAL_GPIO_DeInit+0x1e0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d019      	beq.n	8003dfa <HAL_GPIO_DeInit+0xae>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a59      	ldr	r2, [pc, #356]	; (8003f30 <HAL_GPIO_DeInit+0x1e4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d013      	beq.n	8003df6 <HAL_GPIO_DeInit+0xaa>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a58      	ldr	r2, [pc, #352]	; (8003f34 <HAL_GPIO_DeInit+0x1e8>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d00d      	beq.n	8003df2 <HAL_GPIO_DeInit+0xa6>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a57      	ldr	r2, [pc, #348]	; (8003f38 <HAL_GPIO_DeInit+0x1ec>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d007      	beq.n	8003dee <HAL_GPIO_DeInit+0xa2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a56      	ldr	r2, [pc, #344]	; (8003f3c <HAL_GPIO_DeInit+0x1f0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d101      	bne.n	8003dea <HAL_GPIO_DeInit+0x9e>
 8003de6:	2307      	movs	r3, #7
 8003de8:	e00e      	b.n	8003e08 <HAL_GPIO_DeInit+0xbc>
 8003dea:	2308      	movs	r3, #8
 8003dec:	e00c      	b.n	8003e08 <HAL_GPIO_DeInit+0xbc>
 8003dee:	2306      	movs	r3, #6
 8003df0:	e00a      	b.n	8003e08 <HAL_GPIO_DeInit+0xbc>
 8003df2:	2305      	movs	r3, #5
 8003df4:	e008      	b.n	8003e08 <HAL_GPIO_DeInit+0xbc>
 8003df6:	2304      	movs	r3, #4
 8003df8:	e006      	b.n	8003e08 <HAL_GPIO_DeInit+0xbc>
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e004      	b.n	8003e08 <HAL_GPIO_DeInit+0xbc>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	e002      	b.n	8003e08 <HAL_GPIO_DeInit+0xbc>
 8003e02:	2301      	movs	r3, #1
 8003e04:	e000      	b.n	8003e08 <HAL_GPIO_DeInit+0xbc>
 8003e06:	2300      	movs	r3, #0
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	f002 0203 	and.w	r2, r2, #3
 8003e0e:	0092      	lsls	r2, r2, #2
 8003e10:	4093      	lsls	r3, r2
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d132      	bne.n	8003e7e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003e18:	4b49      	ldr	r3, [pc, #292]	; (8003f40 <HAL_GPIO_DeInit+0x1f4>)
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	43db      	mvns	r3, r3
 8003e20:	4947      	ldr	r1, [pc, #284]	; (8003f40 <HAL_GPIO_DeInit+0x1f4>)
 8003e22:	4013      	ands	r3, r2
 8003e24:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003e26:	4b46      	ldr	r3, [pc, #280]	; (8003f40 <HAL_GPIO_DeInit+0x1f4>)
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	4944      	ldr	r1, [pc, #272]	; (8003f40 <HAL_GPIO_DeInit+0x1f4>)
 8003e30:	4013      	ands	r3, r2
 8003e32:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003e34:	4b42      	ldr	r3, [pc, #264]	; (8003f40 <HAL_GPIO_DeInit+0x1f4>)
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	43db      	mvns	r3, r3
 8003e3c:	4940      	ldr	r1, [pc, #256]	; (8003f40 <HAL_GPIO_DeInit+0x1f4>)
 8003e3e:	4013      	ands	r3, r2
 8003e40:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003e42:	4b3f      	ldr	r3, [pc, #252]	; (8003f40 <HAL_GPIO_DeInit+0x1f4>)
 8003e44:	68da      	ldr	r2, [r3, #12]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	493d      	ldr	r1, [pc, #244]	; (8003f40 <HAL_GPIO_DeInit+0x1f4>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	220f      	movs	r2, #15
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003e60:	4a2e      	ldr	r2, [pc, #184]	; (8003f1c <HAL_GPIO_DeInit+0x1d0>)
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	089b      	lsrs	r3, r3, #2
 8003e66:	3302      	adds	r3, #2
 8003e68:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	43da      	mvns	r2, r3
 8003e70:	482a      	ldr	r0, [pc, #168]	; (8003f1c <HAL_GPIO_DeInit+0x1d0>)
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	089b      	lsrs	r3, r3, #2
 8003e76:	400a      	ands	r2, r1
 8003e78:	3302      	adds	r3, #2
 8003e7a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	2103      	movs	r1, #3
 8003e88:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	401a      	ands	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	08da      	lsrs	r2, r3, #3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3208      	adds	r2, #8
 8003e9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	220f      	movs	r2, #15
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	08d2      	lsrs	r2, r2, #3
 8003eb4:	4019      	ands	r1, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3208      	adds	r2, #8
 8003eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	2103      	movs	r1, #3
 8003ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	401a      	ands	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	2101      	movs	r1, #1
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	401a      	ands	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	2103      	movs	r1, #3
 8003ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	401a      	ands	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	3301      	adds	r3, #1
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	2b0f      	cmp	r3, #15
 8003f08:	f67f af2e 	bls.w	8003d68 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003f0c:	bf00      	nop
 8003f0e:	bf00      	nop
 8003f10:	371c      	adds	r7, #28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40013800 	.word	0x40013800
 8003f20:	40020000 	.word	0x40020000
 8003f24:	40020400 	.word	0x40020400
 8003f28:	40020800 	.word	0x40020800
 8003f2c:	40020c00 	.word	0x40020c00
 8003f30:	40021000 	.word	0x40021000
 8003f34:	40021400 	.word	0x40021400
 8003f38:	40021800 	.word	0x40021800
 8003f3c:	40021c00 	.word	0x40021c00
 8003f40:	40013c00 	.word	0x40013c00

08003f44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	691a      	ldr	r2, [r3, #16]
 8003f54:	887b      	ldrh	r3, [r7, #2]
 8003f56:	4013      	ands	r3, r2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d002      	beq.n	8003f62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	73fb      	strb	r3, [r7, #15]
 8003f60:	e001      	b.n	8003f66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f62:	2300      	movs	r3, #0
 8003f64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	807b      	strh	r3, [r7, #2]
 8003f80:	4613      	mov	r3, r2
 8003f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f84:	787b      	ldrb	r3, [r7, #1]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f8a:	887a      	ldrh	r2, [r7, #2]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f90:	e003      	b.n	8003f9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f92:	887b      	ldrh	r3, [r7, #2]
 8003f94:	041a      	lsls	r2, r3, #16
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	619a      	str	r2, [r3, #24]
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
	...

08003fa8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	4603      	mov	r3, r0
 8003fb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003fb2:	4b08      	ldr	r3, [pc, #32]	; (8003fd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fb4:	695a      	ldr	r2, [r3, #20]
 8003fb6:	88fb      	ldrh	r3, [r7, #6]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d006      	beq.n	8003fcc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fbe:	4a05      	ldr	r2, [pc, #20]	; (8003fd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fc0:	88fb      	ldrh	r3, [r7, #6]
 8003fc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fc4:	88fb      	ldrh	r3, [r7, #6]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 f806 	bl	8003fd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fcc:	bf00      	nop
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40013c00 	.word	0x40013c00

08003fd8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	4603      	mov	r3, r0
 8003fe0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003fee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ff0:	b08f      	sub	sp, #60	; 0x3c
 8003ff2:	af0a      	add	r7, sp, #40	; 0x28
 8003ff4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e054      	b.n	80040aa <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d106      	bne.n	8004020 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f00b fedc 	bl	800fdd8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2203      	movs	r2, #3
 8004024:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004030:	2b00      	cmp	r3, #0
 8004032:	d102      	bne.n	800403a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f004 fc22 	bl	8008888 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	603b      	str	r3, [r7, #0]
 800404a:	687e      	ldr	r6, [r7, #4]
 800404c:	466d      	mov	r5, sp
 800404e:	f106 0410 	add.w	r4, r6, #16
 8004052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800405a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800405e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004062:	1d33      	adds	r3, r6, #4
 8004064:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004066:	6838      	ldr	r0, [r7, #0]
 8004068:	f004 fb9c 	bl	80087a4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2101      	movs	r1, #1
 8004072:	4618      	mov	r0, r3
 8004074:	f004 fc19 	bl	80088aa <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	603b      	str	r3, [r7, #0]
 800407e:	687e      	ldr	r6, [r7, #4]
 8004080:	466d      	mov	r5, sp
 8004082:	f106 0410 	add.w	r4, r6, #16
 8004086:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004088:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800408a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800408c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800408e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004092:	e885 0003 	stmia.w	r5, {r0, r1}
 8004096:	1d33      	adds	r3, r6, #4
 8004098:	cb0e      	ldmia	r3, {r1, r2, r3}
 800409a:	6838      	ldr	r0, [r7, #0]
 800409c:	f004 fd80 	bl	8008ba0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040b2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80040b2:	b590      	push	{r4, r7, lr}
 80040b4:	b089      	sub	sp, #36	; 0x24
 80040b6:	af04      	add	r7, sp, #16
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	4608      	mov	r0, r1
 80040bc:	4611      	mov	r1, r2
 80040be:	461a      	mov	r2, r3
 80040c0:	4603      	mov	r3, r0
 80040c2:	70fb      	strb	r3, [r7, #3]
 80040c4:	460b      	mov	r3, r1
 80040c6:	70bb      	strb	r3, [r7, #2]
 80040c8:	4613      	mov	r3, r2
 80040ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <HAL_HCD_HC_Init+0x28>
 80040d6:	2302      	movs	r3, #2
 80040d8:	e076      	b.n	80041c8 <HAL_HCD_HC_Init+0x116>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80040e2:	78fb      	ldrb	r3, [r7, #3]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	212c      	movs	r1, #44	; 0x2c
 80040e8:	fb01 f303 	mul.w	r3, r1, r3
 80040ec:	4413      	add	r3, r2
 80040ee:	333d      	adds	r3, #61	; 0x3d
 80040f0:	2200      	movs	r2, #0
 80040f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80040f4:	78fb      	ldrb	r3, [r7, #3]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	212c      	movs	r1, #44	; 0x2c
 80040fa:	fb01 f303 	mul.w	r3, r1, r3
 80040fe:	4413      	add	r3, r2
 8004100:	3338      	adds	r3, #56	; 0x38
 8004102:	787a      	ldrb	r2, [r7, #1]
 8004104:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004106:	78fb      	ldrb	r3, [r7, #3]
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	212c      	movs	r1, #44	; 0x2c
 800410c:	fb01 f303 	mul.w	r3, r1, r3
 8004110:	4413      	add	r3, r2
 8004112:	3340      	adds	r3, #64	; 0x40
 8004114:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004116:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004118:	78fb      	ldrb	r3, [r7, #3]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	212c      	movs	r1, #44	; 0x2c
 800411e:	fb01 f303 	mul.w	r3, r1, r3
 8004122:	4413      	add	r3, r2
 8004124:	3339      	adds	r3, #57	; 0x39
 8004126:	78fa      	ldrb	r2, [r7, #3]
 8004128:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800412a:	78fb      	ldrb	r3, [r7, #3]
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	212c      	movs	r1, #44	; 0x2c
 8004130:	fb01 f303 	mul.w	r3, r1, r3
 8004134:	4413      	add	r3, r2
 8004136:	333f      	adds	r3, #63	; 0x3f
 8004138:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800413c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800413e:	78fb      	ldrb	r3, [r7, #3]
 8004140:	78ba      	ldrb	r2, [r7, #2]
 8004142:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004146:	b2d0      	uxtb	r0, r2
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	212c      	movs	r1, #44	; 0x2c
 800414c:	fb01 f303 	mul.w	r3, r1, r3
 8004150:	4413      	add	r3, r2
 8004152:	333a      	adds	r3, #58	; 0x3a
 8004154:	4602      	mov	r2, r0
 8004156:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004158:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800415c:	2b00      	cmp	r3, #0
 800415e:	da09      	bge.n	8004174 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004160:	78fb      	ldrb	r3, [r7, #3]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	212c      	movs	r1, #44	; 0x2c
 8004166:	fb01 f303 	mul.w	r3, r1, r3
 800416a:	4413      	add	r3, r2
 800416c:	333b      	adds	r3, #59	; 0x3b
 800416e:	2201      	movs	r2, #1
 8004170:	701a      	strb	r2, [r3, #0]
 8004172:	e008      	b.n	8004186 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004174:	78fb      	ldrb	r3, [r7, #3]
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	212c      	movs	r1, #44	; 0x2c
 800417a:	fb01 f303 	mul.w	r3, r1, r3
 800417e:	4413      	add	r3, r2
 8004180:	333b      	adds	r3, #59	; 0x3b
 8004182:	2200      	movs	r2, #0
 8004184:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004186:	78fb      	ldrb	r3, [r7, #3]
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	212c      	movs	r1, #44	; 0x2c
 800418c:	fb01 f303 	mul.w	r3, r1, r3
 8004190:	4413      	add	r3, r2
 8004192:	333c      	adds	r3, #60	; 0x3c
 8004194:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004198:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6818      	ldr	r0, [r3, #0]
 800419e:	787c      	ldrb	r4, [r7, #1]
 80041a0:	78ba      	ldrb	r2, [r7, #2]
 80041a2:	78f9      	ldrb	r1, [r7, #3]
 80041a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80041a6:	9302      	str	r3, [sp, #8]
 80041a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80041ac:	9301      	str	r3, [sp, #4]
 80041ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	4623      	mov	r3, r4
 80041b6:	f004 fe6d 	bl	8008e94 <USB_HC_Init>
 80041ba:	4603      	mov	r3, r0
 80041bc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd90      	pop	{r4, r7, pc}

080041d0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	460b      	mov	r3, r1
 80041da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80041dc:	2300      	movs	r3, #0
 80041de:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d101      	bne.n	80041ee <HAL_HCD_HC_Halt+0x1e>
 80041ea:	2302      	movs	r3, #2
 80041ec:	e00f      	b.n	800420e <HAL_HCD_HC_Halt+0x3e>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	78fa      	ldrb	r2, [r7, #3]
 80041fc:	4611      	mov	r1, r2
 80041fe:	4618      	mov	r0, r3
 8004200:	f005 f8a9 	bl	8009356 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800420c:	7bfb      	ldrb	r3, [r7, #15]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	4608      	mov	r0, r1
 8004222:	4611      	mov	r1, r2
 8004224:	461a      	mov	r2, r3
 8004226:	4603      	mov	r3, r0
 8004228:	70fb      	strb	r3, [r7, #3]
 800422a:	460b      	mov	r3, r1
 800422c:	70bb      	strb	r3, [r7, #2]
 800422e:	4613      	mov	r3, r2
 8004230:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004232:	78fb      	ldrb	r3, [r7, #3]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	212c      	movs	r1, #44	; 0x2c
 8004238:	fb01 f303 	mul.w	r3, r1, r3
 800423c:	4413      	add	r3, r2
 800423e:	333b      	adds	r3, #59	; 0x3b
 8004240:	78ba      	ldrb	r2, [r7, #2]
 8004242:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004244:	78fb      	ldrb	r3, [r7, #3]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	212c      	movs	r1, #44	; 0x2c
 800424a:	fb01 f303 	mul.w	r3, r1, r3
 800424e:	4413      	add	r3, r2
 8004250:	333f      	adds	r3, #63	; 0x3f
 8004252:	787a      	ldrb	r2, [r7, #1]
 8004254:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004256:	7c3b      	ldrb	r3, [r7, #16]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d112      	bne.n	8004282 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800425c:	78fb      	ldrb	r3, [r7, #3]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	212c      	movs	r1, #44	; 0x2c
 8004262:	fb01 f303 	mul.w	r3, r1, r3
 8004266:	4413      	add	r3, r2
 8004268:	3342      	adds	r3, #66	; 0x42
 800426a:	2203      	movs	r2, #3
 800426c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800426e:	78fb      	ldrb	r3, [r7, #3]
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	212c      	movs	r1, #44	; 0x2c
 8004274:	fb01 f303 	mul.w	r3, r1, r3
 8004278:	4413      	add	r3, r2
 800427a:	333d      	adds	r3, #61	; 0x3d
 800427c:	7f3a      	ldrb	r2, [r7, #28]
 800427e:	701a      	strb	r2, [r3, #0]
 8004280:	e008      	b.n	8004294 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004282:	78fb      	ldrb	r3, [r7, #3]
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	212c      	movs	r1, #44	; 0x2c
 8004288:	fb01 f303 	mul.w	r3, r1, r3
 800428c:	4413      	add	r3, r2
 800428e:	3342      	adds	r3, #66	; 0x42
 8004290:	2202      	movs	r2, #2
 8004292:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004294:	787b      	ldrb	r3, [r7, #1]
 8004296:	2b03      	cmp	r3, #3
 8004298:	f200 80c6 	bhi.w	8004428 <HAL_HCD_HC_SubmitRequest+0x210>
 800429c:	a201      	add	r2, pc, #4	; (adr r2, 80042a4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800429e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a2:	bf00      	nop
 80042a4:	080042b5 	.word	0x080042b5
 80042a8:	08004415 	.word	0x08004415
 80042ac:	08004319 	.word	0x08004319
 80042b0:	08004397 	.word	0x08004397
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80042b4:	7c3b      	ldrb	r3, [r7, #16]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	f040 80b8 	bne.w	800442c <HAL_HCD_HC_SubmitRequest+0x214>
 80042bc:	78bb      	ldrb	r3, [r7, #2]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f040 80b4 	bne.w	800442c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80042c4:	8b3b      	ldrh	r3, [r7, #24]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d108      	bne.n	80042dc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80042ca:	78fb      	ldrb	r3, [r7, #3]
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	212c      	movs	r1, #44	; 0x2c
 80042d0:	fb01 f303 	mul.w	r3, r1, r3
 80042d4:	4413      	add	r3, r2
 80042d6:	3355      	adds	r3, #85	; 0x55
 80042d8:	2201      	movs	r2, #1
 80042da:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80042dc:	78fb      	ldrb	r3, [r7, #3]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	212c      	movs	r1, #44	; 0x2c
 80042e2:	fb01 f303 	mul.w	r3, r1, r3
 80042e6:	4413      	add	r3, r2
 80042e8:	3355      	adds	r3, #85	; 0x55
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d109      	bne.n	8004304 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80042f0:	78fb      	ldrb	r3, [r7, #3]
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	212c      	movs	r1, #44	; 0x2c
 80042f6:	fb01 f303 	mul.w	r3, r1, r3
 80042fa:	4413      	add	r3, r2
 80042fc:	3342      	adds	r3, #66	; 0x42
 80042fe:	2200      	movs	r2, #0
 8004300:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004302:	e093      	b.n	800442c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004304:	78fb      	ldrb	r3, [r7, #3]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	212c      	movs	r1, #44	; 0x2c
 800430a:	fb01 f303 	mul.w	r3, r1, r3
 800430e:	4413      	add	r3, r2
 8004310:	3342      	adds	r3, #66	; 0x42
 8004312:	2202      	movs	r2, #2
 8004314:	701a      	strb	r2, [r3, #0]
      break;
 8004316:	e089      	b.n	800442c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004318:	78bb      	ldrb	r3, [r7, #2]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d11d      	bne.n	800435a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800431e:	78fb      	ldrb	r3, [r7, #3]
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	212c      	movs	r1, #44	; 0x2c
 8004324:	fb01 f303 	mul.w	r3, r1, r3
 8004328:	4413      	add	r3, r2
 800432a:	3355      	adds	r3, #85	; 0x55
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d109      	bne.n	8004346 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004332:	78fb      	ldrb	r3, [r7, #3]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	212c      	movs	r1, #44	; 0x2c
 8004338:	fb01 f303 	mul.w	r3, r1, r3
 800433c:	4413      	add	r3, r2
 800433e:	3342      	adds	r3, #66	; 0x42
 8004340:	2200      	movs	r2, #0
 8004342:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004344:	e073      	b.n	800442e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004346:	78fb      	ldrb	r3, [r7, #3]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	212c      	movs	r1, #44	; 0x2c
 800434c:	fb01 f303 	mul.w	r3, r1, r3
 8004350:	4413      	add	r3, r2
 8004352:	3342      	adds	r3, #66	; 0x42
 8004354:	2202      	movs	r2, #2
 8004356:	701a      	strb	r2, [r3, #0]
      break;
 8004358:	e069      	b.n	800442e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800435a:	78fb      	ldrb	r3, [r7, #3]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	212c      	movs	r1, #44	; 0x2c
 8004360:	fb01 f303 	mul.w	r3, r1, r3
 8004364:	4413      	add	r3, r2
 8004366:	3354      	adds	r3, #84	; 0x54
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d109      	bne.n	8004382 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800436e:	78fb      	ldrb	r3, [r7, #3]
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	212c      	movs	r1, #44	; 0x2c
 8004374:	fb01 f303 	mul.w	r3, r1, r3
 8004378:	4413      	add	r3, r2
 800437a:	3342      	adds	r3, #66	; 0x42
 800437c:	2200      	movs	r2, #0
 800437e:	701a      	strb	r2, [r3, #0]
      break;
 8004380:	e055      	b.n	800442e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004382:	78fb      	ldrb	r3, [r7, #3]
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	212c      	movs	r1, #44	; 0x2c
 8004388:	fb01 f303 	mul.w	r3, r1, r3
 800438c:	4413      	add	r3, r2
 800438e:	3342      	adds	r3, #66	; 0x42
 8004390:	2202      	movs	r2, #2
 8004392:	701a      	strb	r2, [r3, #0]
      break;
 8004394:	e04b      	b.n	800442e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004396:	78bb      	ldrb	r3, [r7, #2]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d11d      	bne.n	80043d8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800439c:	78fb      	ldrb	r3, [r7, #3]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	212c      	movs	r1, #44	; 0x2c
 80043a2:	fb01 f303 	mul.w	r3, r1, r3
 80043a6:	4413      	add	r3, r2
 80043a8:	3355      	adds	r3, #85	; 0x55
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d109      	bne.n	80043c4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80043b0:	78fb      	ldrb	r3, [r7, #3]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	212c      	movs	r1, #44	; 0x2c
 80043b6:	fb01 f303 	mul.w	r3, r1, r3
 80043ba:	4413      	add	r3, r2
 80043bc:	3342      	adds	r3, #66	; 0x42
 80043be:	2200      	movs	r2, #0
 80043c0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80043c2:	e034      	b.n	800442e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80043c4:	78fb      	ldrb	r3, [r7, #3]
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	212c      	movs	r1, #44	; 0x2c
 80043ca:	fb01 f303 	mul.w	r3, r1, r3
 80043ce:	4413      	add	r3, r2
 80043d0:	3342      	adds	r3, #66	; 0x42
 80043d2:	2202      	movs	r2, #2
 80043d4:	701a      	strb	r2, [r3, #0]
      break;
 80043d6:	e02a      	b.n	800442e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80043d8:	78fb      	ldrb	r3, [r7, #3]
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	212c      	movs	r1, #44	; 0x2c
 80043de:	fb01 f303 	mul.w	r3, r1, r3
 80043e2:	4413      	add	r3, r2
 80043e4:	3354      	adds	r3, #84	; 0x54
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d109      	bne.n	8004400 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80043ec:	78fb      	ldrb	r3, [r7, #3]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	212c      	movs	r1, #44	; 0x2c
 80043f2:	fb01 f303 	mul.w	r3, r1, r3
 80043f6:	4413      	add	r3, r2
 80043f8:	3342      	adds	r3, #66	; 0x42
 80043fa:	2200      	movs	r2, #0
 80043fc:	701a      	strb	r2, [r3, #0]
      break;
 80043fe:	e016      	b.n	800442e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	212c      	movs	r1, #44	; 0x2c
 8004406:	fb01 f303 	mul.w	r3, r1, r3
 800440a:	4413      	add	r3, r2
 800440c:	3342      	adds	r3, #66	; 0x42
 800440e:	2202      	movs	r2, #2
 8004410:	701a      	strb	r2, [r3, #0]
      break;
 8004412:	e00c      	b.n	800442e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004414:	78fb      	ldrb	r3, [r7, #3]
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	212c      	movs	r1, #44	; 0x2c
 800441a:	fb01 f303 	mul.w	r3, r1, r3
 800441e:	4413      	add	r3, r2
 8004420:	3342      	adds	r3, #66	; 0x42
 8004422:	2200      	movs	r2, #0
 8004424:	701a      	strb	r2, [r3, #0]
      break;
 8004426:	e002      	b.n	800442e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004428:	bf00      	nop
 800442a:	e000      	b.n	800442e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800442c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800442e:	78fb      	ldrb	r3, [r7, #3]
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	212c      	movs	r1, #44	; 0x2c
 8004434:	fb01 f303 	mul.w	r3, r1, r3
 8004438:	4413      	add	r3, r2
 800443a:	3344      	adds	r3, #68	; 0x44
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004440:	78fb      	ldrb	r3, [r7, #3]
 8004442:	8b3a      	ldrh	r2, [r7, #24]
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	202c      	movs	r0, #44	; 0x2c
 8004448:	fb00 f303 	mul.w	r3, r0, r3
 800444c:	440b      	add	r3, r1
 800444e:	334c      	adds	r3, #76	; 0x4c
 8004450:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004452:	78fb      	ldrb	r3, [r7, #3]
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	212c      	movs	r1, #44	; 0x2c
 8004458:	fb01 f303 	mul.w	r3, r1, r3
 800445c:	4413      	add	r3, r2
 800445e:	3360      	adds	r3, #96	; 0x60
 8004460:	2200      	movs	r2, #0
 8004462:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004464:	78fb      	ldrb	r3, [r7, #3]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	212c      	movs	r1, #44	; 0x2c
 800446a:	fb01 f303 	mul.w	r3, r1, r3
 800446e:	4413      	add	r3, r2
 8004470:	3350      	adds	r3, #80	; 0x50
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004476:	78fb      	ldrb	r3, [r7, #3]
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	212c      	movs	r1, #44	; 0x2c
 800447c:	fb01 f303 	mul.w	r3, r1, r3
 8004480:	4413      	add	r3, r2
 8004482:	3339      	adds	r3, #57	; 0x39
 8004484:	78fa      	ldrb	r2, [r7, #3]
 8004486:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004488:	78fb      	ldrb	r3, [r7, #3]
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	212c      	movs	r1, #44	; 0x2c
 800448e:	fb01 f303 	mul.w	r3, r1, r3
 8004492:	4413      	add	r3, r2
 8004494:	3361      	adds	r3, #97	; 0x61
 8004496:	2200      	movs	r2, #0
 8004498:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6818      	ldr	r0, [r3, #0]
 800449e:	78fb      	ldrb	r3, [r7, #3]
 80044a0:	222c      	movs	r2, #44	; 0x2c
 80044a2:	fb02 f303 	mul.w	r3, r2, r3
 80044a6:	3338      	adds	r3, #56	; 0x38
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	18d1      	adds	r1, r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	461a      	mov	r2, r3
 80044b4:	f004 fdfc 	bl	80090b0 <USB_HC_StartXfer>
 80044b8:	4603      	mov	r3, r0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop

080044c4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f004 fb1f 	bl	8008b1e <USB_GetMode>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	f040 80f6 	bne.w	80046d4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f004 fb03 	bl	8008af8 <USB_ReadInterrupts>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 80ec 	beq.w	80046d2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4618      	mov	r0, r3
 8004500:	f004 fafa 	bl	8008af8 <USB_ReadInterrupts>
 8004504:	4603      	mov	r3, r0
 8004506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800450a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800450e:	d104      	bne.n	800451a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004518:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f004 faea 	bl	8008af8 <USB_ReadInterrupts>
 8004524:	4603      	mov	r3, r0
 8004526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800452a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800452e:	d104      	bne.n	800453a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004538:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4618      	mov	r0, r3
 8004540:	f004 fada 	bl	8008af8 <USB_ReadInterrupts>
 8004544:	4603      	mov	r3, r0
 8004546:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800454a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800454e:	d104      	bne.n	800455a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004558:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f004 faca 	bl	8008af8 <USB_ReadInterrupts>
 8004564:	4603      	mov	r3, r0
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b02      	cmp	r3, #2
 800456c:	d103      	bne.n	8004576 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2202      	movs	r2, #2
 8004574:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4618      	mov	r0, r3
 800457c:	f004 fabc 	bl	8008af8 <USB_ReadInterrupts>
 8004580:	4603      	mov	r3, r0
 8004582:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004586:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800458a:	d11c      	bne.n	80045c6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004594:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10f      	bne.n	80045c6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80045a6:	2110      	movs	r1, #16
 80045a8:	6938      	ldr	r0, [r7, #16]
 80045aa:	f004 f9cb 	bl	8008944 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80045ae:	6938      	ldr	r0, [r7, #16]
 80045b0:	f004 f9ec 	bl	800898c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2101      	movs	r1, #1
 80045ba:	4618      	mov	r0, r3
 80045bc:	f004 fba4 	bl	8008d08 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f00b fc87 	bl	800fed4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f004 fa94 	bl	8008af8 <USB_ReadInterrupts>
 80045d0:	4603      	mov	r3, r0
 80045d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045da:	d102      	bne.n	80045e2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f001 fa03 	bl	80059e8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f004 fa86 	bl	8008af8 <USB_ReadInterrupts>
 80045ec:	4603      	mov	r3, r0
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b08      	cmp	r3, #8
 80045f4:	d106      	bne.n	8004604 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f00b fc50 	bl	800fe9c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2208      	movs	r2, #8
 8004602:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f004 fa75 	bl	8008af8 <USB_ReadInterrupts>
 800460e:	4603      	mov	r3, r0
 8004610:	f003 0310 	and.w	r3, r3, #16
 8004614:	2b10      	cmp	r3, #16
 8004616:	d101      	bne.n	800461c <HAL_HCD_IRQHandler+0x158>
 8004618:	2301      	movs	r3, #1
 800461a:	e000      	b.n	800461e <HAL_HCD_IRQHandler+0x15a>
 800461c:	2300      	movs	r3, #0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d012      	beq.n	8004648 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	699a      	ldr	r2, [r3, #24]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0210 	bic.w	r2, r2, #16
 8004630:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f001 f906 	bl	8005844 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699a      	ldr	r2, [r3, #24]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0210 	orr.w	r2, r2, #16
 8004646:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f004 fa53 	bl	8008af8 <USB_ReadInterrupts>
 8004652:	4603      	mov	r3, r0
 8004654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004658:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800465c:	d13a      	bne.n	80046d4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f004 fe66 	bl	8009334 <USB_HC_ReadInterrupt>
 8004668:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800466a:	2300      	movs	r3, #0
 800466c:	617b      	str	r3, [r7, #20]
 800466e:	e025      	b.n	80046bc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	fa22 f303 	lsr.w	r3, r2, r3
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b00      	cmp	r3, #0
 8004682:	d018      	beq.n	80046b6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4413      	add	r3, r2
 800468c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800469a:	d106      	bne.n	80046aa <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	4619      	mov	r1, r3
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f8ab 	bl	80047fe <HCD_HC_IN_IRQHandler>
 80046a8:	e005      	b.n	80046b6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	4619      	mov	r1, r3
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 fcc6 	bl	8005042 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	3301      	adds	r3, #1
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d3d4      	bcc.n	8004670 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046ce:	615a      	str	r2, [r3, #20]
 80046d0:	e000      	b.n	80046d4 <HAL_HCD_IRQHandler+0x210>
      return;
 80046d2:	bf00      	nop
    }
  }
}
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b082      	sub	sp, #8
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_HCD_Start+0x16>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e013      	b.n	8004718 <HAL_HCD_Start+0x3e>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2101      	movs	r1, #1
 80046fe:	4618      	mov	r0, r3
 8004700:	f004 fb66 	bl	8008dd0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4618      	mov	r0, r3
 800470a:	f004 f8ac 	bl	8008866 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800472e:	2b01      	cmp	r3, #1
 8004730:	d101      	bne.n	8004736 <HAL_HCD_Stop+0x16>
 8004732:	2302      	movs	r3, #2
 8004734:	e00d      	b.n	8004752 <HAL_HCD_Stop+0x32>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f004 ff60 	bl	8009608 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b082      	sub	sp, #8
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f004 fb08 	bl	8008d7c <USB_ResetPort>
 800476c:	4603      	mov	r3, r0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	460b      	mov	r3, r1
 8004780:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004782:	78fb      	ldrb	r3, [r7, #3]
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	212c      	movs	r1, #44	; 0x2c
 8004788:	fb01 f303 	mul.w	r3, r1, r3
 800478c:	4413      	add	r3, r2
 800478e:	3360      	adds	r3, #96	; 0x60
 8004790:	781b      	ldrb	r3, [r3, #0]
}
 8004792:	4618      	mov	r0, r3
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	460b      	mov	r3, r1
 80047a8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80047aa:	78fb      	ldrb	r3, [r7, #3]
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	212c      	movs	r1, #44	; 0x2c
 80047b0:	fb01 f303 	mul.w	r3, r1, r3
 80047b4:	4413      	add	r3, r2
 80047b6:	3350      	adds	r3, #80	; 0x50
 80047b8:	681b      	ldr	r3, [r3, #0]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b082      	sub	sp, #8
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f004 fb4c 	bl	8008e70 <USB_GetCurrentFrame>
 80047d8:	4603      	mov	r3, r0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b082      	sub	sp, #8
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f004 fb27 	bl	8008e42 <USB_GetHostSpeed>
 80047f4:	4603      	mov	r3, r0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b086      	sub	sp, #24
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
 8004806:	460b      	mov	r3, r1
 8004808:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004814:	78fb      	ldrb	r3, [r7, #3]
 8004816:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	4413      	add	r3, r2
 8004820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 0304 	and.w	r3, r3, #4
 800482a:	2b04      	cmp	r3, #4
 800482c:	d119      	bne.n	8004862 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	4413      	add	r3, r2
 8004836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800483a:	461a      	mov	r2, r3
 800483c:	2304      	movs	r3, #4
 800483e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	4413      	add	r3, r2
 8004848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	0151      	lsls	r1, r2, #5
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	440a      	add	r2, r1
 8004856:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800485a:	f043 0302 	orr.w	r3, r3, #2
 800485e:	60d3      	str	r3, [r2, #12]
 8004860:	e101      	b.n	8004a66 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	4413      	add	r3, r2
 800486a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004878:	d12b      	bne.n	80048d2 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	015a      	lsls	r2, r3, #5
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	4413      	add	r3, r2
 8004882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004886:	461a      	mov	r2, r3
 8004888:	f44f 7380 	mov.w	r3, #256	; 0x100
 800488c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	212c      	movs	r1, #44	; 0x2c
 8004894:	fb01 f303 	mul.w	r3, r1, r3
 8004898:	4413      	add	r3, r2
 800489a:	3361      	adds	r3, #97	; 0x61
 800489c:	2207      	movs	r2, #7
 800489e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	015a      	lsls	r2, r3, #5
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	0151      	lsls	r1, r2, #5
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	440a      	add	r2, r1
 80048b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048ba:	f043 0302 	orr.w	r3, r3, #2
 80048be:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	4611      	mov	r1, r2
 80048ca:	4618      	mov	r0, r3
 80048cc:	f004 fd43 	bl	8009356 <USB_HC_Halt>
 80048d0:	e0c9      	b.n	8004a66 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f003 0320 	and.w	r3, r3, #32
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	d109      	bne.n	80048fc <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f4:	461a      	mov	r2, r3
 80048f6:	2320      	movs	r3, #32
 80048f8:	6093      	str	r3, [r2, #8]
 80048fa:	e0b4      	b.n	8004a66 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	4413      	add	r3, r2
 8004904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b08      	cmp	r3, #8
 8004910:	d133      	bne.n	800497a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	4413      	add	r3, r2
 800491a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	0151      	lsls	r1, r2, #5
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	440a      	add	r2, r1
 8004928:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800492c:	f043 0302 	orr.w	r3, r3, #2
 8004930:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	212c      	movs	r1, #44	; 0x2c
 8004938:	fb01 f303 	mul.w	r3, r1, r3
 800493c:	4413      	add	r3, r2
 800493e:	3361      	adds	r3, #97	; 0x61
 8004940:	2205      	movs	r2, #5
 8004942:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	4413      	add	r3, r2
 800494c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004950:	461a      	mov	r2, r3
 8004952:	2310      	movs	r3, #16
 8004954:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	4413      	add	r3, r2
 800495e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004962:	461a      	mov	r2, r3
 8004964:	2308      	movs	r3, #8
 8004966:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	4611      	mov	r1, r2
 8004972:	4618      	mov	r0, r3
 8004974:	f004 fcef 	bl	8009356 <USB_HC_Halt>
 8004978:	e075      	b.n	8004a66 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	4413      	add	r3, r2
 8004982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800498c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004990:	d134      	bne.n	80049fc <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	4413      	add	r3, r2
 800499a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	0151      	lsls	r1, r2, #5
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	440a      	add	r2, r1
 80049a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049ac:	f043 0302 	orr.w	r3, r3, #2
 80049b0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	212c      	movs	r1, #44	; 0x2c
 80049b8:	fb01 f303 	mul.w	r3, r1, r3
 80049bc:	4413      	add	r3, r2
 80049be:	3361      	adds	r3, #97	; 0x61
 80049c0:	2208      	movs	r2, #8
 80049c2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049d0:	461a      	mov	r2, r3
 80049d2:	2310      	movs	r3, #16
 80049d4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e2:	461a      	mov	r2, r3
 80049e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049e8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	b2d2      	uxtb	r2, r2
 80049f2:	4611      	mov	r1, r2
 80049f4:	4618      	mov	r0, r3
 80049f6:	f004 fcae 	bl	8009356 <USB_HC_Halt>
 80049fa:	e034      	b.n	8004a66 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a0e:	2b80      	cmp	r3, #128	; 0x80
 8004a10:	d129      	bne.n	8004a66 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	0151      	lsls	r1, r2, #5
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	440a      	add	r2, r1
 8004a28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a2c:	f043 0302 	orr.w	r3, r3, #2
 8004a30:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	212c      	movs	r1, #44	; 0x2c
 8004a38:	fb01 f303 	mul.w	r3, r1, r3
 8004a3c:	4413      	add	r3, r2
 8004a3e:	3361      	adds	r3, #97	; 0x61
 8004a40:	2206      	movs	r2, #6
 8004a42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	b2d2      	uxtb	r2, r2
 8004a4c:	4611      	mov	r1, r2
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f004 fc81 	bl	8009356 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a60:	461a      	mov	r2, r3
 8004a62:	2380      	movs	r3, #128	; 0x80
 8004a64:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a7c:	d122      	bne.n	8004ac4 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	015a      	lsls	r2, r3, #5
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	0151      	lsls	r1, r2, #5
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	440a      	add	r2, r1
 8004a94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a98:	f043 0302 	orr.w	r3, r3, #2
 8004a9c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	b2d2      	uxtb	r2, r2
 8004aa6:	4611      	mov	r1, r2
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f004 fc54 	bl	8009356 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aba:	461a      	mov	r2, r3
 8004abc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ac0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004ac2:	e2ba      	b.n	800503a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	f040 811b 	bne.w	8004d12 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d019      	beq.n	8004b18 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	212c      	movs	r1, #44	; 0x2c
 8004aea:	fb01 f303 	mul.w	r3, r1, r3
 8004aee:	4413      	add	r3, r2
 8004af0:	3348      	adds	r3, #72	; 0x48
 8004af2:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	0159      	lsls	r1, r3, #5
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	440b      	add	r3, r1
 8004afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004b06:	1ad2      	subs	r2, r2, r3
 8004b08:	6879      	ldr	r1, [r7, #4]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	202c      	movs	r0, #44	; 0x2c
 8004b0e:	fb00 f303 	mul.w	r3, r0, r3
 8004b12:	440b      	add	r3, r1
 8004b14:	3350      	adds	r3, #80	; 0x50
 8004b16:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	212c      	movs	r1, #44	; 0x2c
 8004b1e:	fb01 f303 	mul.w	r3, r1, r3
 8004b22:	4413      	add	r3, r2
 8004b24:	3361      	adds	r3, #97	; 0x61
 8004b26:	2201      	movs	r2, #1
 8004b28:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	212c      	movs	r1, #44	; 0x2c
 8004b30:	fb01 f303 	mul.w	r3, r1, r3
 8004b34:	4413      	add	r3, r2
 8004b36:	335c      	adds	r3, #92	; 0x5c
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b48:	461a      	mov	r2, r3
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	212c      	movs	r1, #44	; 0x2c
 8004b54:	fb01 f303 	mul.w	r3, r1, r3
 8004b58:	4413      	add	r3, r2
 8004b5a:	333f      	adds	r3, #63	; 0x3f
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d009      	beq.n	8004b76 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	212c      	movs	r1, #44	; 0x2c
 8004b68:	fb01 f303 	mul.w	r3, r1, r3
 8004b6c:	4413      	add	r3, r2
 8004b6e:	333f      	adds	r3, #63	; 0x3f
 8004b70:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d121      	bne.n	8004bba <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	0151      	lsls	r1, r2, #5
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	440a      	add	r2, r1
 8004b8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b90:	f043 0302 	orr.w	r3, r3, #2
 8004b94:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f004 fbd8 	bl	8009356 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	2310      	movs	r3, #16
 8004bb6:	6093      	str	r3, [r2, #8]
 8004bb8:	e066      	b.n	8004c88 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	212c      	movs	r1, #44	; 0x2c
 8004bc0:	fb01 f303 	mul.w	r3, r1, r3
 8004bc4:	4413      	add	r3, r2
 8004bc6:	333f      	adds	r3, #63	; 0x3f
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	2b03      	cmp	r3, #3
 8004bcc:	d127      	bne.n	8004c1e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	015a      	lsls	r2, r3, #5
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	0151      	lsls	r1, r2, #5
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	440a      	add	r2, r1
 8004be4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004be8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bec:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	212c      	movs	r1, #44	; 0x2c
 8004bf4:	fb01 f303 	mul.w	r3, r1, r3
 8004bf8:	4413      	add	r3, r2
 8004bfa:	3360      	adds	r3, #96	; 0x60
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	b2d9      	uxtb	r1, r3
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	202c      	movs	r0, #44	; 0x2c
 8004c0a:	fb00 f303 	mul.w	r3, r0, r3
 8004c0e:	4413      	add	r3, r2
 8004c10:	3360      	adds	r3, #96	; 0x60
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	461a      	mov	r2, r3
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f00b f96a 	bl	800fef0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004c1c:	e034      	b.n	8004c88 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	212c      	movs	r1, #44	; 0x2c
 8004c24:	fb01 f303 	mul.w	r3, r1, r3
 8004c28:	4413      	add	r3, r2
 8004c2a:	333f      	adds	r3, #63	; 0x3f
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d12a      	bne.n	8004c88 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	212c      	movs	r1, #44	; 0x2c
 8004c38:	fb01 f303 	mul.w	r3, r1, r3
 8004c3c:	4413      	add	r3, r2
 8004c3e:	3360      	adds	r3, #96	; 0x60
 8004c40:	2201      	movs	r2, #1
 8004c42:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	212c      	movs	r1, #44	; 0x2c
 8004c4a:	fb01 f303 	mul.w	r3, r1, r3
 8004c4e:	4413      	add	r3, r2
 8004c50:	3354      	adds	r3, #84	; 0x54
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	f083 0301 	eor.w	r3, r3, #1
 8004c58:	b2d8      	uxtb	r0, r3
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	212c      	movs	r1, #44	; 0x2c
 8004c60:	fb01 f303 	mul.w	r3, r1, r3
 8004c64:	4413      	add	r3, r2
 8004c66:	3354      	adds	r3, #84	; 0x54
 8004c68:	4602      	mov	r2, r0
 8004c6a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	b2d9      	uxtb	r1, r3
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	202c      	movs	r0, #44	; 0x2c
 8004c76:	fb00 f303 	mul.w	r3, r0, r3
 8004c7a:	4413      	add	r3, r2
 8004c7c:	3360      	adds	r3, #96	; 0x60
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	461a      	mov	r2, r3
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f00b f934 	bl	800fef0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d12b      	bne.n	8004ce8 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	212c      	movs	r1, #44	; 0x2c
 8004c96:	fb01 f303 	mul.w	r3, r1, r3
 8004c9a:	4413      	add	r3, r2
 8004c9c:	3348      	adds	r3, #72	; 0x48
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	202c      	movs	r0, #44	; 0x2c
 8004ca6:	fb00 f202 	mul.w	r2, r0, r2
 8004caa:	440a      	add	r2, r1
 8004cac:	3240      	adds	r2, #64	; 0x40
 8004cae:	8812      	ldrh	r2, [r2, #0]
 8004cb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 81be 	beq.w	800503a <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	212c      	movs	r1, #44	; 0x2c
 8004cc4:	fb01 f303 	mul.w	r3, r1, r3
 8004cc8:	4413      	add	r3, r2
 8004cca:	3354      	adds	r3, #84	; 0x54
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	f083 0301 	eor.w	r3, r3, #1
 8004cd2:	b2d8      	uxtb	r0, r3
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	212c      	movs	r1, #44	; 0x2c
 8004cda:	fb01 f303 	mul.w	r3, r1, r3
 8004cde:	4413      	add	r3, r2
 8004ce0:	3354      	adds	r3, #84	; 0x54
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	701a      	strb	r2, [r3, #0]
}
 8004ce6:	e1a8      	b.n	800503a <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	212c      	movs	r1, #44	; 0x2c
 8004cee:	fb01 f303 	mul.w	r3, r1, r3
 8004cf2:	4413      	add	r3, r2
 8004cf4:	3354      	adds	r3, #84	; 0x54
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	f083 0301 	eor.w	r3, r3, #1
 8004cfc:	b2d8      	uxtb	r0, r3
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	212c      	movs	r1, #44	; 0x2c
 8004d04:	fb01 f303 	mul.w	r3, r1, r3
 8004d08:	4413      	add	r3, r2
 8004d0a:	3354      	adds	r3, #84	; 0x54
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	701a      	strb	r2, [r3, #0]
}
 8004d10:	e193      	b.n	800503a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	015a      	lsls	r2, r3, #5
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	4413      	add	r3, r2
 8004d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	f040 8106 	bne.w	8004f36 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	0151      	lsls	r1, r2, #5
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	440a      	add	r2, r1
 8004d40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d44:	f023 0302 	bic.w	r3, r3, #2
 8004d48:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	212c      	movs	r1, #44	; 0x2c
 8004d50:	fb01 f303 	mul.w	r3, r1, r3
 8004d54:	4413      	add	r3, r2
 8004d56:	3361      	adds	r3, #97	; 0x61
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d109      	bne.n	8004d72 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	212c      	movs	r1, #44	; 0x2c
 8004d64:	fb01 f303 	mul.w	r3, r1, r3
 8004d68:	4413      	add	r3, r2
 8004d6a:	3360      	adds	r3, #96	; 0x60
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	701a      	strb	r2, [r3, #0]
 8004d70:	e0c9      	b.n	8004f06 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	212c      	movs	r1, #44	; 0x2c
 8004d78:	fb01 f303 	mul.w	r3, r1, r3
 8004d7c:	4413      	add	r3, r2
 8004d7e:	3361      	adds	r3, #97	; 0x61
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	2b05      	cmp	r3, #5
 8004d84:	d109      	bne.n	8004d9a <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	212c      	movs	r1, #44	; 0x2c
 8004d8c:	fb01 f303 	mul.w	r3, r1, r3
 8004d90:	4413      	add	r3, r2
 8004d92:	3360      	adds	r3, #96	; 0x60
 8004d94:	2205      	movs	r2, #5
 8004d96:	701a      	strb	r2, [r3, #0]
 8004d98:	e0b5      	b.n	8004f06 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	212c      	movs	r1, #44	; 0x2c
 8004da0:	fb01 f303 	mul.w	r3, r1, r3
 8004da4:	4413      	add	r3, r2
 8004da6:	3361      	adds	r3, #97	; 0x61
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	2b06      	cmp	r3, #6
 8004dac:	d009      	beq.n	8004dc2 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	212c      	movs	r1, #44	; 0x2c
 8004db4:	fb01 f303 	mul.w	r3, r1, r3
 8004db8:	4413      	add	r3, r2
 8004dba:	3361      	adds	r3, #97	; 0x61
 8004dbc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004dbe:	2b08      	cmp	r3, #8
 8004dc0:	d150      	bne.n	8004e64 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	212c      	movs	r1, #44	; 0x2c
 8004dc8:	fb01 f303 	mul.w	r3, r1, r3
 8004dcc:	4413      	add	r3, r2
 8004dce:	335c      	adds	r3, #92	; 0x5c
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	1c5a      	adds	r2, r3, #1
 8004dd4:	6879      	ldr	r1, [r7, #4]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	202c      	movs	r0, #44	; 0x2c
 8004dda:	fb00 f303 	mul.w	r3, r0, r3
 8004dde:	440b      	add	r3, r1
 8004de0:	335c      	adds	r3, #92	; 0x5c
 8004de2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	212c      	movs	r1, #44	; 0x2c
 8004dea:	fb01 f303 	mul.w	r3, r1, r3
 8004dee:	4413      	add	r3, r2
 8004df0:	335c      	adds	r3, #92	; 0x5c
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d912      	bls.n	8004e1e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	212c      	movs	r1, #44	; 0x2c
 8004dfe:	fb01 f303 	mul.w	r3, r1, r3
 8004e02:	4413      	add	r3, r2
 8004e04:	335c      	adds	r3, #92	; 0x5c
 8004e06:	2200      	movs	r2, #0
 8004e08:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	212c      	movs	r1, #44	; 0x2c
 8004e10:	fb01 f303 	mul.w	r3, r1, r3
 8004e14:	4413      	add	r3, r2
 8004e16:	3360      	adds	r3, #96	; 0x60
 8004e18:	2204      	movs	r2, #4
 8004e1a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004e1c:	e073      	b.n	8004f06 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	212c      	movs	r1, #44	; 0x2c
 8004e24:	fb01 f303 	mul.w	r3, r1, r3
 8004e28:	4413      	add	r3, r2
 8004e2a:	3360      	adds	r3, #96	; 0x60
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e46:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e4e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004e62:	e050      	b.n	8004f06 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	212c      	movs	r1, #44	; 0x2c
 8004e6a:	fb01 f303 	mul.w	r3, r1, r3
 8004e6e:	4413      	add	r3, r2
 8004e70:	3361      	adds	r3, #97	; 0x61
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	d122      	bne.n	8004ebe <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	212c      	movs	r1, #44	; 0x2c
 8004e7e:	fb01 f303 	mul.w	r3, r1, r3
 8004e82:	4413      	add	r3, r2
 8004e84:	3360      	adds	r3, #96	; 0x60
 8004e86:	2202      	movs	r2, #2
 8004e88:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ea0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ea8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	6013      	str	r3, [r2, #0]
 8004ebc:	e023      	b.n	8004f06 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	212c      	movs	r1, #44	; 0x2c
 8004ec4:	fb01 f303 	mul.w	r3, r1, r3
 8004ec8:	4413      	add	r3, r2
 8004eca:	3361      	adds	r3, #97	; 0x61
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	2b07      	cmp	r3, #7
 8004ed0:	d119      	bne.n	8004f06 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	212c      	movs	r1, #44	; 0x2c
 8004ed8:	fb01 f303 	mul.w	r3, r1, r3
 8004edc:	4413      	add	r3, r2
 8004ede:	335c      	adds	r3, #92	; 0x5c
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	1c5a      	adds	r2, r3, #1
 8004ee4:	6879      	ldr	r1, [r7, #4]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	202c      	movs	r0, #44	; 0x2c
 8004eea:	fb00 f303 	mul.w	r3, r0, r3
 8004eee:	440b      	add	r3, r1
 8004ef0:	335c      	adds	r3, #92	; 0x5c
 8004ef2:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	212c      	movs	r1, #44	; 0x2c
 8004efa:	fb01 f303 	mul.w	r3, r1, r3
 8004efe:	4413      	add	r3, r2
 8004f00:	3360      	adds	r3, #96	; 0x60
 8004f02:	2204      	movs	r2, #4
 8004f04:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f12:	461a      	mov	r2, r3
 8004f14:	2302      	movs	r3, #2
 8004f16:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	b2d9      	uxtb	r1, r3
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	202c      	movs	r0, #44	; 0x2c
 8004f22:	fb00 f303 	mul.w	r3, r0, r3
 8004f26:	4413      	add	r3, r2
 8004f28:	3360      	adds	r3, #96	; 0x60
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f00a ffde 	bl	800fef0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004f34:	e081      	b.n	800503a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f003 0310 	and.w	r3, r3, #16
 8004f48:	2b10      	cmp	r3, #16
 8004f4a:	d176      	bne.n	800503a <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	212c      	movs	r1, #44	; 0x2c
 8004f52:	fb01 f303 	mul.w	r3, r1, r3
 8004f56:	4413      	add	r3, r2
 8004f58:	333f      	adds	r3, #63	; 0x3f
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	2b03      	cmp	r3, #3
 8004f5e:	d121      	bne.n	8004fa4 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	212c      	movs	r1, #44	; 0x2c
 8004f66:	fb01 f303 	mul.w	r3, r1, r3
 8004f6a:	4413      	add	r3, r2
 8004f6c:	335c      	adds	r3, #92	; 0x5c
 8004f6e:	2200      	movs	r2, #0
 8004f70:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	0151      	lsls	r1, r2, #5
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	440a      	add	r2, r1
 8004f88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f8c:	f043 0302 	orr.w	r3, r3, #2
 8004f90:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	4611      	mov	r1, r2
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f004 f9da 	bl	8009356 <USB_HC_Halt>
 8004fa2:	e041      	b.n	8005028 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	212c      	movs	r1, #44	; 0x2c
 8004faa:	fb01 f303 	mul.w	r3, r1, r3
 8004fae:	4413      	add	r3, r2
 8004fb0:	333f      	adds	r3, #63	; 0x3f
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d009      	beq.n	8004fcc <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	212c      	movs	r1, #44	; 0x2c
 8004fbe:	fb01 f303 	mul.w	r3, r1, r3
 8004fc2:	4413      	add	r3, r2
 8004fc4:	333f      	adds	r3, #63	; 0x3f
 8004fc6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d12d      	bne.n	8005028 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	212c      	movs	r1, #44	; 0x2c
 8004fd2:	fb01 f303 	mul.w	r3, r1, r3
 8004fd6:	4413      	add	r3, r2
 8004fd8:	335c      	adds	r3, #92	; 0x5c
 8004fda:	2200      	movs	r2, #0
 8004fdc:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d120      	bne.n	8005028 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	212c      	movs	r1, #44	; 0x2c
 8004fec:	fb01 f303 	mul.w	r3, r1, r3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	3361      	adds	r3, #97	; 0x61
 8004ff4:	2203      	movs	r2, #3
 8004ff6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	015a      	lsls	r2, r3, #5
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	0151      	lsls	r1, r2, #5
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	440a      	add	r2, r1
 800500e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005012:	f043 0302 	orr.w	r3, r3, #2
 8005016:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	4611      	mov	r1, r2
 8005022:	4618      	mov	r0, r3
 8005024:	f004 f997 	bl	8009356 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	4413      	add	r3, r2
 8005030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005034:	461a      	mov	r2, r3
 8005036:	2310      	movs	r3, #16
 8005038:	6093      	str	r3, [r2, #8]
}
 800503a:	bf00      	nop
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b088      	sub	sp, #32
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
 800504a:	460b      	mov	r3, r1
 800504c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8005058:	78fb      	ldrb	r3, [r7, #3]
 800505a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	4413      	add	r3, r2
 8005064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f003 0304 	and.w	r3, r3, #4
 800506e:	2b04      	cmp	r3, #4
 8005070:	d119      	bne.n	80050a6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	4413      	add	r3, r2
 800507a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800507e:	461a      	mov	r2, r3
 8005080:	2304      	movs	r3, #4
 8005082:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	4413      	add	r3, r2
 800508c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	0151      	lsls	r1, r2, #5
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	440a      	add	r2, r1
 800509a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800509e:	f043 0302 	orr.w	r3, r3, #2
 80050a2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80050a4:	e3ca      	b.n	800583c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 0320 	and.w	r3, r3, #32
 80050b8:	2b20      	cmp	r3, #32
 80050ba:	d13e      	bne.n	800513a <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c8:	461a      	mov	r2, r3
 80050ca:	2320      	movs	r3, #32
 80050cc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	212c      	movs	r1, #44	; 0x2c
 80050d4:	fb01 f303 	mul.w	r3, r1, r3
 80050d8:	4413      	add	r3, r2
 80050da:	333d      	adds	r3, #61	; 0x3d
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	f040 83ac 	bne.w	800583c <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	212c      	movs	r1, #44	; 0x2c
 80050ea:	fb01 f303 	mul.w	r3, r1, r3
 80050ee:	4413      	add	r3, r2
 80050f0:	333d      	adds	r3, #61	; 0x3d
 80050f2:	2200      	movs	r2, #0
 80050f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	212c      	movs	r1, #44	; 0x2c
 80050fc:	fb01 f303 	mul.w	r3, r1, r3
 8005100:	4413      	add	r3, r2
 8005102:	3360      	adds	r3, #96	; 0x60
 8005104:	2202      	movs	r2, #2
 8005106:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	4413      	add	r3, r2
 8005110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	0151      	lsls	r1, r2, #5
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	440a      	add	r2, r1
 800511e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005122:	f043 0302 	orr.w	r3, r3, #2
 8005126:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	4611      	mov	r1, r2
 8005132:	4618      	mov	r0, r3
 8005134:	f004 f90f 	bl	8009356 <USB_HC_Halt>
}
 8005138:	e380      	b.n	800583c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	4413      	add	r3, r2
 8005142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800514c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005150:	d122      	bne.n	8005198 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	4413      	add	r3, r2
 800515a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	0151      	lsls	r1, r2, #5
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	440a      	add	r2, r1
 8005168:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800516c:	f043 0302 	orr.w	r3, r3, #2
 8005170:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	b2d2      	uxtb	r2, r2
 800517a:	4611      	mov	r1, r2
 800517c:	4618      	mov	r0, r3
 800517e:	f004 f8ea 	bl	8009356 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	4413      	add	r3, r2
 800518a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518e:	461a      	mov	r2, r3
 8005190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005194:	6093      	str	r3, [r2, #8]
}
 8005196:	e351      	b.n	800583c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d150      	bne.n	8005250 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	212c      	movs	r1, #44	; 0x2c
 80051b4:	fb01 f303 	mul.w	r3, r1, r3
 80051b8:	4413      	add	r3, r2
 80051ba:	335c      	adds	r3, #92	; 0x5c
 80051bc:	2200      	movs	r2, #0
 80051be:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d2:	2b40      	cmp	r3, #64	; 0x40
 80051d4:	d111      	bne.n	80051fa <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	212c      	movs	r1, #44	; 0x2c
 80051dc:	fb01 f303 	mul.w	r3, r1, r3
 80051e0:	4413      	add	r3, r2
 80051e2:	333d      	adds	r3, #61	; 0x3d
 80051e4:	2201      	movs	r2, #1
 80051e6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f4:	461a      	mov	r2, r3
 80051f6:	2340      	movs	r3, #64	; 0x40
 80051f8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	4413      	add	r3, r2
 8005202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	0151      	lsls	r1, r2, #5
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	440a      	add	r2, r1
 8005210:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005214:	f043 0302 	orr.w	r3, r3, #2
 8005218:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	b2d2      	uxtb	r2, r2
 8005222:	4611      	mov	r1, r2
 8005224:	4618      	mov	r0, r3
 8005226:	f004 f896 	bl	8009356 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	4413      	add	r3, r2
 8005232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005236:	461a      	mov	r2, r3
 8005238:	2301      	movs	r3, #1
 800523a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	212c      	movs	r1, #44	; 0x2c
 8005242:	fb01 f303 	mul.w	r3, r1, r3
 8005246:	4413      	add	r3, r2
 8005248:	3361      	adds	r3, #97	; 0x61
 800524a:	2201      	movs	r2, #1
 800524c:	701a      	strb	r2, [r3, #0]
}
 800524e:	e2f5      	b.n	800583c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	4413      	add	r3, r2
 8005258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005262:	2b40      	cmp	r3, #64	; 0x40
 8005264:	d13c      	bne.n	80052e0 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	212c      	movs	r1, #44	; 0x2c
 800526c:	fb01 f303 	mul.w	r3, r1, r3
 8005270:	4413      	add	r3, r2
 8005272:	3361      	adds	r3, #97	; 0x61
 8005274:	2204      	movs	r2, #4
 8005276:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	212c      	movs	r1, #44	; 0x2c
 800527e:	fb01 f303 	mul.w	r3, r1, r3
 8005282:	4413      	add	r3, r2
 8005284:	333d      	adds	r3, #61	; 0x3d
 8005286:	2201      	movs	r2, #1
 8005288:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	212c      	movs	r1, #44	; 0x2c
 8005290:	fb01 f303 	mul.w	r3, r1, r3
 8005294:	4413      	add	r3, r2
 8005296:	335c      	adds	r3, #92	; 0x5c
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	0151      	lsls	r1, r2, #5
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	440a      	add	r2, r1
 80052b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052b6:	f043 0302 	orr.w	r3, r3, #2
 80052ba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	b2d2      	uxtb	r2, r2
 80052c4:	4611      	mov	r1, r2
 80052c6:	4618      	mov	r0, r3
 80052c8:	f004 f845 	bl	8009356 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d8:	461a      	mov	r2, r3
 80052da:	2340      	movs	r3, #64	; 0x40
 80052dc:	6093      	str	r3, [r2, #8]
}
 80052de:	e2ad      	b.n	800583c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f003 0308 	and.w	r3, r3, #8
 80052f2:	2b08      	cmp	r3, #8
 80052f4:	d12a      	bne.n	800534c <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005302:	461a      	mov	r2, r3
 8005304:	2308      	movs	r3, #8
 8005306:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	4413      	add	r3, r2
 8005310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	0151      	lsls	r1, r2, #5
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	440a      	add	r2, r1
 800531e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005322:	f043 0302 	orr.w	r3, r3, #2
 8005326:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	b2d2      	uxtb	r2, r2
 8005330:	4611      	mov	r1, r2
 8005332:	4618      	mov	r0, r3
 8005334:	f004 f80f 	bl	8009356 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	212c      	movs	r1, #44	; 0x2c
 800533e:	fb01 f303 	mul.w	r3, r1, r3
 8005342:	4413      	add	r3, r2
 8005344:	3361      	adds	r3, #97	; 0x61
 8005346:	2205      	movs	r2, #5
 8005348:	701a      	strb	r2, [r3, #0]
}
 800534a:	e277      	b.n	800583c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	4413      	add	r3, r2
 8005354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f003 0310 	and.w	r3, r3, #16
 800535e:	2b10      	cmp	r3, #16
 8005360:	d150      	bne.n	8005404 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	212c      	movs	r1, #44	; 0x2c
 8005368:	fb01 f303 	mul.w	r3, r1, r3
 800536c:	4413      	add	r3, r2
 800536e:	335c      	adds	r3, #92	; 0x5c
 8005370:	2200      	movs	r2, #0
 8005372:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	212c      	movs	r1, #44	; 0x2c
 800537a:	fb01 f303 	mul.w	r3, r1, r3
 800537e:	4413      	add	r3, r2
 8005380:	3361      	adds	r3, #97	; 0x61
 8005382:	2203      	movs	r2, #3
 8005384:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	212c      	movs	r1, #44	; 0x2c
 800538c:	fb01 f303 	mul.w	r3, r1, r3
 8005390:	4413      	add	r3, r2
 8005392:	333d      	adds	r3, #61	; 0x3d
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d112      	bne.n	80053c0 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	212c      	movs	r1, #44	; 0x2c
 80053a0:	fb01 f303 	mul.w	r3, r1, r3
 80053a4:	4413      	add	r3, r2
 80053a6:	333c      	adds	r3, #60	; 0x3c
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d108      	bne.n	80053c0 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	212c      	movs	r1, #44	; 0x2c
 80053b4:	fb01 f303 	mul.w	r3, r1, r3
 80053b8:	4413      	add	r3, r2
 80053ba:	333d      	adds	r3, #61	; 0x3d
 80053bc:	2201      	movs	r2, #1
 80053be:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	0151      	lsls	r1, r2, #5
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	440a      	add	r2, r1
 80053d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053da:	f043 0302 	orr.w	r3, r3, #2
 80053de:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	b2d2      	uxtb	r2, r2
 80053e8:	4611      	mov	r1, r2
 80053ea:	4618      	mov	r0, r3
 80053ec:	f003 ffb3 	bl	8009356 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053fc:	461a      	mov	r2, r3
 80053fe:	2310      	movs	r3, #16
 8005400:	6093      	str	r3, [r2, #8]
}
 8005402:	e21b      	b.n	800583c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	4413      	add	r3, r2
 800540c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005416:	2b80      	cmp	r3, #128	; 0x80
 8005418:	d174      	bne.n	8005504 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d121      	bne.n	8005466 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	212c      	movs	r1, #44	; 0x2c
 8005428:	fb01 f303 	mul.w	r3, r1, r3
 800542c:	4413      	add	r3, r2
 800542e:	3361      	adds	r3, #97	; 0x61
 8005430:	2206      	movs	r2, #6
 8005432:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	4413      	add	r3, r2
 800543c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	0151      	lsls	r1, r2, #5
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	440a      	add	r2, r1
 800544a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800544e:	f043 0302 	orr.w	r3, r3, #2
 8005452:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	b2d2      	uxtb	r2, r2
 800545c:	4611      	mov	r1, r2
 800545e:	4618      	mov	r0, r3
 8005460:	f003 ff79 	bl	8009356 <USB_HC_Halt>
 8005464:	e044      	b.n	80054f0 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	212c      	movs	r1, #44	; 0x2c
 800546c:	fb01 f303 	mul.w	r3, r1, r3
 8005470:	4413      	add	r3, r2
 8005472:	335c      	adds	r3, #92	; 0x5c
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	6879      	ldr	r1, [r7, #4]
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	202c      	movs	r0, #44	; 0x2c
 800547e:	fb00 f303 	mul.w	r3, r0, r3
 8005482:	440b      	add	r3, r1
 8005484:	335c      	adds	r3, #92	; 0x5c
 8005486:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	212c      	movs	r1, #44	; 0x2c
 800548e:	fb01 f303 	mul.w	r3, r1, r3
 8005492:	4413      	add	r3, r2
 8005494:	335c      	adds	r3, #92	; 0x5c
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b02      	cmp	r3, #2
 800549a:	d920      	bls.n	80054de <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	212c      	movs	r1, #44	; 0x2c
 80054a2:	fb01 f303 	mul.w	r3, r1, r3
 80054a6:	4413      	add	r3, r2
 80054a8:	335c      	adds	r3, #92	; 0x5c
 80054aa:	2200      	movs	r2, #0
 80054ac:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	212c      	movs	r1, #44	; 0x2c
 80054b4:	fb01 f303 	mul.w	r3, r1, r3
 80054b8:	4413      	add	r3, r2
 80054ba:	3360      	adds	r3, #96	; 0x60
 80054bc:	2204      	movs	r2, #4
 80054be:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	b2d9      	uxtb	r1, r3
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	202c      	movs	r0, #44	; 0x2c
 80054ca:	fb00 f303 	mul.w	r3, r0, r3
 80054ce:	4413      	add	r3, r2
 80054d0:	3360      	adds	r3, #96	; 0x60
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	461a      	mov	r2, r3
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f00a fd0a 	bl	800fef0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80054dc:	e008      	b.n	80054f0 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	212c      	movs	r1, #44	; 0x2c
 80054e4:	fb01 f303 	mul.w	r3, r1, r3
 80054e8:	4413      	add	r3, r2
 80054ea:	3360      	adds	r3, #96	; 0x60
 80054ec:	2202      	movs	r2, #2
 80054ee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054fc:	461a      	mov	r2, r3
 80054fe:	2380      	movs	r3, #128	; 0x80
 8005500:	6093      	str	r3, [r2, #8]
}
 8005502:	e19b      	b.n	800583c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	4413      	add	r3, r2
 800550c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800551a:	d134      	bne.n	8005586 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	4413      	add	r3, r2
 8005524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	0151      	lsls	r1, r2, #5
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	440a      	add	r2, r1
 8005532:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005536:	f043 0302 	orr.w	r3, r3, #2
 800553a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	b2d2      	uxtb	r2, r2
 8005544:	4611      	mov	r1, r2
 8005546:	4618      	mov	r0, r3
 8005548:	f003 ff05 	bl	8009356 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	4413      	add	r3, r2
 8005554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005558:	461a      	mov	r2, r3
 800555a:	2310      	movs	r3, #16
 800555c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	4413      	add	r3, r2
 8005566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800556a:	461a      	mov	r2, r3
 800556c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005570:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	212c      	movs	r1, #44	; 0x2c
 8005578:	fb01 f303 	mul.w	r3, r1, r3
 800557c:	4413      	add	r3, r2
 800557e:	3361      	adds	r3, #97	; 0x61
 8005580:	2208      	movs	r2, #8
 8005582:	701a      	strb	r2, [r3, #0]
}
 8005584:	e15a      	b.n	800583c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	4413      	add	r3, r2
 800558e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b02      	cmp	r3, #2
 800559a:	f040 814f 	bne.w	800583c <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	0151      	lsls	r1, r2, #5
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	440a      	add	r2, r1
 80055b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055b8:	f023 0302 	bic.w	r3, r3, #2
 80055bc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	212c      	movs	r1, #44	; 0x2c
 80055c4:	fb01 f303 	mul.w	r3, r1, r3
 80055c8:	4413      	add	r3, r2
 80055ca:	3361      	adds	r3, #97	; 0x61
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d17d      	bne.n	80056ce <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	212c      	movs	r1, #44	; 0x2c
 80055d8:	fb01 f303 	mul.w	r3, r1, r3
 80055dc:	4413      	add	r3, r2
 80055de:	3360      	adds	r3, #96	; 0x60
 80055e0:	2201      	movs	r2, #1
 80055e2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	212c      	movs	r1, #44	; 0x2c
 80055ea:	fb01 f303 	mul.w	r3, r1, r3
 80055ee:	4413      	add	r3, r2
 80055f0:	333f      	adds	r3, #63	; 0x3f
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d00a      	beq.n	800560e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	212c      	movs	r1, #44	; 0x2c
 80055fe:	fb01 f303 	mul.w	r3, r1, r3
 8005602:	4413      	add	r3, r2
 8005604:	333f      	adds	r3, #63	; 0x3f
 8005606:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005608:	2b03      	cmp	r3, #3
 800560a:	f040 8100 	bne.w	800580e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d113      	bne.n	800563e <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	212c      	movs	r1, #44	; 0x2c
 800561c:	fb01 f303 	mul.w	r3, r1, r3
 8005620:	4413      	add	r3, r2
 8005622:	3355      	adds	r3, #85	; 0x55
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	f083 0301 	eor.w	r3, r3, #1
 800562a:	b2d8      	uxtb	r0, r3
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	212c      	movs	r1, #44	; 0x2c
 8005632:	fb01 f303 	mul.w	r3, r1, r3
 8005636:	4413      	add	r3, r2
 8005638:	3355      	adds	r3, #85	; 0x55
 800563a:	4602      	mov	r2, r0
 800563c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	2b01      	cmp	r3, #1
 8005644:	f040 80e3 	bne.w	800580e <HCD_HC_OUT_IRQHandler+0x7cc>
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	212c      	movs	r1, #44	; 0x2c
 800564e:	fb01 f303 	mul.w	r3, r1, r3
 8005652:	4413      	add	r3, r2
 8005654:	334c      	adds	r3, #76	; 0x4c
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	f000 80d8 	beq.w	800580e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	212c      	movs	r1, #44	; 0x2c
 8005664:	fb01 f303 	mul.w	r3, r1, r3
 8005668:	4413      	add	r3, r2
 800566a:	334c      	adds	r3, #76	; 0x4c
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6879      	ldr	r1, [r7, #4]
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	202c      	movs	r0, #44	; 0x2c
 8005674:	fb00 f202 	mul.w	r2, r0, r2
 8005678:	440a      	add	r2, r1
 800567a:	3240      	adds	r2, #64	; 0x40
 800567c:	8812      	ldrh	r2, [r2, #0]
 800567e:	4413      	add	r3, r2
 8005680:	3b01      	subs	r3, #1
 8005682:	6879      	ldr	r1, [r7, #4]
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	202c      	movs	r0, #44	; 0x2c
 8005688:	fb00 f202 	mul.w	r2, r0, r2
 800568c:	440a      	add	r2, r1
 800568e:	3240      	adds	r2, #64	; 0x40
 8005690:	8812      	ldrh	r2, [r2, #0]
 8005692:	fbb3 f3f2 	udiv	r3, r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 80b5 	beq.w	800580e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	212c      	movs	r1, #44	; 0x2c
 80056aa:	fb01 f303 	mul.w	r3, r1, r3
 80056ae:	4413      	add	r3, r2
 80056b0:	3355      	adds	r3, #85	; 0x55
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	f083 0301 	eor.w	r3, r3, #1
 80056b8:	b2d8      	uxtb	r0, r3
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	212c      	movs	r1, #44	; 0x2c
 80056c0:	fb01 f303 	mul.w	r3, r1, r3
 80056c4:	4413      	add	r3, r2
 80056c6:	3355      	adds	r3, #85	; 0x55
 80056c8:	4602      	mov	r2, r0
 80056ca:	701a      	strb	r2, [r3, #0]
 80056cc:	e09f      	b.n	800580e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	212c      	movs	r1, #44	; 0x2c
 80056d4:	fb01 f303 	mul.w	r3, r1, r3
 80056d8:	4413      	add	r3, r2
 80056da:	3361      	adds	r3, #97	; 0x61
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	2b03      	cmp	r3, #3
 80056e0:	d109      	bne.n	80056f6 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	212c      	movs	r1, #44	; 0x2c
 80056e8:	fb01 f303 	mul.w	r3, r1, r3
 80056ec:	4413      	add	r3, r2
 80056ee:	3360      	adds	r3, #96	; 0x60
 80056f0:	2202      	movs	r2, #2
 80056f2:	701a      	strb	r2, [r3, #0]
 80056f4:	e08b      	b.n	800580e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	212c      	movs	r1, #44	; 0x2c
 80056fc:	fb01 f303 	mul.w	r3, r1, r3
 8005700:	4413      	add	r3, r2
 8005702:	3361      	adds	r3, #97	; 0x61
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	2b04      	cmp	r3, #4
 8005708:	d109      	bne.n	800571e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	212c      	movs	r1, #44	; 0x2c
 8005710:	fb01 f303 	mul.w	r3, r1, r3
 8005714:	4413      	add	r3, r2
 8005716:	3360      	adds	r3, #96	; 0x60
 8005718:	2202      	movs	r2, #2
 800571a:	701a      	strb	r2, [r3, #0]
 800571c:	e077      	b.n	800580e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	212c      	movs	r1, #44	; 0x2c
 8005724:	fb01 f303 	mul.w	r3, r1, r3
 8005728:	4413      	add	r3, r2
 800572a:	3361      	adds	r3, #97	; 0x61
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b05      	cmp	r3, #5
 8005730:	d109      	bne.n	8005746 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	212c      	movs	r1, #44	; 0x2c
 8005738:	fb01 f303 	mul.w	r3, r1, r3
 800573c:	4413      	add	r3, r2
 800573e:	3360      	adds	r3, #96	; 0x60
 8005740:	2205      	movs	r2, #5
 8005742:	701a      	strb	r2, [r3, #0]
 8005744:	e063      	b.n	800580e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	212c      	movs	r1, #44	; 0x2c
 800574c:	fb01 f303 	mul.w	r3, r1, r3
 8005750:	4413      	add	r3, r2
 8005752:	3361      	adds	r3, #97	; 0x61
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	2b06      	cmp	r3, #6
 8005758:	d009      	beq.n	800576e <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	212c      	movs	r1, #44	; 0x2c
 8005760:	fb01 f303 	mul.w	r3, r1, r3
 8005764:	4413      	add	r3, r2
 8005766:	3361      	adds	r3, #97	; 0x61
 8005768:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800576a:	2b08      	cmp	r3, #8
 800576c:	d14f      	bne.n	800580e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	212c      	movs	r1, #44	; 0x2c
 8005774:	fb01 f303 	mul.w	r3, r1, r3
 8005778:	4413      	add	r3, r2
 800577a:	335c      	adds	r3, #92	; 0x5c
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	6879      	ldr	r1, [r7, #4]
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	202c      	movs	r0, #44	; 0x2c
 8005786:	fb00 f303 	mul.w	r3, r0, r3
 800578a:	440b      	add	r3, r1
 800578c:	335c      	adds	r3, #92	; 0x5c
 800578e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	212c      	movs	r1, #44	; 0x2c
 8005796:	fb01 f303 	mul.w	r3, r1, r3
 800579a:	4413      	add	r3, r2
 800579c:	335c      	adds	r3, #92	; 0x5c
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d912      	bls.n	80057ca <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	212c      	movs	r1, #44	; 0x2c
 80057aa:	fb01 f303 	mul.w	r3, r1, r3
 80057ae:	4413      	add	r3, r2
 80057b0:	335c      	adds	r3, #92	; 0x5c
 80057b2:	2200      	movs	r2, #0
 80057b4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	212c      	movs	r1, #44	; 0x2c
 80057bc:	fb01 f303 	mul.w	r3, r1, r3
 80057c0:	4413      	add	r3, r2
 80057c2:	3360      	adds	r3, #96	; 0x60
 80057c4:	2204      	movs	r2, #4
 80057c6:	701a      	strb	r2, [r3, #0]
 80057c8:	e021      	b.n	800580e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	212c      	movs	r1, #44	; 0x2c
 80057d0:	fb01 f303 	mul.w	r3, r1, r3
 80057d4:	4413      	add	r3, r2
 80057d6:	3360      	adds	r3, #96	; 0x60
 80057d8:	2202      	movs	r2, #2
 80057da:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057f2:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057fa:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	4413      	add	r3, r2
 8005804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005808:	461a      	mov	r2, r3
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	4413      	add	r3, r2
 8005816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800581a:	461a      	mov	r2, r3
 800581c:	2302      	movs	r3, #2
 800581e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	b2d9      	uxtb	r1, r3
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	202c      	movs	r0, #44	; 0x2c
 800582a:	fb00 f303 	mul.w	r3, r0, r3
 800582e:	4413      	add	r3, r2
 8005830:	3360      	adds	r3, #96	; 0x60
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	461a      	mov	r2, r3
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f00a fb5a 	bl	800fef0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800583c:	bf00      	nop
 800583e:	3720      	adds	r7, #32
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b08a      	sub	sp, #40	; 0x28
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	f003 030f 	and.w	r3, r3, #15
 8005864:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	0c5b      	lsrs	r3, r3, #17
 800586a:	f003 030f 	and.w	r3, r3, #15
 800586e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	091b      	lsrs	r3, r3, #4
 8005874:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005878:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	2b02      	cmp	r3, #2
 800587e:	d004      	beq.n	800588a <HCD_RXQLVL_IRQHandler+0x46>
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	2b05      	cmp	r3, #5
 8005884:	f000 80a9 	beq.w	80059da <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005888:	e0aa      	b.n	80059e0 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 80a6 	beq.w	80059de <HCD_RXQLVL_IRQHandler+0x19a>
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	212c      	movs	r1, #44	; 0x2c
 8005898:	fb01 f303 	mul.w	r3, r1, r3
 800589c:	4413      	add	r3, r2
 800589e:	3344      	adds	r3, #68	; 0x44
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f000 809b 	beq.w	80059de <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	212c      	movs	r1, #44	; 0x2c
 80058ae:	fb01 f303 	mul.w	r3, r1, r3
 80058b2:	4413      	add	r3, r2
 80058b4:	3350      	adds	r3, #80	; 0x50
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	441a      	add	r2, r3
 80058bc:	6879      	ldr	r1, [r7, #4]
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	202c      	movs	r0, #44	; 0x2c
 80058c2:	fb00 f303 	mul.w	r3, r0, r3
 80058c6:	440b      	add	r3, r1
 80058c8:	334c      	adds	r3, #76	; 0x4c
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d87a      	bhi.n	80059c6 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6818      	ldr	r0, [r3, #0]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	212c      	movs	r1, #44	; 0x2c
 80058da:	fb01 f303 	mul.w	r3, r1, r3
 80058de:	4413      	add	r3, r2
 80058e0:	3344      	adds	r3, #68	; 0x44
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	b292      	uxth	r2, r2
 80058e8:	4619      	mov	r1, r3
 80058ea:	f003 f8ad 	bl	8008a48 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	212c      	movs	r1, #44	; 0x2c
 80058f4:	fb01 f303 	mul.w	r3, r1, r3
 80058f8:	4413      	add	r3, r2
 80058fa:	3344      	adds	r3, #68	; 0x44
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	441a      	add	r2, r3
 8005902:	6879      	ldr	r1, [r7, #4]
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	202c      	movs	r0, #44	; 0x2c
 8005908:	fb00 f303 	mul.w	r3, r0, r3
 800590c:	440b      	add	r3, r1
 800590e:	3344      	adds	r3, #68	; 0x44
 8005910:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	212c      	movs	r1, #44	; 0x2c
 8005918:	fb01 f303 	mul.w	r3, r1, r3
 800591c:	4413      	add	r3, r2
 800591e:	3350      	adds	r3, #80	; 0x50
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	441a      	add	r2, r3
 8005926:	6879      	ldr	r1, [r7, #4]
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	202c      	movs	r0, #44	; 0x2c
 800592c:	fb00 f303 	mul.w	r3, r0, r3
 8005930:	440b      	add	r3, r1
 8005932:	3350      	adds	r3, #80	; 0x50
 8005934:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	6a3b      	ldr	r3, [r7, #32]
 800593c:	4413      	add	r3, r2
 800593e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	0cdb      	lsrs	r3, r3, #19
 8005946:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800594a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	212c      	movs	r1, #44	; 0x2c
 8005952:	fb01 f303 	mul.w	r3, r1, r3
 8005956:	4413      	add	r3, r2
 8005958:	3340      	adds	r3, #64	; 0x40
 800595a:	881b      	ldrh	r3, [r3, #0]
 800595c:	461a      	mov	r2, r3
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	4293      	cmp	r3, r2
 8005962:	d13c      	bne.n	80059de <HCD_RXQLVL_IRQHandler+0x19a>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d039      	beq.n	80059de <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	4413      	add	r3, r2
 8005972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005980:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005988:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	4413      	add	r3, r2
 8005992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005996:	461a      	mov	r2, r3
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	212c      	movs	r1, #44	; 0x2c
 80059a2:	fb01 f303 	mul.w	r3, r1, r3
 80059a6:	4413      	add	r3, r2
 80059a8:	3354      	adds	r3, #84	; 0x54
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	f083 0301 	eor.w	r3, r3, #1
 80059b0:	b2d8      	uxtb	r0, r3
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	212c      	movs	r1, #44	; 0x2c
 80059b8:	fb01 f303 	mul.w	r3, r1, r3
 80059bc:	4413      	add	r3, r2
 80059be:	3354      	adds	r3, #84	; 0x54
 80059c0:	4602      	mov	r2, r0
 80059c2:	701a      	strb	r2, [r3, #0]
      break;
 80059c4:	e00b      	b.n	80059de <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	212c      	movs	r1, #44	; 0x2c
 80059cc:	fb01 f303 	mul.w	r3, r1, r3
 80059d0:	4413      	add	r3, r2
 80059d2:	3360      	adds	r3, #96	; 0x60
 80059d4:	2204      	movs	r2, #4
 80059d6:	701a      	strb	r2, [r3, #0]
      break;
 80059d8:	e001      	b.n	80059de <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80059da:	bf00      	nop
 80059dc:	e000      	b.n	80059e0 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80059de:	bf00      	nop
  }
}
 80059e0:	bf00      	nop
 80059e2:	3728      	adds	r7, #40	; 0x28
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005a14:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d10b      	bne.n	8005a38 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d102      	bne.n	8005a30 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f00a fa44 	bl	800feb8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f043 0302 	orr.w	r3, r3, #2
 8005a36:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f003 0308 	and.w	r3, r3, #8
 8005a3e:	2b08      	cmp	r3, #8
 8005a40:	d132      	bne.n	8005aa8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	f043 0308 	orr.w	r3, r3, #8
 8005a48:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	2b04      	cmp	r3, #4
 8005a52:	d126      	bne.n	8005aa2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d113      	bne.n	8005a84 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005a62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a66:	d106      	bne.n	8005a76 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2102      	movs	r1, #2
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f003 f94a 	bl	8008d08 <USB_InitFSLSPClkSel>
 8005a74:	e011      	b.n	8005a9a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2101      	movs	r1, #1
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f003 f943 	bl	8008d08 <USB_InitFSLSPClkSel>
 8005a82:	e00a      	b.n	8005a9a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d106      	bne.n	8005a9a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a92:	461a      	mov	r2, r3
 8005a94:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005a98:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f00a fa36 	bl	800ff0c <HAL_HCD_PortEnabled_Callback>
 8005aa0:	e002      	b.n	8005aa8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f00a fa40 	bl	800ff28 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f003 0320 	and.w	r3, r3, #32
 8005aae:	2b20      	cmp	r3, #32
 8005ab0:	d103      	bne.n	8005aba <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	f043 0320 	orr.w	r3, r3, #32
 8005ab8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	6013      	str	r3, [r2, #0]
}
 8005ac6:	bf00      	nop
 8005ac8:	3718      	adds	r7, #24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
	...

08005ad0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e12b      	b.n	8005d3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d106      	bne.n	8005afc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7fb ff4e 	bl	8001998 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2224      	movs	r2, #36	; 0x24
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0201 	bic.w	r2, r2, #1
 8005b12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b34:	f002 fcb6 	bl	80084a4 <HAL_RCC_GetPCLK1Freq>
 8005b38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	4a81      	ldr	r2, [pc, #516]	; (8005d44 <HAL_I2C_Init+0x274>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d807      	bhi.n	8005b54 <HAL_I2C_Init+0x84>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4a80      	ldr	r2, [pc, #512]	; (8005d48 <HAL_I2C_Init+0x278>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	bf94      	ite	ls
 8005b4c:	2301      	movls	r3, #1
 8005b4e:	2300      	movhi	r3, #0
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	e006      	b.n	8005b62 <HAL_I2C_Init+0x92>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4a7d      	ldr	r2, [pc, #500]	; (8005d4c <HAL_I2C_Init+0x27c>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	bf94      	ite	ls
 8005b5c:	2301      	movls	r3, #1
 8005b5e:	2300      	movhi	r3, #0
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d001      	beq.n	8005b6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e0e7      	b.n	8005d3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	4a78      	ldr	r2, [pc, #480]	; (8005d50 <HAL_I2C_Init+0x280>)
 8005b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b72:	0c9b      	lsrs	r3, r3, #18
 8005b74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	4a6a      	ldr	r2, [pc, #424]	; (8005d44 <HAL_I2C_Init+0x274>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d802      	bhi.n	8005ba4 <HAL_I2C_Init+0xd4>
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	e009      	b.n	8005bb8 <HAL_I2C_Init+0xe8>
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005baa:	fb02 f303 	mul.w	r3, r2, r3
 8005bae:	4a69      	ldr	r2, [pc, #420]	; (8005d54 <HAL_I2C_Init+0x284>)
 8005bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb4:	099b      	lsrs	r3, r3, #6
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	6812      	ldr	r2, [r2, #0]
 8005bbc:	430b      	orrs	r3, r1
 8005bbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005bca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	495c      	ldr	r1, [pc, #368]	; (8005d44 <HAL_I2C_Init+0x274>)
 8005bd4:	428b      	cmp	r3, r1
 8005bd6:	d819      	bhi.n	8005c0c <HAL_I2C_Init+0x13c>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	1e59      	subs	r1, r3, #1
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005be6:	1c59      	adds	r1, r3, #1
 8005be8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005bec:	400b      	ands	r3, r1
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00a      	beq.n	8005c08 <HAL_I2C_Init+0x138>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	1e59      	subs	r1, r3, #1
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c00:	3301      	adds	r3, #1
 8005c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c06:	e051      	b.n	8005cac <HAL_I2C_Init+0x1dc>
 8005c08:	2304      	movs	r3, #4
 8005c0a:	e04f      	b.n	8005cac <HAL_I2C_Init+0x1dc>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d111      	bne.n	8005c38 <HAL_I2C_Init+0x168>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	1e58      	subs	r0, r3, #1
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6859      	ldr	r1, [r3, #4]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	005b      	lsls	r3, r3, #1
 8005c20:	440b      	add	r3, r1
 8005c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c26:	3301      	adds	r3, #1
 8005c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	bf0c      	ite	eq
 8005c30:	2301      	moveq	r3, #1
 8005c32:	2300      	movne	r3, #0
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	e012      	b.n	8005c5e <HAL_I2C_Init+0x18e>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	1e58      	subs	r0, r3, #1
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6859      	ldr	r1, [r3, #4]
 8005c40:	460b      	mov	r3, r1
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	440b      	add	r3, r1
 8005c46:	0099      	lsls	r1, r3, #2
 8005c48:	440b      	add	r3, r1
 8005c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c4e:	3301      	adds	r3, #1
 8005c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	bf0c      	ite	eq
 8005c58:	2301      	moveq	r3, #1
 8005c5a:	2300      	movne	r3, #0
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d001      	beq.n	8005c66 <HAL_I2C_Init+0x196>
 8005c62:	2301      	movs	r3, #1
 8005c64:	e022      	b.n	8005cac <HAL_I2C_Init+0x1dc>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10e      	bne.n	8005c8c <HAL_I2C_Init+0x1bc>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	1e58      	subs	r0, r3, #1
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6859      	ldr	r1, [r3, #4]
 8005c76:	460b      	mov	r3, r1
 8005c78:	005b      	lsls	r3, r3, #1
 8005c7a:	440b      	add	r3, r1
 8005c7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c80:	3301      	adds	r3, #1
 8005c82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c8a:	e00f      	b.n	8005cac <HAL_I2C_Init+0x1dc>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	1e58      	subs	r0, r3, #1
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6859      	ldr	r1, [r3, #4]
 8005c94:	460b      	mov	r3, r1
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	440b      	add	r3, r1
 8005c9a:	0099      	lsls	r1, r3, #2
 8005c9c:	440b      	add	r3, r1
 8005c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ca8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cac:	6879      	ldr	r1, [r7, #4]
 8005cae:	6809      	ldr	r1, [r1, #0]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	69da      	ldr	r2, [r3, #28]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005cda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	6911      	ldr	r1, [r2, #16]
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	68d2      	ldr	r2, [r2, #12]
 8005ce6:	4311      	orrs	r1, r2
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	6812      	ldr	r2, [r2, #0]
 8005cec:	430b      	orrs	r3, r1
 8005cee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	695a      	ldr	r2, [r3, #20]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 0201 	orr.w	r2, r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2220      	movs	r2, #32
 8005d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	000186a0 	.word	0x000186a0
 8005d48:	001e847f 	.word	0x001e847f
 8005d4c:	003d08ff 	.word	0x003d08ff
 8005d50:	431bde83 	.word	0x431bde83
 8005d54:	10624dd3 	.word	0x10624dd3

08005d58 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e021      	b.n	8005dae <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2224      	movs	r2, #36	; 0x24
 8005d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f022 0201 	bic.w	r2, r2, #1
 8005d80:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f7fb fe50 	bl	8001a28 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
	...

08005db8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b088      	sub	sp, #32
 8005dbc:	af02      	add	r7, sp, #8
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	4608      	mov	r0, r1
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	817b      	strh	r3, [r7, #10]
 8005dca:	460b      	mov	r3, r1
 8005dcc:	813b      	strh	r3, [r7, #8]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005dd2:	f7fc fa33 	bl	800223c <HAL_GetTick>
 8005dd6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b20      	cmp	r3, #32
 8005de2:	f040 80d9 	bne.w	8005f98 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	2319      	movs	r3, #25
 8005dec:	2201      	movs	r2, #1
 8005dee:	496d      	ldr	r1, [pc, #436]	; (8005fa4 <HAL_I2C_Mem_Write+0x1ec>)
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 fc8d 	bl	8006710 <I2C_WaitOnFlagUntilTimeout>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	e0cc      	b.n	8005f9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d101      	bne.n	8005e0e <HAL_I2C_Mem_Write+0x56>
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	e0c5      	b.n	8005f9a <HAL_I2C_Mem_Write+0x1e2>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d007      	beq.n	8005e34 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 0201 	orr.w	r2, r2, #1
 8005e32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2221      	movs	r2, #33	; 0x21
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2240      	movs	r2, #64	; 0x40
 8005e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6a3a      	ldr	r2, [r7, #32]
 8005e5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4a4d      	ldr	r2, [pc, #308]	; (8005fa8 <HAL_I2C_Mem_Write+0x1f0>)
 8005e74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e76:	88f8      	ldrh	r0, [r7, #6]
 8005e78:	893a      	ldrh	r2, [r7, #8]
 8005e7a:	8979      	ldrh	r1, [r7, #10]
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	9301      	str	r3, [sp, #4]
 8005e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	4603      	mov	r3, r0
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f000 fac4 	bl	8006414 <I2C_RequestMemoryWrite>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d052      	beq.n	8005f38 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e081      	b.n	8005f9a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f000 fd0e 	bl	80068bc <I2C_WaitOnTXEFlagUntilTimeout>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00d      	beq.n	8005ec2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	2b04      	cmp	r3, #4
 8005eac:	d107      	bne.n	8005ebe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ebc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e06b      	b.n	8005f9a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec6:	781a      	ldrb	r2, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005edc:	3b01      	subs	r3, #1
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	3b01      	subs	r3, #1
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	f003 0304 	and.w	r3, r3, #4
 8005efc:	2b04      	cmp	r3, #4
 8005efe:	d11b      	bne.n	8005f38 <HAL_I2C_Mem_Write+0x180>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d017      	beq.n	8005f38 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0c:	781a      	ldrb	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f18:	1c5a      	adds	r2, r3, #1
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f22:	3b01      	subs	r3, #1
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1aa      	bne.n	8005e96 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f000 fcfa 	bl	800693e <I2C_WaitOnBTFFlagUntilTimeout>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00d      	beq.n	8005f6c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f54:	2b04      	cmp	r3, #4
 8005f56:	d107      	bne.n	8005f68 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f66:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e016      	b.n	8005f9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f94:	2300      	movs	r3, #0
 8005f96:	e000      	b.n	8005f9a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005f98:	2302      	movs	r3, #2
  }
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3718      	adds	r7, #24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	00100002 	.word	0x00100002
 8005fa8:	ffff0000 	.word	0xffff0000

08005fac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08c      	sub	sp, #48	; 0x30
 8005fb0:	af02      	add	r7, sp, #8
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	4608      	mov	r0, r1
 8005fb6:	4611      	mov	r1, r2
 8005fb8:	461a      	mov	r2, r3
 8005fba:	4603      	mov	r3, r0
 8005fbc:	817b      	strh	r3, [r7, #10]
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	813b      	strh	r3, [r7, #8]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005fc6:	f7fc f939 	bl	800223c <HAL_GetTick>
 8005fca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b20      	cmp	r3, #32
 8005fd6:	f040 8208 	bne.w	80063ea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	2319      	movs	r3, #25
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	497b      	ldr	r1, [pc, #492]	; (80061d0 <HAL_I2C_Mem_Read+0x224>)
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 fb93 	bl	8006710 <I2C_WaitOnFlagUntilTimeout>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	e1fb      	b.n	80063ec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d101      	bne.n	8006002 <HAL_I2C_Mem_Read+0x56>
 8005ffe:	2302      	movs	r3, #2
 8006000:	e1f4      	b.n	80063ec <HAL_I2C_Mem_Read+0x440>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0301 	and.w	r3, r3, #1
 8006014:	2b01      	cmp	r3, #1
 8006016:	d007      	beq.n	8006028 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0201 	orr.w	r2, r2, #1
 8006026:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006036:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2222      	movs	r2, #34	; 0x22
 800603c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2240      	movs	r2, #64	; 0x40
 8006044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006052:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006058:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800605e:	b29a      	uxth	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4a5b      	ldr	r2, [pc, #364]	; (80061d4 <HAL_I2C_Mem_Read+0x228>)
 8006068:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800606a:	88f8      	ldrh	r0, [r7, #6]
 800606c:	893a      	ldrh	r2, [r7, #8]
 800606e:	8979      	ldrh	r1, [r7, #10]
 8006070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006072:	9301      	str	r3, [sp, #4]
 8006074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	4603      	mov	r3, r0
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f000 fa60 	bl	8006540 <I2C_RequestMemoryRead>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e1b0      	b.n	80063ec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800608e:	2b00      	cmp	r3, #0
 8006090:	d113      	bne.n	80060ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006092:	2300      	movs	r3, #0
 8006094:	623b      	str	r3, [r7, #32]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	623b      	str	r3, [r7, #32]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	623b      	str	r3, [r7, #32]
 80060a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060b6:	601a      	str	r2, [r3, #0]
 80060b8:	e184      	b.n	80063c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d11b      	bne.n	80060fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060d2:	2300      	movs	r3, #0
 80060d4:	61fb      	str	r3, [r7, #28]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	61fb      	str	r3, [r7, #28]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	61fb      	str	r3, [r7, #28]
 80060e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	e164      	b.n	80063c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d11b      	bne.n	800613a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006110:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006120:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006122:	2300      	movs	r3, #0
 8006124:	61bb      	str	r3, [r7, #24]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	61bb      	str	r3, [r7, #24]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	61bb      	str	r3, [r7, #24]
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	e144      	b.n	80063c4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800613a:	2300      	movs	r3, #0
 800613c:	617b      	str	r3, [r7, #20]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	695b      	ldr	r3, [r3, #20]
 8006144:	617b      	str	r3, [r7, #20]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	617b      	str	r3, [r7, #20]
 800614e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006150:	e138      	b.n	80063c4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006156:	2b03      	cmp	r3, #3
 8006158:	f200 80f1 	bhi.w	800633e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006160:	2b01      	cmp	r3, #1
 8006162:	d123      	bne.n	80061ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006166:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f000 fc29 	bl	80069c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e139      	b.n	80063ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	691a      	ldr	r2, [r3, #16]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	b2d2      	uxtb	r2, r2
 8006184:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006194:	3b01      	subs	r3, #1
 8006196:	b29a      	uxth	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	3b01      	subs	r3, #1
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061aa:	e10b      	b.n	80063c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d14e      	bne.n	8006252 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ba:	2200      	movs	r2, #0
 80061bc:	4906      	ldr	r1, [pc, #24]	; (80061d8 <HAL_I2C_Mem_Read+0x22c>)
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f000 faa6 	bl	8006710 <I2C_WaitOnFlagUntilTimeout>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d008      	beq.n	80061dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e10e      	b.n	80063ec <HAL_I2C_Mem_Read+0x440>
 80061ce:	bf00      	nop
 80061d0:	00100002 	.word	0x00100002
 80061d4:	ffff0000 	.word	0xffff0000
 80061d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	691a      	ldr	r2, [r3, #16]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f6:	b2d2      	uxtb	r2, r2
 80061f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fe:	1c5a      	adds	r2, r3, #1
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006208:	3b01      	subs	r3, #1
 800620a:	b29a      	uxth	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006214:	b29b      	uxth	r3, r3
 8006216:	3b01      	subs	r3, #1
 8006218:	b29a      	uxth	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	691a      	ldr	r2, [r3, #16]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	b2d2      	uxtb	r2, r2
 800622a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006230:	1c5a      	adds	r2, r3, #1
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800623a:	3b01      	subs	r3, #1
 800623c:	b29a      	uxth	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006246:	b29b      	uxth	r3, r3
 8006248:	3b01      	subs	r3, #1
 800624a:	b29a      	uxth	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006250:	e0b8      	b.n	80063c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006258:	2200      	movs	r2, #0
 800625a:	4966      	ldr	r1, [pc, #408]	; (80063f4 <HAL_I2C_Mem_Read+0x448>)
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f000 fa57 	bl	8006710 <I2C_WaitOnFlagUntilTimeout>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e0bf      	b.n	80063ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800627a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	691a      	ldr	r2, [r3, #16]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	1c5a      	adds	r2, r3, #1
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006298:	3b01      	subs	r3, #1
 800629a:	b29a      	uxth	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	3b01      	subs	r3, #1
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b4:	2200      	movs	r2, #0
 80062b6:	494f      	ldr	r1, [pc, #316]	; (80063f4 <HAL_I2C_Mem_Read+0x448>)
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f000 fa29 	bl	8006710 <I2C_WaitOnFlagUntilTimeout>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e091      	b.n	80063ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	691a      	ldr	r2, [r3, #16]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e2:	b2d2      	uxtb	r2, r2
 80062e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ea:	1c5a      	adds	r2, r3, #1
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f4:	3b01      	subs	r3, #1
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006300:	b29b      	uxth	r3, r3
 8006302:	3b01      	subs	r3, #1
 8006304:	b29a      	uxth	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	691a      	ldr	r2, [r3, #16]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006314:	b2d2      	uxtb	r2, r2
 8006316:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631c:	1c5a      	adds	r2, r3, #1
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006326:	3b01      	subs	r3, #1
 8006328:	b29a      	uxth	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006332:	b29b      	uxth	r3, r3
 8006334:	3b01      	subs	r3, #1
 8006336:	b29a      	uxth	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800633c:	e042      	b.n	80063c4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800633e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006340:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 fb3c 	bl	80069c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e04c      	b.n	80063ec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	691a      	ldr	r2, [r3, #16]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635c:	b2d2      	uxtb	r2, r2
 800635e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006364:	1c5a      	adds	r2, r3, #1
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800636e:	3b01      	subs	r3, #1
 8006370:	b29a      	uxth	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800637a:	b29b      	uxth	r3, r3
 800637c:	3b01      	subs	r3, #1
 800637e:	b29a      	uxth	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	f003 0304 	and.w	r3, r3, #4
 800638e:	2b04      	cmp	r3, #4
 8006390:	d118      	bne.n	80063c4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	691a      	ldr	r2, [r3, #16]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639c:	b2d2      	uxtb	r2, r2
 800639e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a4:	1c5a      	adds	r2, r3, #1
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ae:	3b01      	subs	r3, #1
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	3b01      	subs	r3, #1
 80063be:	b29a      	uxth	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f47f aec2 	bne.w	8006152 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2220      	movs	r2, #32
 80063d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	e000      	b.n	80063ec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80063ea:	2302      	movs	r3, #2
  }
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3728      	adds	r7, #40	; 0x28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	00010004 	.word	0x00010004

080063f8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006406:	b2db      	uxtb	r3, r3
}
 8006408:	4618      	mov	r0, r3
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b088      	sub	sp, #32
 8006418:	af02      	add	r7, sp, #8
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	4608      	mov	r0, r1
 800641e:	4611      	mov	r1, r2
 8006420:	461a      	mov	r2, r3
 8006422:	4603      	mov	r3, r0
 8006424:	817b      	strh	r3, [r7, #10]
 8006426:	460b      	mov	r3, r1
 8006428:	813b      	strh	r3, [r7, #8]
 800642a:	4613      	mov	r3, r2
 800642c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800643c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800643e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	6a3b      	ldr	r3, [r7, #32]
 8006444:	2200      	movs	r2, #0
 8006446:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f000 f960 	bl	8006710 <I2C_WaitOnFlagUntilTimeout>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00d      	beq.n	8006472 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006464:	d103      	bne.n	800646e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f44f 7200 	mov.w	r2, #512	; 0x200
 800646c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e05f      	b.n	8006532 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006472:	897b      	ldrh	r3, [r7, #10]
 8006474:	b2db      	uxtb	r3, r3
 8006476:	461a      	mov	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006480:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006484:	6a3a      	ldr	r2, [r7, #32]
 8006486:	492d      	ldr	r1, [pc, #180]	; (800653c <I2C_RequestMemoryWrite+0x128>)
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f000 f998 	bl	80067be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d001      	beq.n	8006498 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e04c      	b.n	8006532 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006498:	2300      	movs	r3, #0
 800649a:	617b      	str	r3, [r7, #20]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	617b      	str	r3, [r7, #20]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	617b      	str	r3, [r7, #20]
 80064ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b0:	6a39      	ldr	r1, [r7, #32]
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f000 fa02 	bl	80068bc <I2C_WaitOnTXEFlagUntilTimeout>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00d      	beq.n	80064da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c2:	2b04      	cmp	r3, #4
 80064c4:	d107      	bne.n	80064d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e02b      	b.n	8006532 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80064da:	88fb      	ldrh	r3, [r7, #6]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d105      	bne.n	80064ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064e0:	893b      	ldrh	r3, [r7, #8]
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	611a      	str	r2, [r3, #16]
 80064ea:	e021      	b.n	8006530 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80064ec:	893b      	ldrh	r3, [r7, #8]
 80064ee:	0a1b      	lsrs	r3, r3, #8
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064fc:	6a39      	ldr	r1, [r7, #32]
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f000 f9dc 	bl	80068bc <I2C_WaitOnTXEFlagUntilTimeout>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00d      	beq.n	8006526 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650e:	2b04      	cmp	r3, #4
 8006510:	d107      	bne.n	8006522 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006520:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e005      	b.n	8006532 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006526:	893b      	ldrh	r3, [r7, #8]
 8006528:	b2da      	uxtb	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3718      	adds	r7, #24
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	00010002 	.word	0x00010002

08006540 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b088      	sub	sp, #32
 8006544:	af02      	add	r7, sp, #8
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	4608      	mov	r0, r1
 800654a:	4611      	mov	r1, r2
 800654c:	461a      	mov	r2, r3
 800654e:	4603      	mov	r3, r0
 8006550:	817b      	strh	r3, [r7, #10]
 8006552:	460b      	mov	r3, r1
 8006554:	813b      	strh	r3, [r7, #8]
 8006556:	4613      	mov	r3, r2
 8006558:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006568:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006578:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	2200      	movs	r2, #0
 8006582:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f000 f8c2 	bl	8006710 <I2C_WaitOnFlagUntilTimeout>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00d      	beq.n	80065ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800659c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065a0:	d103      	bne.n	80065aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e0aa      	b.n	8006704 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80065ae:	897b      	ldrh	r3, [r7, #10]
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	461a      	mov	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	6a3a      	ldr	r2, [r7, #32]
 80065c2:	4952      	ldr	r1, [pc, #328]	; (800670c <I2C_RequestMemoryRead+0x1cc>)
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f000 f8fa 	bl	80067be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d001      	beq.n	80065d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e097      	b.n	8006704 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065d4:	2300      	movs	r3, #0
 80065d6:	617b      	str	r3, [r7, #20]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	617b      	str	r3, [r7, #20]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	617b      	str	r3, [r7, #20]
 80065e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ec:	6a39      	ldr	r1, [r7, #32]
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f000 f964 	bl	80068bc <I2C_WaitOnTXEFlagUntilTimeout>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00d      	beq.n	8006616 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d107      	bne.n	8006612 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006610:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e076      	b.n	8006704 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006616:	88fb      	ldrh	r3, [r7, #6]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d105      	bne.n	8006628 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800661c:	893b      	ldrh	r3, [r7, #8]
 800661e:	b2da      	uxtb	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	611a      	str	r2, [r3, #16]
 8006626:	e021      	b.n	800666c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006628:	893b      	ldrh	r3, [r7, #8]
 800662a:	0a1b      	lsrs	r3, r3, #8
 800662c:	b29b      	uxth	r3, r3
 800662e:	b2da      	uxtb	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006638:	6a39      	ldr	r1, [r7, #32]
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f000 f93e 	bl	80068bc <I2C_WaitOnTXEFlagUntilTimeout>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00d      	beq.n	8006662 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	2b04      	cmp	r3, #4
 800664c:	d107      	bne.n	800665e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800665c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e050      	b.n	8006704 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006662:	893b      	ldrh	r3, [r7, #8]
 8006664:	b2da      	uxtb	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800666c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800666e:	6a39      	ldr	r1, [r7, #32]
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 f923 	bl	80068bc <I2C_WaitOnTXEFlagUntilTimeout>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00d      	beq.n	8006698 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006680:	2b04      	cmp	r3, #4
 8006682:	d107      	bne.n	8006694 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006692:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e035      	b.n	8006704 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	9300      	str	r3, [sp, #0]
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f000 f82b 	bl	8006710 <I2C_WaitOnFlagUntilTimeout>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00d      	beq.n	80066dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ce:	d103      	bne.n	80066d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e013      	b.n	8006704 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80066dc:	897b      	ldrh	r3, [r7, #10]
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	f043 0301 	orr.w	r3, r3, #1
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ee:	6a3a      	ldr	r2, [r7, #32]
 80066f0:	4906      	ldr	r1, [pc, #24]	; (800670c <I2C_RequestMemoryRead+0x1cc>)
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f000 f863 	bl	80067be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e000      	b.n	8006704 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3718      	adds	r7, #24
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	00010002 	.word	0x00010002

08006710 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	603b      	str	r3, [r7, #0]
 800671c:	4613      	mov	r3, r2
 800671e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006720:	e025      	b.n	800676e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006728:	d021      	beq.n	800676e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800672a:	f7fb fd87 	bl	800223c <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	683a      	ldr	r2, [r7, #0]
 8006736:	429a      	cmp	r2, r3
 8006738:	d302      	bcc.n	8006740 <I2C_WaitOnFlagUntilTimeout+0x30>
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d116      	bne.n	800676e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2220      	movs	r2, #32
 800674a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675a:	f043 0220 	orr.w	r2, r3, #32
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e023      	b.n	80067b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	0c1b      	lsrs	r3, r3, #16
 8006772:	b2db      	uxtb	r3, r3
 8006774:	2b01      	cmp	r3, #1
 8006776:	d10d      	bne.n	8006794 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	43da      	mvns	r2, r3
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	4013      	ands	r3, r2
 8006784:	b29b      	uxth	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	bf0c      	ite	eq
 800678a:	2301      	moveq	r3, #1
 800678c:	2300      	movne	r3, #0
 800678e:	b2db      	uxtb	r3, r3
 8006790:	461a      	mov	r2, r3
 8006792:	e00c      	b.n	80067ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	43da      	mvns	r2, r3
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	4013      	ands	r3, r2
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	bf0c      	ite	eq
 80067a6:	2301      	moveq	r3, #1
 80067a8:	2300      	movne	r3, #0
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	461a      	mov	r2, r3
 80067ae:	79fb      	ldrb	r3, [r7, #7]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d0b6      	beq.n	8006722 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b084      	sub	sp, #16
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	60f8      	str	r0, [r7, #12]
 80067c6:	60b9      	str	r1, [r7, #8]
 80067c8:	607a      	str	r2, [r7, #4]
 80067ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067cc:	e051      	b.n	8006872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	695b      	ldr	r3, [r3, #20]
 80067d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067dc:	d123      	bne.n	8006826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2220      	movs	r2, #32
 8006802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006812:	f043 0204 	orr.w	r2, r3, #4
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e046      	b.n	80068b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800682c:	d021      	beq.n	8006872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800682e:	f7fb fd05 	bl	800223c <HAL_GetTick>
 8006832:	4602      	mov	r2, r0
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	1ad3      	subs	r3, r2, r3
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	429a      	cmp	r2, r3
 800683c:	d302      	bcc.n	8006844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d116      	bne.n	8006872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2220      	movs	r2, #32
 800684e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685e:	f043 0220 	orr.w	r2, r3, #32
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e020      	b.n	80068b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	0c1b      	lsrs	r3, r3, #16
 8006876:	b2db      	uxtb	r3, r3
 8006878:	2b01      	cmp	r3, #1
 800687a:	d10c      	bne.n	8006896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	43da      	mvns	r2, r3
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	4013      	ands	r3, r2
 8006888:	b29b      	uxth	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	bf14      	ite	ne
 800688e:	2301      	movne	r3, #1
 8006890:	2300      	moveq	r3, #0
 8006892:	b2db      	uxtb	r3, r3
 8006894:	e00b      	b.n	80068ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	43da      	mvns	r2, r3
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	4013      	ands	r3, r2
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	bf14      	ite	ne
 80068a8:	2301      	movne	r3, #1
 80068aa:	2300      	moveq	r3, #0
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d18d      	bne.n	80067ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068c8:	e02d      	b.n	8006926 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f000 f8ce 	bl	8006a6c <I2C_IsAcknowledgeFailed>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e02d      	b.n	8006936 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e0:	d021      	beq.n	8006926 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068e2:	f7fb fcab 	bl	800223c <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d302      	bcc.n	80068f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d116      	bne.n	8006926 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2220      	movs	r2, #32
 8006902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006912:	f043 0220 	orr.w	r2, r3, #32
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e007      	b.n	8006936 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006930:	2b80      	cmp	r3, #128	; 0x80
 8006932:	d1ca      	bne.n	80068ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b084      	sub	sp, #16
 8006942:	af00      	add	r7, sp, #0
 8006944:	60f8      	str	r0, [r7, #12]
 8006946:	60b9      	str	r1, [r7, #8]
 8006948:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800694a:	e02d      	b.n	80069a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f000 f88d 	bl	8006a6c <I2C_IsAcknowledgeFailed>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d001      	beq.n	800695c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e02d      	b.n	80069b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006962:	d021      	beq.n	80069a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006964:	f7fb fc6a 	bl	800223c <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	429a      	cmp	r2, r3
 8006972:	d302      	bcc.n	800697a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d116      	bne.n	80069a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2220      	movs	r2, #32
 8006984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006994:	f043 0220 	orr.w	r2, r3, #32
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e007      	b.n	80069b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	f003 0304 	and.w	r3, r3, #4
 80069b2:	2b04      	cmp	r3, #4
 80069b4:	d1ca      	bne.n	800694c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80069cc:	e042      	b.n	8006a54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	f003 0310 	and.w	r3, r3, #16
 80069d8:	2b10      	cmp	r3, #16
 80069da:	d119      	bne.n	8006a10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f06f 0210 	mvn.w	r2, #16
 80069e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2220      	movs	r2, #32
 80069f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e029      	b.n	8006a64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a10:	f7fb fc14 	bl	800223c <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d302      	bcc.n	8006a26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d116      	bne.n	8006a54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2220      	movs	r2, #32
 8006a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a40:	f043 0220 	orr.w	r2, r3, #32
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e007      	b.n	8006a64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a5e:	2b40      	cmp	r3, #64	; 0x40
 8006a60:	d1b5      	bne.n	80069ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a82:	d11b      	bne.n	8006abc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2220      	movs	r2, #32
 8006a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa8:	f043 0204 	orr.w	r2, r3, #4
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e000      	b.n	8006abe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
	...

08006acc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b088      	sub	sp, #32
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e128      	b.n	8006d30 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d109      	bne.n	8006afe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a90      	ldr	r2, [pc, #576]	; (8006d38 <HAL_I2S_Init+0x26c>)
 8006af6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f7fa ffb7 	bl	8001a6c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2202      	movs	r2, #2
 8006b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	69db      	ldr	r3, [r3, #28]
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	6812      	ldr	r2, [r2, #0]
 8006b10:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006b14:	f023 030f 	bic.w	r3, r3, #15
 8006b18:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d060      	beq.n	8006bec <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d102      	bne.n	8006b38 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006b32:	2310      	movs	r3, #16
 8006b34:	617b      	str	r3, [r7, #20]
 8006b36:	e001      	b.n	8006b3c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006b38:	2320      	movs	r3, #32
 8006b3a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	2b20      	cmp	r3, #32
 8006b42:	d802      	bhi.n	8006b4a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	005b      	lsls	r3, r3, #1
 8006b48:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006b4a:	2001      	movs	r0, #1
 8006b4c:	f001 fdcc 	bl	80086e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b50:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b5a:	d125      	bne.n	8006ba8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d010      	beq.n	8006b86 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b6e:	4613      	mov	r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4413      	add	r3, r2
 8006b74:	005b      	lsls	r3, r3, #1
 8006b76:	461a      	mov	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	695b      	ldr	r3, [r3, #20]
 8006b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b80:	3305      	adds	r3, #5
 8006b82:	613b      	str	r3, [r7, #16]
 8006b84:	e01f      	b.n	8006bc6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	00db      	lsls	r3, r3, #3
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b90:	4613      	mov	r3, r2
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4413      	add	r3, r2
 8006b96:	005b      	lsls	r3, r3, #1
 8006b98:	461a      	mov	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ba2:	3305      	adds	r3, #5
 8006ba4:	613b      	str	r3, [r7, #16]
 8006ba6:	e00e      	b.n	8006bc6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	fbb2 f2f3 	udiv	r2, r2, r3
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	005b      	lsls	r3, r3, #1
 8006bb8:	461a      	mov	r2, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc2:	3305      	adds	r3, #5
 8006bc4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	4a5c      	ldr	r2, [pc, #368]	; (8006d3c <HAL_I2S_Init+0x270>)
 8006bca:	fba2 2303 	umull	r2, r3, r2, r3
 8006bce:	08db      	lsrs	r3, r3, #3
 8006bd0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	f003 0301 	and.w	r3, r3, #1
 8006bd8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	085b      	lsrs	r3, r3, #1
 8006be2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	021b      	lsls	r3, r3, #8
 8006be8:	61bb      	str	r3, [r7, #24]
 8006bea:	e003      	b.n	8006bf4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006bec:	2302      	movs	r3, #2
 8006bee:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d902      	bls.n	8006c00 <HAL_I2S_Init+0x134>
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	2bff      	cmp	r3, #255	; 0xff
 8006bfe:	d907      	bls.n	8006c10 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c04:	f043 0210 	orr.w	r2, r3, #16
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e08f      	b.n	8006d30 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	691a      	ldr	r2, [r3, #16]
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	ea42 0103 	orr.w	r1, r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69fa      	ldr	r2, [r7, #28]
 8006c20:	430a      	orrs	r2, r1
 8006c22:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006c2e:	f023 030f 	bic.w	r3, r3, #15
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	6851      	ldr	r1, [r2, #4]
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	6892      	ldr	r2, [r2, #8]
 8006c3a:	4311      	orrs	r1, r2
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	68d2      	ldr	r2, [r2, #12]
 8006c40:	4311      	orrs	r1, r2
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	6992      	ldr	r2, [r2, #24]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	431a      	orrs	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c52:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d161      	bne.n	8006d20 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a38      	ldr	r2, [pc, #224]	; (8006d40 <HAL_I2S_Init+0x274>)
 8006c60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a37      	ldr	r2, [pc, #220]	; (8006d44 <HAL_I2S_Init+0x278>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d101      	bne.n	8006c70 <HAL_I2S_Init+0x1a4>
 8006c6c:	4b36      	ldr	r3, [pc, #216]	; (8006d48 <HAL_I2S_Init+0x27c>)
 8006c6e:	e001      	b.n	8006c74 <HAL_I2S_Init+0x1a8>
 8006c70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	6812      	ldr	r2, [r2, #0]
 8006c7a:	4932      	ldr	r1, [pc, #200]	; (8006d44 <HAL_I2S_Init+0x278>)
 8006c7c:	428a      	cmp	r2, r1
 8006c7e:	d101      	bne.n	8006c84 <HAL_I2S_Init+0x1b8>
 8006c80:	4a31      	ldr	r2, [pc, #196]	; (8006d48 <HAL_I2S_Init+0x27c>)
 8006c82:	e001      	b.n	8006c88 <HAL_I2S_Init+0x1bc>
 8006c84:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006c88:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006c8c:	f023 030f 	bic.w	r3, r3, #15
 8006c90:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a2b      	ldr	r2, [pc, #172]	; (8006d44 <HAL_I2S_Init+0x278>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d101      	bne.n	8006ca0 <HAL_I2S_Init+0x1d4>
 8006c9c:	4b2a      	ldr	r3, [pc, #168]	; (8006d48 <HAL_I2S_Init+0x27c>)
 8006c9e:	e001      	b.n	8006ca4 <HAL_I2S_Init+0x1d8>
 8006ca0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ca4:	2202      	movs	r2, #2
 8006ca6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a25      	ldr	r2, [pc, #148]	; (8006d44 <HAL_I2S_Init+0x278>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d101      	bne.n	8006cb6 <HAL_I2S_Init+0x1ea>
 8006cb2:	4b25      	ldr	r3, [pc, #148]	; (8006d48 <HAL_I2S_Init+0x27c>)
 8006cb4:	e001      	b.n	8006cba <HAL_I2S_Init+0x1ee>
 8006cb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006cba:	69db      	ldr	r3, [r3, #28]
 8006cbc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cc6:	d003      	beq.n	8006cd0 <HAL_I2S_Init+0x204>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d103      	bne.n	8006cd8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006cd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cd4:	613b      	str	r3, [r7, #16]
 8006cd6:	e001      	b.n	8006cdc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	897b      	ldrh	r3, [r7, #10]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d08:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a0d      	ldr	r2, [pc, #52]	; (8006d44 <HAL_I2S_Init+0x278>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d101      	bne.n	8006d18 <HAL_I2S_Init+0x24c>
 8006d14:	4b0c      	ldr	r3, [pc, #48]	; (8006d48 <HAL_I2S_Init+0x27c>)
 8006d16:	e001      	b.n	8006d1c <HAL_I2S_Init+0x250>
 8006d18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d1c:	897a      	ldrh	r2, [r7, #10]
 8006d1e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3720      	adds	r7, #32
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	080075d1 	.word	0x080075d1
 8006d3c:	cccccccd 	.word	0xcccccccd
 8006d40:	08007759 	.word	0x08007759
 8006d44:	40003800 	.word	0x40003800
 8006d48:	40003400 	.word	0x40003400

08006d4c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	4613      	mov	r3, r2
 8006d58:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d002      	beq.n	8006d66 <HAL_I2S_Transmit_DMA+0x1a>
 8006d60:	88fb      	ldrh	r3, [r7, #6]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e08e      	b.n	8006e88 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d101      	bne.n	8006d7a <HAL_I2S_Transmit_DMA+0x2e>
 8006d76:	2302      	movs	r3, #2
 8006d78:	e086      	b.n	8006e88 <HAL_I2S_Transmit_DMA+0x13c>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d005      	beq.n	8006d9a <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8006d96:	2302      	movs	r3, #2
 8006d98:	e076      	b.n	8006e88 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2203      	movs	r2, #3
 8006d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	f003 0307 	and.w	r3, r3, #7
 8006db8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	2b03      	cmp	r3, #3
 8006dbe:	d002      	beq.n	8006dc6 <HAL_I2S_Transmit_DMA+0x7a>
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	2b05      	cmp	r3, #5
 8006dc4:	d10a      	bne.n	8006ddc <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8006dc6:	88fb      	ldrh	r3, [r7, #6]
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8006dd0:	88fb      	ldrh	r3, [r7, #6]
 8006dd2:	005b      	lsls	r3, r3, #1
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006dda:	e005      	b.n	8006de8 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	88fa      	ldrh	r2, [r7, #6]
 8006de0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	88fa      	ldrh	r2, [r7, #6]
 8006de6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dec:	4a28      	ldr	r2, [pc, #160]	; (8006e90 <HAL_I2S_Transmit_DMA+0x144>)
 8006dee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df4:	4a27      	ldr	r2, [pc, #156]	; (8006e94 <HAL_I2S_Transmit_DMA+0x148>)
 8006df6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfc:	4a26      	ldr	r2, [pc, #152]	; (8006e98 <HAL_I2S_Transmit_DMA+0x14c>)
 8006dfe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006e08:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006e10:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e16:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006e18:	f7fc faca 	bl	80033b0 <HAL_DMA_Start_IT>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00f      	beq.n	8006e42 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e26:	f043 0208 	orr.w	r2, r3, #8
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e022      	b.n	8006e88 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	69db      	ldr	r3, [r3, #28]
 8006e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d107      	bne.n	8006e60 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	69da      	ldr	r2, [r3, #28]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e5e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d107      	bne.n	8006e7e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f042 0202 	orr.w	r2, r2, #2
 8006e7c:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3718      	adds	r7, #24
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	080074af 	.word	0x080074af
 8006e94:	0800746d 	.word	0x0800746d
 8006e98:	080074cb 	.word	0x080074cb

08006e9c <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d101      	bne.n	8006eb4 <HAL_I2S_DMAPause+0x18>
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	e04a      	b.n	8006f4a <HAL_I2S_DMAPause+0xae>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b03      	cmp	r3, #3
 8006ec6:	d108      	bne.n	8006eda <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f022 0202 	bic.w	r2, r2, #2
 8006ed6:	605a      	str	r2, [r3, #4]
 8006ed8:	e032      	b.n	8006f40 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b04      	cmp	r3, #4
 8006ee4:	d108      	bne.n	8006ef8 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f022 0201 	bic.w	r2, r2, #1
 8006ef4:	605a      	str	r2, [r3, #4]
 8006ef6:	e023      	b.n	8006f40 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b05      	cmp	r3, #5
 8006f02:	d11d      	bne.n	8006f40 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f022 0203 	bic.w	r2, r2, #3
 8006f12:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a0f      	ldr	r2, [pc, #60]	; (8006f58 <HAL_I2S_DMAPause+0xbc>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d101      	bne.n	8006f22 <HAL_I2S_DMAPause+0x86>
 8006f1e:	4b0f      	ldr	r3, [pc, #60]	; (8006f5c <HAL_I2S_DMAPause+0xc0>)
 8006f20:	e001      	b.n	8006f26 <HAL_I2S_DMAPause+0x8a>
 8006f22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f26:	685a      	ldr	r2, [r3, #4]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	490a      	ldr	r1, [pc, #40]	; (8006f58 <HAL_I2S_DMAPause+0xbc>)
 8006f2e:	428b      	cmp	r3, r1
 8006f30:	d101      	bne.n	8006f36 <HAL_I2S_DMAPause+0x9a>
 8006f32:	4b0a      	ldr	r3, [pc, #40]	; (8006f5c <HAL_I2S_DMAPause+0xc0>)
 8006f34:	e001      	b.n	8006f3a <HAL_I2S_DMAPause+0x9e>
 8006f36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f3a:	f022 0203 	bic.w	r2, r2, #3
 8006f3e:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	40003800 	.word	0x40003800
 8006f5c:	40003400 	.word	0x40003400

08006f60 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d101      	bne.n	8006f78 <HAL_I2S_DMAResume+0x18>
 8006f74:	2302      	movs	r3, #2
 8006f76:	e07d      	b.n	8007074 <HAL_I2S_DMAResume+0x114>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b03      	cmp	r3, #3
 8006f8a:	d108      	bne.n	8006f9e <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685a      	ldr	r2, [r3, #4]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f042 0202 	orr.w	r2, r2, #2
 8006f9a:	605a      	str	r2, [r3, #4]
 8006f9c:	e056      	b.n	800704c <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b04      	cmp	r3, #4
 8006fa8:	d108      	bne.n	8006fbc <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f042 0201 	orr.w	r2, r2, #1
 8006fb8:	605a      	str	r2, [r3, #4]
 8006fba:	e047      	b.n	800704c <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	2b05      	cmp	r3, #5
 8006fc6:	d141      	bne.n	800704c <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	685a      	ldr	r2, [r3, #4]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f042 0203 	orr.w	r2, r2, #3
 8006fd6:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a28      	ldr	r2, [pc, #160]	; (8007080 <HAL_I2S_DMAResume+0x120>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d101      	bne.n	8006fe6 <HAL_I2S_DMAResume+0x86>
 8006fe2:	4b28      	ldr	r3, [pc, #160]	; (8007084 <HAL_I2S_DMAResume+0x124>)
 8006fe4:	e001      	b.n	8006fea <HAL_I2S_DMAResume+0x8a>
 8006fe6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006fea:	685a      	ldr	r2, [r3, #4]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4923      	ldr	r1, [pc, #140]	; (8007080 <HAL_I2S_DMAResume+0x120>)
 8006ff2:	428b      	cmp	r3, r1
 8006ff4:	d101      	bne.n	8006ffa <HAL_I2S_DMAResume+0x9a>
 8006ff6:	4b23      	ldr	r3, [pc, #140]	; (8007084 <HAL_I2S_DMAResume+0x124>)
 8006ff8:	e001      	b.n	8006ffe <HAL_I2S_DMAResume+0x9e>
 8006ffa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ffe:	f042 0203 	orr.w	r2, r2, #3
 8007002:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a1d      	ldr	r2, [pc, #116]	; (8007080 <HAL_I2S_DMAResume+0x120>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d101      	bne.n	8007012 <HAL_I2S_DMAResume+0xb2>
 800700e:	4b1d      	ldr	r3, [pc, #116]	; (8007084 <HAL_I2S_DMAResume+0x124>)
 8007010:	e001      	b.n	8007016 <HAL_I2S_DMAResume+0xb6>
 8007012:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007016:	69db      	ldr	r3, [r3, #28]
 8007018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800701c:	2b00      	cmp	r3, #0
 800701e:	d115      	bne.n	800704c <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a16      	ldr	r2, [pc, #88]	; (8007080 <HAL_I2S_DMAResume+0x120>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d101      	bne.n	800702e <HAL_I2S_DMAResume+0xce>
 800702a:	4b16      	ldr	r3, [pc, #88]	; (8007084 <HAL_I2S_DMAResume+0x124>)
 800702c:	e001      	b.n	8007032 <HAL_I2S_DMAResume+0xd2>
 800702e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007032:	69da      	ldr	r2, [r3, #28]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4911      	ldr	r1, [pc, #68]	; (8007080 <HAL_I2S_DMAResume+0x120>)
 800703a:	428b      	cmp	r3, r1
 800703c:	d101      	bne.n	8007042 <HAL_I2S_DMAResume+0xe2>
 800703e:	4b11      	ldr	r3, [pc, #68]	; (8007084 <HAL_I2S_DMAResume+0x124>)
 8007040:	e001      	b.n	8007046 <HAL_I2S_DMAResume+0xe6>
 8007042:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007046:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800704a:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007056:	2b00      	cmp	r3, #0
 8007058:	d107      	bne.n	800706a <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	69da      	ldr	r2, [r3, #28]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007068:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr
 8007080:	40003800 	.word	0x40003800
 8007084:	40003400 	.word	0x40003400

08007088 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b088      	sub	sp, #32
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007090:	2300      	movs	r3, #0
 8007092:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800709c:	d004      	beq.n	80070a8 <HAL_I2S_DMAStop+0x20>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f040 80d1 	bne.w	800724a <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00f      	beq.n	80070d0 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7fc f9d3 	bl	8003460 <HAL_DMA_Abort>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d007      	beq.n	80070d0 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c4:	f043 0208 	orr.w	r2, r3, #8
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80070d0:	2364      	movs	r3, #100	; 0x64
 80070d2:	2201      	movs	r2, #1
 80070d4:	2102      	movs	r1, #2
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fb04 	bl	80076e4 <I2S_WaitFlagStateUntilTimeout>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00b      	beq.n	80070fa <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070e6:	f043 0201 	orr.w	r2, r3, #1
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80070fa:	2364      	movs	r3, #100	; 0x64
 80070fc:	2200      	movs	r2, #0
 80070fe:	2180      	movs	r1, #128	; 0x80
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 faef 	bl	80076e4 <I2S_WaitFlagStateUntilTimeout>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00b      	beq.n	8007124 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007110:	f043 0201 	orr.w	r2, r3, #1
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	69da      	ldr	r2, [r3, #28]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007132:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007134:	2300      	movs	r3, #0
 8007136:	617b      	str	r3, [r7, #20]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	617b      	str	r3, [r7, #20]
 8007140:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f022 0202 	bic.w	r2, r2, #2
 8007150:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b05      	cmp	r3, #5
 800715c:	f040 8165 	bne.w	800742a <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00f      	beq.n	8007188 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716c:	4618      	mov	r0, r3
 800716e:	f7fc f977 	bl	8003460 <HAL_DMA_Abort>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d007      	beq.n	8007188 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800717c:	f043 0208 	orr.w	r2, r3, #8
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a8a      	ldr	r2, [pc, #552]	; (80073b8 <HAL_I2S_DMAStop+0x330>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d101      	bne.n	8007196 <HAL_I2S_DMAStop+0x10e>
 8007192:	4b8a      	ldr	r3, [pc, #552]	; (80073bc <HAL_I2S_DMAStop+0x334>)
 8007194:	e001      	b.n	800719a <HAL_I2S_DMAStop+0x112>
 8007196:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800719a:	69da      	ldr	r2, [r3, #28]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4985      	ldr	r1, [pc, #532]	; (80073b8 <HAL_I2S_DMAStop+0x330>)
 80071a2:	428b      	cmp	r3, r1
 80071a4:	d101      	bne.n	80071aa <HAL_I2S_DMAStop+0x122>
 80071a6:	4b85      	ldr	r3, [pc, #532]	; (80073bc <HAL_I2S_DMAStop+0x334>)
 80071a8:	e001      	b.n	80071ae <HAL_I2S_DMAStop+0x126>
 80071aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071b2:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 80071b4:	2300      	movs	r3, #0
 80071b6:	613b      	str	r3, [r7, #16]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a7e      	ldr	r2, [pc, #504]	; (80073b8 <HAL_I2S_DMAStop+0x330>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d101      	bne.n	80071c6 <HAL_I2S_DMAStop+0x13e>
 80071c2:	4b7e      	ldr	r3, [pc, #504]	; (80073bc <HAL_I2S_DMAStop+0x334>)
 80071c4:	e001      	b.n	80071ca <HAL_I2S_DMAStop+0x142>
 80071c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	613b      	str	r3, [r7, #16]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a79      	ldr	r2, [pc, #484]	; (80073b8 <HAL_I2S_DMAStop+0x330>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d101      	bne.n	80071dc <HAL_I2S_DMAStop+0x154>
 80071d8:	4b78      	ldr	r3, [pc, #480]	; (80073bc <HAL_I2S_DMAStop+0x334>)
 80071da:	e001      	b.n	80071e0 <HAL_I2S_DMAStop+0x158>
 80071dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	613b      	str	r3, [r7, #16]
 80071e4:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a73      	ldr	r2, [pc, #460]	; (80073b8 <HAL_I2S_DMAStop+0x330>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d101      	bne.n	80071f4 <HAL_I2S_DMAStop+0x16c>
 80071f0:	4b72      	ldr	r3, [pc, #456]	; (80073bc <HAL_I2S_DMAStop+0x334>)
 80071f2:	e001      	b.n	80071f8 <HAL_I2S_DMAStop+0x170>
 80071f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071f8:	685a      	ldr	r2, [r3, #4]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	496e      	ldr	r1, [pc, #440]	; (80073b8 <HAL_I2S_DMAStop+0x330>)
 8007200:	428b      	cmp	r3, r1
 8007202:	d101      	bne.n	8007208 <HAL_I2S_DMAStop+0x180>
 8007204:	4b6d      	ldr	r3, [pc, #436]	; (80073bc <HAL_I2S_DMAStop+0x334>)
 8007206:	e001      	b.n	800720c <HAL_I2S_DMAStop+0x184>
 8007208:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800720c:	f022 0201 	bic.w	r2, r2, #1
 8007210:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d10c      	bne.n	8007234 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800721e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8007232:	e0fa      	b.n	800742a <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a5f      	ldr	r2, [pc, #380]	; (80073b8 <HAL_I2S_DMAStop+0x330>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d101      	bne.n	8007242 <HAL_I2S_DMAStop+0x1ba>
 800723e:	4b5f      	ldr	r3, [pc, #380]	; (80073bc <HAL_I2S_DMAStop+0x334>)
 8007240:	e001      	b.n	8007246 <HAL_I2S_DMAStop+0x1be>
 8007242:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007246:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8007248:	e0ef      	b.n	800742a <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007252:	d005      	beq.n	8007260 <HAL_I2S_DMAStop+0x1d8>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800725c:	f040 80e5 	bne.w	800742a <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00f      	beq.n	8007288 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800726c:	4618      	mov	r0, r3
 800726e:	f7fc f8f7 	bl	8003460 <HAL_DMA_Abort>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d007      	beq.n	8007288 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800727c:	f043 0208 	orr.w	r2, r3, #8
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b05      	cmp	r3, #5
 8007292:	f040 809a 	bne.w	80073ca <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00f      	beq.n	80072be <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fc f8dc 	bl	8003460 <HAL_DMA_Abort>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d007      	beq.n	80072be <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072b2:	f043 0208 	orr.w	r2, r3, #8
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80072be:	f7fa ffbd 	bl	800223c <HAL_GetTick>
 80072c2:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80072c4:	e012      	b.n	80072ec <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80072c6:	f7fa ffb9 	bl	800223c <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	2b64      	cmp	r3, #100	; 0x64
 80072d2:	d90b      	bls.n	80072ec <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072d8:	f043 0201 	orr.w	r2, r3, #1
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a31      	ldr	r2, [pc, #196]	; (80073b8 <HAL_I2S_DMAStop+0x330>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d101      	bne.n	80072fa <HAL_I2S_DMAStop+0x272>
 80072f6:	4b31      	ldr	r3, [pc, #196]	; (80073bc <HAL_I2S_DMAStop+0x334>)
 80072f8:	e001      	b.n	80072fe <HAL_I2S_DMAStop+0x276>
 80072fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	f003 0302 	and.w	r3, r3, #2
 8007304:	2b02      	cmp	r3, #2
 8007306:	d1de      	bne.n	80072c6 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8007308:	e012      	b.n	8007330 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800730a:	f7fa ff97 	bl	800223c <HAL_GetTick>
 800730e:	4602      	mov	r2, r0
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	1ad3      	subs	r3, r2, r3
 8007314:	2b64      	cmp	r3, #100	; 0x64
 8007316:	d90b      	bls.n	8007330 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731c:	f043 0201 	orr.w	r2, r3, #1
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a20      	ldr	r2, [pc, #128]	; (80073b8 <HAL_I2S_DMAStop+0x330>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d101      	bne.n	800733e <HAL_I2S_DMAStop+0x2b6>
 800733a:	4b20      	ldr	r3, [pc, #128]	; (80073bc <HAL_I2S_DMAStop+0x334>)
 800733c:	e001      	b.n	8007342 <HAL_I2S_DMAStop+0x2ba>
 800733e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007348:	2b80      	cmp	r3, #128	; 0x80
 800734a:	d0de      	beq.n	800730a <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a19      	ldr	r2, [pc, #100]	; (80073b8 <HAL_I2S_DMAStop+0x330>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d101      	bne.n	800735a <HAL_I2S_DMAStop+0x2d2>
 8007356:	4b19      	ldr	r3, [pc, #100]	; (80073bc <HAL_I2S_DMAStop+0x334>)
 8007358:	e001      	b.n	800735e <HAL_I2S_DMAStop+0x2d6>
 800735a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800735e:	69da      	ldr	r2, [r3, #28]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4914      	ldr	r1, [pc, #80]	; (80073b8 <HAL_I2S_DMAStop+0x330>)
 8007366:	428b      	cmp	r3, r1
 8007368:	d101      	bne.n	800736e <HAL_I2S_DMAStop+0x2e6>
 800736a:	4b14      	ldr	r3, [pc, #80]	; (80073bc <HAL_I2S_DMAStop+0x334>)
 800736c:	e001      	b.n	8007372 <HAL_I2S_DMAStop+0x2ea>
 800736e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007376:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8007378:	2300      	movs	r3, #0
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a0d      	ldr	r2, [pc, #52]	; (80073b8 <HAL_I2S_DMAStop+0x330>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d101      	bne.n	800738a <HAL_I2S_DMAStop+0x302>
 8007386:	4b0d      	ldr	r3, [pc, #52]	; (80073bc <HAL_I2S_DMAStop+0x334>)
 8007388:	e001      	b.n	800738e <HAL_I2S_DMAStop+0x306>
 800738a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	60fb      	str	r3, [r7, #12]
 8007392:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a07      	ldr	r2, [pc, #28]	; (80073b8 <HAL_I2S_DMAStop+0x330>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d101      	bne.n	80073a2 <HAL_I2S_DMAStop+0x31a>
 800739e:	4b07      	ldr	r3, [pc, #28]	; (80073bc <HAL_I2S_DMAStop+0x334>)
 80073a0:	e001      	b.n	80073a6 <HAL_I2S_DMAStop+0x31e>
 80073a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4902      	ldr	r1, [pc, #8]	; (80073b8 <HAL_I2S_DMAStop+0x330>)
 80073ae:	428b      	cmp	r3, r1
 80073b0:	d106      	bne.n	80073c0 <HAL_I2S_DMAStop+0x338>
 80073b2:	4b02      	ldr	r3, [pc, #8]	; (80073bc <HAL_I2S_DMAStop+0x334>)
 80073b4:	e006      	b.n	80073c4 <HAL_I2S_DMAStop+0x33c>
 80073b6:	bf00      	nop
 80073b8:	40003800 	.word	0x40003800
 80073bc:	40003400 	.word	0x40003400
 80073c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80073c4:	f022 0202 	bic.w	r2, r2, #2
 80073c8:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	69da      	ldr	r2, [r3, #28]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073d8:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80073da:	2300      	movs	r3, #0
 80073dc:	60bb      	str	r3, [r7, #8]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	60bb      	str	r3, [r7, #8]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	60bb      	str	r3, [r7, #8]
 80073ee:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685a      	ldr	r2, [r3, #4]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 0201 	bic.w	r2, r2, #1
 80073fe:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007408:	d10c      	bne.n	8007424 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800740e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	77fb      	strb	r3, [r7, #31]
 8007422:	e002      	b.n	800742a <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8007432:	7ffb      	ldrb	r3, [r7, #31]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3720      	adds	r7, #32
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800745e:	b2db      	uxtb	r3, r3
}
 8007460:	4618      	mov	r0, r3
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007478:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	69db      	ldr	r3, [r3, #28]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10e      	bne.n	80074a0 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	685a      	ldr	r2, [r3, #4]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f022 0202 	bic.w	r2, r2, #2
 8007490:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f7f9 f8f1 	bl	8000688 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80074a6:	bf00      	nop
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b084      	sub	sp, #16
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ba:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f7f9 f8f5 	bl	80006ac <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80074c2:	bf00      	nop
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b084      	sub	sp, #16
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	685a      	ldr	r2, [r3, #4]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f022 0203 	bic.w	r2, r2, #3
 80074e6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007500:	f043 0208 	orr.w	r2, r3, #8
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f7f9 fa3f 	bl	800098c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800750e:	bf00      	nop
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b082      	sub	sp, #8
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007522:	881a      	ldrh	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752e:	1c9a      	adds	r2, r3, #2
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007538:	b29b      	uxth	r3, r3
 800753a:	3b01      	subs	r3, #1
 800753c:	b29a      	uxth	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007546:	b29b      	uxth	r3, r3
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10e      	bne.n	800756a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	685a      	ldr	r2, [r3, #4]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800755a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f7f9 f88f 	bl	8000688 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800756a:	bf00      	nop
 800756c:	3708      	adds	r7, #8
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b082      	sub	sp, #8
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68da      	ldr	r2, [r3, #12]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007584:	b292      	uxth	r2, r2
 8007586:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758c:	1c9a      	adds	r2, r3, #2
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007596:	b29b      	uxth	r3, r3
 8007598:	3b01      	subs	r3, #1
 800759a:	b29a      	uxth	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10e      	bne.n	80075c8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	685a      	ldr	r2, [r3, #4]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80075b8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7ff ff3a 	bl	800743c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80075c8:	bf00      	nop
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b04      	cmp	r3, #4
 80075ea:	d13a      	bne.n	8007662 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d109      	bne.n	800760a <I2S_IRQHandler+0x3a>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007600:	2b40      	cmp	r3, #64	; 0x40
 8007602:	d102      	bne.n	800760a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7ff ffb4 	bl	8007572 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007610:	2b40      	cmp	r3, #64	; 0x40
 8007612:	d126      	bne.n	8007662 <I2S_IRQHandler+0x92>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	f003 0320 	and.w	r3, r3, #32
 800761e:	2b20      	cmp	r3, #32
 8007620:	d11f      	bne.n	8007662 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685a      	ldr	r2, [r3, #4]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007630:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007632:	2300      	movs	r3, #0
 8007634:	613b      	str	r3, [r7, #16]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	613b      	str	r3, [r7, #16]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	613b      	str	r3, [r7, #16]
 8007646:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007654:	f043 0202 	orr.w	r2, r3, #2
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f7f9 f995 	bl	800098c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007668:	b2db      	uxtb	r3, r3
 800766a:	2b03      	cmp	r3, #3
 800766c:	d136      	bne.n	80076dc <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	f003 0302 	and.w	r3, r3, #2
 8007674:	2b02      	cmp	r3, #2
 8007676:	d109      	bne.n	800768c <I2S_IRQHandler+0xbc>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007682:	2b80      	cmp	r3, #128	; 0x80
 8007684:	d102      	bne.n	800768c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7ff ff45 	bl	8007516 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	f003 0308 	and.w	r3, r3, #8
 8007692:	2b08      	cmp	r3, #8
 8007694:	d122      	bne.n	80076dc <I2S_IRQHandler+0x10c>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	f003 0320 	and.w	r3, r3, #32
 80076a0:	2b20      	cmp	r3, #32
 80076a2:	d11b      	bne.n	80076dc <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	685a      	ldr	r2, [r3, #4]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80076b2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80076b4:	2300      	movs	r3, #0
 80076b6:	60fb      	str	r3, [r7, #12]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	60fb      	str	r3, [r7, #12]
 80076c0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ce:	f043 0204 	orr.w	r2, r3, #4
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f7f9 f958 	bl	800098c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80076dc:	bf00      	nop
 80076de:	3718      	adds	r7, #24
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	603b      	str	r3, [r7, #0]
 80076f0:	4613      	mov	r3, r2
 80076f2:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80076f4:	f7fa fda2 	bl	800223c <HAL_GetTick>
 80076f8:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80076fa:	e018      	b.n	800772e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007702:	d014      	beq.n	800772e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8007704:	f7fa fd9a 	bl	800223c <HAL_GetTick>
 8007708:	4602      	mov	r2, r0
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	683a      	ldr	r2, [r7, #0]
 8007710:	429a      	cmp	r2, r3
 8007712:	d902      	bls.n	800771a <I2S_WaitFlagStateUntilTimeout+0x36>
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d109      	bne.n	800772e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e00f      	b.n	800774e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	689a      	ldr	r2, [r3, #8]
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	4013      	ands	r3, r2
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	429a      	cmp	r2, r3
 800773c:	bf0c      	ite	eq
 800773e:	2301      	moveq	r3, #1
 8007740:	2300      	movne	r3, #0
 8007742:	b2db      	uxtb	r3, r3
 8007744:	461a      	mov	r2, r3
 8007746:	79fb      	ldrb	r3, [r7, #7]
 8007748:	429a      	cmp	r2, r3
 800774a:	d1d7      	bne.n	80076fc <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3718      	adds	r7, #24
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
	...

08007758 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b088      	sub	sp, #32
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4aa2      	ldr	r2, [pc, #648]	; (80079f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d101      	bne.n	8007776 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8007772:	4ba2      	ldr	r3, [pc, #648]	; (80079fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007774:	e001      	b.n	800777a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8007776:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a9b      	ldr	r2, [pc, #620]	; (80079f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d101      	bne.n	8007794 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007790:	4b9a      	ldr	r3, [pc, #616]	; (80079fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007792:	e001      	b.n	8007798 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007794:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077a4:	d004      	beq.n	80077b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f040 8099 	bne.w	80078e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	f003 0302 	and.w	r3, r3, #2
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d107      	bne.n	80077ca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d002      	beq.n	80077ca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f925 	bl	8007a14 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	f003 0301 	and.w	r3, r3, #1
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d107      	bne.n	80077e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d002      	beq.n	80077e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f9c8 	bl	8007b74 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ea:	2b40      	cmp	r3, #64	; 0x40
 80077ec:	d13a      	bne.n	8007864 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	f003 0320 	and.w	r3, r3, #32
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d035      	beq.n	8007864 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a7e      	ldr	r2, [pc, #504]	; (80079f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d101      	bne.n	8007806 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8007802:	4b7e      	ldr	r3, [pc, #504]	; (80079fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007804:	e001      	b.n	800780a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8007806:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800780a:	685a      	ldr	r2, [r3, #4]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4979      	ldr	r1, [pc, #484]	; (80079f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007812:	428b      	cmp	r3, r1
 8007814:	d101      	bne.n	800781a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8007816:	4b79      	ldr	r3, [pc, #484]	; (80079fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007818:	e001      	b.n	800781e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800781a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800781e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007822:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	685a      	ldr	r2, [r3, #4]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007832:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007834:	2300      	movs	r3, #0
 8007836:	60fb      	str	r3, [r7, #12]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	60fb      	str	r3, [r7, #12]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	60fb      	str	r3, [r7, #12]
 8007848:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007856:	f043 0202 	orr.w	r2, r3, #2
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7f9 f894 	bl	800098c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	f003 0308 	and.w	r3, r3, #8
 800786a:	2b08      	cmp	r3, #8
 800786c:	f040 80be 	bne.w	80079ec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	f003 0320 	and.w	r3, r3, #32
 8007876:	2b00      	cmp	r3, #0
 8007878:	f000 80b8 	beq.w	80079ec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	685a      	ldr	r2, [r3, #4]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800788a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a59      	ldr	r2, [pc, #356]	; (80079f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d101      	bne.n	800789a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8007896:	4b59      	ldr	r3, [pc, #356]	; (80079fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007898:	e001      	b.n	800789e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800789a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800789e:	685a      	ldr	r2, [r3, #4]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4954      	ldr	r1, [pc, #336]	; (80079f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80078a6:	428b      	cmp	r3, r1
 80078a8:	d101      	bne.n	80078ae <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80078aa:	4b54      	ldr	r3, [pc, #336]	; (80079fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80078ac:	e001      	b.n	80078b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80078ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80078b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80078b6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80078b8:	2300      	movs	r3, #0
 80078ba:	60bb      	str	r3, [r7, #8]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	60bb      	str	r3, [r7, #8]
 80078c4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078d2:	f043 0204 	orr.w	r2, r3, #4
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f7f9 f856 	bl	800098c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80078e0:	e084      	b.n	80079ec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	f003 0302 	and.w	r3, r3, #2
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d107      	bne.n	80078fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d002      	beq.n	80078fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f8be 	bl	8007a78 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b01      	cmp	r3, #1
 8007904:	d107      	bne.n	8007916 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790c:	2b00      	cmp	r3, #0
 800790e:	d002      	beq.n	8007916 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f8fd 	bl	8007b10 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800791c:	2b40      	cmp	r3, #64	; 0x40
 800791e:	d12f      	bne.n	8007980 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	f003 0320 	and.w	r3, r3, #32
 8007926:	2b00      	cmp	r3, #0
 8007928:	d02a      	beq.n	8007980 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	685a      	ldr	r2, [r3, #4]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007938:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a2e      	ldr	r2, [pc, #184]	; (80079f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d101      	bne.n	8007948 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007944:	4b2d      	ldr	r3, [pc, #180]	; (80079fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007946:	e001      	b.n	800794c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8007948:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800794c:	685a      	ldr	r2, [r3, #4]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4929      	ldr	r1, [pc, #164]	; (80079f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007954:	428b      	cmp	r3, r1
 8007956:	d101      	bne.n	800795c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007958:	4b28      	ldr	r3, [pc, #160]	; (80079fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800795a:	e001      	b.n	8007960 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800795c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007960:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007964:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007972:	f043 0202 	orr.w	r2, r3, #2
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7f9 f806 	bl	800098c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	f003 0308 	and.w	r3, r3, #8
 8007986:	2b08      	cmp	r3, #8
 8007988:	d131      	bne.n	80079ee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	f003 0320 	and.w	r3, r3, #32
 8007990:	2b00      	cmp	r3, #0
 8007992:	d02c      	beq.n	80079ee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a17      	ldr	r2, [pc, #92]	; (80079f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d101      	bne.n	80079a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800799e:	4b17      	ldr	r3, [pc, #92]	; (80079fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80079a0:	e001      	b.n	80079a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80079a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80079a6:	685a      	ldr	r2, [r3, #4]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4912      	ldr	r1, [pc, #72]	; (80079f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80079ae:	428b      	cmp	r3, r1
 80079b0:	d101      	bne.n	80079b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80079b2:	4b12      	ldr	r3, [pc, #72]	; (80079fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80079b4:	e001      	b.n	80079ba <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80079b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80079ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80079be:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80079ce:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079dc:	f043 0204 	orr.w	r2, r3, #4
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f7f8 ffd1 	bl	800098c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80079ea:	e000      	b.n	80079ee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80079ec:	bf00      	nop
}
 80079ee:	bf00      	nop
 80079f0:	3720      	adds	r7, #32
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	40003800 	.word	0x40003800
 80079fc:	40003400 	.word	0x40003400

08007a00 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007a08:	bf00      	nop
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a20:	1c99      	adds	r1, r3, #2
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	6251      	str	r1, [r2, #36]	; 0x24
 8007a26:	881a      	ldrh	r2, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	3b01      	subs	r3, #1
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d113      	bne.n	8007a6e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	685a      	ldr	r2, [r3, #4]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007a54:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d106      	bne.n	8007a6e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f7ff ffc9 	bl	8007a00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007a6e:	bf00      	nop
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
	...

08007a78 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a84:	1c99      	adds	r1, r3, #2
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	6251      	str	r1, [r2, #36]	; 0x24
 8007a8a:	8819      	ldrh	r1, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a1d      	ldr	r2, [pc, #116]	; (8007b08 <I2SEx_TxISR_I2SExt+0x90>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d101      	bne.n	8007a9a <I2SEx_TxISR_I2SExt+0x22>
 8007a96:	4b1d      	ldr	r3, [pc, #116]	; (8007b0c <I2SEx_TxISR_I2SExt+0x94>)
 8007a98:	e001      	b.n	8007a9e <I2SEx_TxISR_I2SExt+0x26>
 8007a9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007a9e:	460a      	mov	r2, r1
 8007aa0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d121      	bne.n	8007afe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a12      	ldr	r2, [pc, #72]	; (8007b08 <I2SEx_TxISR_I2SExt+0x90>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d101      	bne.n	8007ac8 <I2SEx_TxISR_I2SExt+0x50>
 8007ac4:	4b11      	ldr	r3, [pc, #68]	; (8007b0c <I2SEx_TxISR_I2SExt+0x94>)
 8007ac6:	e001      	b.n	8007acc <I2SEx_TxISR_I2SExt+0x54>
 8007ac8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	490d      	ldr	r1, [pc, #52]	; (8007b08 <I2SEx_TxISR_I2SExt+0x90>)
 8007ad4:	428b      	cmp	r3, r1
 8007ad6:	d101      	bne.n	8007adc <I2SEx_TxISR_I2SExt+0x64>
 8007ad8:	4b0c      	ldr	r3, [pc, #48]	; (8007b0c <I2SEx_TxISR_I2SExt+0x94>)
 8007ada:	e001      	b.n	8007ae0 <I2SEx_TxISR_I2SExt+0x68>
 8007adc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007ae0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007ae4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d106      	bne.n	8007afe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f7ff ff81 	bl	8007a00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007afe:	bf00      	nop
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	40003800 	.word	0x40003800
 8007b0c:	40003400 	.word	0x40003400

08007b10 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68d8      	ldr	r0, [r3, #12]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b22:	1c99      	adds	r1, r3, #2
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007b28:	b282      	uxth	r2, r0
 8007b2a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	3b01      	subs	r3, #1
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d113      	bne.n	8007b6c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	685a      	ldr	r2, [r3, #4]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007b52:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d106      	bne.n	8007b6c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7ff ff4a 	bl	8007a00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007b6c:	bf00      	nop
 8007b6e:	3708      	adds	r7, #8
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a20      	ldr	r2, [pc, #128]	; (8007c04 <I2SEx_RxISR_I2SExt+0x90>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d101      	bne.n	8007b8a <I2SEx_RxISR_I2SExt+0x16>
 8007b86:	4b20      	ldr	r3, [pc, #128]	; (8007c08 <I2SEx_RxISR_I2SExt+0x94>)
 8007b88:	e001      	b.n	8007b8e <I2SEx_RxISR_I2SExt+0x1a>
 8007b8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007b8e:	68d8      	ldr	r0, [r3, #12]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b94:	1c99      	adds	r1, r3, #2
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007b9a:	b282      	uxth	r2, r0
 8007b9c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d121      	bne.n	8007bfa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a12      	ldr	r2, [pc, #72]	; (8007c04 <I2SEx_RxISR_I2SExt+0x90>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d101      	bne.n	8007bc4 <I2SEx_RxISR_I2SExt+0x50>
 8007bc0:	4b11      	ldr	r3, [pc, #68]	; (8007c08 <I2SEx_RxISR_I2SExt+0x94>)
 8007bc2:	e001      	b.n	8007bc8 <I2SEx_RxISR_I2SExt+0x54>
 8007bc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007bc8:	685a      	ldr	r2, [r3, #4]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	490d      	ldr	r1, [pc, #52]	; (8007c04 <I2SEx_RxISR_I2SExt+0x90>)
 8007bd0:	428b      	cmp	r3, r1
 8007bd2:	d101      	bne.n	8007bd8 <I2SEx_RxISR_I2SExt+0x64>
 8007bd4:	4b0c      	ldr	r3, [pc, #48]	; (8007c08 <I2SEx_RxISR_I2SExt+0x94>)
 8007bd6:	e001      	b.n	8007bdc <I2SEx_RxISR_I2SExt+0x68>
 8007bd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007bdc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007be0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d106      	bne.n	8007bfa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f7ff ff03 	bl	8007a00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007bfa:	bf00      	nop
 8007bfc:	3708      	adds	r7, #8
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	40003800 	.word	0x40003800
 8007c08:	40003400 	.word	0x40003400

08007c0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b086      	sub	sp, #24
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d101      	bne.n	8007c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e264      	b.n	80080e8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d075      	beq.n	8007d16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007c2a:	4ba3      	ldr	r3, [pc, #652]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f003 030c 	and.w	r3, r3, #12
 8007c32:	2b04      	cmp	r3, #4
 8007c34:	d00c      	beq.n	8007c50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c36:	4ba0      	ldr	r3, [pc, #640]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007c3e:	2b08      	cmp	r3, #8
 8007c40:	d112      	bne.n	8007c68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c42:	4b9d      	ldr	r3, [pc, #628]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c4e:	d10b      	bne.n	8007c68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c50:	4b99      	ldr	r3, [pc, #612]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d05b      	beq.n	8007d14 <HAL_RCC_OscConfig+0x108>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d157      	bne.n	8007d14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e23f      	b.n	80080e8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c70:	d106      	bne.n	8007c80 <HAL_RCC_OscConfig+0x74>
 8007c72:	4b91      	ldr	r3, [pc, #580]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a90      	ldr	r2, [pc, #576]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c7c:	6013      	str	r3, [r2, #0]
 8007c7e:	e01d      	b.n	8007cbc <HAL_RCC_OscConfig+0xb0>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c88:	d10c      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x98>
 8007c8a:	4b8b      	ldr	r3, [pc, #556]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a8a      	ldr	r2, [pc, #552]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c94:	6013      	str	r3, [r2, #0]
 8007c96:	4b88      	ldr	r3, [pc, #544]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a87      	ldr	r2, [pc, #540]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ca0:	6013      	str	r3, [r2, #0]
 8007ca2:	e00b      	b.n	8007cbc <HAL_RCC_OscConfig+0xb0>
 8007ca4:	4b84      	ldr	r3, [pc, #528]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a83      	ldr	r2, [pc, #524]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cae:	6013      	str	r3, [r2, #0]
 8007cb0:	4b81      	ldr	r3, [pc, #516]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a80      	ldr	r2, [pc, #512]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d013      	beq.n	8007cec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cc4:	f7fa faba 	bl	800223c <HAL_GetTick>
 8007cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cca:	e008      	b.n	8007cde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ccc:	f7fa fab6 	bl	800223c <HAL_GetTick>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	2b64      	cmp	r3, #100	; 0x64
 8007cd8:	d901      	bls.n	8007cde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	e204      	b.n	80080e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cde:	4b76      	ldr	r3, [pc, #472]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d0f0      	beq.n	8007ccc <HAL_RCC_OscConfig+0xc0>
 8007cea:	e014      	b.n	8007d16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cec:	f7fa faa6 	bl	800223c <HAL_GetTick>
 8007cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007cf2:	e008      	b.n	8007d06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007cf4:	f7fa faa2 	bl	800223c <HAL_GetTick>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	2b64      	cmp	r3, #100	; 0x64
 8007d00:	d901      	bls.n	8007d06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e1f0      	b.n	80080e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d06:	4b6c      	ldr	r3, [pc, #432]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1f0      	bne.n	8007cf4 <HAL_RCC_OscConfig+0xe8>
 8007d12:	e000      	b.n	8007d16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 0302 	and.w	r3, r3, #2
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d063      	beq.n	8007dea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007d22:	4b65      	ldr	r3, [pc, #404]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f003 030c 	and.w	r3, r3, #12
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00b      	beq.n	8007d46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d2e:	4b62      	ldr	r3, [pc, #392]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007d36:	2b08      	cmp	r3, #8
 8007d38:	d11c      	bne.n	8007d74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d3a:	4b5f      	ldr	r3, [pc, #380]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d116      	bne.n	8007d74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d46:	4b5c      	ldr	r3, [pc, #368]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 0302 	and.w	r3, r3, #2
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d005      	beq.n	8007d5e <HAL_RCC_OscConfig+0x152>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d001      	beq.n	8007d5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e1c4      	b.n	80080e8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d5e:	4b56      	ldr	r3, [pc, #344]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	00db      	lsls	r3, r3, #3
 8007d6c:	4952      	ldr	r1, [pc, #328]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d72:	e03a      	b.n	8007dea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d020      	beq.n	8007dbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d7c:	4b4f      	ldr	r3, [pc, #316]	; (8007ebc <HAL_RCC_OscConfig+0x2b0>)
 8007d7e:	2201      	movs	r2, #1
 8007d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d82:	f7fa fa5b 	bl	800223c <HAL_GetTick>
 8007d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d88:	e008      	b.n	8007d9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d8a:	f7fa fa57 	bl	800223c <HAL_GetTick>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	1ad3      	subs	r3, r2, r3
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	d901      	bls.n	8007d9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007d98:	2303      	movs	r3, #3
 8007d9a:	e1a5      	b.n	80080e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d9c:	4b46      	ldr	r3, [pc, #280]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0302 	and.w	r3, r3, #2
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d0f0      	beq.n	8007d8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007da8:	4b43      	ldr	r3, [pc, #268]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	00db      	lsls	r3, r3, #3
 8007db6:	4940      	ldr	r1, [pc, #256]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007db8:	4313      	orrs	r3, r2
 8007dba:	600b      	str	r3, [r1, #0]
 8007dbc:	e015      	b.n	8007dea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007dbe:	4b3f      	ldr	r3, [pc, #252]	; (8007ebc <HAL_RCC_OscConfig+0x2b0>)
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dc4:	f7fa fa3a 	bl	800223c <HAL_GetTick>
 8007dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007dca:	e008      	b.n	8007dde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007dcc:	f7fa fa36 	bl	800223c <HAL_GetTick>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	1ad3      	subs	r3, r2, r3
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d901      	bls.n	8007dde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	e184      	b.n	80080e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007dde:	4b36      	ldr	r3, [pc, #216]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 0302 	and.w	r3, r3, #2
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1f0      	bne.n	8007dcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 0308 	and.w	r3, r3, #8
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d030      	beq.n	8007e58 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	695b      	ldr	r3, [r3, #20]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d016      	beq.n	8007e2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007dfe:	4b30      	ldr	r3, [pc, #192]	; (8007ec0 <HAL_RCC_OscConfig+0x2b4>)
 8007e00:	2201      	movs	r2, #1
 8007e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e04:	f7fa fa1a 	bl	800223c <HAL_GetTick>
 8007e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e0a:	e008      	b.n	8007e1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e0c:	f7fa fa16 	bl	800223c <HAL_GetTick>
 8007e10:	4602      	mov	r2, r0
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d901      	bls.n	8007e1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e164      	b.n	80080e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e1e:	4b26      	ldr	r3, [pc, #152]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e22:	f003 0302 	and.w	r3, r3, #2
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d0f0      	beq.n	8007e0c <HAL_RCC_OscConfig+0x200>
 8007e2a:	e015      	b.n	8007e58 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e2c:	4b24      	ldr	r3, [pc, #144]	; (8007ec0 <HAL_RCC_OscConfig+0x2b4>)
 8007e2e:	2200      	movs	r2, #0
 8007e30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e32:	f7fa fa03 	bl	800223c <HAL_GetTick>
 8007e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e38:	e008      	b.n	8007e4c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e3a:	f7fa f9ff 	bl	800223c <HAL_GetTick>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d901      	bls.n	8007e4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e14d      	b.n	80080e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e4c:	4b1a      	ldr	r3, [pc, #104]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e50:	f003 0302 	and.w	r3, r3, #2
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1f0      	bne.n	8007e3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 0304 	and.w	r3, r3, #4
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f000 80a0 	beq.w	8007fa6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e66:	2300      	movs	r3, #0
 8007e68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e6a:	4b13      	ldr	r3, [pc, #76]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10f      	bne.n	8007e96 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e76:	2300      	movs	r3, #0
 8007e78:	60bb      	str	r3, [r7, #8]
 8007e7a:	4b0f      	ldr	r3, [pc, #60]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7e:	4a0e      	ldr	r2, [pc, #56]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e84:	6413      	str	r3, [r2, #64]	; 0x40
 8007e86:	4b0c      	ldr	r3, [pc, #48]	; (8007eb8 <HAL_RCC_OscConfig+0x2ac>)
 8007e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e8e:	60bb      	str	r3, [r7, #8]
 8007e90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e92:	2301      	movs	r3, #1
 8007e94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e96:	4b0b      	ldr	r3, [pc, #44]	; (8007ec4 <HAL_RCC_OscConfig+0x2b8>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d121      	bne.n	8007ee6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ea2:	4b08      	ldr	r3, [pc, #32]	; (8007ec4 <HAL_RCC_OscConfig+0x2b8>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a07      	ldr	r2, [pc, #28]	; (8007ec4 <HAL_RCC_OscConfig+0x2b8>)
 8007ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007eac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007eae:	f7fa f9c5 	bl	800223c <HAL_GetTick>
 8007eb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007eb4:	e011      	b.n	8007eda <HAL_RCC_OscConfig+0x2ce>
 8007eb6:	bf00      	nop
 8007eb8:	40023800 	.word	0x40023800
 8007ebc:	42470000 	.word	0x42470000
 8007ec0:	42470e80 	.word	0x42470e80
 8007ec4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ec8:	f7fa f9b8 	bl	800223c <HAL_GetTick>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d901      	bls.n	8007eda <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e106      	b.n	80080e8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007eda:	4b85      	ldr	r3, [pc, #532]	; (80080f0 <HAL_RCC_OscConfig+0x4e4>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d0f0      	beq.n	8007ec8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d106      	bne.n	8007efc <HAL_RCC_OscConfig+0x2f0>
 8007eee:	4b81      	ldr	r3, [pc, #516]	; (80080f4 <HAL_RCC_OscConfig+0x4e8>)
 8007ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ef2:	4a80      	ldr	r2, [pc, #512]	; (80080f4 <HAL_RCC_OscConfig+0x4e8>)
 8007ef4:	f043 0301 	orr.w	r3, r3, #1
 8007ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8007efa:	e01c      	b.n	8007f36 <HAL_RCC_OscConfig+0x32a>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	2b05      	cmp	r3, #5
 8007f02:	d10c      	bne.n	8007f1e <HAL_RCC_OscConfig+0x312>
 8007f04:	4b7b      	ldr	r3, [pc, #492]	; (80080f4 <HAL_RCC_OscConfig+0x4e8>)
 8007f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f08:	4a7a      	ldr	r2, [pc, #488]	; (80080f4 <HAL_RCC_OscConfig+0x4e8>)
 8007f0a:	f043 0304 	orr.w	r3, r3, #4
 8007f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8007f10:	4b78      	ldr	r3, [pc, #480]	; (80080f4 <HAL_RCC_OscConfig+0x4e8>)
 8007f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f14:	4a77      	ldr	r2, [pc, #476]	; (80080f4 <HAL_RCC_OscConfig+0x4e8>)
 8007f16:	f043 0301 	orr.w	r3, r3, #1
 8007f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8007f1c:	e00b      	b.n	8007f36 <HAL_RCC_OscConfig+0x32a>
 8007f1e:	4b75      	ldr	r3, [pc, #468]	; (80080f4 <HAL_RCC_OscConfig+0x4e8>)
 8007f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f22:	4a74      	ldr	r2, [pc, #464]	; (80080f4 <HAL_RCC_OscConfig+0x4e8>)
 8007f24:	f023 0301 	bic.w	r3, r3, #1
 8007f28:	6713      	str	r3, [r2, #112]	; 0x70
 8007f2a:	4b72      	ldr	r3, [pc, #456]	; (80080f4 <HAL_RCC_OscConfig+0x4e8>)
 8007f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f2e:	4a71      	ldr	r2, [pc, #452]	; (80080f4 <HAL_RCC_OscConfig+0x4e8>)
 8007f30:	f023 0304 	bic.w	r3, r3, #4
 8007f34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d015      	beq.n	8007f6a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f3e:	f7fa f97d 	bl	800223c <HAL_GetTick>
 8007f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f44:	e00a      	b.n	8007f5c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f46:	f7fa f979 	bl	800223c <HAL_GetTick>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	1ad3      	subs	r3, r2, r3
 8007f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d901      	bls.n	8007f5c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	e0c5      	b.n	80080e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f5c:	4b65      	ldr	r3, [pc, #404]	; (80080f4 <HAL_RCC_OscConfig+0x4e8>)
 8007f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f60:	f003 0302 	and.w	r3, r3, #2
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d0ee      	beq.n	8007f46 <HAL_RCC_OscConfig+0x33a>
 8007f68:	e014      	b.n	8007f94 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f6a:	f7fa f967 	bl	800223c <HAL_GetTick>
 8007f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f70:	e00a      	b.n	8007f88 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f72:	f7fa f963 	bl	800223c <HAL_GetTick>
 8007f76:	4602      	mov	r2, r0
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d901      	bls.n	8007f88 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e0af      	b.n	80080e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f88:	4b5a      	ldr	r3, [pc, #360]	; (80080f4 <HAL_RCC_OscConfig+0x4e8>)
 8007f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f8c:	f003 0302 	and.w	r3, r3, #2
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1ee      	bne.n	8007f72 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007f94:	7dfb      	ldrb	r3, [r7, #23]
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d105      	bne.n	8007fa6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f9a:	4b56      	ldr	r3, [pc, #344]	; (80080f4 <HAL_RCC_OscConfig+0x4e8>)
 8007f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9e:	4a55      	ldr	r2, [pc, #340]	; (80080f4 <HAL_RCC_OscConfig+0x4e8>)
 8007fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fa4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	699b      	ldr	r3, [r3, #24]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f000 809b 	beq.w	80080e6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007fb0:	4b50      	ldr	r3, [pc, #320]	; (80080f4 <HAL_RCC_OscConfig+0x4e8>)
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	f003 030c 	and.w	r3, r3, #12
 8007fb8:	2b08      	cmp	r3, #8
 8007fba:	d05c      	beq.n	8008076 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	d141      	bne.n	8008048 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fc4:	4b4c      	ldr	r3, [pc, #304]	; (80080f8 <HAL_RCC_OscConfig+0x4ec>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fca:	f7fa f937 	bl	800223c <HAL_GetTick>
 8007fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fd0:	e008      	b.n	8007fe4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fd2:	f7fa f933 	bl	800223c <HAL_GetTick>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	1ad3      	subs	r3, r2, r3
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d901      	bls.n	8007fe4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e081      	b.n	80080e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fe4:	4b43      	ldr	r3, [pc, #268]	; (80080f4 <HAL_RCC_OscConfig+0x4e8>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1f0      	bne.n	8007fd2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	69da      	ldr	r2, [r3, #28]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6a1b      	ldr	r3, [r3, #32]
 8007ff8:	431a      	orrs	r2, r3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffe:	019b      	lsls	r3, r3, #6
 8008000:	431a      	orrs	r2, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008006:	085b      	lsrs	r3, r3, #1
 8008008:	3b01      	subs	r3, #1
 800800a:	041b      	lsls	r3, r3, #16
 800800c:	431a      	orrs	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008012:	061b      	lsls	r3, r3, #24
 8008014:	4937      	ldr	r1, [pc, #220]	; (80080f4 <HAL_RCC_OscConfig+0x4e8>)
 8008016:	4313      	orrs	r3, r2
 8008018:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800801a:	4b37      	ldr	r3, [pc, #220]	; (80080f8 <HAL_RCC_OscConfig+0x4ec>)
 800801c:	2201      	movs	r2, #1
 800801e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008020:	f7fa f90c 	bl	800223c <HAL_GetTick>
 8008024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008026:	e008      	b.n	800803a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008028:	f7fa f908 	bl	800223c <HAL_GetTick>
 800802c:	4602      	mov	r2, r0
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	2b02      	cmp	r3, #2
 8008034:	d901      	bls.n	800803a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008036:	2303      	movs	r3, #3
 8008038:	e056      	b.n	80080e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800803a:	4b2e      	ldr	r3, [pc, #184]	; (80080f4 <HAL_RCC_OscConfig+0x4e8>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008042:	2b00      	cmp	r3, #0
 8008044:	d0f0      	beq.n	8008028 <HAL_RCC_OscConfig+0x41c>
 8008046:	e04e      	b.n	80080e6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008048:	4b2b      	ldr	r3, [pc, #172]	; (80080f8 <HAL_RCC_OscConfig+0x4ec>)
 800804a:	2200      	movs	r2, #0
 800804c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800804e:	f7fa f8f5 	bl	800223c <HAL_GetTick>
 8008052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008054:	e008      	b.n	8008068 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008056:	f7fa f8f1 	bl	800223c <HAL_GetTick>
 800805a:	4602      	mov	r2, r0
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	2b02      	cmp	r3, #2
 8008062:	d901      	bls.n	8008068 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008064:	2303      	movs	r3, #3
 8008066:	e03f      	b.n	80080e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008068:	4b22      	ldr	r3, [pc, #136]	; (80080f4 <HAL_RCC_OscConfig+0x4e8>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1f0      	bne.n	8008056 <HAL_RCC_OscConfig+0x44a>
 8008074:	e037      	b.n	80080e6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	699b      	ldr	r3, [r3, #24]
 800807a:	2b01      	cmp	r3, #1
 800807c:	d101      	bne.n	8008082 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e032      	b.n	80080e8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008082:	4b1c      	ldr	r3, [pc, #112]	; (80080f4 <HAL_RCC_OscConfig+0x4e8>)
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	699b      	ldr	r3, [r3, #24]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d028      	beq.n	80080e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800809a:	429a      	cmp	r2, r3
 800809c:	d121      	bne.n	80080e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d11a      	bne.n	80080e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80080b2:	4013      	ands	r3, r2
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80080b8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d111      	bne.n	80080e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c8:	085b      	lsrs	r3, r3, #1
 80080ca:	3b01      	subs	r3, #1
 80080cc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d107      	bne.n	80080e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080dc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80080de:	429a      	cmp	r2, r3
 80080e0:	d001      	beq.n	80080e6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e000      	b.n	80080e8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3718      	adds	r7, #24
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	40007000 	.word	0x40007000
 80080f4:	40023800 	.word	0x40023800
 80080f8:	42470060 	.word	0x42470060

080080fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d101      	bne.n	8008110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	e0cc      	b.n	80082aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008110:	4b68      	ldr	r3, [pc, #416]	; (80082b4 <HAL_RCC_ClockConfig+0x1b8>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 0307 	and.w	r3, r3, #7
 8008118:	683a      	ldr	r2, [r7, #0]
 800811a:	429a      	cmp	r2, r3
 800811c:	d90c      	bls.n	8008138 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800811e:	4b65      	ldr	r3, [pc, #404]	; (80082b4 <HAL_RCC_ClockConfig+0x1b8>)
 8008120:	683a      	ldr	r2, [r7, #0]
 8008122:	b2d2      	uxtb	r2, r2
 8008124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008126:	4b63      	ldr	r3, [pc, #396]	; (80082b4 <HAL_RCC_ClockConfig+0x1b8>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 0307 	and.w	r3, r3, #7
 800812e:	683a      	ldr	r2, [r7, #0]
 8008130:	429a      	cmp	r2, r3
 8008132:	d001      	beq.n	8008138 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	e0b8      	b.n	80082aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 0302 	and.w	r3, r3, #2
 8008140:	2b00      	cmp	r3, #0
 8008142:	d020      	beq.n	8008186 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 0304 	and.w	r3, r3, #4
 800814c:	2b00      	cmp	r3, #0
 800814e:	d005      	beq.n	800815c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008150:	4b59      	ldr	r3, [pc, #356]	; (80082b8 <HAL_RCC_ClockConfig+0x1bc>)
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	4a58      	ldr	r2, [pc, #352]	; (80082b8 <HAL_RCC_ClockConfig+0x1bc>)
 8008156:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800815a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 0308 	and.w	r3, r3, #8
 8008164:	2b00      	cmp	r3, #0
 8008166:	d005      	beq.n	8008174 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008168:	4b53      	ldr	r3, [pc, #332]	; (80082b8 <HAL_RCC_ClockConfig+0x1bc>)
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	4a52      	ldr	r2, [pc, #328]	; (80082b8 <HAL_RCC_ClockConfig+0x1bc>)
 800816e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008172:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008174:	4b50      	ldr	r3, [pc, #320]	; (80082b8 <HAL_RCC_ClockConfig+0x1bc>)
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	494d      	ldr	r1, [pc, #308]	; (80082b8 <HAL_RCC_ClockConfig+0x1bc>)
 8008182:	4313      	orrs	r3, r2
 8008184:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 0301 	and.w	r3, r3, #1
 800818e:	2b00      	cmp	r3, #0
 8008190:	d044      	beq.n	800821c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	2b01      	cmp	r3, #1
 8008198:	d107      	bne.n	80081aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800819a:	4b47      	ldr	r3, [pc, #284]	; (80082b8 <HAL_RCC_ClockConfig+0x1bc>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d119      	bne.n	80081da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	e07f      	b.n	80082aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d003      	beq.n	80081ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80081b6:	2b03      	cmp	r3, #3
 80081b8:	d107      	bne.n	80081ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081ba:	4b3f      	ldr	r3, [pc, #252]	; (80082b8 <HAL_RCC_ClockConfig+0x1bc>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d109      	bne.n	80081da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e06f      	b.n	80082aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081ca:	4b3b      	ldr	r3, [pc, #236]	; (80082b8 <HAL_RCC_ClockConfig+0x1bc>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 0302 	and.w	r3, r3, #2
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d101      	bne.n	80081da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e067      	b.n	80082aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80081da:	4b37      	ldr	r3, [pc, #220]	; (80082b8 <HAL_RCC_ClockConfig+0x1bc>)
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	f023 0203 	bic.w	r2, r3, #3
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	4934      	ldr	r1, [pc, #208]	; (80082b8 <HAL_RCC_ClockConfig+0x1bc>)
 80081e8:	4313      	orrs	r3, r2
 80081ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80081ec:	f7fa f826 	bl	800223c <HAL_GetTick>
 80081f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081f2:	e00a      	b.n	800820a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081f4:	f7fa f822 	bl	800223c <HAL_GetTick>
 80081f8:	4602      	mov	r2, r0
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008202:	4293      	cmp	r3, r2
 8008204:	d901      	bls.n	800820a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008206:	2303      	movs	r3, #3
 8008208:	e04f      	b.n	80082aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800820a:	4b2b      	ldr	r3, [pc, #172]	; (80082b8 <HAL_RCC_ClockConfig+0x1bc>)
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	f003 020c 	and.w	r2, r3, #12
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	429a      	cmp	r2, r3
 800821a:	d1eb      	bne.n	80081f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800821c:	4b25      	ldr	r3, [pc, #148]	; (80082b4 <HAL_RCC_ClockConfig+0x1b8>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 0307 	and.w	r3, r3, #7
 8008224:	683a      	ldr	r2, [r7, #0]
 8008226:	429a      	cmp	r2, r3
 8008228:	d20c      	bcs.n	8008244 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800822a:	4b22      	ldr	r3, [pc, #136]	; (80082b4 <HAL_RCC_ClockConfig+0x1b8>)
 800822c:	683a      	ldr	r2, [r7, #0]
 800822e:	b2d2      	uxtb	r2, r2
 8008230:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008232:	4b20      	ldr	r3, [pc, #128]	; (80082b4 <HAL_RCC_ClockConfig+0x1b8>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 0307 	and.w	r3, r3, #7
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	429a      	cmp	r2, r3
 800823e:	d001      	beq.n	8008244 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	e032      	b.n	80082aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 0304 	and.w	r3, r3, #4
 800824c:	2b00      	cmp	r3, #0
 800824e:	d008      	beq.n	8008262 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008250:	4b19      	ldr	r3, [pc, #100]	; (80082b8 <HAL_RCC_ClockConfig+0x1bc>)
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	4916      	ldr	r1, [pc, #88]	; (80082b8 <HAL_RCC_ClockConfig+0x1bc>)
 800825e:	4313      	orrs	r3, r2
 8008260:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 0308 	and.w	r3, r3, #8
 800826a:	2b00      	cmp	r3, #0
 800826c:	d009      	beq.n	8008282 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800826e:	4b12      	ldr	r3, [pc, #72]	; (80082b8 <HAL_RCC_ClockConfig+0x1bc>)
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	00db      	lsls	r3, r3, #3
 800827c:	490e      	ldr	r1, [pc, #56]	; (80082b8 <HAL_RCC_ClockConfig+0x1bc>)
 800827e:	4313      	orrs	r3, r2
 8008280:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008282:	f000 f821 	bl	80082c8 <HAL_RCC_GetSysClockFreq>
 8008286:	4602      	mov	r2, r0
 8008288:	4b0b      	ldr	r3, [pc, #44]	; (80082b8 <HAL_RCC_ClockConfig+0x1bc>)
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	091b      	lsrs	r3, r3, #4
 800828e:	f003 030f 	and.w	r3, r3, #15
 8008292:	490a      	ldr	r1, [pc, #40]	; (80082bc <HAL_RCC_ClockConfig+0x1c0>)
 8008294:	5ccb      	ldrb	r3, [r1, r3]
 8008296:	fa22 f303 	lsr.w	r3, r2, r3
 800829a:	4a09      	ldr	r2, [pc, #36]	; (80082c0 <HAL_RCC_ClockConfig+0x1c4>)
 800829c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800829e:	4b09      	ldr	r3, [pc, #36]	; (80082c4 <HAL_RCC_ClockConfig+0x1c8>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7f9 ff86 	bl	80021b4 <HAL_InitTick>

  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	40023c00 	.word	0x40023c00
 80082b8:	40023800 	.word	0x40023800
 80082bc:	080106dc 	.word	0x080106dc
 80082c0:	20000038 	.word	0x20000038
 80082c4:	20000040 	.word	0x20000040

080082c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80082c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80082cc:	b084      	sub	sp, #16
 80082ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80082d0:	2300      	movs	r3, #0
 80082d2:	607b      	str	r3, [r7, #4]
 80082d4:	2300      	movs	r3, #0
 80082d6:	60fb      	str	r3, [r7, #12]
 80082d8:	2300      	movs	r3, #0
 80082da:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80082dc:	2300      	movs	r3, #0
 80082de:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80082e0:	4b67      	ldr	r3, [pc, #412]	; (8008480 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	f003 030c 	and.w	r3, r3, #12
 80082e8:	2b08      	cmp	r3, #8
 80082ea:	d00d      	beq.n	8008308 <HAL_RCC_GetSysClockFreq+0x40>
 80082ec:	2b08      	cmp	r3, #8
 80082ee:	f200 80bd 	bhi.w	800846c <HAL_RCC_GetSysClockFreq+0x1a4>
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d002      	beq.n	80082fc <HAL_RCC_GetSysClockFreq+0x34>
 80082f6:	2b04      	cmp	r3, #4
 80082f8:	d003      	beq.n	8008302 <HAL_RCC_GetSysClockFreq+0x3a>
 80082fa:	e0b7      	b.n	800846c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80082fc:	4b61      	ldr	r3, [pc, #388]	; (8008484 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80082fe:	60bb      	str	r3, [r7, #8]
       break;
 8008300:	e0b7      	b.n	8008472 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008302:	4b61      	ldr	r3, [pc, #388]	; (8008488 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008304:	60bb      	str	r3, [r7, #8]
      break;
 8008306:	e0b4      	b.n	8008472 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008308:	4b5d      	ldr	r3, [pc, #372]	; (8008480 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008310:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008312:	4b5b      	ldr	r3, [pc, #364]	; (8008480 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800831a:	2b00      	cmp	r3, #0
 800831c:	d04d      	beq.n	80083ba <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800831e:	4b58      	ldr	r3, [pc, #352]	; (8008480 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	099b      	lsrs	r3, r3, #6
 8008324:	461a      	mov	r2, r3
 8008326:	f04f 0300 	mov.w	r3, #0
 800832a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800832e:	f04f 0100 	mov.w	r1, #0
 8008332:	ea02 0800 	and.w	r8, r2, r0
 8008336:	ea03 0901 	and.w	r9, r3, r1
 800833a:	4640      	mov	r0, r8
 800833c:	4649      	mov	r1, r9
 800833e:	f04f 0200 	mov.w	r2, #0
 8008342:	f04f 0300 	mov.w	r3, #0
 8008346:	014b      	lsls	r3, r1, #5
 8008348:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800834c:	0142      	lsls	r2, r0, #5
 800834e:	4610      	mov	r0, r2
 8008350:	4619      	mov	r1, r3
 8008352:	ebb0 0008 	subs.w	r0, r0, r8
 8008356:	eb61 0109 	sbc.w	r1, r1, r9
 800835a:	f04f 0200 	mov.w	r2, #0
 800835e:	f04f 0300 	mov.w	r3, #0
 8008362:	018b      	lsls	r3, r1, #6
 8008364:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008368:	0182      	lsls	r2, r0, #6
 800836a:	1a12      	subs	r2, r2, r0
 800836c:	eb63 0301 	sbc.w	r3, r3, r1
 8008370:	f04f 0000 	mov.w	r0, #0
 8008374:	f04f 0100 	mov.w	r1, #0
 8008378:	00d9      	lsls	r1, r3, #3
 800837a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800837e:	00d0      	lsls	r0, r2, #3
 8008380:	4602      	mov	r2, r0
 8008382:	460b      	mov	r3, r1
 8008384:	eb12 0208 	adds.w	r2, r2, r8
 8008388:	eb43 0309 	adc.w	r3, r3, r9
 800838c:	f04f 0000 	mov.w	r0, #0
 8008390:	f04f 0100 	mov.w	r1, #0
 8008394:	0259      	lsls	r1, r3, #9
 8008396:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800839a:	0250      	lsls	r0, r2, #9
 800839c:	4602      	mov	r2, r0
 800839e:	460b      	mov	r3, r1
 80083a0:	4610      	mov	r0, r2
 80083a2:	4619      	mov	r1, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	461a      	mov	r2, r3
 80083a8:	f04f 0300 	mov.w	r3, #0
 80083ac:	f7f7 ff0c 	bl	80001c8 <__aeabi_uldivmod>
 80083b0:	4602      	mov	r2, r0
 80083b2:	460b      	mov	r3, r1
 80083b4:	4613      	mov	r3, r2
 80083b6:	60fb      	str	r3, [r7, #12]
 80083b8:	e04a      	b.n	8008450 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083ba:	4b31      	ldr	r3, [pc, #196]	; (8008480 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	099b      	lsrs	r3, r3, #6
 80083c0:	461a      	mov	r2, r3
 80083c2:	f04f 0300 	mov.w	r3, #0
 80083c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80083ca:	f04f 0100 	mov.w	r1, #0
 80083ce:	ea02 0400 	and.w	r4, r2, r0
 80083d2:	ea03 0501 	and.w	r5, r3, r1
 80083d6:	4620      	mov	r0, r4
 80083d8:	4629      	mov	r1, r5
 80083da:	f04f 0200 	mov.w	r2, #0
 80083de:	f04f 0300 	mov.w	r3, #0
 80083e2:	014b      	lsls	r3, r1, #5
 80083e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80083e8:	0142      	lsls	r2, r0, #5
 80083ea:	4610      	mov	r0, r2
 80083ec:	4619      	mov	r1, r3
 80083ee:	1b00      	subs	r0, r0, r4
 80083f0:	eb61 0105 	sbc.w	r1, r1, r5
 80083f4:	f04f 0200 	mov.w	r2, #0
 80083f8:	f04f 0300 	mov.w	r3, #0
 80083fc:	018b      	lsls	r3, r1, #6
 80083fe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008402:	0182      	lsls	r2, r0, #6
 8008404:	1a12      	subs	r2, r2, r0
 8008406:	eb63 0301 	sbc.w	r3, r3, r1
 800840a:	f04f 0000 	mov.w	r0, #0
 800840e:	f04f 0100 	mov.w	r1, #0
 8008412:	00d9      	lsls	r1, r3, #3
 8008414:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008418:	00d0      	lsls	r0, r2, #3
 800841a:	4602      	mov	r2, r0
 800841c:	460b      	mov	r3, r1
 800841e:	1912      	adds	r2, r2, r4
 8008420:	eb45 0303 	adc.w	r3, r5, r3
 8008424:	f04f 0000 	mov.w	r0, #0
 8008428:	f04f 0100 	mov.w	r1, #0
 800842c:	0299      	lsls	r1, r3, #10
 800842e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008432:	0290      	lsls	r0, r2, #10
 8008434:	4602      	mov	r2, r0
 8008436:	460b      	mov	r3, r1
 8008438:	4610      	mov	r0, r2
 800843a:	4619      	mov	r1, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	461a      	mov	r2, r3
 8008440:	f04f 0300 	mov.w	r3, #0
 8008444:	f7f7 fec0 	bl	80001c8 <__aeabi_uldivmod>
 8008448:	4602      	mov	r2, r0
 800844a:	460b      	mov	r3, r1
 800844c:	4613      	mov	r3, r2
 800844e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008450:	4b0b      	ldr	r3, [pc, #44]	; (8008480 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	0c1b      	lsrs	r3, r3, #16
 8008456:	f003 0303 	and.w	r3, r3, #3
 800845a:	3301      	adds	r3, #1
 800845c:	005b      	lsls	r3, r3, #1
 800845e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	fbb2 f3f3 	udiv	r3, r2, r3
 8008468:	60bb      	str	r3, [r7, #8]
      break;
 800846a:	e002      	b.n	8008472 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800846c:	4b05      	ldr	r3, [pc, #20]	; (8008484 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800846e:	60bb      	str	r3, [r7, #8]
      break;
 8008470:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008472:	68bb      	ldr	r3, [r7, #8]
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800847e:	bf00      	nop
 8008480:	40023800 	.word	0x40023800
 8008484:	00f42400 	.word	0x00f42400
 8008488:	007a1200 	.word	0x007a1200

0800848c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800848c:	b480      	push	{r7}
 800848e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008490:	4b03      	ldr	r3, [pc, #12]	; (80084a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008492:	681b      	ldr	r3, [r3, #0]
}
 8008494:	4618      	mov	r0, r3
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	20000038 	.word	0x20000038

080084a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80084a8:	f7ff fff0 	bl	800848c <HAL_RCC_GetHCLKFreq>
 80084ac:	4602      	mov	r2, r0
 80084ae:	4b05      	ldr	r3, [pc, #20]	; (80084c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	0a9b      	lsrs	r3, r3, #10
 80084b4:	f003 0307 	and.w	r3, r3, #7
 80084b8:	4903      	ldr	r1, [pc, #12]	; (80084c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80084ba:	5ccb      	ldrb	r3, [r1, r3]
 80084bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	40023800 	.word	0x40023800
 80084c8:	080106ec 	.word	0x080106ec

080084cc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b086      	sub	sp, #24
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80084d4:	2300      	movs	r3, #0
 80084d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80084d8:	2300      	movs	r3, #0
 80084da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 0301 	and.w	r3, r3, #1
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d105      	bne.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d035      	beq.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80084f4:	4b62      	ldr	r3, [pc, #392]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80084f6:	2200      	movs	r2, #0
 80084f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80084fa:	f7f9 fe9f 	bl	800223c <HAL_GetTick>
 80084fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008500:	e008      	b.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008502:	f7f9 fe9b 	bl	800223c <HAL_GetTick>
 8008506:	4602      	mov	r2, r0
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	2b02      	cmp	r3, #2
 800850e:	d901      	bls.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008510:	2303      	movs	r3, #3
 8008512:	e0b0      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008514:	4b5b      	ldr	r3, [pc, #364]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800851c:	2b00      	cmp	r3, #0
 800851e:	d1f0      	bne.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	019a      	lsls	r2, r3, #6
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	071b      	lsls	r3, r3, #28
 800852c:	4955      	ldr	r1, [pc, #340]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800852e:	4313      	orrs	r3, r2
 8008530:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008534:	4b52      	ldr	r3, [pc, #328]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008536:	2201      	movs	r2, #1
 8008538:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800853a:	f7f9 fe7f 	bl	800223c <HAL_GetTick>
 800853e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008540:	e008      	b.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008542:	f7f9 fe7b 	bl	800223c <HAL_GetTick>
 8008546:	4602      	mov	r2, r0
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	1ad3      	subs	r3, r2, r3
 800854c:	2b02      	cmp	r3, #2
 800854e:	d901      	bls.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008550:	2303      	movs	r3, #3
 8008552:	e090      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008554:	4b4b      	ldr	r3, [pc, #300]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800855c:	2b00      	cmp	r3, #0
 800855e:	d0f0      	beq.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0302 	and.w	r3, r3, #2
 8008568:	2b00      	cmp	r3, #0
 800856a:	f000 8083 	beq.w	8008674 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800856e:	2300      	movs	r3, #0
 8008570:	60fb      	str	r3, [r7, #12]
 8008572:	4b44      	ldr	r3, [pc, #272]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008576:	4a43      	ldr	r2, [pc, #268]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800857c:	6413      	str	r3, [r2, #64]	; 0x40
 800857e:	4b41      	ldr	r3, [pc, #260]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008586:	60fb      	str	r3, [r7, #12]
 8008588:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800858a:	4b3f      	ldr	r3, [pc, #252]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a3e      	ldr	r2, [pc, #248]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008594:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008596:	f7f9 fe51 	bl	800223c <HAL_GetTick>
 800859a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800859c:	e008      	b.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800859e:	f7f9 fe4d 	bl	800223c <HAL_GetTick>
 80085a2:	4602      	mov	r2, r0
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	1ad3      	subs	r3, r2, r3
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d901      	bls.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e062      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80085b0:	4b35      	ldr	r3, [pc, #212]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d0f0      	beq.n	800859e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80085bc:	4b31      	ldr	r3, [pc, #196]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80085be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085c4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d02f      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085d4:	693a      	ldr	r2, [r7, #16]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d028      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80085da:	4b2a      	ldr	r3, [pc, #168]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80085dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085e2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80085e4:	4b29      	ldr	r3, [pc, #164]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80085e6:	2201      	movs	r2, #1
 80085e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80085ea:	4b28      	ldr	r3, [pc, #160]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80085ec:	2200      	movs	r2, #0
 80085ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80085f0:	4a24      	ldr	r2, [pc, #144]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80085f6:	4b23      	ldr	r3, [pc, #140]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80085f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085fa:	f003 0301 	and.w	r3, r3, #1
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d114      	bne.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008602:	f7f9 fe1b 	bl	800223c <HAL_GetTick>
 8008606:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008608:	e00a      	b.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800860a:	f7f9 fe17 	bl	800223c <HAL_GetTick>
 800860e:	4602      	mov	r2, r0
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	1ad3      	subs	r3, r2, r3
 8008614:	f241 3288 	movw	r2, #5000	; 0x1388
 8008618:	4293      	cmp	r3, r2
 800861a:	d901      	bls.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800861c:	2303      	movs	r3, #3
 800861e:	e02a      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008620:	4b18      	ldr	r3, [pc, #96]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008624:	f003 0302 	and.w	r3, r3, #2
 8008628:	2b00      	cmp	r3, #0
 800862a:	d0ee      	beq.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008634:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008638:	d10d      	bne.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800863a:	4b12      	ldr	r3, [pc, #72]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800864a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800864e:	490d      	ldr	r1, [pc, #52]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008650:	4313      	orrs	r3, r2
 8008652:	608b      	str	r3, [r1, #8]
 8008654:	e005      	b.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008656:	4b0b      	ldr	r3, [pc, #44]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	4a0a      	ldr	r2, [pc, #40]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800865c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008660:	6093      	str	r3, [r2, #8]
 8008662:	4b08      	ldr	r3, [pc, #32]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008664:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800866e:	4905      	ldr	r1, [pc, #20]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008670:	4313      	orrs	r3, r2
 8008672:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3718      	adds	r7, #24
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	42470068 	.word	0x42470068
 8008684:	40023800 	.word	0x40023800
 8008688:	40007000 	.word	0x40007000
 800868c:	42470e40 	.word	0x42470e40

08008690 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2203      	movs	r2, #3
 800869c:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800869e:	4b11      	ldr	r3, [pc, #68]	; (80086e4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80086a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086a4:	099b      	lsrs	r3, r3, #6
 80086a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80086ae:	4b0d      	ldr	r3, [pc, #52]	; (80086e4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80086b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086b4:	0f1b      	lsrs	r3, r3, #28
 80086b6:	f003 0207 	and.w	r2, r3, #7
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80086be:	4b09      	ldr	r3, [pc, #36]	; (80086e4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80086c6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80086c8:	4b06      	ldr	r3, [pc, #24]	; (80086e4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80086ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086cc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	431a      	orrs	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 80086d8:	bf00      	nop
 80086da:	3714      	adds	r7, #20
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr
 80086e4:	40023800 	.word	0x40023800

080086e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b087      	sub	sp, #28
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80086f0:	2300      	movs	r3, #0
 80086f2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80086f4:	2300      	movs	r3, #0
 80086f6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80086f8:	2300      	movs	r3, #0
 80086fa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80086fc:	2300      	movs	r3, #0
 80086fe:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2b01      	cmp	r3, #1
 8008704:	d13e      	bne.n	8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8008706:	4b23      	ldr	r3, [pc, #140]	; (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800870e:	60fb      	str	r3, [r7, #12]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d005      	beq.n	8008722 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2b01      	cmp	r3, #1
 800871a:	d12f      	bne.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800871c:	4b1e      	ldr	r3, [pc, #120]	; (8008798 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800871e:	617b      	str	r3, [r7, #20]
          break;
 8008720:	e02f      	b.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008722:	4b1c      	ldr	r3, [pc, #112]	; (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800872a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800872e:	d108      	bne.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008730:	4b18      	ldr	r3, [pc, #96]	; (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008738:	4a18      	ldr	r2, [pc, #96]	; (800879c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800873a:	fbb2 f3f3 	udiv	r3, r2, r3
 800873e:	613b      	str	r3, [r7, #16]
 8008740:	e007      	b.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008742:	4b14      	ldr	r3, [pc, #80]	; (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800874a:	4a15      	ldr	r2, [pc, #84]	; (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800874c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008750:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008752:	4b10      	ldr	r3, [pc, #64]	; (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008758:	099b      	lsrs	r3, r3, #6
 800875a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	fb02 f303 	mul.w	r3, r2, r3
 8008764:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008766:	4b0b      	ldr	r3, [pc, #44]	; (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800876c:	0f1b      	lsrs	r3, r3, #28
 800876e:	f003 0307 	and.w	r3, r3, #7
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	fbb2 f3f3 	udiv	r3, r2, r3
 8008778:	617b      	str	r3, [r7, #20]
          break;
 800877a:	e002      	b.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800877c:	2300      	movs	r3, #0
 800877e:	617b      	str	r3, [r7, #20]
          break;
 8008780:	bf00      	nop
        }
      }
      break;
 8008782:	bf00      	nop
    }
  }
  return frequency;
 8008784:	697b      	ldr	r3, [r7, #20]
}
 8008786:	4618      	mov	r0, r3
 8008788:	371c      	adds	r7, #28
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	40023800 	.word	0x40023800
 8008798:	00bb8000 	.word	0x00bb8000
 800879c:	007a1200 	.word	0x007a1200
 80087a0:	00f42400 	.word	0x00f42400

080087a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80087a4:	b084      	sub	sp, #16
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b084      	sub	sp, #16
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
 80087ae:	f107 001c 	add.w	r0, r7, #28
 80087b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80087b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d122      	bne.n	8008802 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80087d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80087e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d105      	bne.n	80087f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 f9a0 	bl	8008b3c <USB_CoreReset>
 80087fc:	4603      	mov	r3, r0
 80087fe:	73fb      	strb	r3, [r7, #15]
 8008800:	e01a      	b.n	8008838 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 f994 	bl	8008b3c <USB_CoreReset>
 8008814:	4603      	mov	r3, r0
 8008816:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800881a:	2b00      	cmp	r3, #0
 800881c:	d106      	bne.n	800882c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008822:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	639a      	str	r2, [r3, #56]	; 0x38
 800882a:	e005      	b.n	8008838 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008830:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883a:	2b01      	cmp	r3, #1
 800883c:	d10b      	bne.n	8008856 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	f043 0206 	orr.w	r2, r3, #6
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	f043 0220 	orr.w	r2, r3, #32
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008856:	7bfb      	ldrb	r3, [r7, #15]
}
 8008858:	4618      	mov	r0, r3
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008862:	b004      	add	sp, #16
 8008864:	4770      	bx	lr

08008866 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008866:	b480      	push	{r7}
 8008868:	b083      	sub	sp, #12
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	f043 0201 	orr.w	r2, r3, #1
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	f023 0201 	bic.w	r2, r3, #1
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	370c      	adds	r7, #12
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr

080088aa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b084      	sub	sp, #16
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
 80088b2:	460b      	mov	r3, r1
 80088b4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80088b6:	2300      	movs	r3, #0
 80088b8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80088c6:	78fb      	ldrb	r3, [r7, #3]
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d115      	bne.n	80088f8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80088d8:	2001      	movs	r0, #1
 80088da:	f7f9 fcbb 	bl	8002254 <HAL_Delay>
      ms++;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	3301      	adds	r3, #1
 80088e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 f91a 	bl	8008b1e <USB_GetMode>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d01e      	beq.n	800892e <USB_SetCurrentMode+0x84>
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2b31      	cmp	r3, #49	; 0x31
 80088f4:	d9f0      	bls.n	80088d8 <USB_SetCurrentMode+0x2e>
 80088f6:	e01a      	b.n	800892e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80088f8:	78fb      	ldrb	r3, [r7, #3]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d115      	bne.n	800892a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800890a:	2001      	movs	r0, #1
 800890c:	f7f9 fca2 	bl	8002254 <HAL_Delay>
      ms++;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	3301      	adds	r3, #1
 8008914:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 f901 	bl	8008b1e <USB_GetMode>
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d005      	beq.n	800892e <USB_SetCurrentMode+0x84>
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2b31      	cmp	r3, #49	; 0x31
 8008926:	d9f0      	bls.n	800890a <USB_SetCurrentMode+0x60>
 8008928:	e001      	b.n	800892e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	e005      	b.n	800893a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2b32      	cmp	r3, #50	; 0x32
 8008932:	d101      	bne.n	8008938 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	e000      	b.n	800893a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
	...

08008944 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800894e:	2300      	movs	r3, #0
 8008950:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	019b      	lsls	r3, r3, #6
 8008956:	f043 0220 	orr.w	r2, r3, #32
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	3301      	adds	r3, #1
 8008962:	60fb      	str	r3, [r7, #12]
 8008964:	4a08      	ldr	r2, [pc, #32]	; (8008988 <USB_FlushTxFifo+0x44>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d901      	bls.n	800896e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800896a:	2303      	movs	r3, #3
 800896c:	e006      	b.n	800897c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	691b      	ldr	r3, [r3, #16]
 8008972:	f003 0320 	and.w	r3, r3, #32
 8008976:	2b20      	cmp	r3, #32
 8008978:	d0f1      	beq.n	800895e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3714      	adds	r7, #20
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	00030d40 	.word	0x00030d40

0800898c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008994:	2300      	movs	r3, #0
 8008996:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2210      	movs	r2, #16
 800899c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	3301      	adds	r3, #1
 80089a2:	60fb      	str	r3, [r7, #12]
 80089a4:	4a08      	ldr	r2, [pc, #32]	; (80089c8 <USB_FlushRxFifo+0x3c>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d901      	bls.n	80089ae <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80089aa:	2303      	movs	r3, #3
 80089ac:	e006      	b.n	80089bc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	f003 0310 	and.w	r3, r3, #16
 80089b6:	2b10      	cmp	r3, #16
 80089b8:	d0f1      	beq.n	800899e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3714      	adds	r7, #20
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr
 80089c8:	00030d40 	.word	0x00030d40

080089cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b089      	sub	sp, #36	; 0x24
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	4611      	mov	r1, r2
 80089d8:	461a      	mov	r2, r3
 80089da:	460b      	mov	r3, r1
 80089dc:	71fb      	strb	r3, [r7, #7]
 80089de:	4613      	mov	r3, r2
 80089e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80089ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d123      	bne.n	8008a3a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80089f2:	88bb      	ldrh	r3, [r7, #4]
 80089f4:	3303      	adds	r3, #3
 80089f6:	089b      	lsrs	r3, r3, #2
 80089f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80089fa:	2300      	movs	r3, #0
 80089fc:	61bb      	str	r3, [r7, #24]
 80089fe:	e018      	b.n	8008a32 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008a00:	79fb      	ldrb	r3, [r7, #7]
 8008a02:	031a      	lsls	r2, r3, #12
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	4413      	add	r3, r2
 8008a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	3301      	adds	r3, #1
 8008a18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	3301      	adds	r3, #1
 8008a24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008a2c:	69bb      	ldr	r3, [r7, #24]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	61bb      	str	r3, [r7, #24]
 8008a32:	69ba      	ldr	r2, [r7, #24]
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d3e2      	bcc.n	8008a00 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008a3a:	2300      	movs	r3, #0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3724      	adds	r7, #36	; 0x24
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b08b      	sub	sp, #44	; 0x2c
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	4613      	mov	r3, r2
 8008a54:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008a5e:	88fb      	ldrh	r3, [r7, #6]
 8008a60:	089b      	lsrs	r3, r3, #2
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008a66:	88fb      	ldrh	r3, [r7, #6]
 8008a68:	f003 0303 	and.w	r3, r3, #3
 8008a6c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008a6e:	2300      	movs	r3, #0
 8008a70:	623b      	str	r3, [r7, #32]
 8008a72:	e014      	b.n	8008a9e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a82:	3301      	adds	r3, #1
 8008a84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a88:	3301      	adds	r3, #1
 8008a8a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8e:	3301      	adds	r3, #1
 8008a90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a94:	3301      	adds	r3, #1
 8008a96:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008a98:	6a3b      	ldr	r3, [r7, #32]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	623b      	str	r3, [r7, #32]
 8008a9e:	6a3a      	ldr	r2, [r7, #32]
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d3e6      	bcc.n	8008a74 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008aa6:	8bfb      	ldrh	r3, [r7, #30]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d01e      	beq.n	8008aea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008aac:	2300      	movs	r3, #0
 8008aae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	f107 0310 	add.w	r3, r7, #16
 8008abc:	6812      	ldr	r2, [r2, #0]
 8008abe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008ac0:	693a      	ldr	r2, [r7, #16]
 8008ac2:	6a3b      	ldr	r3, [r7, #32]
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	00db      	lsls	r3, r3, #3
 8008ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8008acc:	b2da      	uxtb	r2, r3
 8008ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad0:	701a      	strb	r2, [r3, #0]
      i++;
 8008ad2:	6a3b      	ldr	r3, [r7, #32]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	623b      	str	r3, [r7, #32]
      pDest++;
 8008ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ada:	3301      	adds	r3, #1
 8008adc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008ade:	8bfb      	ldrh	r3, [r7, #30]
 8008ae0:	3b01      	subs	r3, #1
 8008ae2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008ae4:	8bfb      	ldrh	r3, [r7, #30]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1ea      	bne.n	8008ac0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	372c      	adds	r7, #44	; 0x2c
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	695b      	ldr	r3, [r3, #20]
 8008b04:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	699b      	ldr	r3, [r3, #24]
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	4013      	ands	r3, r2
 8008b0e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008b10:	68fb      	ldr	r3, [r7, #12]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3714      	adds	r7, #20
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b083      	sub	sp, #12
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	695b      	ldr	r3, [r3, #20]
 8008b2a:	f003 0301 	and.w	r3, r3, #1
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	370c      	adds	r7, #12
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr
	...

08008b3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b44:	2300      	movs	r3, #0
 8008b46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	60fb      	str	r3, [r7, #12]
 8008b4e:	4a13      	ldr	r2, [pc, #76]	; (8008b9c <USB_CoreReset+0x60>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d901      	bls.n	8008b58 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008b54:	2303      	movs	r3, #3
 8008b56:	e01a      	b.n	8008b8e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	691b      	ldr	r3, [r3, #16]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	daf3      	bge.n	8008b48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008b60:	2300      	movs	r3, #0
 8008b62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	f043 0201 	orr.w	r2, r3, #1
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	3301      	adds	r3, #1
 8008b74:	60fb      	str	r3, [r7, #12]
 8008b76:	4a09      	ldr	r2, [pc, #36]	; (8008b9c <USB_CoreReset+0x60>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d901      	bls.n	8008b80 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	e006      	b.n	8008b8e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	f003 0301 	and.w	r3, r3, #1
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d0f1      	beq.n	8008b70 <USB_CoreReset+0x34>

  return HAL_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3714      	adds	r7, #20
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	00030d40 	.word	0x00030d40

08008ba0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ba0:	b084      	sub	sp, #16
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b084      	sub	sp, #16
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
 8008baa:	f107 001c 	add.w	r0, r7, #28
 8008bae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bde:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d018      	beq.n	8008c24 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d10a      	bne.n	8008c0e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c06:	f043 0304 	orr.w	r3, r3, #4
 8008c0a:	6013      	str	r3, [r2, #0]
 8008c0c:	e014      	b.n	8008c38 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c1c:	f023 0304 	bic.w	r3, r3, #4
 8008c20:	6013      	str	r3, [r2, #0]
 8008c22:	e009      	b.n	8008c38 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68ba      	ldr	r2, [r7, #8]
 8008c2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c32:	f023 0304 	bic.w	r3, r3, #4
 8008c36:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008c38:	2110      	movs	r1, #16
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f7ff fe82 	bl	8008944 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f7ff fea3 	bl	800898c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008c46:	2300      	movs	r3, #0
 8008c48:	60fb      	str	r3, [r7, #12]
 8008c4a:	e015      	b.n	8008c78 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	015a      	lsls	r2, r3, #5
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	4413      	add	r3, r2
 8008c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c58:	461a      	mov	r2, r3
 8008c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c5e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	015a      	lsls	r2, r3, #5
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	4413      	add	r3, r2
 8008c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	2300      	movs	r3, #0
 8008c70:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	3301      	adds	r3, #1
 8008c76:	60fb      	str	r3, [r7, #12]
 8008c78:	6a3b      	ldr	r3, [r7, #32]
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d3e5      	bcc.n	8008c4c <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f04f 32ff 	mov.w	r2, #4294967295
 8008c8c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00b      	beq.n	8008cb2 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ca0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4a13      	ldr	r2, [pc, #76]	; (8008cf4 <USB_HostInit+0x154>)
 8008ca6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a13      	ldr	r2, [pc, #76]	; (8008cf8 <USB_HostInit+0x158>)
 8008cac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008cb0:	e009      	b.n	8008cc6 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2280      	movs	r2, #128	; 0x80
 8008cb6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a10      	ldr	r2, [pc, #64]	; (8008cfc <USB_HostInit+0x15c>)
 8008cbc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a0f      	ldr	r2, [pc, #60]	; (8008d00 <USB_HostInit+0x160>)
 8008cc2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d105      	bne.n	8008cd8 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	699b      	ldr	r3, [r3, #24]
 8008cd0:	f043 0210 	orr.w	r2, r3, #16
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	699a      	ldr	r2, [r3, #24]
 8008cdc:	4b09      	ldr	r3, [pc, #36]	; (8008d04 <USB_HostInit+0x164>)
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008cf0:	b004      	add	sp, #16
 8008cf2:	4770      	bx	lr
 8008cf4:	01000200 	.word	0x01000200
 8008cf8:	00e00300 	.word	0x00e00300
 8008cfc:	00600080 	.word	0x00600080
 8008d00:	004000e0 	.word	0x004000e0
 8008d04:	a3200008 	.word	0xa3200008

08008d08 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b085      	sub	sp, #20
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	460b      	mov	r3, r1
 8008d12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d26:	f023 0303 	bic.w	r3, r3, #3
 8008d2a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	78fb      	ldrb	r3, [r7, #3]
 8008d36:	f003 0303 	and.w	r3, r3, #3
 8008d3a:	68f9      	ldr	r1, [r7, #12]
 8008d3c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008d40:	4313      	orrs	r3, r2
 8008d42:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008d44:	78fb      	ldrb	r3, [r7, #3]
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d107      	bne.n	8008d5a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d50:	461a      	mov	r2, r3
 8008d52:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008d56:	6053      	str	r3, [r2, #4]
 8008d58:	e009      	b.n	8008d6e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008d5a:	78fb      	ldrb	r3, [r7, #3]
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	d106      	bne.n	8008d6e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d66:	461a      	mov	r2, r3
 8008d68:	f241 7370 	movw	r3, #6000	; 0x1770
 8008d6c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3714      	adds	r7, #20
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008d9c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008daa:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008dac:	2064      	movs	r0, #100	; 0x64
 8008dae:	f7f9 fa51 	bl	8002254 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	68fa      	ldr	r2, [r7, #12]
 8008db6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008dba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008dbe:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008dc0:	200a      	movs	r0, #10
 8008dc2:	f7f9 fa47 	bl	8002254 <HAL_Delay>

  return HAL_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	460b      	mov	r3, r1
 8008dda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008de0:	2300      	movs	r3, #0
 8008de2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008df4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d109      	bne.n	8008e14 <USB_DriveVbus+0x44>
 8008e00:	78fb      	ldrb	r3, [r7, #3]
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d106      	bne.n	8008e14 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008e0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008e12:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e1e:	d109      	bne.n	8008e34 <USB_DriveVbus+0x64>
 8008e20:	78fb      	ldrb	r3, [r7, #3]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d106      	bne.n	8008e34 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008e2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e32:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3714      	adds	r7, #20
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr

08008e42 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008e42:	b480      	push	{r7}
 8008e44:	b085      	sub	sp, #20
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	0c5b      	lsrs	r3, r3, #17
 8008e60:	f003 0303 	and.w	r3, r3, #3
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3714      	adds	r7, #20
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b085      	sub	sp, #20
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	b29b      	uxth	r3, r3
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3714      	adds	r7, #20
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
	...

08008e94 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b088      	sub	sp, #32
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	4608      	mov	r0, r1
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	70fb      	strb	r3, [r7, #3]
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	70bb      	strb	r3, [r7, #2]
 8008eaa:	4613      	mov	r3, r2
 8008eac:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008eb6:	78fb      	ldrb	r3, [r7, #3]
 8008eb8:	015a      	lsls	r2, r3, #5
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ec8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008eca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008ece:	2b03      	cmp	r3, #3
 8008ed0:	d87e      	bhi.n	8008fd0 <USB_HC_Init+0x13c>
 8008ed2:	a201      	add	r2, pc, #4	; (adr r2, 8008ed8 <USB_HC_Init+0x44>)
 8008ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed8:	08008ee9 	.word	0x08008ee9
 8008edc:	08008f93 	.word	0x08008f93
 8008ee0:	08008ee9 	.word	0x08008ee9
 8008ee4:	08008f55 	.word	0x08008f55
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008ee8:	78fb      	ldrb	r3, [r7, #3]
 8008eea:	015a      	lsls	r2, r3, #5
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	4413      	add	r3, r2
 8008ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	f240 439d 	movw	r3, #1181	; 0x49d
 8008efa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008efc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	da10      	bge.n	8008f26 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008f04:	78fb      	ldrb	r3, [r7, #3]
 8008f06:	015a      	lsls	r2, r3, #5
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	78fa      	ldrb	r2, [r7, #3]
 8008f14:	0151      	lsls	r1, r2, #5
 8008f16:	693a      	ldr	r2, [r7, #16]
 8008f18:	440a      	add	r2, r1
 8008f1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f22:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008f24:	e057      	b.n	8008fd6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d051      	beq.n	8008fd6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008f32:	78fb      	ldrb	r3, [r7, #3]
 8008f34:	015a      	lsls	r2, r3, #5
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	4413      	add	r3, r2
 8008f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	78fa      	ldrb	r2, [r7, #3]
 8008f42:	0151      	lsls	r1, r2, #5
 8008f44:	693a      	ldr	r2, [r7, #16]
 8008f46:	440a      	add	r2, r1
 8008f48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f4c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008f50:	60d3      	str	r3, [r2, #12]
      break;
 8008f52:	e040      	b.n	8008fd6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008f54:	78fb      	ldrb	r3, [r7, #3]
 8008f56:	015a      	lsls	r2, r3, #5
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f60:	461a      	mov	r2, r3
 8008f62:	f240 639d 	movw	r3, #1693	; 0x69d
 8008f66:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008f68:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	da34      	bge.n	8008fda <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008f70:	78fb      	ldrb	r3, [r7, #3]
 8008f72:	015a      	lsls	r2, r3, #5
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	4413      	add	r3, r2
 8008f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	78fa      	ldrb	r2, [r7, #3]
 8008f80:	0151      	lsls	r1, r2, #5
 8008f82:	693a      	ldr	r2, [r7, #16]
 8008f84:	440a      	add	r2, r1
 8008f86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f8e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008f90:	e023      	b.n	8008fda <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008f92:	78fb      	ldrb	r3, [r7, #3]
 8008f94:	015a      	lsls	r2, r3, #5
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	4413      	add	r3, r2
 8008f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	f240 2325 	movw	r3, #549	; 0x225
 8008fa4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008fa6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	da17      	bge.n	8008fde <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008fae:	78fb      	ldrb	r3, [r7, #3]
 8008fb0:	015a      	lsls	r2, r3, #5
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	78fa      	ldrb	r2, [r7, #3]
 8008fbe:	0151      	lsls	r1, r2, #5
 8008fc0:	693a      	ldr	r2, [r7, #16]
 8008fc2:	440a      	add	r2, r1
 8008fc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fc8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008fcc:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008fce:	e006      	b.n	8008fde <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	77fb      	strb	r3, [r7, #31]
      break;
 8008fd4:	e004      	b.n	8008fe0 <USB_HC_Init+0x14c>
      break;
 8008fd6:	bf00      	nop
 8008fd8:	e002      	b.n	8008fe0 <USB_HC_Init+0x14c>
      break;
 8008fda:	bf00      	nop
 8008fdc:	e000      	b.n	8008fe0 <USB_HC_Init+0x14c>
      break;
 8008fde:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fe6:	699a      	ldr	r2, [r3, #24]
 8008fe8:	78fb      	ldrb	r3, [r7, #3]
 8008fea:	f003 030f 	and.w	r3, r3, #15
 8008fee:	2101      	movs	r1, #1
 8008ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ff4:	6939      	ldr	r1, [r7, #16]
 8008ff6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800900a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800900e:	2b00      	cmp	r3, #0
 8009010:	da03      	bge.n	800901a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009016:	61bb      	str	r3, [r7, #24]
 8009018:	e001      	b.n	800901e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800901a:	2300      	movs	r3, #0
 800901c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f7ff ff0f 	bl	8008e42 <USB_GetHostSpeed>
 8009024:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009026:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800902a:	2b02      	cmp	r3, #2
 800902c:	d106      	bne.n	800903c <USB_HC_Init+0x1a8>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2b02      	cmp	r3, #2
 8009032:	d003      	beq.n	800903c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009034:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009038:	617b      	str	r3, [r7, #20]
 800903a:	e001      	b.n	8009040 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800903c:	2300      	movs	r3, #0
 800903e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009040:	787b      	ldrb	r3, [r7, #1]
 8009042:	059b      	lsls	r3, r3, #22
 8009044:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009048:	78bb      	ldrb	r3, [r7, #2]
 800904a:	02db      	lsls	r3, r3, #11
 800904c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009050:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009052:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009056:	049b      	lsls	r3, r3, #18
 8009058:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800905c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800905e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009060:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009064:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800906a:	78fb      	ldrb	r3, [r7, #3]
 800906c:	0159      	lsls	r1, r3, #5
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	440b      	add	r3, r1
 8009072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009076:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800907c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800907e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009082:	2b03      	cmp	r3, #3
 8009084:	d10f      	bne.n	80090a6 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8009086:	78fb      	ldrb	r3, [r7, #3]
 8009088:	015a      	lsls	r2, r3, #5
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	4413      	add	r3, r2
 800908e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	78fa      	ldrb	r2, [r7, #3]
 8009096:	0151      	lsls	r1, r2, #5
 8009098:	693a      	ldr	r2, [r7, #16]
 800909a:	440a      	add	r2, r1
 800909c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80090a4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80090a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3720      	adds	r7, #32
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b08c      	sub	sp, #48	; 0x30
 80090b4:	af02      	add	r7, sp, #8
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	4613      	mov	r3, r2
 80090bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	785b      	ldrb	r3, [r3, #1]
 80090c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80090c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090cc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d02d      	beq.n	8009136 <USB_HC_StartXfer+0x86>
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	791b      	ldrb	r3, [r3, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d129      	bne.n	8009136 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80090e2:	79fb      	ldrb	r3, [r7, #7]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d117      	bne.n	8009118 <USB_HC_StartXfer+0x68>
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	79db      	ldrb	r3, [r3, #7]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d003      	beq.n	80090f8 <USB_HC_StartXfer+0x48>
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	79db      	ldrb	r3, [r3, #7]
 80090f4:	2b02      	cmp	r3, #2
 80090f6:	d10f      	bne.n	8009118 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	015a      	lsls	r2, r3, #5
 80090fc:	6a3b      	ldr	r3, [r7, #32]
 80090fe:	4413      	add	r3, r2
 8009100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	69fa      	ldr	r2, [r7, #28]
 8009108:	0151      	lsls	r1, r2, #5
 800910a:	6a3a      	ldr	r2, [r7, #32]
 800910c:	440a      	add	r2, r1
 800910e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009116:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009118:	79fb      	ldrb	r3, [r7, #7]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d10b      	bne.n	8009136 <USB_HC_StartXfer+0x86>
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	795b      	ldrb	r3, [r3, #5]
 8009122:	2b01      	cmp	r3, #1
 8009124:	d107      	bne.n	8009136 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	785b      	ldrb	r3, [r3, #1]
 800912a:	4619      	mov	r1, r3
 800912c:	68f8      	ldr	r0, [r7, #12]
 800912e:	f000 fa2f 	bl	8009590 <USB_DoPing>
      return HAL_OK;
 8009132:	2300      	movs	r3, #0
 8009134:	e0f8      	b.n	8009328 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	695b      	ldr	r3, [r3, #20]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d018      	beq.n	8009170 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	695b      	ldr	r3, [r3, #20]
 8009142:	68ba      	ldr	r2, [r7, #8]
 8009144:	8912      	ldrh	r2, [r2, #8]
 8009146:	4413      	add	r3, r2
 8009148:	3b01      	subs	r3, #1
 800914a:	68ba      	ldr	r2, [r7, #8]
 800914c:	8912      	ldrh	r2, [r2, #8]
 800914e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009152:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009154:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009156:	8b7b      	ldrh	r3, [r7, #26]
 8009158:	429a      	cmp	r2, r3
 800915a:	d90b      	bls.n	8009174 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800915c:	8b7b      	ldrh	r3, [r7, #26]
 800915e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009160:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009162:	68ba      	ldr	r2, [r7, #8]
 8009164:	8912      	ldrh	r2, [r2, #8]
 8009166:	fb02 f203 	mul.w	r2, r2, r3
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	611a      	str	r2, [r3, #16]
 800916e:	e001      	b.n	8009174 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009170:	2301      	movs	r3, #1
 8009172:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	78db      	ldrb	r3, [r3, #3]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d007      	beq.n	800918c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800917c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800917e:	68ba      	ldr	r2, [r7, #8]
 8009180:	8912      	ldrh	r2, [r2, #8]
 8009182:	fb02 f203 	mul.w	r2, r2, r3
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	611a      	str	r2, [r3, #16]
 800918a:	e003      	b.n	8009194 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	695a      	ldr	r2, [r3, #20]
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	691b      	ldr	r3, [r3, #16]
 8009198:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800919c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800919e:	04d9      	lsls	r1, r3, #19
 80091a0:	4b63      	ldr	r3, [pc, #396]	; (8009330 <USB_HC_StartXfer+0x280>)
 80091a2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80091a4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	7a9b      	ldrb	r3, [r3, #10]
 80091aa:	075b      	lsls	r3, r3, #29
 80091ac:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80091b0:	69f9      	ldr	r1, [r7, #28]
 80091b2:	0148      	lsls	r0, r1, #5
 80091b4:	6a39      	ldr	r1, [r7, #32]
 80091b6:	4401      	add	r1, r0
 80091b8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80091bc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80091be:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80091c0:	79fb      	ldrb	r3, [r7, #7]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d009      	beq.n	80091da <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	68d9      	ldr	r1, [r3, #12]
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	015a      	lsls	r2, r3, #5
 80091ce:	6a3b      	ldr	r3, [r7, #32]
 80091d0:	4413      	add	r3, r2
 80091d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091d6:	460a      	mov	r2, r1
 80091d8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80091da:	6a3b      	ldr	r3, [r7, #32]
 80091dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	f003 0301 	and.w	r3, r3, #1
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	bf0c      	ite	eq
 80091ea:	2301      	moveq	r3, #1
 80091ec:	2300      	movne	r3, #0
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	015a      	lsls	r2, r3, #5
 80091f6:	6a3b      	ldr	r3, [r7, #32]
 80091f8:	4413      	add	r3, r2
 80091fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	69fa      	ldr	r2, [r7, #28]
 8009202:	0151      	lsls	r1, r2, #5
 8009204:	6a3a      	ldr	r2, [r7, #32]
 8009206:	440a      	add	r2, r1
 8009208:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800920c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009210:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	015a      	lsls	r2, r3, #5
 8009216:	6a3b      	ldr	r3, [r7, #32]
 8009218:	4413      	add	r3, r2
 800921a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	7e7b      	ldrb	r3, [r7, #25]
 8009222:	075b      	lsls	r3, r3, #29
 8009224:	69f9      	ldr	r1, [r7, #28]
 8009226:	0148      	lsls	r0, r1, #5
 8009228:	6a39      	ldr	r1, [r7, #32]
 800922a:	4401      	add	r1, r0
 800922c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009230:	4313      	orrs	r3, r2
 8009232:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	015a      	lsls	r2, r3, #5
 8009238:	6a3b      	ldr	r3, [r7, #32]
 800923a:	4413      	add	r3, r2
 800923c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800924a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	78db      	ldrb	r3, [r3, #3]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d004      	beq.n	800925e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800925a:	613b      	str	r3, [r7, #16]
 800925c:	e003      	b.n	8009266 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009264:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800926c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	015a      	lsls	r2, r3, #5
 8009272:	6a3b      	ldr	r3, [r7, #32]
 8009274:	4413      	add	r3, r2
 8009276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800927a:	461a      	mov	r2, r3
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009280:	79fb      	ldrb	r3, [r7, #7]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d001      	beq.n	800928a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009286:	2300      	movs	r3, #0
 8009288:	e04e      	b.n	8009328 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	78db      	ldrb	r3, [r3, #3]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d149      	bne.n	8009326 <USB_HC_StartXfer+0x276>
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	695b      	ldr	r3, [r3, #20]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d045      	beq.n	8009326 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	79db      	ldrb	r3, [r3, #7]
 800929e:	2b03      	cmp	r3, #3
 80092a0:	d830      	bhi.n	8009304 <USB_HC_StartXfer+0x254>
 80092a2:	a201      	add	r2, pc, #4	; (adr r2, 80092a8 <USB_HC_StartXfer+0x1f8>)
 80092a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a8:	080092b9 	.word	0x080092b9
 80092ac:	080092dd 	.word	0x080092dd
 80092b0:	080092b9 	.word	0x080092b9
 80092b4:	080092dd 	.word	0x080092dd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	695b      	ldr	r3, [r3, #20]
 80092bc:	3303      	adds	r3, #3
 80092be:	089b      	lsrs	r3, r3, #2
 80092c0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80092c2:	8afa      	ldrh	r2, [r7, #22]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d91c      	bls.n	8009308 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	699b      	ldr	r3, [r3, #24]
 80092d2:	f043 0220 	orr.w	r2, r3, #32
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	619a      	str	r2, [r3, #24]
        }
        break;
 80092da:	e015      	b.n	8009308 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	695b      	ldr	r3, [r3, #20]
 80092e0:	3303      	adds	r3, #3
 80092e2:	089b      	lsrs	r3, r3, #2
 80092e4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80092e6:	8afa      	ldrh	r2, [r7, #22]
 80092e8:	6a3b      	ldr	r3, [r7, #32]
 80092ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d90a      	bls.n	800930c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	699b      	ldr	r3, [r3, #24]
 80092fa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	619a      	str	r2, [r3, #24]
        }
        break;
 8009302:	e003      	b.n	800930c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009304:	bf00      	nop
 8009306:	e002      	b.n	800930e <USB_HC_StartXfer+0x25e>
        break;
 8009308:	bf00      	nop
 800930a:	e000      	b.n	800930e <USB_HC_StartXfer+0x25e>
        break;
 800930c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	68d9      	ldr	r1, [r3, #12]
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	785a      	ldrb	r2, [r3, #1]
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	695b      	ldr	r3, [r3, #20]
 800931a:	b29b      	uxth	r3, r3
 800931c:	2000      	movs	r0, #0
 800931e:	9000      	str	r0, [sp, #0]
 8009320:	68f8      	ldr	r0, [r7, #12]
 8009322:	f7ff fb53 	bl	80089cc <USB_WritePacket>
  }

  return HAL_OK;
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	3728      	adds	r7, #40	; 0x28
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}
 8009330:	1ff80000 	.word	0x1ff80000

08009334 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009346:	695b      	ldr	r3, [r3, #20]
 8009348:	b29b      	uxth	r3, r3
}
 800934a:	4618      	mov	r0, r3
 800934c:	3714      	adds	r7, #20
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr

08009356 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009356:	b480      	push	{r7}
 8009358:	b089      	sub	sp, #36	; 0x24
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
 800935e:	460b      	mov	r3, r1
 8009360:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8009366:	78fb      	ldrb	r3, [r7, #3]
 8009368:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800936a:	2300      	movs	r3, #0
 800936c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	015a      	lsls	r2, r3, #5
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	4413      	add	r3, r2
 8009376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	0c9b      	lsrs	r3, r3, #18
 800937e:	f003 0303 	and.w	r3, r3, #3
 8009382:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	015a      	lsls	r2, r3, #5
 8009388:	69bb      	ldr	r3, [r7, #24]
 800938a:	4413      	add	r3, r2
 800938c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	0fdb      	lsrs	r3, r3, #31
 8009394:	f003 0301 	and.w	r3, r3, #1
 8009398:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	f003 0320 	and.w	r3, r3, #32
 80093a2:	2b20      	cmp	r3, #32
 80093a4:	d104      	bne.n	80093b0 <USB_HC_Halt+0x5a>
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d101      	bne.n	80093b0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80093ac:	2300      	movs	r3, #0
 80093ae:	e0e8      	b.n	8009582 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d002      	beq.n	80093bc <USB_HC_Halt+0x66>
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	2b02      	cmp	r3, #2
 80093ba:	d173      	bne.n	80094a4 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	015a      	lsls	r2, r3, #5
 80093c0:	69bb      	ldr	r3, [r7, #24]
 80093c2:	4413      	add	r3, r2
 80093c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	697a      	ldr	r2, [r7, #20]
 80093cc:	0151      	lsls	r1, r2, #5
 80093ce:	69ba      	ldr	r2, [r7, #24]
 80093d0:	440a      	add	r2, r1
 80093d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80093da:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	f003 0320 	and.w	r3, r3, #32
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f040 80cb 	bne.w	8009580 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d143      	bne.n	800947e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	015a      	lsls	r2, r3, #5
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	4413      	add	r3, r2
 80093fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	697a      	ldr	r2, [r7, #20]
 8009406:	0151      	lsls	r1, r2, #5
 8009408:	69ba      	ldr	r2, [r7, #24]
 800940a:	440a      	add	r2, r1
 800940c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009410:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009414:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	015a      	lsls	r2, r3, #5
 800941a:	69bb      	ldr	r3, [r7, #24]
 800941c:	4413      	add	r3, r2
 800941e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	697a      	ldr	r2, [r7, #20]
 8009426:	0151      	lsls	r1, r2, #5
 8009428:	69ba      	ldr	r2, [r7, #24]
 800942a:	440a      	add	r2, r1
 800942c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009430:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009434:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	015a      	lsls	r2, r3, #5
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	4413      	add	r3, r2
 800943e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	697a      	ldr	r2, [r7, #20]
 8009446:	0151      	lsls	r1, r2, #5
 8009448:	69ba      	ldr	r2, [r7, #24]
 800944a:	440a      	add	r2, r1
 800944c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009450:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009454:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	3301      	adds	r3, #1
 800945a:	61fb      	str	r3, [r7, #28]
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009462:	d81d      	bhi.n	80094a0 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	015a      	lsls	r2, r3, #5
 8009468:	69bb      	ldr	r3, [r7, #24]
 800946a:	4413      	add	r3, r2
 800946c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009476:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800947a:	d0ec      	beq.n	8009456 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800947c:	e080      	b.n	8009580 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	015a      	lsls	r2, r3, #5
 8009482:	69bb      	ldr	r3, [r7, #24]
 8009484:	4413      	add	r3, r2
 8009486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	697a      	ldr	r2, [r7, #20]
 800948e:	0151      	lsls	r1, r2, #5
 8009490:	69ba      	ldr	r2, [r7, #24]
 8009492:	440a      	add	r2, r1
 8009494:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009498:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800949c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800949e:	e06f      	b.n	8009580 <USB_HC_Halt+0x22a>
            break;
 80094a0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80094a2:	e06d      	b.n	8009580 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	015a      	lsls	r2, r3, #5
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	4413      	add	r3, r2
 80094ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	697a      	ldr	r2, [r7, #20]
 80094b4:	0151      	lsls	r1, r2, #5
 80094b6:	69ba      	ldr	r2, [r7, #24]
 80094b8:	440a      	add	r2, r1
 80094ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80094c2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80094c4:	69bb      	ldr	r3, [r7, #24]
 80094c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094ca:	691b      	ldr	r3, [r3, #16]
 80094cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d143      	bne.n	800955c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	015a      	lsls	r2, r3, #5
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	4413      	add	r3, r2
 80094dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	697a      	ldr	r2, [r7, #20]
 80094e4:	0151      	lsls	r1, r2, #5
 80094e6:	69ba      	ldr	r2, [r7, #24]
 80094e8:	440a      	add	r2, r1
 80094ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094f2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	015a      	lsls	r2, r3, #5
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	4413      	add	r3, r2
 80094fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	697a      	ldr	r2, [r7, #20]
 8009504:	0151      	lsls	r1, r2, #5
 8009506:	69ba      	ldr	r2, [r7, #24]
 8009508:	440a      	add	r2, r1
 800950a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800950e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009512:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	015a      	lsls	r2, r3, #5
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	4413      	add	r3, r2
 800951c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	697a      	ldr	r2, [r7, #20]
 8009524:	0151      	lsls	r1, r2, #5
 8009526:	69ba      	ldr	r2, [r7, #24]
 8009528:	440a      	add	r2, r1
 800952a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800952e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009532:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	3301      	adds	r3, #1
 8009538:	61fb      	str	r3, [r7, #28]
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009540:	d81d      	bhi.n	800957e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	015a      	lsls	r2, r3, #5
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	4413      	add	r3, r2
 800954a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009554:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009558:	d0ec      	beq.n	8009534 <USB_HC_Halt+0x1de>
 800955a:	e011      	b.n	8009580 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	015a      	lsls	r2, r3, #5
 8009560:	69bb      	ldr	r3, [r7, #24]
 8009562:	4413      	add	r3, r2
 8009564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	697a      	ldr	r2, [r7, #20]
 800956c:	0151      	lsls	r1, r2, #5
 800956e:	69ba      	ldr	r2, [r7, #24]
 8009570:	440a      	add	r2, r1
 8009572:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009576:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800957a:	6013      	str	r3, [r2, #0]
 800957c:	e000      	b.n	8009580 <USB_HC_Halt+0x22a>
          break;
 800957e:	bf00      	nop
    }
  }

  return HAL_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3724      	adds	r7, #36	; 0x24
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr
	...

08009590 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009590:	b480      	push	{r7}
 8009592:	b087      	sub	sp, #28
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	460b      	mov	r3, r1
 800959a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80095a0:	78fb      	ldrb	r3, [r7, #3]
 80095a2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80095a4:	2301      	movs	r3, #1
 80095a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	04da      	lsls	r2, r3, #19
 80095ac:	4b15      	ldr	r3, [pc, #84]	; (8009604 <USB_DoPing+0x74>)
 80095ae:	4013      	ands	r3, r2
 80095b0:	693a      	ldr	r2, [r7, #16]
 80095b2:	0151      	lsls	r1, r2, #5
 80095b4:	697a      	ldr	r2, [r7, #20]
 80095b6:	440a      	add	r2, r1
 80095b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80095c0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	015a      	lsls	r2, r3, #5
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	4413      	add	r3, r2
 80095ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80095d8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80095e0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	015a      	lsls	r2, r3, #5
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	4413      	add	r3, r2
 80095ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095ee:	461a      	mov	r2, r3
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	371c      	adds	r7, #28
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	1ff80000 	.word	0x1ff80000

08009608 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009614:	2300      	movs	r3, #0
 8009616:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f7ff f935 	bl	8008888 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800961e:	2110      	movs	r1, #16
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f7ff f98f 	bl	8008944 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f7ff f9b0 	bl	800898c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800962c:	2300      	movs	r3, #0
 800962e:	613b      	str	r3, [r7, #16]
 8009630:	e01f      	b.n	8009672 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	015a      	lsls	r2, r3, #5
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	4413      	add	r3, r2
 800963a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009648:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009650:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009658:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	015a      	lsls	r2, r3, #5
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	4413      	add	r3, r2
 8009662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009666:	461a      	mov	r2, r3
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	3301      	adds	r3, #1
 8009670:	613b      	str	r3, [r7, #16]
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	2b0f      	cmp	r3, #15
 8009676:	d9dc      	bls.n	8009632 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009678:	2300      	movs	r3, #0
 800967a:	613b      	str	r3, [r7, #16]
 800967c:	e034      	b.n	80096e8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	015a      	lsls	r2, r3, #5
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	4413      	add	r3, r2
 8009686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009694:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800969c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80096a4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	015a      	lsls	r2, r3, #5
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	4413      	add	r3, r2
 80096ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096b2:	461a      	mov	r2, r3
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	3301      	adds	r3, #1
 80096bc:	617b      	str	r3, [r7, #20]
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096c4:	d80c      	bhi.n	80096e0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	015a      	lsls	r2, r3, #5
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	4413      	add	r3, r2
 80096ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096dc:	d0ec      	beq.n	80096b8 <USB_StopHost+0xb0>
 80096de:	e000      	b.n	80096e2 <USB_StopHost+0xda>
        break;
 80096e0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	3301      	adds	r3, #1
 80096e6:	613b      	str	r3, [r7, #16]
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	2b0f      	cmp	r3, #15
 80096ec:	d9c7      	bls.n	800967e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096f4:	461a      	mov	r2, r3
 80096f6:	f04f 33ff 	mov.w	r3, #4294967295
 80096fa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009702:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f7ff f8ae 	bl	8008866 <USB_EnableGlobalInt>

  return HAL_OK;
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3718      	adds	r7, #24
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8009718:	4904      	ldr	r1, [pc, #16]	; (800972c <MX_FATFS_Init+0x18>)
 800971a:	4805      	ldr	r0, [pc, #20]	; (8009730 <MX_FATFS_Init+0x1c>)
 800971c:	f006 fa28 	bl	800fb70 <FATFS_LinkDriver>
 8009720:	4603      	mov	r3, r0
 8009722:	461a      	mov	r2, r3
 8009724:	4b03      	ldr	r3, [pc, #12]	; (8009734 <MX_FATFS_Init+0x20>)
 8009726:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009728:	bf00      	nop
 800972a:	bd80      	pop	{r7, pc}
 800972c:	20002114 	.word	0x20002114
 8009730:	080106fc 	.word	0x080106fc
 8009734:	2000257c 	.word	0x2000257c

08009738 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009738:	b480      	push	{r7}
 800973a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800973c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800973e:	4618      	mov	r0, r3
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	4603      	mov	r3, r0
 8009750:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	4603      	mov	r3, r0
 8009768:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800976e:	79fb      	ldrb	r3, [r7, #7]
 8009770:	4619      	mov	r1, r3
 8009772:	4808      	ldr	r0, [pc, #32]	; (8009794 <USBH_status+0x34>)
 8009774:	f000 fe1a 	bl	800a3ac <USBH_MSC_UnitIsReady>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d002      	beq.n	8009784 <USBH_status+0x24>
  {
    res = RES_OK;
 800977e:	2300      	movs	r3, #0
 8009780:	73fb      	strb	r3, [r7, #15]
 8009782:	e001      	b.n	8009788 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8009784:	2301      	movs	r3, #1
 8009786:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009788:	7bfb      	ldrb	r3, [r7, #15]
}
 800978a:	4618      	mov	r0, r3
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	20002580 	.word	0x20002580

08009798 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b094      	sub	sp, #80	; 0x50
 800979c:	af02      	add	r7, sp, #8
 800979e:	60b9      	str	r1, [r7, #8]
 80097a0:	607a      	str	r2, [r7, #4]
 80097a2:	603b      	str	r3, [r7, #0]
 80097a4:	4603      	mov	r3, r0
 80097a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80097ae:	7bf9      	ldrb	r1, [r7, #15]
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	9300      	str	r3, [sp, #0]
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	4813      	ldr	r0, [pc, #76]	; (8009808 <USBH_read+0x70>)
 80097ba:	f000 fe41 	bl	800a440 <USBH_MSC_Read>
 80097be:	4603      	mov	r3, r0
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d103      	bne.n	80097cc <USBH_read+0x34>
  {
    res = RES_OK;
 80097c4:	2300      	movs	r3, #0
 80097c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80097ca:	e017      	b.n	80097fc <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80097cc:	f107 0210 	add.w	r2, r7, #16
 80097d0:	7bfb      	ldrb	r3, [r7, #15]
 80097d2:	4619      	mov	r1, r3
 80097d4:	480c      	ldr	r0, [pc, #48]	; (8009808 <USBH_read+0x70>)
 80097d6:	f000 fe0f 	bl	800a3f8 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80097da:	7f7b      	ldrb	r3, [r7, #29]
 80097dc:	2b3a      	cmp	r3, #58	; 0x3a
 80097de:	d005      	beq.n	80097ec <USBH_read+0x54>
 80097e0:	2b3a      	cmp	r3, #58	; 0x3a
 80097e2:	dc07      	bgt.n	80097f4 <USBH_read+0x5c>
 80097e4:	2b04      	cmp	r3, #4
 80097e6:	d001      	beq.n	80097ec <USBH_read+0x54>
 80097e8:	2b28      	cmp	r3, #40	; 0x28
 80097ea:	d103      	bne.n	80097f4 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80097ec:	2303      	movs	r3, #3
 80097ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80097f2:	e003      	b.n	80097fc <USBH_read+0x64>

    default:
      res = RES_ERROR;
 80097f4:	2301      	movs	r3, #1
 80097f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80097fa:	bf00      	nop
    }
  }

  return res;
 80097fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009800:	4618      	mov	r0, r3
 8009802:	3748      	adds	r7, #72	; 0x48
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	20002580 	.word	0x20002580

0800980c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b094      	sub	sp, #80	; 0x50
 8009810:	af02      	add	r7, sp, #8
 8009812:	60b9      	str	r1, [r7, #8]
 8009814:	607a      	str	r2, [r7, #4]
 8009816:	603b      	str	r3, [r7, #0]
 8009818:	4603      	mov	r3, r0
 800981a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8009822:	7bf9      	ldrb	r1, [r7, #15]
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	9300      	str	r3, [sp, #0]
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	4817      	ldr	r0, [pc, #92]	; (800988c <USBH_write+0x80>)
 800982e:	f000 fe70 	bl	800a512 <USBH_MSC_Write>
 8009832:	4603      	mov	r3, r0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d103      	bne.n	8009840 <USBH_write+0x34>
  {
    res = RES_OK;
 8009838:	2300      	movs	r3, #0
 800983a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800983e:	e01f      	b.n	8009880 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009840:	f107 0210 	add.w	r2, r7, #16
 8009844:	7bfb      	ldrb	r3, [r7, #15]
 8009846:	4619      	mov	r1, r3
 8009848:	4810      	ldr	r0, [pc, #64]	; (800988c <USBH_write+0x80>)
 800984a:	f000 fdd5 	bl	800a3f8 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800984e:	7f7b      	ldrb	r3, [r7, #29]
 8009850:	2b3a      	cmp	r3, #58	; 0x3a
 8009852:	d00d      	beq.n	8009870 <USBH_write+0x64>
 8009854:	2b3a      	cmp	r3, #58	; 0x3a
 8009856:	dc0f      	bgt.n	8009878 <USBH_write+0x6c>
 8009858:	2b28      	cmp	r3, #40	; 0x28
 800985a:	d009      	beq.n	8009870 <USBH_write+0x64>
 800985c:	2b28      	cmp	r3, #40	; 0x28
 800985e:	dc0b      	bgt.n	8009878 <USBH_write+0x6c>
 8009860:	2b04      	cmp	r3, #4
 8009862:	d005      	beq.n	8009870 <USBH_write+0x64>
 8009864:	2b27      	cmp	r3, #39	; 0x27
 8009866:	d107      	bne.n	8009878 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8009868:	2302      	movs	r3, #2
 800986a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800986e:	e007      	b.n	8009880 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009870:	2303      	movs	r3, #3
 8009872:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009876:	e003      	b.n	8009880 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800987e:	bf00      	nop
    }
  }

  return res;
 8009880:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009884:	4618      	mov	r0, r3
 8009886:	3748      	adds	r7, #72	; 0x48
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}
 800988c:	20002580 	.word	0x20002580

08009890 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b090      	sub	sp, #64	; 0x40
 8009894:	af00      	add	r7, sp, #0
 8009896:	4603      	mov	r3, r0
 8009898:	603a      	str	r2, [r7, #0]
 800989a:	71fb      	strb	r3, [r7, #7]
 800989c:	460b      	mov	r3, r1
 800989e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 80098a6:	79bb      	ldrb	r3, [r7, #6]
 80098a8:	2b03      	cmp	r3, #3
 80098aa:	d852      	bhi.n	8009952 <USBH_ioctl+0xc2>
 80098ac:	a201      	add	r2, pc, #4	; (adr r2, 80098b4 <USBH_ioctl+0x24>)
 80098ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b2:	bf00      	nop
 80098b4:	080098c5 	.word	0x080098c5
 80098b8:	080098cd 	.word	0x080098cd
 80098bc:	080098f7 	.word	0x080098f7
 80098c0:	08009923 	.word	0x08009923
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 80098c4:	2300      	movs	r3, #0
 80098c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80098ca:	e045      	b.n	8009958 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80098cc:	f107 0208 	add.w	r2, r7, #8
 80098d0:	79fb      	ldrb	r3, [r7, #7]
 80098d2:	4619      	mov	r1, r3
 80098d4:	4823      	ldr	r0, [pc, #140]	; (8009964 <USBH_ioctl+0xd4>)
 80098d6:	f000 fd8f 	bl	800a3f8 <USBH_MSC_GetLUNInfo>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d106      	bne.n	80098ee <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80098e0:	68fa      	ldr	r2, [r7, #12]
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80098e6:	2300      	movs	r3, #0
 80098e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80098ec:	e034      	b.n	8009958 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80098f4:	e030      	b.n	8009958 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80098f6:	f107 0208 	add.w	r2, r7, #8
 80098fa:	79fb      	ldrb	r3, [r7, #7]
 80098fc:	4619      	mov	r1, r3
 80098fe:	4819      	ldr	r0, [pc, #100]	; (8009964 <USBH_ioctl+0xd4>)
 8009900:	f000 fd7a 	bl	800a3f8 <USBH_MSC_GetLUNInfo>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d107      	bne.n	800991a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800990a:	8a3b      	ldrh	r3, [r7, #16]
 800990c:	461a      	mov	r2, r3
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009912:	2300      	movs	r3, #0
 8009914:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009918:	e01e      	b.n	8009958 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009920:	e01a      	b.n	8009958 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009922:	f107 0208 	add.w	r2, r7, #8
 8009926:	79fb      	ldrb	r3, [r7, #7]
 8009928:	4619      	mov	r1, r3
 800992a:	480e      	ldr	r0, [pc, #56]	; (8009964 <USBH_ioctl+0xd4>)
 800992c:	f000 fd64 	bl	800a3f8 <USBH_MSC_GetLUNInfo>
 8009930:	4603      	mov	r3, r0
 8009932:	2b00      	cmp	r3, #0
 8009934:	d109      	bne.n	800994a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8009936:	8a3b      	ldrh	r3, [r7, #16]
 8009938:	0a5b      	lsrs	r3, r3, #9
 800993a:	b29b      	uxth	r3, r3
 800993c:	461a      	mov	r2, r3
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009942:	2300      	movs	r3, #0
 8009944:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009948:	e006      	b.n	8009958 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009950:	e002      	b.n	8009958 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8009952:	2304      	movs	r3, #4
 8009954:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8009958:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800995c:	4618      	mov	r0, r3
 800995e:	3740      	adds	r7, #64	; 0x40
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	20002580 	.word	0x20002580

08009968 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009968:	b590      	push	{r4, r7, lr}
 800996a:	b089      	sub	sp, #36	; 0x24
 800996c:	af04      	add	r7, sp, #16
 800996e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009976:	7919      	ldrb	r1, [r3, #4]
 8009978:	2350      	movs	r3, #80	; 0x50
 800997a:	2206      	movs	r2, #6
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f001 fc53 	bl	800b228 <USBH_FindInterface>
 8009982:	4603      	mov	r3, r0
 8009984:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8009986:	7bfb      	ldrb	r3, [r7, #15]
 8009988:	2bff      	cmp	r3, #255	; 0xff
 800998a:	d002      	beq.n	8009992 <USBH_MSC_InterfaceInit+0x2a>
 800998c:	7bfb      	ldrb	r3, [r7, #15]
 800998e:	2b01      	cmp	r3, #1
 8009990:	d901      	bls.n	8009996 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009992:	2302      	movs	r3, #2
 8009994:	e0ef      	b.n	8009b76 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8009996:	7bfb      	ldrb	r3, [r7, #15]
 8009998:	4619      	mov	r1, r3
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f001 fc28 	bl	800b1f0 <USBH_SelectInterface>
 80099a0:	4603      	mov	r3, r0
 80099a2:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80099a4:	7bbb      	ldrb	r3, [r7, #14]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d001      	beq.n	80099ae <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 80099aa:	2302      	movs	r3, #2
 80099ac:	e0e3      	b.n	8009b76 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80099b4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80099b8:	f006 fd12 	bl	80103e0 <malloc>
 80099bc:	4603      	mov	r3, r0
 80099be:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099c6:	69db      	ldr	r3, [r3, #28]
 80099c8:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d101      	bne.n	80099d4 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 80099d0:	2302      	movs	r3, #2
 80099d2:	e0d0      	b.n	8009b76 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80099d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80099d8:	2100      	movs	r1, #0
 80099da:	68b8      	ldr	r0, [r7, #8]
 80099dc:	f006 fd1e 	bl	801041c <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80099e0:	7bfb      	ldrb	r3, [r7, #15]
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	211a      	movs	r1, #26
 80099e6:	fb01 f303 	mul.w	r3, r1, r3
 80099ea:	4413      	add	r3, r2
 80099ec:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	b25b      	sxtb	r3, r3
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	da16      	bge.n	8009a26 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80099f8:	7bfb      	ldrb	r3, [r7, #15]
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	211a      	movs	r1, #26
 80099fe:	fb01 f303 	mul.w	r3, r1, r3
 8009a02:	4413      	add	r3, r2
 8009a04:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009a08:	781a      	ldrb	r2, [r3, #0]
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009a0e:	7bfb      	ldrb	r3, [r7, #15]
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	211a      	movs	r1, #26
 8009a14:	fb01 f303 	mul.w	r3, r1, r3
 8009a18:	4413      	add	r3, r2
 8009a1a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009a1e:	881a      	ldrh	r2, [r3, #0]
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	815a      	strh	r2, [r3, #10]
 8009a24:	e015      	b.n	8009a52 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009a26:	7bfb      	ldrb	r3, [r7, #15]
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	211a      	movs	r1, #26
 8009a2c:	fb01 f303 	mul.w	r3, r1, r3
 8009a30:	4413      	add	r3, r2
 8009a32:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009a36:	781a      	ldrb	r2, [r3, #0]
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009a3c:	7bfb      	ldrb	r3, [r7, #15]
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	211a      	movs	r1, #26
 8009a42:	fb01 f303 	mul.w	r3, r1, r3
 8009a46:	4413      	add	r3, r2
 8009a48:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009a4c:	881a      	ldrh	r2, [r3, #0]
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009a52:	7bfb      	ldrb	r3, [r7, #15]
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	211a      	movs	r1, #26
 8009a58:	fb01 f303 	mul.w	r3, r1, r3
 8009a5c:	4413      	add	r3, r2
 8009a5e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	b25b      	sxtb	r3, r3
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	da16      	bge.n	8009a98 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009a6a:	7bfb      	ldrb	r3, [r7, #15]
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	211a      	movs	r1, #26
 8009a70:	fb01 f303 	mul.w	r3, r1, r3
 8009a74:	4413      	add	r3, r2
 8009a76:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009a7a:	781a      	ldrb	r2, [r3, #0]
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009a80:	7bfb      	ldrb	r3, [r7, #15]
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	211a      	movs	r1, #26
 8009a86:	fb01 f303 	mul.w	r3, r1, r3
 8009a8a:	4413      	add	r3, r2
 8009a8c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009a90:	881a      	ldrh	r2, [r3, #0]
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	815a      	strh	r2, [r3, #10]
 8009a96:	e015      	b.n	8009ac4 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009a98:	7bfb      	ldrb	r3, [r7, #15]
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	211a      	movs	r1, #26
 8009a9e:	fb01 f303 	mul.w	r3, r1, r3
 8009aa2:	4413      	add	r3, r2
 8009aa4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009aa8:	781a      	ldrb	r2, [r3, #0]
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009aae:	7bfb      	ldrb	r3, [r7, #15]
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	211a      	movs	r1, #26
 8009ab4:	fb01 f303 	mul.w	r3, r1, r3
 8009ab8:	4413      	add	r3, r2
 8009aba:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009abe:	881a      	ldrh	r2, [r3, #0]
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	2200      	movs	r2, #0
 8009ace:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	799b      	ldrb	r3, [r3, #6]
 8009ada:	4619      	mov	r1, r3
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f002 fdc4 	bl	800c66a <USBH_AllocPipe>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	79db      	ldrb	r3, [r3, #7]
 8009aee:	4619      	mov	r1, r3
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f002 fdba 	bl	800c66a <USBH_AllocPipe>
 8009af6:	4603      	mov	r3, r0
 8009af8:	461a      	mov	r2, r3
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 fdac 	bl	800a65c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	7959      	ldrb	r1, [r3, #5]
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	7998      	ldrb	r0, [r3, #6]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b18:	68ba      	ldr	r2, [r7, #8]
 8009b1a:	8912      	ldrh	r2, [r2, #8]
 8009b1c:	9202      	str	r2, [sp, #8]
 8009b1e:	2202      	movs	r2, #2
 8009b20:	9201      	str	r2, [sp, #4]
 8009b22:	9300      	str	r3, [sp, #0]
 8009b24:	4623      	mov	r3, r4
 8009b26:	4602      	mov	r2, r0
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f002 fd6f 	bl	800c60c <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	7919      	ldrb	r1, [r3, #4]
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	79d8      	ldrb	r0, [r3, #7]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b42:	68ba      	ldr	r2, [r7, #8]
 8009b44:	8952      	ldrh	r2, [r2, #10]
 8009b46:	9202      	str	r2, [sp, #8]
 8009b48:	2202      	movs	r2, #2
 8009b4a:	9201      	str	r2, [sp, #4]
 8009b4c:	9300      	str	r3, [sp, #0]
 8009b4e:	4623      	mov	r3, r4
 8009b50:	4602      	mov	r2, r0
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f002 fd5a 	bl	800c60c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	791b      	ldrb	r3, [r3, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	4619      	mov	r1, r3
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f006 fb5f 	bl	8010224 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	795b      	ldrb	r3, [r3, #5]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f006 fb58 	bl	8010224 <USBH_LL_SetToggle>

  return USBH_OK;
 8009b74:	2300      	movs	r3, #0
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3714      	adds	r7, #20
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd90      	pop	{r4, r7, pc}

08009b7e <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b084      	sub	sp, #16
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b8c:	69db      	ldr	r3, [r3, #28]
 8009b8e:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	795b      	ldrb	r3, [r3, #5]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d00e      	beq.n	8009bb6 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	795b      	ldrb	r3, [r3, #5]
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f002 fd53 	bl	800c64a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	795b      	ldrb	r3, [r3, #5]
 8009ba8:	4619      	mov	r1, r3
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f002 fd7e 	bl	800c6ac <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	791b      	ldrb	r3, [r3, #4]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d00e      	beq.n	8009bdc <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	791b      	ldrb	r3, [r3, #4]
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f002 fd40 	bl	800c64a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	791b      	ldrb	r3, [r3, #4]
 8009bce:	4619      	mov	r1, r3
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f002 fd6b 	bl	800c6ac <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009be2:	69db      	ldr	r3, [r3, #28]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00b      	beq.n	8009c00 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bee:	69db      	ldr	r3, [r3, #28]
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f006 fbfd 	bl	80103f0 <free>
    phost->pActiveClass->pData = 0U;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3710      	adds	r7, #16
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b084      	sub	sp, #16
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c18:	69db      	ldr	r3, [r3, #28]
 8009c1a:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	7b9b      	ldrb	r3, [r3, #14]
 8009c24:	2b03      	cmp	r3, #3
 8009c26:	d041      	beq.n	8009cac <USBH_MSC_ClassRequest+0xa2>
 8009c28:	2b03      	cmp	r3, #3
 8009c2a:	dc4b      	bgt.n	8009cc4 <USBH_MSC_ClassRequest+0xba>
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d001      	beq.n	8009c34 <USBH_MSC_ClassRequest+0x2a>
 8009c30:	2b02      	cmp	r3, #2
 8009c32:	d147      	bne.n	8009cc4 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	4619      	mov	r1, r3
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 fcf0 	bl	800a61e <USBH_MSC_BOT_REQ_GetMaxLUN>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8009c42:	7bfb      	ldrb	r3, [r7, #15]
 8009c44:	2b03      	cmp	r3, #3
 8009c46:	d104      	bne.n	8009c52 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8009c52:	7bfb      	ldrb	r3, [r7, #15]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d137      	bne.n	8009cc8 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	2b02      	cmp	r3, #2
 8009c5e:	d804      	bhi.n	8009c6a <USBH_MSC_ClassRequest+0x60>
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	3301      	adds	r3, #1
 8009c66:	b2da      	uxtb	r2, r3
 8009c68:	e000      	b.n	8009c6c <USBH_MSC_ClassRequest+0x62>
 8009c6a:	2202      	movs	r2, #2
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009c70:	2300      	movs	r3, #0
 8009c72:	73bb      	strb	r3, [r7, #14]
 8009c74:	e014      	b.n	8009ca0 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8009c76:	7bbb      	ldrb	r3, [r7, #14]
 8009c78:	68ba      	ldr	r2, [r7, #8]
 8009c7a:	2134      	movs	r1, #52	; 0x34
 8009c7c:	fb01 f303 	mul.w	r3, r1, r3
 8009c80:	4413      	add	r3, r2
 8009c82:	3392      	adds	r3, #146	; 0x92
 8009c84:	2202      	movs	r2, #2
 8009c86:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8009c88:	7bbb      	ldrb	r3, [r7, #14]
 8009c8a:	68ba      	ldr	r2, [r7, #8]
 8009c8c:	2134      	movs	r1, #52	; 0x34
 8009c8e:	fb01 f303 	mul.w	r3, r1, r3
 8009c92:	4413      	add	r3, r2
 8009c94:	33c1      	adds	r3, #193	; 0xc1
 8009c96:	2200      	movs	r2, #0
 8009c98:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009c9a:	7bbb      	ldrb	r3, [r7, #14]
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	73bb      	strb	r3, [r7, #14]
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	7bba      	ldrb	r2, [r7, #14]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d3e5      	bcc.n	8009c76 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8009caa:	e00d      	b.n	8009cc8 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8009cac:	2100      	movs	r1, #0
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f002 f87b 	bl	800bdaa <USBH_ClrFeature>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d108      	bne.n	8009ccc <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	7bda      	ldrb	r2, [r3, #15]
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	739a      	strb	r2, [r3, #14]
      }
      break;
 8009cc2:	e003      	b.n	8009ccc <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8009cc4:	bf00      	nop
 8009cc6:	e002      	b.n	8009cce <USBH_MSC_ClassRequest+0xc4>
      break;
 8009cc8:	bf00      	nop
 8009cca:	e000      	b.n	8009cce <USBH_MSC_ClassRequest+0xc4>
      break;
 8009ccc:	bf00      	nop
  }

  return status;
 8009cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3710      	adds	r7, #16
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b086      	sub	sp, #24
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ce6:	69db      	ldr	r3, [r3, #28]
 8009ce8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8009cea:	2301      	movs	r3, #1
 8009cec:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	7b1b      	ldrb	r3, [r3, #12]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d003      	beq.n	8009d06 <USBH_MSC_Process+0x2e>
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	f000 8271 	beq.w	800a1e6 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8009d04:	e272      	b.n	800a1ec <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	429a      	cmp	r2, r3
 8009d14:	f080 824f 	bcs.w	800a1b6 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d1e:	4619      	mov	r1, r3
 8009d20:	693a      	ldr	r2, [r7, #16]
 8009d22:	2334      	movs	r3, #52	; 0x34
 8009d24:	fb03 f301 	mul.w	r3, r3, r1
 8009d28:	4413      	add	r3, r2
 8009d2a:	3391      	adds	r3, #145	; 0x91
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d36:	4619      	mov	r1, r3
 8009d38:	693a      	ldr	r2, [r7, #16]
 8009d3a:	2334      	movs	r3, #52	; 0x34
 8009d3c:	fb03 f301 	mul.w	r3, r3, r1
 8009d40:	4413      	add	r3, r2
 8009d42:	3390      	adds	r3, #144	; 0x90
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	2b08      	cmp	r3, #8
 8009d48:	f200 8243 	bhi.w	800a1d2 <USBH_MSC_Process+0x4fa>
 8009d4c:	a201      	add	r2, pc, #4	; (adr r2, 8009d54 <USBH_MSC_Process+0x7c>)
 8009d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d52:	bf00      	nop
 8009d54:	08009d79 	.word	0x08009d79
 8009d58:	0800a1d3 	.word	0x0800a1d3
 8009d5c:	08009e41 	.word	0x08009e41
 8009d60:	08009fc5 	.word	0x08009fc5
 8009d64:	08009d9f 	.word	0x08009d9f
 8009d68:	0800a091 	.word	0x0800a091
 8009d6c:	0800a1d3 	.word	0x0800a1d3
 8009d70:	0800a1d3 	.word	0x0800a1d3
 8009d74:	0800a1a5 	.word	0x0800a1a5
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d7e:	4619      	mov	r1, r3
 8009d80:	693a      	ldr	r2, [r7, #16]
 8009d82:	2334      	movs	r3, #52	; 0x34
 8009d84:	fb03 f301 	mul.w	r3, r3, r1
 8009d88:	4413      	add	r3, r2
 8009d8a:	3390      	adds	r3, #144	; 0x90
 8009d8c:	2204      	movs	r2, #4
 8009d8e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8009d9c:	e222      	b.n	800a1e4 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009da4:	b2d9      	uxtb	r1, r3
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009dac:	461a      	mov	r2, r3
 8009dae:	2334      	movs	r3, #52	; 0x34
 8009db0:	fb03 f302 	mul.w	r3, r3, r2
 8009db4:	3398      	adds	r3, #152	; 0x98
 8009db6:	693a      	ldr	r2, [r7, #16]
 8009db8:	4413      	add	r3, r2
 8009dba:	3307      	adds	r3, #7
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 ff6a 	bl	800ac98 <USBH_MSC_SCSI_Inquiry>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009dc8:	7bfb      	ldrb	r3, [r7, #15]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d10b      	bne.n	8009de6 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	693a      	ldr	r2, [r7, #16]
 8009dd8:	2334      	movs	r3, #52	; 0x34
 8009dda:	fb03 f301 	mul.w	r3, r3, r1
 8009dde:	4413      	add	r3, r2
 8009de0:	3390      	adds	r3, #144	; 0x90
 8009de2:	2202      	movs	r2, #2
 8009de4:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8009de6:	7bfb      	ldrb	r3, [r7, #15]
 8009de8:	2b02      	cmp	r3, #2
 8009dea:	d10c      	bne.n	8009e06 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009df2:	4619      	mov	r1, r3
 8009df4:	693a      	ldr	r2, [r7, #16]
 8009df6:	2334      	movs	r3, #52	; 0x34
 8009df8:	fb03 f301 	mul.w	r3, r3, r1
 8009dfc:	4413      	add	r3, r2
 8009dfe:	3390      	adds	r3, #144	; 0x90
 8009e00:	2205      	movs	r2, #5
 8009e02:	701a      	strb	r2, [r3, #0]
            break;
 8009e04:	e1e7      	b.n	800a1d6 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009e06:	7bfb      	ldrb	r3, [r7, #15]
 8009e08:	2b04      	cmp	r3, #4
 8009e0a:	f040 81e4 	bne.w	800a1d6 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e14:	4619      	mov	r1, r3
 8009e16:	693a      	ldr	r2, [r7, #16]
 8009e18:	2334      	movs	r3, #52	; 0x34
 8009e1a:	fb03 f301 	mul.w	r3, r3, r1
 8009e1e:	4413      	add	r3, r2
 8009e20:	3390      	adds	r3, #144	; 0x90
 8009e22:	2201      	movs	r2, #1
 8009e24:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	693a      	ldr	r2, [r7, #16]
 8009e30:	2334      	movs	r3, #52	; 0x34
 8009e32:	fb03 f301 	mul.w	r3, r3, r1
 8009e36:	4413      	add	r3, r2
 8009e38:	3391      	adds	r3, #145	; 0x91
 8009e3a:	2202      	movs	r2, #2
 8009e3c:	701a      	strb	r2, [r3, #0]
            break;
 8009e3e:	e1ca      	b.n	800a1d6 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	4619      	mov	r1, r3
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 fe66 	bl	800ab1c <USBH_MSC_SCSI_TestUnitReady>
 8009e50:	4603      	mov	r3, r0
 8009e52:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8009e54:	7bbb      	ldrb	r3, [r7, #14]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d149      	bne.n	8009eee <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e60:	4619      	mov	r1, r3
 8009e62:	693a      	ldr	r2, [r7, #16]
 8009e64:	2334      	movs	r3, #52	; 0x34
 8009e66:	fb03 f301 	mul.w	r3, r3, r1
 8009e6a:	4413      	add	r3, r2
 8009e6c:	3392      	adds	r3, #146	; 0x92
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d00c      	beq.n	8009e8e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	693a      	ldr	r2, [r7, #16]
 8009e7e:	2334      	movs	r3, #52	; 0x34
 8009e80:	fb03 f301 	mul.w	r3, r3, r1
 8009e84:	4413      	add	r3, r2
 8009e86:	33c1      	adds	r3, #193	; 0xc1
 8009e88:	2201      	movs	r2, #1
 8009e8a:	701a      	strb	r2, [r3, #0]
 8009e8c:	e00b      	b.n	8009ea6 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e94:	4619      	mov	r1, r3
 8009e96:	693a      	ldr	r2, [r7, #16]
 8009e98:	2334      	movs	r3, #52	; 0x34
 8009e9a:	fb03 f301 	mul.w	r3, r3, r1
 8009e9e:	4413      	add	r3, r2
 8009ea0:	33c1      	adds	r3, #193	; 0xc1
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009eac:	4619      	mov	r1, r3
 8009eae:	693a      	ldr	r2, [r7, #16]
 8009eb0:	2334      	movs	r3, #52	; 0x34
 8009eb2:	fb03 f301 	mul.w	r3, r3, r1
 8009eb6:	4413      	add	r3, r2
 8009eb8:	3390      	adds	r3, #144	; 0x90
 8009eba:	2203      	movs	r2, #3
 8009ebc:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	693a      	ldr	r2, [r7, #16]
 8009ec8:	2334      	movs	r3, #52	; 0x34
 8009eca:	fb03 f301 	mul.w	r3, r3, r1
 8009ece:	4413      	add	r3, r2
 8009ed0:	3391      	adds	r3, #145	; 0x91
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009edc:	4619      	mov	r1, r3
 8009ede:	693a      	ldr	r2, [r7, #16]
 8009ee0:	2334      	movs	r3, #52	; 0x34
 8009ee2:	fb03 f301 	mul.w	r3, r3, r1
 8009ee6:	4413      	add	r3, r2
 8009ee8:	3392      	adds	r3, #146	; 0x92
 8009eea:	2200      	movs	r2, #0
 8009eec:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8009eee:	7bbb      	ldrb	r3, [r7, #14]
 8009ef0:	2b02      	cmp	r3, #2
 8009ef2:	d14a      	bne.n	8009f8a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009efa:	4619      	mov	r1, r3
 8009efc:	693a      	ldr	r2, [r7, #16]
 8009efe:	2334      	movs	r3, #52	; 0x34
 8009f00:	fb03 f301 	mul.w	r3, r3, r1
 8009f04:	4413      	add	r3, r2
 8009f06:	3392      	adds	r3, #146	; 0x92
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d00c      	beq.n	8009f28 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f14:	4619      	mov	r1, r3
 8009f16:	693a      	ldr	r2, [r7, #16]
 8009f18:	2334      	movs	r3, #52	; 0x34
 8009f1a:	fb03 f301 	mul.w	r3, r3, r1
 8009f1e:	4413      	add	r3, r2
 8009f20:	33c1      	adds	r3, #193	; 0xc1
 8009f22:	2201      	movs	r2, #1
 8009f24:	701a      	strb	r2, [r3, #0]
 8009f26:	e00b      	b.n	8009f40 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f2e:	4619      	mov	r1, r3
 8009f30:	693a      	ldr	r2, [r7, #16]
 8009f32:	2334      	movs	r3, #52	; 0x34
 8009f34:	fb03 f301 	mul.w	r3, r3, r1
 8009f38:	4413      	add	r3, r2
 8009f3a:	33c1      	adds	r3, #193	; 0xc1
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f46:	4619      	mov	r1, r3
 8009f48:	693a      	ldr	r2, [r7, #16]
 8009f4a:	2334      	movs	r3, #52	; 0x34
 8009f4c:	fb03 f301 	mul.w	r3, r3, r1
 8009f50:	4413      	add	r3, r2
 8009f52:	3390      	adds	r3, #144	; 0x90
 8009f54:	2205      	movs	r2, #5
 8009f56:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f5e:	4619      	mov	r1, r3
 8009f60:	693a      	ldr	r2, [r7, #16]
 8009f62:	2334      	movs	r3, #52	; 0x34
 8009f64:	fb03 f301 	mul.w	r3, r3, r1
 8009f68:	4413      	add	r3, r2
 8009f6a:	3391      	adds	r3, #145	; 0x91
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f76:	4619      	mov	r1, r3
 8009f78:	693a      	ldr	r2, [r7, #16]
 8009f7a:	2334      	movs	r3, #52	; 0x34
 8009f7c:	fb03 f301 	mul.w	r3, r3, r1
 8009f80:	4413      	add	r3, r2
 8009f82:	3392      	adds	r3, #146	; 0x92
 8009f84:	2202      	movs	r2, #2
 8009f86:	701a      	strb	r2, [r3, #0]
            break;
 8009f88:	e127      	b.n	800a1da <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8009f8a:	7bbb      	ldrb	r3, [r7, #14]
 8009f8c:	2b04      	cmp	r3, #4
 8009f8e:	f040 8124 	bne.w	800a1da <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f98:	4619      	mov	r1, r3
 8009f9a:	693a      	ldr	r2, [r7, #16]
 8009f9c:	2334      	movs	r3, #52	; 0x34
 8009f9e:	fb03 f301 	mul.w	r3, r3, r1
 8009fa2:	4413      	add	r3, r2
 8009fa4:	3390      	adds	r3, #144	; 0x90
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	693a      	ldr	r2, [r7, #16]
 8009fb4:	2334      	movs	r3, #52	; 0x34
 8009fb6:	fb03 f301 	mul.w	r3, r3, r1
 8009fba:	4413      	add	r3, r2
 8009fbc:	3391      	adds	r3, #145	; 0x91
 8009fbe:	2202      	movs	r2, #2
 8009fc0:	701a      	strb	r2, [r3, #0]
            break;
 8009fc2:	e10a      	b.n	800a1da <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fca:	b2d9      	uxtb	r1, r3
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	2334      	movs	r3, #52	; 0x34
 8009fd6:	fb03 f302 	mul.w	r3, r3, r2
 8009fda:	3390      	adds	r3, #144	; 0x90
 8009fdc:	693a      	ldr	r2, [r7, #16]
 8009fde:	4413      	add	r3, r2
 8009fe0:	3304      	adds	r3, #4
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 fddc 	bl	800aba2 <USBH_MSC_SCSI_ReadCapacity>
 8009fea:	4603      	mov	r3, r0
 8009fec:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009fee:	7bfb      	ldrb	r3, [r7, #15]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d120      	bne.n	800a036 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	693a      	ldr	r2, [r7, #16]
 8009ffe:	2334      	movs	r3, #52	; 0x34
 800a000:	fb03 f301 	mul.w	r3, r3, r1
 800a004:	4413      	add	r3, r2
 800a006:	3390      	adds	r3, #144	; 0x90
 800a008:	2201      	movs	r2, #1
 800a00a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a012:	4619      	mov	r1, r3
 800a014:	693a      	ldr	r2, [r7, #16]
 800a016:	2334      	movs	r3, #52	; 0x34
 800a018:	fb03 f301 	mul.w	r3, r3, r1
 800a01c:	4413      	add	r3, r2
 800a01e:	3391      	adds	r3, #145	; 0x91
 800a020:	2200      	movs	r2, #0
 800a022:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a02a:	3301      	adds	r3, #1
 800a02c:	b29a      	uxth	r2, r3
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a034:	e0d3      	b.n	800a1de <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800a036:	7bfb      	ldrb	r3, [r7, #15]
 800a038:	2b02      	cmp	r3, #2
 800a03a:	d10c      	bne.n	800a056 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a042:	4619      	mov	r1, r3
 800a044:	693a      	ldr	r2, [r7, #16]
 800a046:	2334      	movs	r3, #52	; 0x34
 800a048:	fb03 f301 	mul.w	r3, r3, r1
 800a04c:	4413      	add	r3, r2
 800a04e:	3390      	adds	r3, #144	; 0x90
 800a050:	2205      	movs	r2, #5
 800a052:	701a      	strb	r2, [r3, #0]
            break;
 800a054:	e0c3      	b.n	800a1de <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a056:	7bfb      	ldrb	r3, [r7, #15]
 800a058:	2b04      	cmp	r3, #4
 800a05a:	f040 80c0 	bne.w	800a1de <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a064:	4619      	mov	r1, r3
 800a066:	693a      	ldr	r2, [r7, #16]
 800a068:	2334      	movs	r3, #52	; 0x34
 800a06a:	fb03 f301 	mul.w	r3, r3, r1
 800a06e:	4413      	add	r3, r2
 800a070:	3390      	adds	r3, #144	; 0x90
 800a072:	2201      	movs	r2, #1
 800a074:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a07c:	4619      	mov	r1, r3
 800a07e:	693a      	ldr	r2, [r7, #16]
 800a080:	2334      	movs	r3, #52	; 0x34
 800a082:	fb03 f301 	mul.w	r3, r3, r1
 800a086:	4413      	add	r3, r2
 800a088:	3391      	adds	r3, #145	; 0x91
 800a08a:	2202      	movs	r2, #2
 800a08c:	701a      	strb	r2, [r3, #0]
            break;
 800a08e:	e0a6      	b.n	800a1de <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a096:	b2d9      	uxtb	r1, r3
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a09e:	461a      	mov	r2, r3
 800a0a0:	2334      	movs	r3, #52	; 0x34
 800a0a2:	fb03 f302 	mul.w	r3, r3, r2
 800a0a6:	3398      	adds	r3, #152	; 0x98
 800a0a8:	693a      	ldr	r2, [r7, #16]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	3304      	adds	r3, #4
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 fe96 	bl	800ade2 <USBH_MSC_SCSI_RequestSense>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a0ba:	7bfb      	ldrb	r3, [r7, #15]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d145      	bne.n	800a14c <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	693a      	ldr	r2, [r7, #16]
 800a0ca:	2334      	movs	r3, #52	; 0x34
 800a0cc:	fb03 f301 	mul.w	r3, r3, r1
 800a0d0:	4413      	add	r3, r2
 800a0d2:	339c      	adds	r3, #156	; 0x9c
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	2b06      	cmp	r3, #6
 800a0d8:	d00c      	beq.n	800a0f4 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	693a      	ldr	r2, [r7, #16]
 800a0e4:	2334      	movs	r3, #52	; 0x34
 800a0e6:	fb03 f301 	mul.w	r3, r3, r1
 800a0ea:	4413      	add	r3, r2
 800a0ec:	339c      	adds	r3, #156	; 0x9c
 800a0ee:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d117      	bne.n	800a124 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800a100:	1ad3      	subs	r3, r2, r3
 800a102:	f242 720f 	movw	r2, #9999	; 0x270f
 800a106:	4293      	cmp	r3, r2
 800a108:	d80c      	bhi.n	800a124 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a110:	4619      	mov	r1, r3
 800a112:	693a      	ldr	r2, [r7, #16]
 800a114:	2334      	movs	r3, #52	; 0x34
 800a116:	fb03 f301 	mul.w	r3, r3, r1
 800a11a:	4413      	add	r3, r2
 800a11c:	3390      	adds	r3, #144	; 0x90
 800a11e:	2202      	movs	r2, #2
 800a120:	701a      	strb	r2, [r3, #0]
                  break;
 800a122:	e05f      	b.n	800a1e4 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a12a:	4619      	mov	r1, r3
 800a12c:	693a      	ldr	r2, [r7, #16]
 800a12e:	2334      	movs	r3, #52	; 0x34
 800a130:	fb03 f301 	mul.w	r3, r3, r1
 800a134:	4413      	add	r3, r2
 800a136:	3390      	adds	r3, #144	; 0x90
 800a138:	2201      	movs	r2, #1
 800a13a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a142:	3301      	adds	r3, #1
 800a144:	b29a      	uxth	r2, r3
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800a14c:	7bfb      	ldrb	r3, [r7, #15]
 800a14e:	2b02      	cmp	r3, #2
 800a150:	d10c      	bne.n	800a16c <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a158:	4619      	mov	r1, r3
 800a15a:	693a      	ldr	r2, [r7, #16]
 800a15c:	2334      	movs	r3, #52	; 0x34
 800a15e:	fb03 f301 	mul.w	r3, r3, r1
 800a162:	4413      	add	r3, r2
 800a164:	3390      	adds	r3, #144	; 0x90
 800a166:	2208      	movs	r2, #8
 800a168:	701a      	strb	r2, [r3, #0]
            break;
 800a16a:	e03a      	b.n	800a1e2 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a16c:	7bfb      	ldrb	r3, [r7, #15]
 800a16e:	2b04      	cmp	r3, #4
 800a170:	d137      	bne.n	800a1e2 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a178:	4619      	mov	r1, r3
 800a17a:	693a      	ldr	r2, [r7, #16]
 800a17c:	2334      	movs	r3, #52	; 0x34
 800a17e:	fb03 f301 	mul.w	r3, r3, r1
 800a182:	4413      	add	r3, r2
 800a184:	3390      	adds	r3, #144	; 0x90
 800a186:	2201      	movs	r2, #1
 800a188:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a190:	4619      	mov	r1, r3
 800a192:	693a      	ldr	r2, [r7, #16]
 800a194:	2334      	movs	r3, #52	; 0x34
 800a196:	fb03 f301 	mul.w	r3, r3, r1
 800a19a:	4413      	add	r3, r2
 800a19c:	3391      	adds	r3, #145	; 0x91
 800a19e:	2202      	movs	r2, #2
 800a1a0:	701a      	strb	r2, [r3, #0]
            break;
 800a1a2:	e01e      	b.n	800a1e2 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	b29a      	uxth	r2, r3
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a1b4:	e016      	b.n	800a1e4 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a1ca:	2102      	movs	r1, #2
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	4798      	blx	r3
      break;
 800a1d0:	e00c      	b.n	800a1ec <USBH_MSC_Process+0x514>
            break;
 800a1d2:	bf00      	nop
 800a1d4:	e00a      	b.n	800a1ec <USBH_MSC_Process+0x514>
            break;
 800a1d6:	bf00      	nop
 800a1d8:	e008      	b.n	800a1ec <USBH_MSC_Process+0x514>
            break;
 800a1da:	bf00      	nop
 800a1dc:	e006      	b.n	800a1ec <USBH_MSC_Process+0x514>
            break;
 800a1de:	bf00      	nop
 800a1e0:	e004      	b.n	800a1ec <USBH_MSC_Process+0x514>
            break;
 800a1e2:	bf00      	nop
      break;
 800a1e4:	e002      	b.n	800a1ec <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	75fb      	strb	r3, [r7, #23]
      break;
 800a1ea:	bf00      	nop
  }
  return error;
 800a1ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3718      	adds	r7, #24
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop

0800a1f8 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	370c      	adds	r7, #12
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr

0800a20e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b088      	sub	sp, #32
 800a212:	af02      	add	r7, sp, #8
 800a214:	6078      	str	r0, [r7, #4]
 800a216:	460b      	mov	r3, r1
 800a218:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a220:	69db      	ldr	r3, [r3, #28]
 800a222:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800a224:	2301      	movs	r3, #1
 800a226:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800a228:	2301      	movs	r3, #1
 800a22a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800a22c:	78fb      	ldrb	r3, [r7, #3]
 800a22e:	693a      	ldr	r2, [r7, #16]
 800a230:	2134      	movs	r1, #52	; 0x34
 800a232:	fb01 f303 	mul.w	r3, r1, r3
 800a236:	4413      	add	r3, r2
 800a238:	3390      	adds	r3, #144	; 0x90
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	2b07      	cmp	r3, #7
 800a23e:	d03c      	beq.n	800a2ba <USBH_MSC_RdWrProcess+0xac>
 800a240:	2b07      	cmp	r3, #7
 800a242:	f300 80a7 	bgt.w	800a394 <USBH_MSC_RdWrProcess+0x186>
 800a246:	2b05      	cmp	r3, #5
 800a248:	d06c      	beq.n	800a324 <USBH_MSC_RdWrProcess+0x116>
 800a24a:	2b06      	cmp	r3, #6
 800a24c:	f040 80a2 	bne.w	800a394 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800a250:	78f9      	ldrb	r1, [r7, #3]
 800a252:	2300      	movs	r3, #0
 800a254:	9300      	str	r3, [sp, #0]
 800a256:	2300      	movs	r3, #0
 800a258:	2200      	movs	r2, #0
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 fea5 	bl	800afaa <USBH_MSC_SCSI_Read>
 800a260:	4603      	mov	r3, r0
 800a262:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a264:	7bfb      	ldrb	r3, [r7, #15]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d10b      	bne.n	800a282 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a26a:	78fb      	ldrb	r3, [r7, #3]
 800a26c:	693a      	ldr	r2, [r7, #16]
 800a26e:	2134      	movs	r1, #52	; 0x34
 800a270:	fb01 f303 	mul.w	r3, r1, r3
 800a274:	4413      	add	r3, r2
 800a276:	3390      	adds	r3, #144	; 0x90
 800a278:	2201      	movs	r2, #1
 800a27a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a27c:	2300      	movs	r3, #0
 800a27e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a280:	e08a      	b.n	800a398 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800a282:	7bfb      	ldrb	r3, [r7, #15]
 800a284:	2b02      	cmp	r3, #2
 800a286:	d109      	bne.n	800a29c <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a288:	78fb      	ldrb	r3, [r7, #3]
 800a28a:	693a      	ldr	r2, [r7, #16]
 800a28c:	2134      	movs	r1, #52	; 0x34
 800a28e:	fb01 f303 	mul.w	r3, r1, r3
 800a292:	4413      	add	r3, r2
 800a294:	3390      	adds	r3, #144	; 0x90
 800a296:	2205      	movs	r2, #5
 800a298:	701a      	strb	r2, [r3, #0]
      break;
 800a29a:	e07d      	b.n	800a398 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a29c:	7bfb      	ldrb	r3, [r7, #15]
 800a29e:	2b04      	cmp	r3, #4
 800a2a0:	d17a      	bne.n	800a398 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a2a2:	78fb      	ldrb	r3, [r7, #3]
 800a2a4:	693a      	ldr	r2, [r7, #16]
 800a2a6:	2134      	movs	r1, #52	; 0x34
 800a2a8:	fb01 f303 	mul.w	r3, r1, r3
 800a2ac:	4413      	add	r3, r2
 800a2ae:	3390      	adds	r3, #144	; 0x90
 800a2b0:	2208      	movs	r2, #8
 800a2b2:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a2b4:	2302      	movs	r3, #2
 800a2b6:	75fb      	strb	r3, [r7, #23]
      break;
 800a2b8:	e06e      	b.n	800a398 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800a2ba:	78f9      	ldrb	r1, [r7, #3]
 800a2bc:	2300      	movs	r3, #0
 800a2be:	9300      	str	r3, [sp, #0]
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 fe05 	bl	800aed4 <USBH_MSC_SCSI_Write>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a2ce:	7bfb      	ldrb	r3, [r7, #15]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d10b      	bne.n	800a2ec <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a2d4:	78fb      	ldrb	r3, [r7, #3]
 800a2d6:	693a      	ldr	r2, [r7, #16]
 800a2d8:	2134      	movs	r1, #52	; 0x34
 800a2da:	fb01 f303 	mul.w	r3, r1, r3
 800a2de:	4413      	add	r3, r2
 800a2e0:	3390      	adds	r3, #144	; 0x90
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a2ea:	e057      	b.n	800a39c <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800a2ec:	7bfb      	ldrb	r3, [r7, #15]
 800a2ee:	2b02      	cmp	r3, #2
 800a2f0:	d109      	bne.n	800a306 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a2f2:	78fb      	ldrb	r3, [r7, #3]
 800a2f4:	693a      	ldr	r2, [r7, #16]
 800a2f6:	2134      	movs	r1, #52	; 0x34
 800a2f8:	fb01 f303 	mul.w	r3, r1, r3
 800a2fc:	4413      	add	r3, r2
 800a2fe:	3390      	adds	r3, #144	; 0x90
 800a300:	2205      	movs	r2, #5
 800a302:	701a      	strb	r2, [r3, #0]
      break;
 800a304:	e04a      	b.n	800a39c <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a306:	7bfb      	ldrb	r3, [r7, #15]
 800a308:	2b04      	cmp	r3, #4
 800a30a:	d147      	bne.n	800a39c <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a30c:	78fb      	ldrb	r3, [r7, #3]
 800a30e:	693a      	ldr	r2, [r7, #16]
 800a310:	2134      	movs	r1, #52	; 0x34
 800a312:	fb01 f303 	mul.w	r3, r1, r3
 800a316:	4413      	add	r3, r2
 800a318:	3390      	adds	r3, #144	; 0x90
 800a31a:	2208      	movs	r2, #8
 800a31c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a31e:	2302      	movs	r3, #2
 800a320:	75fb      	strb	r3, [r7, #23]
      break;
 800a322:	e03b      	b.n	800a39c <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800a324:	78fb      	ldrb	r3, [r7, #3]
 800a326:	2234      	movs	r2, #52	; 0x34
 800a328:	fb02 f303 	mul.w	r3, r2, r3
 800a32c:	3398      	adds	r3, #152	; 0x98
 800a32e:	693a      	ldr	r2, [r7, #16]
 800a330:	4413      	add	r3, r2
 800a332:	1d1a      	adds	r2, r3, #4
 800a334:	78fb      	ldrb	r3, [r7, #3]
 800a336:	4619      	mov	r1, r3
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 fd52 	bl	800ade2 <USBH_MSC_SCSI_RequestSense>
 800a33e:	4603      	mov	r3, r0
 800a340:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a342:	7bfb      	ldrb	r3, [r7, #15]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d113      	bne.n	800a370 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a348:	78fb      	ldrb	r3, [r7, #3]
 800a34a:	693a      	ldr	r2, [r7, #16]
 800a34c:	2134      	movs	r1, #52	; 0x34
 800a34e:	fb01 f303 	mul.w	r3, r1, r3
 800a352:	4413      	add	r3, r2
 800a354:	3390      	adds	r3, #144	; 0x90
 800a356:	2201      	movs	r2, #1
 800a358:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800a35a:	78fb      	ldrb	r3, [r7, #3]
 800a35c:	693a      	ldr	r2, [r7, #16]
 800a35e:	2134      	movs	r1, #52	; 0x34
 800a360:	fb01 f303 	mul.w	r3, r1, r3
 800a364:	4413      	add	r3, r2
 800a366:	3391      	adds	r3, #145	; 0x91
 800a368:	2202      	movs	r2, #2
 800a36a:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800a36c:	2302      	movs	r3, #2
 800a36e:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800a370:	7bfb      	ldrb	r3, [r7, #15]
 800a372:	2b02      	cmp	r3, #2
 800a374:	d014      	beq.n	800a3a0 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a376:	7bfb      	ldrb	r3, [r7, #15]
 800a378:	2b04      	cmp	r3, #4
 800a37a:	d111      	bne.n	800a3a0 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a37c:	78fb      	ldrb	r3, [r7, #3]
 800a37e:	693a      	ldr	r2, [r7, #16]
 800a380:	2134      	movs	r1, #52	; 0x34
 800a382:	fb01 f303 	mul.w	r3, r1, r3
 800a386:	4413      	add	r3, r2
 800a388:	3390      	adds	r3, #144	; 0x90
 800a38a:	2208      	movs	r2, #8
 800a38c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a38e:	2302      	movs	r3, #2
 800a390:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a392:	e005      	b.n	800a3a0 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800a394:	bf00      	nop
 800a396:	e004      	b.n	800a3a2 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a398:	bf00      	nop
 800a39a:	e002      	b.n	800a3a2 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a39c:	bf00      	nop
 800a39e:	e000      	b.n	800a3a2 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a3a0:	bf00      	nop

  }
  return error;
 800a3a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3718      	adds	r7, #24
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b085      	sub	sp, #20
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3be:	69db      	ldr	r3, [r3, #28]
 800a3c0:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	2b0b      	cmp	r3, #11
 800a3ca:	d10c      	bne.n	800a3e6 <USBH_MSC_UnitIsReady+0x3a>
 800a3cc:	78fb      	ldrb	r3, [r7, #3]
 800a3ce:	68ba      	ldr	r2, [r7, #8]
 800a3d0:	2134      	movs	r1, #52	; 0x34
 800a3d2:	fb01 f303 	mul.w	r3, r1, r3
 800a3d6:	4413      	add	r3, r2
 800a3d8:	3391      	adds	r3, #145	; 0x91
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d102      	bne.n	800a3e6 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	73fb      	strb	r3, [r7, #15]
 800a3e4:	e001      	b.n	800a3ea <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a3ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3714      	adds	r7, #20
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr

0800a3f8 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b086      	sub	sp, #24
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	460b      	mov	r3, r1
 800a402:	607a      	str	r2, [r7, #4]
 800a404:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a40c:	69db      	ldr	r3, [r3, #28]
 800a40e:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	b2db      	uxtb	r3, r3
 800a416:	2b0b      	cmp	r3, #11
 800a418:	d10d      	bne.n	800a436 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800a41a:	7afb      	ldrb	r3, [r7, #11]
 800a41c:	2234      	movs	r2, #52	; 0x34
 800a41e:	fb02 f303 	mul.w	r3, r2, r3
 800a422:	3390      	adds	r3, #144	; 0x90
 800a424:	697a      	ldr	r2, [r7, #20]
 800a426:	4413      	add	r3, r2
 800a428:	2234      	movs	r2, #52	; 0x34
 800a42a:	4619      	mov	r1, r3
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f005 ffe7 	bl	8010400 <memcpy>
    return USBH_OK;
 800a432:	2300      	movs	r3, #0
 800a434:	e000      	b.n	800a438 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800a436:	2302      	movs	r3, #2
  }
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3718      	adds	r7, #24
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b088      	sub	sp, #32
 800a444:	af02      	add	r7, sp, #8
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	607a      	str	r2, [r7, #4]
 800a44a:	603b      	str	r3, [r7, #0]
 800a44c:	460b      	mov	r3, r1
 800a44e:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a456:	69db      	ldr	r3, [r3, #28]
 800a458:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a460:	b2db      	uxtb	r3, r3
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00e      	beq.n	800a484 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a46c:	2b0b      	cmp	r3, #11
 800a46e:	d109      	bne.n	800a484 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a470:	7afb      	ldrb	r3, [r7, #11]
 800a472:	697a      	ldr	r2, [r7, #20]
 800a474:	2134      	movs	r1, #52	; 0x34
 800a476:	fb01 f303 	mul.w	r3, r1, r3
 800a47a:	4413      	add	r3, r2
 800a47c:	3390      	adds	r3, #144	; 0x90
 800a47e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a480:	2b01      	cmp	r3, #1
 800a482:	d001      	beq.n	800a488 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800a484:	2302      	movs	r3, #2
 800a486:	e040      	b.n	800a50a <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	2206      	movs	r2, #6
 800a48c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800a48e:	7afb      	ldrb	r3, [r7, #11]
 800a490:	697a      	ldr	r2, [r7, #20]
 800a492:	2134      	movs	r1, #52	; 0x34
 800a494:	fb01 f303 	mul.w	r3, r1, r3
 800a498:	4413      	add	r3, r2
 800a49a:	3390      	adds	r3, #144	; 0x90
 800a49c:	2206      	movs	r2, #6
 800a49e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a4a0:	7afb      	ldrb	r3, [r7, #11]
 800a4a2:	b29a      	uxth	r2, r3
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800a4aa:	7af9      	ldrb	r1, [r7, #11]
 800a4ac:	6a3b      	ldr	r3, [r7, #32]
 800a4ae:	9300      	str	r3, [sp, #0]
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	687a      	ldr	r2, [r7, #4]
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	f000 fd78 	bl	800afaa <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a4c0:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a4c2:	e016      	b.n	800a4f2 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	1ad2      	subs	r2, r2, r3
 800a4ce:	6a3b      	ldr	r3, [r7, #32]
 800a4d0:	f242 7110 	movw	r1, #10000	; 0x2710
 800a4d4:	fb01 f303 	mul.w	r3, r1, r3
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d805      	bhi.n	800a4e8 <USBH_MSC_Read+0xa8>
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d104      	bne.n	800a4f2 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a4ee:	2302      	movs	r3, #2
 800a4f0:	e00b      	b.n	800a50a <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a4f2:	7afb      	ldrb	r3, [r7, #11]
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	68f8      	ldr	r0, [r7, #12]
 800a4f8:	f7ff fe89 	bl	800a20e <USBH_MSC_RdWrProcess>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d0e0      	beq.n	800a4c4 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	2201      	movs	r2, #1
 800a506:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3718      	adds	r7, #24
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b088      	sub	sp, #32
 800a516:	af02      	add	r7, sp, #8
 800a518:	60f8      	str	r0, [r7, #12]
 800a51a:	607a      	str	r2, [r7, #4]
 800a51c:	603b      	str	r3, [r7, #0]
 800a51e:	460b      	mov	r3, r1
 800a520:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a528:	69db      	ldr	r3, [r3, #28]
 800a52a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a532:	b2db      	uxtb	r3, r3
 800a534:	2b00      	cmp	r3, #0
 800a536:	d00e      	beq.n	800a556 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a53e:	2b0b      	cmp	r3, #11
 800a540:	d109      	bne.n	800a556 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a542:	7afb      	ldrb	r3, [r7, #11]
 800a544:	697a      	ldr	r2, [r7, #20]
 800a546:	2134      	movs	r1, #52	; 0x34
 800a548:	fb01 f303 	mul.w	r3, r1, r3
 800a54c:	4413      	add	r3, r2
 800a54e:	3390      	adds	r3, #144	; 0x90
 800a550:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a552:	2b01      	cmp	r3, #1
 800a554:	d001      	beq.n	800a55a <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800a556:	2302      	movs	r3, #2
 800a558:	e040      	b.n	800a5dc <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	2207      	movs	r2, #7
 800a55e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800a560:	7afb      	ldrb	r3, [r7, #11]
 800a562:	697a      	ldr	r2, [r7, #20]
 800a564:	2134      	movs	r1, #52	; 0x34
 800a566:	fb01 f303 	mul.w	r3, r1, r3
 800a56a:	4413      	add	r3, r2
 800a56c:	3390      	adds	r3, #144	; 0x90
 800a56e:	2207      	movs	r2, #7
 800a570:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a572:	7afb      	ldrb	r3, [r7, #11]
 800a574:	b29a      	uxth	r2, r3
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800a57c:	7af9      	ldrb	r1, [r7, #11]
 800a57e:	6a3b      	ldr	r3, [r7, #32]
 800a580:	9300      	str	r3, [sp, #0]
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f000 fca4 	bl	800aed4 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a592:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a594:	e016      	b.n	800a5c4 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	1ad2      	subs	r2, r2, r3
 800a5a0:	6a3b      	ldr	r3, [r7, #32]
 800a5a2:	f242 7110 	movw	r1, #10000	; 0x2710
 800a5a6:	fb01 f303 	mul.w	r3, r1, r3
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d805      	bhi.n	800a5ba <USBH_MSC_Write+0xa8>
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d104      	bne.n	800a5c4 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a5c0:	2302      	movs	r3, #2
 800a5c2:	e00b      	b.n	800a5dc <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a5c4:	7afb      	ldrb	r3, [r7, #11]
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	68f8      	ldr	r0, [r7, #12]
 800a5ca:	f7ff fe20 	bl	800a20e <USBH_MSC_RdWrProcess>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d0e0      	beq.n	800a596 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800a5da:	2300      	movs	r3, #0
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3718      	adds	r7, #24
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2221      	movs	r2, #33	; 0x21
 800a5f0:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	22ff      	movs	r2, #255	; 0xff
 800a5f6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800a60a:	2200      	movs	r2, #0
 800a60c:	2100      	movs	r1, #0
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f001 fdab 	bl	800c16a <USBH_CtlReq>
 800a614:	4603      	mov	r3, r0
}
 800a616:	4618      	mov	r0, r3
 800a618:	3708      	adds	r7, #8
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}

0800a61e <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800a61e:	b580      	push	{r7, lr}
 800a620:	b082      	sub	sp, #8
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
 800a626:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	22a1      	movs	r2, #161	; 0xa1
 800a62c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	22fe      	movs	r2, #254	; 0xfe
 800a632:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2200      	movs	r2, #0
 800a638:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800a646:	2201      	movs	r2, #1
 800a648:	6839      	ldr	r1, [r7, #0]
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f001 fd8d 	bl	800c16a <USBH_CtlReq>
 800a650:	4603      	mov	r3, r0
}
 800a652:	4618      	mov	r0, r3
 800a654:	3708      	adds	r7, #8
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
	...

0800a65c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b085      	sub	sp, #20
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a66a:	69db      	ldr	r3, [r3, #28]
 800a66c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	4a09      	ldr	r2, [pc, #36]	; (800a698 <USBH_MSC_BOT_Init+0x3c>)
 800a672:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	4a09      	ldr	r2, [pc, #36]	; (800a69c <USBH_MSC_BOT_Init+0x40>)
 800a678:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2201      	movs	r2, #1
 800a67e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2201      	movs	r2, #1
 800a686:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3714      	adds	r7, #20
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr
 800a698:	43425355 	.word	0x43425355
 800a69c:	20304050 	.word	0x20304050

0800a6a0 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b088      	sub	sp, #32
 800a6a4:	af02      	add	r7, sp, #8
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6c2:	69db      	ldr	r3, [r3, #28]
 800a6c4:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a6d0:	3b01      	subs	r3, #1
 800a6d2:	2b0a      	cmp	r3, #10
 800a6d4:	f200 819e 	bhi.w	800aa14 <USBH_MSC_BOT_Process+0x374>
 800a6d8:	a201      	add	r2, pc, #4	; (adr r2, 800a6e0 <USBH_MSC_BOT_Process+0x40>)
 800a6da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6de:	bf00      	nop
 800a6e0:	0800a70d 	.word	0x0800a70d
 800a6e4:	0800a735 	.word	0x0800a735
 800a6e8:	0800a79f 	.word	0x0800a79f
 800a6ec:	0800a7bd 	.word	0x0800a7bd
 800a6f0:	0800a841 	.word	0x0800a841
 800a6f4:	0800a863 	.word	0x0800a863
 800a6f8:	0800a8fb 	.word	0x0800a8fb
 800a6fc:	0800a917 	.word	0x0800a917
 800a700:	0800a969 	.word	0x0800a969
 800a704:	0800a999 	.word	0x0800a999
 800a708:	0800a9fb 	.word	0x0800a9fb
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	78fa      	ldrb	r2, [r7, #3]
 800a710:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	2202      	movs	r2, #2
 800a718:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	795b      	ldrb	r3, [r3, #5]
 800a726:	2201      	movs	r2, #1
 800a728:	9200      	str	r2, [sp, #0]
 800a72a:	221f      	movs	r2, #31
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f001 ff2a 	bl	800c586 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800a732:	e17e      	b.n	800aa32 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	795b      	ldrb	r3, [r3, #5]
 800a738:	4619      	mov	r1, r3
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f005 fd48 	bl	80101d0 <USBH_LL_GetURBState>
 800a740:	4603      	mov	r3, r0
 800a742:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a744:	7d3b      	ldrb	r3, [r7, #20]
 800a746:	2b01      	cmp	r3, #1
 800a748:	d118      	bne.n	800a77c <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d00f      	beq.n	800a772 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a758:	b25b      	sxtb	r3, r3
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	da04      	bge.n	800a768 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	2203      	movs	r2, #3
 800a762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a766:	e157      	b.n	800aa18 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	2205      	movs	r2, #5
 800a76c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a770:	e152      	b.n	800aa18 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	2207      	movs	r2, #7
 800a776:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a77a:	e14d      	b.n	800aa18 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a77c:	7d3b      	ldrb	r3, [r7, #20]
 800a77e:	2b02      	cmp	r3, #2
 800a780:	d104      	bne.n	800a78c <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	2201      	movs	r2, #1
 800a786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a78a:	e145      	b.n	800aa18 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800a78c:	7d3b      	ldrb	r3, [r7, #20]
 800a78e:	2b05      	cmp	r3, #5
 800a790:	f040 8142 	bne.w	800aa18 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	220a      	movs	r2, #10
 800a798:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a79c:	e13c      	b.n	800aa18 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	895a      	ldrh	r2, [r3, #10]
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	791b      	ldrb	r3, [r3, #4]
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f001 ff0f 	bl	800c5d0 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	2204      	movs	r2, #4
 800a7b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800a7ba:	e13a      	b.n	800aa32 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	791b      	ldrb	r3, [r3, #4]
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f005 fd04 	bl	80101d0 <USBH_LL_GetURBState>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a7cc:	7d3b      	ldrb	r3, [r7, #20]
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d12d      	bne.n	800a82e <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7d6:	693a      	ldr	r2, [r7, #16]
 800a7d8:	8952      	ldrh	r2, [r2, #10]
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d910      	bls.n	800a800 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7e4:	693a      	ldr	r2, [r7, #16]
 800a7e6:	8952      	ldrh	r2, [r2, #10]
 800a7e8:	441a      	add	r2, r3
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7f4:	693a      	ldr	r2, [r7, #16]
 800a7f6:	8952      	ldrh	r2, [r2, #10]
 800a7f8:	1a9a      	subs	r2, r3, r2
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	65da      	str	r2, [r3, #92]	; 0x5c
 800a7fe:	e002      	b.n	800a806 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	2200      	movs	r2, #0
 800a804:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00a      	beq.n	800a824 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	895a      	ldrh	r2, [r3, #10]
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	791b      	ldrb	r3, [r3, #4]
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f001 fed7 	bl	800c5d0 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800a822:	e0fb      	b.n	800aa1c <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	2207      	movs	r2, #7
 800a828:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a82c:	e0f6      	b.n	800aa1c <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800a82e:	7d3b      	ldrb	r3, [r7, #20]
 800a830:	2b05      	cmp	r3, #5
 800a832:	f040 80f3 	bne.w	800aa1c <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	2209      	movs	r2, #9
 800a83a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a83e:	e0ed      	b.n	800aa1c <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	891a      	ldrh	r2, [r3, #8]
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	795b      	ldrb	r3, [r3, #5]
 800a84e:	2001      	movs	r0, #1
 800a850:	9000      	str	r0, [sp, #0]
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f001 fe97 	bl	800c586 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	2206      	movs	r2, #6
 800a85c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a860:	e0e7      	b.n	800aa32 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	795b      	ldrb	r3, [r3, #5]
 800a866:	4619      	mov	r1, r3
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f005 fcb1 	bl	80101d0 <USBH_LL_GetURBState>
 800a86e:	4603      	mov	r3, r0
 800a870:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a872:	7d3b      	ldrb	r3, [r7, #20]
 800a874:	2b01      	cmp	r3, #1
 800a876:	d12f      	bne.n	800a8d8 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a87c:	693a      	ldr	r2, [r7, #16]
 800a87e:	8912      	ldrh	r2, [r2, #8]
 800a880:	4293      	cmp	r3, r2
 800a882:	d910      	bls.n	800a8a6 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a88a:	693a      	ldr	r2, [r7, #16]
 800a88c:	8912      	ldrh	r2, [r2, #8]
 800a88e:	441a      	add	r2, r3
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a89a:	693a      	ldr	r2, [r7, #16]
 800a89c:	8912      	ldrh	r2, [r2, #8]
 800a89e:	1a9a      	subs	r2, r3, r2
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	65da      	str	r2, [r3, #92]	; 0x5c
 800a8a4:	e002      	b.n	800a8ac <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d00c      	beq.n	800a8ce <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	891a      	ldrh	r2, [r3, #8]
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	795b      	ldrb	r3, [r3, #5]
 800a8c2:	2001      	movs	r0, #1
 800a8c4:	9000      	str	r0, [sp, #0]
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f001 fe5d 	bl	800c586 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800a8cc:	e0a8      	b.n	800aa20 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	2207      	movs	r2, #7
 800a8d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a8d6:	e0a3      	b.n	800aa20 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a8d8:	7d3b      	ldrb	r3, [r7, #20]
 800a8da:	2b02      	cmp	r3, #2
 800a8dc:	d104      	bne.n	800a8e8 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	2205      	movs	r2, #5
 800a8e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a8e6:	e09b      	b.n	800aa20 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800a8e8:	7d3b      	ldrb	r3, [r7, #20]
 800a8ea:	2b05      	cmp	r3, #5
 800a8ec:	f040 8098 	bne.w	800aa20 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	220a      	movs	r2, #10
 800a8f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a8f8:	e092      	b.n	800aa20 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	791b      	ldrb	r3, [r3, #4]
 800a904:	220d      	movs	r2, #13
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f001 fe62 	bl	800c5d0 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	2208      	movs	r2, #8
 800a910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a914:	e08d      	b.n	800aa32 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	791b      	ldrb	r3, [r3, #4]
 800a91a:	4619      	mov	r1, r3
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f005 fc57 	bl	80101d0 <USBH_LL_GetURBState>
 800a922:	4603      	mov	r3, r0
 800a924:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800a926:	7d3b      	ldrb	r3, [r7, #20]
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d115      	bne.n	800a958 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	2201      	movs	r2, #1
 800a930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	2201      	movs	r2, #1
 800a938:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 f8a9 	bl	800aa94 <USBH_MSC_DecodeCSW>
 800a942:	4603      	mov	r3, r0
 800a944:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800a946:	7d7b      	ldrb	r3, [r7, #21]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d102      	bne.n	800a952 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800a94c:	2300      	movs	r3, #0
 800a94e:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800a950:	e068      	b.n	800aa24 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800a952:	2302      	movs	r3, #2
 800a954:	75fb      	strb	r3, [r7, #23]
      break;
 800a956:	e065      	b.n	800aa24 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800a958:	7d3b      	ldrb	r3, [r7, #20]
 800a95a:	2b05      	cmp	r3, #5
 800a95c:	d162      	bne.n	800aa24 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	2209      	movs	r2, #9
 800a962:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a966:	e05d      	b.n	800aa24 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800a968:	78fb      	ldrb	r3, [r7, #3]
 800a96a:	2200      	movs	r2, #0
 800a96c:	4619      	mov	r1, r3
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 f864 	bl	800aa3c <USBH_MSC_BOT_Abort>
 800a974:	4603      	mov	r3, r0
 800a976:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a978:	7dbb      	ldrb	r3, [r7, #22]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d104      	bne.n	800a988 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	2207      	movs	r2, #7
 800a982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800a986:	e04f      	b.n	800aa28 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800a988:	7dbb      	ldrb	r3, [r7, #22]
 800a98a:	2b04      	cmp	r3, #4
 800a98c:	d14c      	bne.n	800aa28 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	220b      	movs	r2, #11
 800a992:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a996:	e047      	b.n	800aa28 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800a998:	78fb      	ldrb	r3, [r7, #3]
 800a99a:	2201      	movs	r2, #1
 800a99c:	4619      	mov	r1, r3
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 f84c 	bl	800aa3c <USBH_MSC_BOT_Abort>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a9a8:	7dbb      	ldrb	r3, [r7, #22]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d11d      	bne.n	800a9ea <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	795b      	ldrb	r3, [r3, #5]
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f005 fc65 	bl	8010284 <USBH_LL_GetToggle>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	7959      	ldrb	r1, [r3, #5]
 800a9c2:	7bfb      	ldrb	r3, [r7, #15]
 800a9c4:	f1c3 0301 	rsb	r3, r3, #1
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f005 fc29 	bl	8010224 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	791b      	ldrb	r3, [r3, #4]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	4619      	mov	r1, r3
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f005 fc22 	bl	8010224 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	2209      	movs	r2, #9
 800a9e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800a9e8:	e020      	b.n	800aa2c <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800a9ea:	7dbb      	ldrb	r3, [r7, #22]
 800a9ec:	2b04      	cmp	r3, #4
 800a9ee:	d11d      	bne.n	800aa2c <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	220b      	movs	r2, #11
 800a9f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a9f8:	e018      	b.n	800aa2c <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f7ff fdf2 	bl	800a5e4 <USBH_MSC_BOT_REQ_Reset>
 800aa00:	4603      	mov	r3, r0
 800aa02:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800aa04:	7dfb      	ldrb	r3, [r7, #23]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d112      	bne.n	800aa30 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800aa12:	e00d      	b.n	800aa30 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800aa14:	bf00      	nop
 800aa16:	e00c      	b.n	800aa32 <USBH_MSC_BOT_Process+0x392>
      break;
 800aa18:	bf00      	nop
 800aa1a:	e00a      	b.n	800aa32 <USBH_MSC_BOT_Process+0x392>
      break;
 800aa1c:	bf00      	nop
 800aa1e:	e008      	b.n	800aa32 <USBH_MSC_BOT_Process+0x392>
      break;
 800aa20:	bf00      	nop
 800aa22:	e006      	b.n	800aa32 <USBH_MSC_BOT_Process+0x392>
      break;
 800aa24:	bf00      	nop
 800aa26:	e004      	b.n	800aa32 <USBH_MSC_BOT_Process+0x392>
      break;
 800aa28:	bf00      	nop
 800aa2a:	e002      	b.n	800aa32 <USBH_MSC_BOT_Process+0x392>
      break;
 800aa2c:	bf00      	nop
 800aa2e:	e000      	b.n	800aa32 <USBH_MSC_BOT_Process+0x392>
      break;
 800aa30:	bf00      	nop
  }
  return status;
 800aa32:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3718      	adds	r7, #24
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	460b      	mov	r3, r1
 800aa46:	70fb      	strb	r3, [r7, #3]
 800aa48:	4613      	mov	r3, r2
 800aa4a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800aa4c:	2302      	movs	r3, #2
 800aa4e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa56:	69db      	ldr	r3, [r3, #28]
 800aa58:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800aa5a:	78bb      	ldrb	r3, [r7, #2]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d002      	beq.n	800aa66 <USBH_MSC_BOT_Abort+0x2a>
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d009      	beq.n	800aa78 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800aa64:	e011      	b.n	800aa8a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	79db      	ldrb	r3, [r3, #7]
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f001 f99c 	bl	800bdaa <USBH_ClrFeature>
 800aa72:	4603      	mov	r3, r0
 800aa74:	73fb      	strb	r3, [r7, #15]
      break;
 800aa76:	e008      	b.n	800aa8a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	799b      	ldrb	r3, [r3, #6]
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f001 f993 	bl	800bdaa <USBH_ClrFeature>
 800aa84:	4603      	mov	r3, r0
 800aa86:	73fb      	strb	r3, [r7, #15]
      break;
 800aa88:	bf00      	nop
  }
  return status;
 800aa8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3710      	adds	r7, #16
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aaa2:	69db      	ldr	r3, [r3, #28]
 800aaa4:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	791b      	ldrb	r3, [r3, #4]
 800aaae:	4619      	mov	r1, r3
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f005 fafb 	bl	80100ac <USBH_LL_GetLastXferSize>
 800aab6:	4603      	mov	r3, r0
 800aab8:	2b0d      	cmp	r3, #13
 800aaba:	d002      	beq.n	800aac2 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800aabc:	2302      	movs	r3, #2
 800aabe:	73fb      	strb	r3, [r7, #15]
 800aac0:	e024      	b.n	800ab0c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aac6:	4a14      	ldr	r2, [pc, #80]	; (800ab18 <USBH_MSC_DecodeCSW+0x84>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d11d      	bne.n	800ab08 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d119      	bne.n	800ab0c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d102      	bne.n	800aae8 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800aae2:	2300      	movs	r3, #0
 800aae4:	73fb      	strb	r3, [r7, #15]
 800aae6:	e011      	b.n	800ab0c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aaee:	2b01      	cmp	r3, #1
 800aaf0:	d102      	bne.n	800aaf8 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	73fb      	strb	r3, [r7, #15]
 800aaf6:	e009      	b.n	800ab0c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aafe:	2b02      	cmp	r3, #2
 800ab00:	d104      	bne.n	800ab0c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800ab02:	2302      	movs	r3, #2
 800ab04:	73fb      	strb	r3, [r7, #15]
 800ab06:	e001      	b.n	800ab0c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800ab08:	2302      	movs	r3, #2
 800ab0a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800ab0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	53425355 	.word	0x53425355

0800ab1c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	460b      	mov	r3, r1
 800ab26:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800ab28:	2302      	movs	r3, #2
 800ab2a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab32:	69db      	ldr	r3, [r3, #28]
 800ab34:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d002      	beq.n	800ab46 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800ab40:	2b02      	cmp	r3, #2
 800ab42:	d021      	beq.n	800ab88 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800ab44:	e028      	b.n	800ab98 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	220a      	movs	r2, #10
 800ab58:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	3363      	adds	r3, #99	; 0x63
 800ab60:	2210      	movs	r2, #16
 800ab62:	2100      	movs	r1, #0
 800ab64:	4618      	mov	r0, r3
 800ab66:	f005 fc59 	bl	801041c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	2201      	movs	r2, #1
 800ab76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	2202      	movs	r2, #2
 800ab7e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800ab82:	2301      	movs	r3, #1
 800ab84:	73fb      	strb	r3, [r7, #15]
      break;
 800ab86:	e007      	b.n	800ab98 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ab88:	78fb      	ldrb	r3, [r7, #3]
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f7ff fd87 	bl	800a6a0 <USBH_MSC_BOT_Process>
 800ab92:	4603      	mov	r3, r0
 800ab94:	73fb      	strb	r3, [r7, #15]
      break;
 800ab96:	bf00      	nop
  }

  return error;
 800ab98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b086      	sub	sp, #24
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	60f8      	str	r0, [r7, #12]
 800abaa:	460b      	mov	r3, r1
 800abac:	607a      	str	r2, [r7, #4]
 800abae:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800abb0:	2301      	movs	r3, #1
 800abb2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abba:	69db      	ldr	r3, [r3, #28]
 800abbc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d002      	beq.n	800abce <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800abc8:	2b02      	cmp	r3, #2
 800abca:	d027      	beq.n	800ac1c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800abcc:	e05f      	b.n	800ac8e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	2208      	movs	r2, #8
 800abd2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	2280      	movs	r2, #128	; 0x80
 800abd8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	220a      	movs	r2, #10
 800abe0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	3363      	adds	r3, #99	; 0x63
 800abe8:	2210      	movs	r2, #16
 800abea:	2100      	movs	r1, #0
 800abec:	4618      	mov	r0, r3
 800abee:	f005 fc15 	bl	801041c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	2225      	movs	r2, #37	; 0x25
 800abf6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	2201      	movs	r2, #1
 800abfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	2202      	movs	r2, #2
 800ac06:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	f103 0210 	add.w	r2, r3, #16
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ac16:	2301      	movs	r3, #1
 800ac18:	75fb      	strb	r3, [r7, #23]
      break;
 800ac1a:	e038      	b.n	800ac8e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ac1c:	7afb      	ldrb	r3, [r7, #11]
 800ac1e:	4619      	mov	r1, r3
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	f7ff fd3d 	bl	800a6a0 <USBH_MSC_BOT_Process>
 800ac26:	4603      	mov	r3, r0
 800ac28:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ac2a:	7dfb      	ldrb	r3, [r7, #23]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d12d      	bne.n	800ac8c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac36:	3303      	adds	r3, #3
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac42:	3302      	adds	r3, #2
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	021b      	lsls	r3, r3, #8
 800ac48:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac50:	3301      	adds	r3, #1
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ac56:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	061b      	lsls	r3, r3, #24
 800ac62:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac6e:	3307      	adds	r3, #7
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	b29a      	uxth	r2, r3
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac7a:	3306      	adds	r3, #6
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	021b      	lsls	r3, r3, #8
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	4313      	orrs	r3, r2
 800ac86:	b29a      	uxth	r2, r3
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	809a      	strh	r2, [r3, #4]
      break;
 800ac8c:	bf00      	nop
  }

  return error;
 800ac8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3718      	adds	r7, #24
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b086      	sub	sp, #24
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	460b      	mov	r3, r1
 800aca2:	607a      	str	r2, [r7, #4]
 800aca4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800aca6:	2302      	movs	r3, #2
 800aca8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acb0:	69db      	ldr	r3, [r3, #28]
 800acb2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d002      	beq.n	800acc4 <USBH_MSC_SCSI_Inquiry+0x2c>
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	d03d      	beq.n	800ad3e <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800acc2:	e089      	b.n	800add8 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	2224      	movs	r2, #36	; 0x24
 800acc8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	2280      	movs	r2, #128	; 0x80
 800acce:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	220a      	movs	r2, #10
 800acd6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	3363      	adds	r3, #99	; 0x63
 800acde:	220a      	movs	r2, #10
 800ace0:	2100      	movs	r1, #0
 800ace2:	4618      	mov	r0, r3
 800ace4:	f005 fb9a 	bl	801041c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	2212      	movs	r2, #18
 800acec:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800acf0:	7afb      	ldrb	r3, [r7, #11]
 800acf2:	015b      	lsls	r3, r3, #5
 800acf4:	b2da      	uxtb	r2, r3
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	2200      	movs	r2, #0
 800ad00:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	2200      	movs	r2, #0
 800ad08:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	2224      	movs	r2, #36	; 0x24
 800ad10:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	2200      	movs	r2, #0
 800ad18:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	2202      	movs	r2, #2
 800ad28:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	f103 0210 	add.w	r2, r3, #16
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	75fb      	strb	r3, [r7, #23]
      break;
 800ad3c:	e04c      	b.n	800add8 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ad3e:	7afb      	ldrb	r3, [r7, #11]
 800ad40:	4619      	mov	r1, r3
 800ad42:	68f8      	ldr	r0, [r7, #12]
 800ad44:	f7ff fcac 	bl	800a6a0 <USBH_MSC_BOT_Process>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ad4c:	7dfb      	ldrb	r3, [r7, #23]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d141      	bne.n	800add6 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800ad52:	2222      	movs	r2, #34	; 0x22
 800ad54:	2100      	movs	r1, #0
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f005 fb60 	bl	801041c <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	f003 031f 	and.w	r3, r3, #31
 800ad68:	b2da      	uxtb	r2, r3
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad74:	781b      	ldrb	r3, [r3, #0]
 800ad76:	095b      	lsrs	r3, r3, #5
 800ad78:	b2da      	uxtb	r2, r3
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad84:	3301      	adds	r3, #1
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	b25b      	sxtb	r3, r3
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	da03      	bge.n	800ad96 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2201      	movs	r2, #1
 800ad92:	709a      	strb	r2, [r3, #2]
 800ad94:	e002      	b.n	800ad9c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	1cd8      	adds	r0, r3, #3
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ada6:	3308      	adds	r3, #8
 800ada8:	2208      	movs	r2, #8
 800adaa:	4619      	mov	r1, r3
 800adac:	f005 fb28 	bl	8010400 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f103 000c 	add.w	r0, r3, #12
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800adbc:	3310      	adds	r3, #16
 800adbe:	2210      	movs	r2, #16
 800adc0:	4619      	mov	r1, r3
 800adc2:	f005 fb1d 	bl	8010400 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	331d      	adds	r3, #29
 800adca:	693a      	ldr	r2, [r7, #16]
 800adcc:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800add0:	3220      	adds	r2, #32
 800add2:	6812      	ldr	r2, [r2, #0]
 800add4:	601a      	str	r2, [r3, #0]
      break;
 800add6:	bf00      	nop
  }

  return error;
 800add8:	7dfb      	ldrb	r3, [r7, #23]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3718      	adds	r7, #24
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b086      	sub	sp, #24
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	60f8      	str	r0, [r7, #12]
 800adea:	460b      	mov	r3, r1
 800adec:	607a      	str	r2, [r7, #4]
 800adee:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800adf0:	2302      	movs	r3, #2
 800adf2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adfa:	69db      	ldr	r3, [r3, #28]
 800adfc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d002      	beq.n	800ae0e <USBH_MSC_SCSI_RequestSense+0x2c>
 800ae08:	2b02      	cmp	r3, #2
 800ae0a:	d03d      	beq.n	800ae88 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800ae0c:	e05d      	b.n	800aeca <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	220e      	movs	r2, #14
 800ae12:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	2280      	movs	r2, #128	; 0x80
 800ae18:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	220a      	movs	r2, #10
 800ae20:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	3363      	adds	r3, #99	; 0x63
 800ae28:	2210      	movs	r2, #16
 800ae2a:	2100      	movs	r1, #0
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f005 faf5 	bl	801041c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	2203      	movs	r2, #3
 800ae36:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800ae3a:	7afb      	ldrb	r3, [r7, #11]
 800ae3c:	015b      	lsls	r3, r3, #5
 800ae3e:	b2da      	uxtb	r2, r3
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	2200      	movs	r2, #0
 800ae52:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	220e      	movs	r2, #14
 800ae5a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	2201      	movs	r2, #1
 800ae6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	2202      	movs	r2, #2
 800ae72:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	f103 0210 	add.w	r2, r3, #16
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ae82:	2301      	movs	r3, #1
 800ae84:	75fb      	strb	r3, [r7, #23]
      break;
 800ae86:	e020      	b.n	800aeca <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ae88:	7afb      	ldrb	r3, [r7, #11]
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	68f8      	ldr	r0, [r7, #12]
 800ae8e:	f7ff fc07 	bl	800a6a0 <USBH_MSC_BOT_Process>
 800ae92:	4603      	mov	r3, r0
 800ae94:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ae96:	7dfb      	ldrb	r3, [r7, #23]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d115      	bne.n	800aec8 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aea2:	3302      	adds	r3, #2
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	f003 030f 	and.w	r3, r3, #15
 800aeaa:	b2da      	uxtb	r2, r3
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aeb6:	7b1a      	ldrb	r2, [r3, #12]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aec2:	7b5a      	ldrb	r2, [r3, #13]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	709a      	strb	r2, [r3, #2]
      break;
 800aec8:	bf00      	nop
  }

  return error;
 800aeca:	7dfb      	ldrb	r3, [r7, #23]
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3718      	adds	r7, #24
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b086      	sub	sp, #24
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	607a      	str	r2, [r7, #4]
 800aede:	603b      	str	r3, [r7, #0]
 800aee0:	460b      	mov	r3, r1
 800aee2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800aee4:	2302      	movs	r3, #2
 800aee6:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aeee:	69db      	ldr	r3, [r3, #28]
 800aef0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d002      	beq.n	800af02 <USBH_MSC_SCSI_Write+0x2e>
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	d047      	beq.n	800af90 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800af00:	e04e      	b.n	800afa0 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800af08:	461a      	mov	r2, r3
 800af0a:	6a3b      	ldr	r3, [r7, #32]
 800af0c:	fb03 f202 	mul.w	r2, r3, r2
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	2200      	movs	r2, #0
 800af18:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	220a      	movs	r2, #10
 800af20:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	3363      	adds	r3, #99	; 0x63
 800af28:	2210      	movs	r2, #16
 800af2a:	2100      	movs	r1, #0
 800af2c:	4618      	mov	r0, r3
 800af2e:	f005 fa75 	bl	801041c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	222a      	movs	r2, #42	; 0x2a
 800af36:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800af3a:	79fa      	ldrb	r2, [r7, #7]
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800af42:	79ba      	ldrb	r2, [r7, #6]
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800af4a:	797a      	ldrb	r2, [r7, #5]
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800af52:	1d3b      	adds	r3, r7, #4
 800af54:	781a      	ldrb	r2, [r3, #0]
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800af5c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800af66:	f107 0320 	add.w	r3, r7, #32
 800af6a:	781a      	ldrb	r2, [r3, #0]
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	2201      	movs	r2, #1
 800af76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	2202      	movs	r2, #2
 800af7e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	683a      	ldr	r2, [r7, #0]
 800af86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800af8a:	2301      	movs	r3, #1
 800af8c:	75fb      	strb	r3, [r7, #23]
      break;
 800af8e:	e007      	b.n	800afa0 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800af90:	7afb      	ldrb	r3, [r7, #11]
 800af92:	4619      	mov	r1, r3
 800af94:	68f8      	ldr	r0, [r7, #12]
 800af96:	f7ff fb83 	bl	800a6a0 <USBH_MSC_BOT_Process>
 800af9a:	4603      	mov	r3, r0
 800af9c:	75fb      	strb	r3, [r7, #23]
      break;
 800af9e:	bf00      	nop
  }

  return error;
 800afa0:	7dfb      	ldrb	r3, [r7, #23]
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3718      	adds	r7, #24
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}

0800afaa <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800afaa:	b580      	push	{r7, lr}
 800afac:	b086      	sub	sp, #24
 800afae:	af00      	add	r7, sp, #0
 800afb0:	60f8      	str	r0, [r7, #12]
 800afb2:	607a      	str	r2, [r7, #4]
 800afb4:	603b      	str	r3, [r7, #0]
 800afb6:	460b      	mov	r3, r1
 800afb8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800afba:	2302      	movs	r3, #2
 800afbc:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800afc4:	69db      	ldr	r3, [r3, #28]
 800afc6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800afce:	2b01      	cmp	r3, #1
 800afd0:	d002      	beq.n	800afd8 <USBH_MSC_SCSI_Read+0x2e>
 800afd2:	2b02      	cmp	r3, #2
 800afd4:	d047      	beq.n	800b066 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800afd6:	e04e      	b.n	800b076 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800afde:	461a      	mov	r2, r3
 800afe0:	6a3b      	ldr	r3, [r7, #32]
 800afe2:	fb03 f202 	mul.w	r2, r3, r2
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	2280      	movs	r2, #128	; 0x80
 800afee:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	220a      	movs	r2, #10
 800aff6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	3363      	adds	r3, #99	; 0x63
 800affe:	2210      	movs	r2, #16
 800b000:	2100      	movs	r1, #0
 800b002:	4618      	mov	r0, r3
 800b004:	f005 fa0a 	bl	801041c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	2228      	movs	r2, #40	; 0x28
 800b00c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b010:	79fa      	ldrb	r2, [r7, #7]
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b018:	79ba      	ldrb	r2, [r7, #6]
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b020:	797a      	ldrb	r2, [r7, #5]
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b028:	1d3b      	adds	r3, r7, #4
 800b02a:	781a      	ldrb	r2, [r3, #0]
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800b032:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800b03c:	f107 0320 	add.w	r3, r7, #32
 800b040:	781a      	ldrb	r2, [r3, #0]
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	2201      	movs	r2, #1
 800b04c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	2202      	movs	r2, #2
 800b054:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	683a      	ldr	r2, [r7, #0]
 800b05c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b060:	2301      	movs	r3, #1
 800b062:	75fb      	strb	r3, [r7, #23]
      break;
 800b064:	e007      	b.n	800b076 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b066:	7afb      	ldrb	r3, [r7, #11]
 800b068:	4619      	mov	r1, r3
 800b06a:	68f8      	ldr	r0, [r7, #12]
 800b06c:	f7ff fb18 	bl	800a6a0 <USBH_MSC_BOT_Process>
 800b070:	4603      	mov	r3, r0
 800b072:	75fb      	strb	r3, [r7, #23]
      break;
 800b074:	bf00      	nop
  }

  return error;
 800b076:	7dfb      	ldrb	r3, [r7, #23]
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3718      	adds	r7, #24
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	60f8      	str	r0, [r7, #12]
 800b088:	60b9      	str	r1, [r7, #8]
 800b08a:	4613      	mov	r3, r2
 800b08c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d101      	bne.n	800b098 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b094:	2302      	movs	r3, #2
 800b096:	e029      	b.n	800b0ec <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	79fa      	ldrb	r2, [r7, #7]
 800b09c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800b0b0:	68f8      	ldr	r0, [r7, #12]
 800b0b2:	f000 f81f 	bl	800b0f4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d003      	beq.n	800b0e4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	68ba      	ldr	r2, [r7, #8]
 800b0e0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800b0e4:	68f8      	ldr	r0, [r7, #12]
 800b0e6:	f004 ff2d 	bl	800ff44 <USBH_LL_Init>

  return USBH_OK;
 800b0ea:	2300      	movs	r3, #0
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3710      	adds	r7, #16
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b085      	sub	sp, #20
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b100:	2300      	movs	r3, #0
 800b102:	60fb      	str	r3, [r7, #12]
 800b104:	e009      	b.n	800b11a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	33e0      	adds	r3, #224	; 0xe0
 800b10c:	009b      	lsls	r3, r3, #2
 800b10e:	4413      	add	r3, r2
 800b110:	2200      	movs	r2, #0
 800b112:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	3301      	adds	r3, #1
 800b118:	60fb      	str	r3, [r7, #12]
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2b0e      	cmp	r3, #14
 800b11e:	d9f2      	bls.n	800b106 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b120:	2300      	movs	r3, #0
 800b122:	60fb      	str	r3, [r7, #12]
 800b124:	e009      	b.n	800b13a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	4413      	add	r3, r2
 800b12c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b130:	2200      	movs	r2, #0
 800b132:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	3301      	adds	r3, #1
 800b138:	60fb      	str	r3, [r7, #12]
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b140:	d3f1      	bcc.n	800b126 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2201      	movs	r2, #1
 800b152:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2200      	movs	r2, #0
 800b158:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2201      	movs	r2, #1
 800b160:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2240      	movs	r2, #64	; 0x40
 800b166:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2200      	movs	r2, #0
 800b172:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2201      	movs	r2, #1
 800b17a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2200      	movs	r2, #0
 800b182:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2200      	movs	r2, #0
 800b18a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b18e:	2300      	movs	r3, #0
}
 800b190:	4618      	mov	r0, r3
 800b192:	3714      	adds	r7, #20
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b085      	sub	sp, #20
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d016      	beq.n	800b1de <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d10e      	bne.n	800b1d8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b1c0:	1c59      	adds	r1, r3, #1
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	33de      	adds	r3, #222	; 0xde
 800b1cc:	6839      	ldr	r1, [r7, #0]
 800b1ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	73fb      	strb	r3, [r7, #15]
 800b1d6:	e004      	b.n	800b1e2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b1d8:	2302      	movs	r3, #2
 800b1da:	73fb      	strb	r3, [r7, #15]
 800b1dc:	e001      	b.n	800b1e2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b1de:	2302      	movs	r3, #2
 800b1e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b1e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3714      	adds	r7, #20
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr

0800b1f0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b085      	sub	sp, #20
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b206:	78fa      	ldrb	r2, [r7, #3]
 800b208:	429a      	cmp	r2, r3
 800b20a:	d204      	bcs.n	800b216 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	78fa      	ldrb	r2, [r7, #3]
 800b210:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b214:	e001      	b.n	800b21a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b216:	2302      	movs	r3, #2
 800b218:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b21a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3714      	adds	r7, #20
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b228:	b480      	push	{r7}
 800b22a:	b087      	sub	sp, #28
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	4608      	mov	r0, r1
 800b232:	4611      	mov	r1, r2
 800b234:	461a      	mov	r2, r3
 800b236:	4603      	mov	r3, r0
 800b238:	70fb      	strb	r3, [r7, #3]
 800b23a:	460b      	mov	r3, r1
 800b23c:	70bb      	strb	r3, [r7, #2]
 800b23e:	4613      	mov	r3, r2
 800b240:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b242:	2300      	movs	r3, #0
 800b244:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800b246:	2300      	movs	r3, #0
 800b248:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b250:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b252:	e025      	b.n	800b2a0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b254:	7dfb      	ldrb	r3, [r7, #23]
 800b256:	221a      	movs	r2, #26
 800b258:	fb02 f303 	mul.w	r3, r2, r3
 800b25c:	3308      	adds	r3, #8
 800b25e:	68fa      	ldr	r2, [r7, #12]
 800b260:	4413      	add	r3, r2
 800b262:	3302      	adds	r3, #2
 800b264:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	795b      	ldrb	r3, [r3, #5]
 800b26a:	78fa      	ldrb	r2, [r7, #3]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d002      	beq.n	800b276 <USBH_FindInterface+0x4e>
 800b270:	78fb      	ldrb	r3, [r7, #3]
 800b272:	2bff      	cmp	r3, #255	; 0xff
 800b274:	d111      	bne.n	800b29a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b27a:	78ba      	ldrb	r2, [r7, #2]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d002      	beq.n	800b286 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b280:	78bb      	ldrb	r3, [r7, #2]
 800b282:	2bff      	cmp	r3, #255	; 0xff
 800b284:	d109      	bne.n	800b29a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b28a:	787a      	ldrb	r2, [r7, #1]
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d002      	beq.n	800b296 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b290:	787b      	ldrb	r3, [r7, #1]
 800b292:	2bff      	cmp	r3, #255	; 0xff
 800b294:	d101      	bne.n	800b29a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b296:	7dfb      	ldrb	r3, [r7, #23]
 800b298:	e006      	b.n	800b2a8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b29a:	7dfb      	ldrb	r3, [r7, #23]
 800b29c:	3301      	adds	r3, #1
 800b29e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b2a0:	7dfb      	ldrb	r3, [r7, #23]
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d9d6      	bls.n	800b254 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b2a6:	23ff      	movs	r3, #255	; 0xff
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	371c      	adds	r7, #28
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr

0800b2b4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f004 fe7d 	bl	800ffbc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800b2c2:	2101      	movs	r1, #1
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f004 ff96 	bl	80101f6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b2ca:	2300      	movs	r3, #0
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3708      	adds	r7, #8
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b088      	sub	sp, #32
 800b2d8:	af04      	add	r7, sp, #16
 800b2da:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b2dc:	2302      	movs	r3, #2
 800b2de:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	d102      	bne.n	800b2f6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2203      	movs	r2, #3
 800b2f4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	b2db      	uxtb	r3, r3
 800b2fc:	2b0b      	cmp	r3, #11
 800b2fe:	f200 81b3 	bhi.w	800b668 <USBH_Process+0x394>
 800b302:	a201      	add	r2, pc, #4	; (adr r2, 800b308 <USBH_Process+0x34>)
 800b304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b308:	0800b339 	.word	0x0800b339
 800b30c:	0800b36b 	.word	0x0800b36b
 800b310:	0800b3d3 	.word	0x0800b3d3
 800b314:	0800b603 	.word	0x0800b603
 800b318:	0800b669 	.word	0x0800b669
 800b31c:	0800b477 	.word	0x0800b477
 800b320:	0800b5a9 	.word	0x0800b5a9
 800b324:	0800b4ad 	.word	0x0800b4ad
 800b328:	0800b4cd 	.word	0x0800b4cd
 800b32c:	0800b4ed 	.word	0x0800b4ed
 800b330:	0800b51b 	.word	0x0800b51b
 800b334:	0800b5eb 	.word	0x0800b5eb
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	2b00      	cmp	r3, #0
 800b342:	f000 8193 	beq.w	800b66c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2201      	movs	r2, #1
 800b34a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b34c:	20c8      	movs	r0, #200	; 0xc8
 800b34e:	f004 ffc9 	bl	80102e4 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f004 fe8f 	bl	8010076 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2200      	movs	r2, #0
 800b35c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b368:	e180      	b.n	800b66c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b370:	2b01      	cmp	r3, #1
 800b372:	d107      	bne.n	800b384 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2200      	movs	r2, #0
 800b378:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2202      	movs	r2, #2
 800b380:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b382:	e182      	b.n	800b68a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b38a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b38e:	d914      	bls.n	800b3ba <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b396:	3301      	adds	r3, #1
 800b398:	b2da      	uxtb	r2, r3
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b3a6:	2b03      	cmp	r3, #3
 800b3a8:	d903      	bls.n	800b3b2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	220d      	movs	r2, #13
 800b3ae:	701a      	strb	r2, [r3, #0]
      break;
 800b3b0:	e16b      	b.n	800b68a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	701a      	strb	r2, [r3, #0]
      break;
 800b3b8:	e167      	b.n	800b68a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b3c0:	f103 020a 	add.w	r2, r3, #10
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b3ca:	200a      	movs	r0, #10
 800b3cc:	f004 ff8a 	bl	80102e4 <USBH_Delay>
      break;
 800b3d0:	e15b      	b.n	800b68a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d005      	beq.n	800b3e8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b3e2:	2104      	movs	r1, #4
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b3e8:	2064      	movs	r0, #100	; 0x64
 800b3ea:	f004 ff7b 	bl	80102e4 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f004 fe1a 	bl	8010028 <USBH_LL_GetSpeed>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2205      	movs	r2, #5
 800b402:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b404:	2100      	movs	r1, #0
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f001 f92f 	bl	800c66a <USBH_AllocPipe>
 800b40c:	4603      	mov	r3, r0
 800b40e:	461a      	mov	r2, r3
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b414:	2180      	movs	r1, #128	; 0x80
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f001 f927 	bl	800c66a <USBH_AllocPipe>
 800b41c:	4603      	mov	r3, r0
 800b41e:	461a      	mov	r2, r3
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	7919      	ldrb	r1, [r3, #4]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b438:	b292      	uxth	r2, r2
 800b43a:	9202      	str	r2, [sp, #8]
 800b43c:	2200      	movs	r2, #0
 800b43e:	9201      	str	r2, [sp, #4]
 800b440:	9300      	str	r3, [sp, #0]
 800b442:	4603      	mov	r3, r0
 800b444:	2280      	movs	r2, #128	; 0x80
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f001 f8e0 	bl	800c60c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	7959      	ldrb	r1, [r3, #5]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b460:	b292      	uxth	r2, r2
 800b462:	9202      	str	r2, [sp, #8]
 800b464:	2200      	movs	r2, #0
 800b466:	9201      	str	r2, [sp, #4]
 800b468:	9300      	str	r3, [sp, #0]
 800b46a:	4603      	mov	r3, r0
 800b46c:	2200      	movs	r2, #0
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f001 f8cc 	bl	800c60c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b474:	e109      	b.n	800b68a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f000 f90c 	bl	800b694 <USBH_HandleEnum>
 800b47c:	4603      	mov	r3, r0
 800b47e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b480:	7bbb      	ldrb	r3, [r7, #14]
 800b482:	b2db      	uxtb	r3, r3
 800b484:	2b00      	cmp	r3, #0
 800b486:	f040 80f3 	bne.w	800b670 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2200      	movs	r2, #0
 800b48e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b498:	2b01      	cmp	r3, #1
 800b49a:	d103      	bne.n	800b4a4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2208      	movs	r2, #8
 800b4a0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b4a2:	e0e5      	b.n	800b670 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2207      	movs	r2, #7
 800b4a8:	701a      	strb	r2, [r3, #0]
      break;
 800b4aa:	e0e1      	b.n	800b670 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	f000 80de 	beq.w	800b674 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b4be:	2101      	movs	r1, #1
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2208      	movs	r2, #8
 800b4c8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800b4ca:	e0d3      	b.n	800b674 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 fc20 	bl	800bd1c <USBH_SetCfg>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	f040 80ca 	bne.w	800b678 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2209      	movs	r2, #9
 800b4e8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b4ea:	e0c5      	b.n	800b678 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b4f2:	f003 0320 	and.w	r3, r3, #32
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d00b      	beq.n	800b512 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800b4fa:	2101      	movs	r1, #1
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 fc30 	bl	800bd62 <USBH_SetFeature>
 800b502:	4603      	mov	r3, r0
 800b504:	2b00      	cmp	r3, #0
 800b506:	f040 80b9 	bne.w	800b67c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	220a      	movs	r2, #10
 800b50e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b510:	e0b4      	b.n	800b67c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	220a      	movs	r2, #10
 800b516:	701a      	strb	r2, [r3, #0]
      break;
 800b518:	e0b0      	b.n	800b67c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b520:	2b00      	cmp	r3, #0
 800b522:	f000 80ad 	beq.w	800b680 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2200      	movs	r2, #0
 800b52a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b52e:	2300      	movs	r3, #0
 800b530:	73fb      	strb	r3, [r7, #15]
 800b532:	e016      	b.n	800b562 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b534:	7bfa      	ldrb	r2, [r7, #15]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	32de      	adds	r2, #222	; 0xde
 800b53a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b53e:	791a      	ldrb	r2, [r3, #4]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b546:	429a      	cmp	r2, r3
 800b548:	d108      	bne.n	800b55c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b54a:	7bfa      	ldrb	r2, [r7, #15]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	32de      	adds	r2, #222	; 0xde
 800b550:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b55a:	e005      	b.n	800b568 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b55c:	7bfb      	ldrb	r3, [r7, #15]
 800b55e:	3301      	adds	r3, #1
 800b560:	73fb      	strb	r3, [r7, #15]
 800b562:	7bfb      	ldrb	r3, [r7, #15]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d0e5      	beq.n	800b534 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d016      	beq.n	800b5a0 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b578:	689b      	ldr	r3, [r3, #8]
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	4798      	blx	r3
 800b57e:	4603      	mov	r3, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d109      	bne.n	800b598 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2206      	movs	r2, #6
 800b588:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b590:	2103      	movs	r1, #3
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b596:	e073      	b.n	800b680 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	220d      	movs	r2, #13
 800b59c:	701a      	strb	r2, [r3, #0]
      break;
 800b59e:	e06f      	b.n	800b680 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	220d      	movs	r2, #13
 800b5a4:	701a      	strb	r2, [r3, #0]
      break;
 800b5a6:	e06b      	b.n	800b680 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d017      	beq.n	800b5e2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5b8:	691b      	ldr	r3, [r3, #16]
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	4798      	blx	r3
 800b5be:	4603      	mov	r3, r0
 800b5c0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b5c2:	7bbb      	ldrb	r3, [r7, #14]
 800b5c4:	b2db      	uxtb	r3, r3
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d103      	bne.n	800b5d2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	220b      	movs	r2, #11
 800b5ce:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b5d0:	e058      	b.n	800b684 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800b5d2:	7bbb      	ldrb	r3, [r7, #14]
 800b5d4:	b2db      	uxtb	r3, r3
 800b5d6:	2b02      	cmp	r3, #2
 800b5d8:	d154      	bne.n	800b684 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	220d      	movs	r2, #13
 800b5de:	701a      	strb	r2, [r3, #0]
      break;
 800b5e0:	e050      	b.n	800b684 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	220d      	movs	r2, #13
 800b5e6:	701a      	strb	r2, [r3, #0]
      break;
 800b5e8:	e04c      	b.n	800b684 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d049      	beq.n	800b688 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5fa:	695b      	ldr	r3, [r3, #20]
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	4798      	blx	r3
      }
      break;
 800b600:	e042      	b.n	800b688 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2200      	movs	r2, #0
 800b606:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f7ff fd72 	bl	800b0f4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b616:	2b00      	cmp	r3, #0
 800b618:	d009      	beq.n	800b62e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b620:	68db      	ldr	r3, [r3, #12]
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2200      	movs	r2, #0
 800b62a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b634:	2b00      	cmp	r3, #0
 800b636:	d005      	beq.n	800b644 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b63e:	2105      	movs	r1, #5
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d107      	bne.n	800b660 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2200      	movs	r2, #0
 800b654:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f7ff fe2b 	bl	800b2b4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b65e:	e014      	b.n	800b68a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f004 fcab 	bl	800ffbc <USBH_LL_Start>
      break;
 800b666:	e010      	b.n	800b68a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800b668:	bf00      	nop
 800b66a:	e00e      	b.n	800b68a <USBH_Process+0x3b6>
      break;
 800b66c:	bf00      	nop
 800b66e:	e00c      	b.n	800b68a <USBH_Process+0x3b6>
      break;
 800b670:	bf00      	nop
 800b672:	e00a      	b.n	800b68a <USBH_Process+0x3b6>
    break;
 800b674:	bf00      	nop
 800b676:	e008      	b.n	800b68a <USBH_Process+0x3b6>
      break;
 800b678:	bf00      	nop
 800b67a:	e006      	b.n	800b68a <USBH_Process+0x3b6>
      break;
 800b67c:	bf00      	nop
 800b67e:	e004      	b.n	800b68a <USBH_Process+0x3b6>
      break;
 800b680:	bf00      	nop
 800b682:	e002      	b.n	800b68a <USBH_Process+0x3b6>
      break;
 800b684:	bf00      	nop
 800b686:	e000      	b.n	800b68a <USBH_Process+0x3b6>
      break;
 800b688:	bf00      	nop
  }
  return USBH_OK;
 800b68a:	2300      	movs	r3, #0
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3710      	adds	r7, #16
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b088      	sub	sp, #32
 800b698:	af04      	add	r7, sp, #16
 800b69a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b69c:	2301      	movs	r3, #1
 800b69e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	785b      	ldrb	r3, [r3, #1]
 800b6a8:	2b07      	cmp	r3, #7
 800b6aa:	f200 81c1 	bhi.w	800ba30 <USBH_HandleEnum+0x39c>
 800b6ae:	a201      	add	r2, pc, #4	; (adr r2, 800b6b4 <USBH_HandleEnum+0x20>)
 800b6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b4:	0800b6d5 	.word	0x0800b6d5
 800b6b8:	0800b793 	.word	0x0800b793
 800b6bc:	0800b7fd 	.word	0x0800b7fd
 800b6c0:	0800b88b 	.word	0x0800b88b
 800b6c4:	0800b8f5 	.word	0x0800b8f5
 800b6c8:	0800b965 	.word	0x0800b965
 800b6cc:	0800b9ab 	.word	0x0800b9ab
 800b6d0:	0800b9f1 	.word	0x0800b9f1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b6d4:	2108      	movs	r1, #8
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 fa50 	bl	800bb7c <USBH_Get_DevDesc>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b6e0:	7bbb      	ldrb	r3, [r7, #14]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d130      	bne.n	800b748 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	7919      	ldrb	r1, [r3, #4]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b70a:	b292      	uxth	r2, r2
 800b70c:	9202      	str	r2, [sp, #8]
 800b70e:	2200      	movs	r2, #0
 800b710:	9201      	str	r2, [sp, #4]
 800b712:	9300      	str	r3, [sp, #0]
 800b714:	4603      	mov	r3, r0
 800b716:	2280      	movs	r2, #128	; 0x80
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f000 ff77 	bl	800c60c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	7959      	ldrb	r1, [r3, #5]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b732:	b292      	uxth	r2, r2
 800b734:	9202      	str	r2, [sp, #8]
 800b736:	2200      	movs	r2, #0
 800b738:	9201      	str	r2, [sp, #4]
 800b73a:	9300      	str	r3, [sp, #0]
 800b73c:	4603      	mov	r3, r0
 800b73e:	2200      	movs	r2, #0
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 ff63 	bl	800c60c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b746:	e175      	b.n	800ba34 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b748:	7bbb      	ldrb	r3, [r7, #14]
 800b74a:	2b03      	cmp	r3, #3
 800b74c:	f040 8172 	bne.w	800ba34 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b756:	3301      	adds	r3, #1
 800b758:	b2da      	uxtb	r2, r3
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b766:	2b03      	cmp	r3, #3
 800b768:	d903      	bls.n	800b772 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	220d      	movs	r2, #13
 800b76e:	701a      	strb	r2, [r3, #0]
      break;
 800b770:	e160      	b.n	800ba34 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	795b      	ldrb	r3, [r3, #5]
 800b776:	4619      	mov	r1, r3
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 ff97 	bl	800c6ac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	791b      	ldrb	r3, [r3, #4]
 800b782:	4619      	mov	r1, r3
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 ff91 	bl	800c6ac <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2200      	movs	r2, #0
 800b78e:	701a      	strb	r2, [r3, #0]
      break;
 800b790:	e150      	b.n	800ba34 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b792:	2112      	movs	r1, #18
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 f9f1 	bl	800bb7c <USBH_Get_DevDesc>
 800b79a:	4603      	mov	r3, r0
 800b79c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b79e:	7bbb      	ldrb	r3, [r7, #14]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d103      	bne.n	800b7ac <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2202      	movs	r2, #2
 800b7a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b7aa:	e145      	b.n	800ba38 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b7ac:	7bbb      	ldrb	r3, [r7, #14]
 800b7ae:	2b03      	cmp	r3, #3
 800b7b0:	f040 8142 	bne.w	800ba38 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	b2da      	uxtb	r2, r3
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b7ca:	2b03      	cmp	r3, #3
 800b7cc:	d903      	bls.n	800b7d6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	220d      	movs	r2, #13
 800b7d2:	701a      	strb	r2, [r3, #0]
      break;
 800b7d4:	e130      	b.n	800ba38 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	795b      	ldrb	r3, [r3, #5]
 800b7da:	4619      	mov	r1, r3
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 ff65 	bl	800c6ac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	791b      	ldrb	r3, [r3, #4]
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 ff5f 	bl	800c6ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	701a      	strb	r2, [r3, #0]
      break;
 800b7fa:	e11d      	b.n	800ba38 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b7fc:	2101      	movs	r1, #1
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 fa68 	bl	800bcd4 <USBH_SetAddress>
 800b804:	4603      	mov	r3, r0
 800b806:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b808:	7bbb      	ldrb	r3, [r7, #14]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d132      	bne.n	800b874 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b80e:	2002      	movs	r0, #2
 800b810:	f004 fd68 	bl	80102e4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2201      	movs	r2, #1
 800b818:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2203      	movs	r2, #3
 800b820:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	7919      	ldrb	r1, [r3, #4]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b832:	687a      	ldr	r2, [r7, #4]
 800b834:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b836:	b292      	uxth	r2, r2
 800b838:	9202      	str	r2, [sp, #8]
 800b83a:	2200      	movs	r2, #0
 800b83c:	9201      	str	r2, [sp, #4]
 800b83e:	9300      	str	r3, [sp, #0]
 800b840:	4603      	mov	r3, r0
 800b842:	2280      	movs	r2, #128	; 0x80
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 fee1 	bl	800c60c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	7959      	ldrb	r1, [r3, #5]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b85a:	687a      	ldr	r2, [r7, #4]
 800b85c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b85e:	b292      	uxth	r2, r2
 800b860:	9202      	str	r2, [sp, #8]
 800b862:	2200      	movs	r2, #0
 800b864:	9201      	str	r2, [sp, #4]
 800b866:	9300      	str	r3, [sp, #0]
 800b868:	4603      	mov	r3, r0
 800b86a:	2200      	movs	r2, #0
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f000 fecd 	bl	800c60c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b872:	e0e3      	b.n	800ba3c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b874:	7bbb      	ldrb	r3, [r7, #14]
 800b876:	2b03      	cmp	r3, #3
 800b878:	f040 80e0 	bne.w	800ba3c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	220d      	movs	r2, #13
 800b880:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2200      	movs	r2, #0
 800b886:	705a      	strb	r2, [r3, #1]
      break;
 800b888:	e0d8      	b.n	800ba3c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b88a:	2109      	movs	r1, #9
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f000 f99d 	bl	800bbcc <USBH_Get_CfgDesc>
 800b892:	4603      	mov	r3, r0
 800b894:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b896:	7bbb      	ldrb	r3, [r7, #14]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d103      	bne.n	800b8a4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2204      	movs	r2, #4
 800b8a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b8a2:	e0cd      	b.n	800ba40 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b8a4:	7bbb      	ldrb	r3, [r7, #14]
 800b8a6:	2b03      	cmp	r3, #3
 800b8a8:	f040 80ca 	bne.w	800ba40 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	b2da      	uxtb	r2, r3
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b8c2:	2b03      	cmp	r3, #3
 800b8c4:	d903      	bls.n	800b8ce <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	220d      	movs	r2, #13
 800b8ca:	701a      	strb	r2, [r3, #0]
      break;
 800b8cc:	e0b8      	b.n	800ba40 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	795b      	ldrb	r3, [r3, #5]
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 fee9 	bl	800c6ac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	791b      	ldrb	r3, [r3, #4]
 800b8de:	4619      	mov	r1, r3
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f000 fee3 	bl	800c6ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	701a      	strb	r2, [r3, #0]
      break;
 800b8f2:	e0a5      	b.n	800ba40 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 f965 	bl	800bbcc <USBH_Get_CfgDesc>
 800b902:	4603      	mov	r3, r0
 800b904:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b906:	7bbb      	ldrb	r3, [r7, #14]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d103      	bne.n	800b914 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2205      	movs	r2, #5
 800b910:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b912:	e097      	b.n	800ba44 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b914:	7bbb      	ldrb	r3, [r7, #14]
 800b916:	2b03      	cmp	r3, #3
 800b918:	f040 8094 	bne.w	800ba44 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b922:	3301      	adds	r3, #1
 800b924:	b2da      	uxtb	r2, r3
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b932:	2b03      	cmp	r3, #3
 800b934:	d903      	bls.n	800b93e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	220d      	movs	r2, #13
 800b93a:	701a      	strb	r2, [r3, #0]
      break;
 800b93c:	e082      	b.n	800ba44 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	795b      	ldrb	r3, [r3, #5]
 800b942:	4619      	mov	r1, r3
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f000 feb1 	bl	800c6ac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	791b      	ldrb	r3, [r3, #4]
 800b94e:	4619      	mov	r1, r3
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 feab 	bl	800c6ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2200      	movs	r2, #0
 800b95a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2200      	movs	r2, #0
 800b960:	701a      	strb	r2, [r3, #0]
      break;
 800b962:	e06f      	b.n	800ba44 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d019      	beq.n	800b9a2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b97a:	23ff      	movs	r3, #255	; 0xff
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f000 f949 	bl	800bc14 <USBH_Get_StringDesc>
 800b982:	4603      	mov	r3, r0
 800b984:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b986:	7bbb      	ldrb	r3, [r7, #14]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d103      	bne.n	800b994 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2206      	movs	r2, #6
 800b990:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b992:	e059      	b.n	800ba48 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b994:	7bbb      	ldrb	r3, [r7, #14]
 800b996:	2b03      	cmp	r3, #3
 800b998:	d156      	bne.n	800ba48 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2206      	movs	r2, #6
 800b99e:	705a      	strb	r2, [r3, #1]
      break;
 800b9a0:	e052      	b.n	800ba48 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2206      	movs	r2, #6
 800b9a6:	705a      	strb	r2, [r3, #1]
      break;
 800b9a8:	e04e      	b.n	800ba48 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d019      	beq.n	800b9e8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b9c0:	23ff      	movs	r3, #255	; 0xff
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 f926 	bl	800bc14 <USBH_Get_StringDesc>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b9cc:	7bbb      	ldrb	r3, [r7, #14]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d103      	bne.n	800b9da <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2207      	movs	r2, #7
 800b9d6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b9d8:	e038      	b.n	800ba4c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b9da:	7bbb      	ldrb	r3, [r7, #14]
 800b9dc:	2b03      	cmp	r3, #3
 800b9de:	d135      	bne.n	800ba4c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2207      	movs	r2, #7
 800b9e4:	705a      	strb	r2, [r3, #1]
      break;
 800b9e6:	e031      	b.n	800ba4c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2207      	movs	r2, #7
 800b9ec:	705a      	strb	r2, [r3, #1]
      break;
 800b9ee:	e02d      	b.n	800ba4c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d017      	beq.n	800ba2a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ba06:	23ff      	movs	r3, #255	; 0xff
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f000 f903 	bl	800bc14 <USBH_Get_StringDesc>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ba12:	7bbb      	ldrb	r3, [r7, #14]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d102      	bne.n	800ba1e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ba1c:	e018      	b.n	800ba50 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ba1e:	7bbb      	ldrb	r3, [r7, #14]
 800ba20:	2b03      	cmp	r3, #3
 800ba22:	d115      	bne.n	800ba50 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800ba24:	2300      	movs	r3, #0
 800ba26:	73fb      	strb	r3, [r7, #15]
      break;
 800ba28:	e012      	b.n	800ba50 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	73fb      	strb	r3, [r7, #15]
      break;
 800ba2e:	e00f      	b.n	800ba50 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800ba30:	bf00      	nop
 800ba32:	e00e      	b.n	800ba52 <USBH_HandleEnum+0x3be>
      break;
 800ba34:	bf00      	nop
 800ba36:	e00c      	b.n	800ba52 <USBH_HandleEnum+0x3be>
      break;
 800ba38:	bf00      	nop
 800ba3a:	e00a      	b.n	800ba52 <USBH_HandleEnum+0x3be>
      break;
 800ba3c:	bf00      	nop
 800ba3e:	e008      	b.n	800ba52 <USBH_HandleEnum+0x3be>
      break;
 800ba40:	bf00      	nop
 800ba42:	e006      	b.n	800ba52 <USBH_HandleEnum+0x3be>
      break;
 800ba44:	bf00      	nop
 800ba46:	e004      	b.n	800ba52 <USBH_HandleEnum+0x3be>
      break;
 800ba48:	bf00      	nop
 800ba4a:	e002      	b.n	800ba52 <USBH_HandleEnum+0x3be>
      break;
 800ba4c:	bf00      	nop
 800ba4e:	e000      	b.n	800ba52 <USBH_HandleEnum+0x3be>
      break;
 800ba50:	bf00      	nop
  }
  return Status;
 800ba52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3710      	adds	r7, #16
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b083      	sub	sp, #12
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	683a      	ldr	r2, [r7, #0]
 800ba6a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ba6e:	bf00      	nop
 800ba70:	370c      	adds	r7, #12
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr

0800ba7a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ba7a:	b580      	push	{r7, lr}
 800ba7c:	b082      	sub	sp, #8
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ba88:	1c5a      	adds	r2, r3, #1
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 f804 	bl	800ba9e <USBH_HandleSof>
}
 800ba96:	bf00      	nop
 800ba98:	3708      	adds	r7, #8
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}

0800ba9e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b082      	sub	sp, #8
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	2b0b      	cmp	r3, #11
 800baae:	d10a      	bne.n	800bac6 <USBH_HandleSof+0x28>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d005      	beq.n	800bac6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bac0:	699b      	ldr	r3, [r3, #24]
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	4798      	blx	r3
  }
}
 800bac6:	bf00      	nop
 800bac8:	3708      	adds	r7, #8
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}

0800bace <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800bace:	b480      	push	{r7}
 800bad0:	b083      	sub	sp, #12
 800bad2:	af00      	add	r7, sp, #0
 800bad4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2201      	movs	r2, #1
 800bada:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800bade:	bf00      	nop
}
 800bae0:	370c      	adds	r7, #12
 800bae2:	46bd      	mov	sp, r7
 800bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae8:	4770      	bx	lr

0800baea <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800baea:	b480      	push	{r7}
 800baec:	b083      	sub	sp, #12
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2200      	movs	r2, #0
 800baf6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800bafa:	bf00      	nop
}
 800bafc:	370c      	adds	r7, #12
 800bafe:	46bd      	mov	sp, r7
 800bb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb04:	4770      	bx	lr

0800bb06 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800bb06:	b480      	push	{r7}
 800bb08:	b083      	sub	sp, #12
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2201      	movs	r2, #1
 800bb12:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2200      	movs	r2, #0
 800bb22:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800bb26:	2300      	movs	r3, #0
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	370c      	adds	r7, #12
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr

0800bb34 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b082      	sub	sp, #8
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2201      	movs	r2, #1
 800bb40:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2200      	movs	r2, #0
 800bb48:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f004 fa4c 	bl	800fff2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	791b      	ldrb	r3, [r3, #4]
 800bb5e:	4619      	mov	r1, r3
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 fda3 	bl	800c6ac <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	795b      	ldrb	r3, [r3, #5]
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 fd9d 	bl	800c6ac <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800bb72:	2300      	movs	r3, #0
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3708      	adds	r7, #8
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b086      	sub	sp, #24
 800bb80:	af02      	add	r7, sp, #8
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	460b      	mov	r3, r1
 800bb86:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800bb8e:	78fb      	ldrb	r3, [r7, #3]
 800bb90:	b29b      	uxth	r3, r3
 800bb92:	9300      	str	r3, [sp, #0]
 800bb94:	4613      	mov	r3, r2
 800bb96:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bb9a:	2100      	movs	r1, #0
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f000 f864 	bl	800bc6a <USBH_GetDescriptor>
 800bba2:	4603      	mov	r3, r0
 800bba4:	73fb      	strb	r3, [r7, #15]
 800bba6:	7bfb      	ldrb	r3, [r7, #15]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d10a      	bne.n	800bbc2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f203 3026 	addw	r0, r3, #806	; 0x326
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bbb8:	78fa      	ldrb	r2, [r7, #3]
 800bbba:	b292      	uxth	r2, r2
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	f000 f918 	bl	800bdf2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800bbc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3710      	adds	r7, #16
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b086      	sub	sp, #24
 800bbd0:	af02      	add	r7, sp, #8
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	331c      	adds	r3, #28
 800bbdc:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800bbde:	887b      	ldrh	r3, [r7, #2]
 800bbe0:	9300      	str	r3, [sp, #0]
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbe8:	2100      	movs	r1, #0
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 f83d 	bl	800bc6a <USBH_GetDescriptor>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	72fb      	strb	r3, [r7, #11]
 800bbf4:	7afb      	ldrb	r3, [r7, #11]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d107      	bne.n	800bc0a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bc00:	887a      	ldrh	r2, [r7, #2]
 800bc02:	68f9      	ldr	r1, [r7, #12]
 800bc04:	4618      	mov	r0, r3
 800bc06:	f000 f964 	bl	800bed2 <USBH_ParseCfgDesc>
  }

  return status;
 800bc0a:	7afb      	ldrb	r3, [r7, #11]
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3710      	adds	r7, #16
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b088      	sub	sp, #32
 800bc18:	af02      	add	r7, sp, #8
 800bc1a:	60f8      	str	r0, [r7, #12]
 800bc1c:	607a      	str	r2, [r7, #4]
 800bc1e:	461a      	mov	r2, r3
 800bc20:	460b      	mov	r3, r1
 800bc22:	72fb      	strb	r3, [r7, #11]
 800bc24:	4613      	mov	r3, r2
 800bc26:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800bc28:	7afb      	ldrb	r3, [r7, #11]
 800bc2a:	b29b      	uxth	r3, r3
 800bc2c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800bc30:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800bc38:	893b      	ldrh	r3, [r7, #8]
 800bc3a:	9300      	str	r3, [sp, #0]
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	2100      	movs	r1, #0
 800bc40:	68f8      	ldr	r0, [r7, #12]
 800bc42:	f000 f812 	bl	800bc6a <USBH_GetDescriptor>
 800bc46:	4603      	mov	r3, r0
 800bc48:	75fb      	strb	r3, [r7, #23]
 800bc4a:	7dfb      	ldrb	r3, [r7, #23]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d107      	bne.n	800bc60 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bc56:	893a      	ldrh	r2, [r7, #8]
 800bc58:	6879      	ldr	r1, [r7, #4]
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f000 fa37 	bl	800c0ce <USBH_ParseStringDesc>
  }

  return status;
 800bc60:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3718      	adds	r7, #24
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}

0800bc6a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800bc6a:	b580      	push	{r7, lr}
 800bc6c:	b084      	sub	sp, #16
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	60f8      	str	r0, [r7, #12]
 800bc72:	607b      	str	r3, [r7, #4]
 800bc74:	460b      	mov	r3, r1
 800bc76:	72fb      	strb	r3, [r7, #11]
 800bc78:	4613      	mov	r3, r2
 800bc7a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	789b      	ldrb	r3, [r3, #2]
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d11c      	bne.n	800bcbe <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800bc84:	7afb      	ldrb	r3, [r7, #11]
 800bc86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bc8a:	b2da      	uxtb	r2, r3
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	2206      	movs	r2, #6
 800bc94:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	893a      	ldrh	r2, [r7, #8]
 800bc9a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800bc9c:	893b      	ldrh	r3, [r7, #8]
 800bc9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bca2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bca6:	d104      	bne.n	800bcb2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f240 4209 	movw	r2, #1033	; 0x409
 800bcae:	829a      	strh	r2, [r3, #20]
 800bcb0:	e002      	b.n	800bcb8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	8b3a      	ldrh	r2, [r7, #24]
 800bcbc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800bcbe:	8b3b      	ldrh	r3, [r7, #24]
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	6879      	ldr	r1, [r7, #4]
 800bcc4:	68f8      	ldr	r0, [r7, #12]
 800bcc6:	f000 fa50 	bl	800c16a <USBH_CtlReq>
 800bcca:	4603      	mov	r3, r0
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3710      	adds	r7, #16
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	460b      	mov	r3, r1
 800bcde:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	789b      	ldrb	r3, [r3, #2]
 800bce4:	2b01      	cmp	r3, #1
 800bce6:	d10f      	bne.n	800bd08 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2200      	movs	r2, #0
 800bcec:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2205      	movs	r2, #5
 800bcf2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800bcf4:	78fb      	ldrb	r3, [r7, #3]
 800bcf6:	b29a      	uxth	r2, r3
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2200      	movs	r2, #0
 800bd06:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bd08:	2200      	movs	r2, #0
 800bd0a:	2100      	movs	r1, #0
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f000 fa2c 	bl	800c16a <USBH_CtlReq>
 800bd12:	4603      	mov	r3, r0
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3708      	adds	r7, #8
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	460b      	mov	r3, r1
 800bd26:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	789b      	ldrb	r3, [r3, #2]
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d10e      	bne.n	800bd4e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2200      	movs	r2, #0
 800bd34:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2209      	movs	r2, #9
 800bd3a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	887a      	ldrh	r2, [r7, #2]
 800bd40:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2200      	movs	r2, #0
 800bd46:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bd4e:	2200      	movs	r2, #0
 800bd50:	2100      	movs	r1, #0
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f000 fa09 	bl	800c16a <USBH_CtlReq>
 800bd58:	4603      	mov	r3, r0
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3708      	adds	r7, #8
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}

0800bd62 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800bd62:	b580      	push	{r7, lr}
 800bd64:	b082      	sub	sp, #8
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	6078      	str	r0, [r7, #4]
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	789b      	ldrb	r3, [r3, #2]
 800bd72:	2b01      	cmp	r3, #1
 800bd74:	d10f      	bne.n	800bd96 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2203      	movs	r2, #3
 800bd80:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800bd82:	78fb      	ldrb	r3, [r7, #3]
 800bd84:	b29a      	uxth	r2, r3
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2200      	movs	r2, #0
 800bd94:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bd96:	2200      	movs	r2, #0
 800bd98:	2100      	movs	r1, #0
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f000 f9e5 	bl	800c16a <USBH_CtlReq>
 800bda0:	4603      	mov	r3, r0
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3708      	adds	r7, #8
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}

0800bdaa <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800bdaa:	b580      	push	{r7, lr}
 800bdac:	b082      	sub	sp, #8
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
 800bdb2:	460b      	mov	r3, r1
 800bdb4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	789b      	ldrb	r3, [r3, #2]
 800bdba:	2b01      	cmp	r3, #1
 800bdbc:	d10f      	bne.n	800bdde <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2202      	movs	r2, #2
 800bdc2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800bdd0:	78fb      	ldrb	r3, [r7, #3]
 800bdd2:	b29a      	uxth	r2, r3
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2200      	movs	r2, #0
 800bddc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800bdde:	2200      	movs	r2, #0
 800bde0:	2100      	movs	r1, #0
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 f9c1 	bl	800c16a <USBH_CtlReq>
 800bde8:	4603      	mov	r3, r0
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3708      	adds	r7, #8
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}

0800bdf2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800bdf2:	b480      	push	{r7}
 800bdf4:	b085      	sub	sp, #20
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	60f8      	str	r0, [r7, #12]
 800bdfa:	60b9      	str	r1, [r7, #8]
 800bdfc:	4613      	mov	r3, r2
 800bdfe:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	781a      	ldrb	r2, [r3, #0]
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	785a      	ldrb	r2, [r3, #1]
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	3302      	adds	r3, #2
 800be14:	781b      	ldrb	r3, [r3, #0]
 800be16:	b29a      	uxth	r2, r3
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	3303      	adds	r3, #3
 800be1c:	781b      	ldrb	r3, [r3, #0]
 800be1e:	b29b      	uxth	r3, r3
 800be20:	021b      	lsls	r3, r3, #8
 800be22:	b29b      	uxth	r3, r3
 800be24:	4313      	orrs	r3, r2
 800be26:	b29a      	uxth	r2, r3
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	791a      	ldrb	r2, [r3, #4]
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	795a      	ldrb	r2, [r3, #5]
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	799a      	ldrb	r2, [r3, #6]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	79da      	ldrb	r2, [r3, #7]
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800be4c:	88fb      	ldrh	r3, [r7, #6]
 800be4e:	2b08      	cmp	r3, #8
 800be50:	d939      	bls.n	800bec6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	3308      	adds	r3, #8
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	b29a      	uxth	r2, r3
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	3309      	adds	r3, #9
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	b29b      	uxth	r3, r3
 800be62:	021b      	lsls	r3, r3, #8
 800be64:	b29b      	uxth	r3, r3
 800be66:	4313      	orrs	r3, r2
 800be68:	b29a      	uxth	r2, r3
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	330a      	adds	r3, #10
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	b29a      	uxth	r2, r3
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	330b      	adds	r3, #11
 800be7a:	781b      	ldrb	r3, [r3, #0]
 800be7c:	b29b      	uxth	r3, r3
 800be7e:	021b      	lsls	r3, r3, #8
 800be80:	b29b      	uxth	r3, r3
 800be82:	4313      	orrs	r3, r2
 800be84:	b29a      	uxth	r2, r3
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	330c      	adds	r3, #12
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	b29a      	uxth	r2, r3
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	330d      	adds	r3, #13
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	b29b      	uxth	r3, r3
 800be9a:	021b      	lsls	r3, r3, #8
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	4313      	orrs	r3, r2
 800bea0:	b29a      	uxth	r2, r3
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	7b9a      	ldrb	r2, [r3, #14]
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	7bda      	ldrb	r2, [r3, #15]
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	7c1a      	ldrb	r2, [r3, #16]
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	7c5a      	ldrb	r2, [r3, #17]
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	745a      	strb	r2, [r3, #17]
  }
}
 800bec6:	bf00      	nop
 800bec8:	3714      	adds	r7, #20
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr

0800bed2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800bed2:	b580      	push	{r7, lr}
 800bed4:	b08a      	sub	sp, #40	; 0x28
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	60f8      	str	r0, [r7, #12]
 800beda:	60b9      	str	r1, [r7, #8]
 800bedc:	4613      	mov	r3, r2
 800bede:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bee4:	2300      	movs	r3, #0
 800bee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800beea:	2300      	movs	r3, #0
 800beec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	781a      	ldrb	r2, [r3, #0]
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	785a      	ldrb	r2, [r3, #1]
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	3302      	adds	r3, #2
 800bf08:	781b      	ldrb	r3, [r3, #0]
 800bf0a:	b29a      	uxth	r2, r3
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	3303      	adds	r3, #3
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	021b      	lsls	r3, r3, #8
 800bf16:	b29b      	uxth	r3, r3
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	b29a      	uxth	r2, r3
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	791a      	ldrb	r2, [r3, #4]
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	795a      	ldrb	r2, [r3, #5]
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	799a      	ldrb	r2, [r3, #6]
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	79da      	ldrb	r2, [r3, #7]
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	7a1a      	ldrb	r2, [r3, #8]
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bf48:	88fb      	ldrh	r3, [r7, #6]
 800bf4a:	2b09      	cmp	r3, #9
 800bf4c:	d95f      	bls.n	800c00e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800bf4e:	2309      	movs	r3, #9
 800bf50:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800bf52:	2300      	movs	r3, #0
 800bf54:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bf56:	e051      	b.n	800bffc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bf58:	f107 0316 	add.w	r3, r7, #22
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf60:	f000 f8e8 	bl	800c134 <USBH_GetNextDesc>
 800bf64:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800bf66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf68:	785b      	ldrb	r3, [r3, #1]
 800bf6a:	2b04      	cmp	r3, #4
 800bf6c:	d146      	bne.n	800bffc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800bf6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bf72:	221a      	movs	r2, #26
 800bf74:	fb02 f303 	mul.w	r3, r2, r3
 800bf78:	3308      	adds	r3, #8
 800bf7a:	68fa      	ldr	r2, [r7, #12]
 800bf7c:	4413      	add	r3, r2
 800bf7e:	3302      	adds	r3, #2
 800bf80:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800bf82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bf84:	69f8      	ldr	r0, [r7, #28]
 800bf86:	f000 f846 	bl	800c016 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800bf90:	2300      	movs	r3, #0
 800bf92:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bf94:	e022      	b.n	800bfdc <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bf96:	f107 0316 	add.w	r3, r7, #22
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf9e:	f000 f8c9 	bl	800c134 <USBH_GetNextDesc>
 800bfa2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800bfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa6:	785b      	ldrb	r3, [r3, #1]
 800bfa8:	2b05      	cmp	r3, #5
 800bfaa:	d117      	bne.n	800bfdc <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800bfac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bfb0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800bfb4:	3201      	adds	r2, #1
 800bfb6:	00d2      	lsls	r2, r2, #3
 800bfb8:	211a      	movs	r1, #26
 800bfba:	fb01 f303 	mul.w	r3, r1, r3
 800bfbe:	4413      	add	r3, r2
 800bfc0:	3308      	adds	r3, #8
 800bfc2:	68fa      	ldr	r2, [r7, #12]
 800bfc4:	4413      	add	r3, r2
 800bfc6:	3304      	adds	r3, #4
 800bfc8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800bfca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bfcc:	69b8      	ldr	r0, [r7, #24]
 800bfce:	f000 f851 	bl	800c074 <USBH_ParseEPDesc>
            ep_ix++;
 800bfd2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bfdc:	69fb      	ldr	r3, [r7, #28]
 800bfde:	791b      	ldrb	r3, [r3, #4]
 800bfe0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d204      	bcs.n	800bff2 <USBH_ParseCfgDesc+0x120>
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	885a      	ldrh	r2, [r3, #2]
 800bfec:	8afb      	ldrh	r3, [r7, #22]
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d8d1      	bhi.n	800bf96 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800bff2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bff6:	3301      	adds	r3, #1
 800bff8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bffc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c000:	2b01      	cmp	r3, #1
 800c002:	d804      	bhi.n	800c00e <USBH_ParseCfgDesc+0x13c>
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	885a      	ldrh	r2, [r3, #2]
 800c008:	8afb      	ldrh	r3, [r7, #22]
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d8a4      	bhi.n	800bf58 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800c00e:	bf00      	nop
 800c010:	3728      	adds	r7, #40	; 0x28
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}

0800c016 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800c016:	b480      	push	{r7}
 800c018:	b083      	sub	sp, #12
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	6078      	str	r0, [r7, #4]
 800c01e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	781a      	ldrb	r2, [r3, #0]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	785a      	ldrb	r2, [r3, #1]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	789a      	ldrb	r2, [r3, #2]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	78da      	ldrb	r2, [r3, #3]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	791a      	ldrb	r2, [r3, #4]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	795a      	ldrb	r2, [r3, #5]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	799a      	ldrb	r2, [r3, #6]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	79da      	ldrb	r2, [r3, #7]
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	7a1a      	ldrb	r2, [r3, #8]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	721a      	strb	r2, [r3, #8]
}
 800c068:	bf00      	nop
 800c06a:	370c      	adds	r7, #12
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr

0800c074 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800c074:	b480      	push	{r7}
 800c076:	b083      	sub	sp, #12
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	781a      	ldrb	r2, [r3, #0]
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	785a      	ldrb	r2, [r3, #1]
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	789a      	ldrb	r2, [r3, #2]
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	78da      	ldrb	r2, [r3, #3]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	3304      	adds	r3, #4
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	b29a      	uxth	r2, r3
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	3305      	adds	r3, #5
 800c0aa:	781b      	ldrb	r3, [r3, #0]
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	021b      	lsls	r3, r3, #8
 800c0b0:	b29b      	uxth	r3, r3
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	b29a      	uxth	r2, r3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	799a      	ldrb	r2, [r3, #6]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	719a      	strb	r2, [r3, #6]
}
 800c0c2:	bf00      	nop
 800c0c4:	370c      	adds	r7, #12
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0cc:	4770      	bx	lr

0800c0ce <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c0ce:	b480      	push	{r7}
 800c0d0:	b087      	sub	sp, #28
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	60f8      	str	r0, [r7, #12]
 800c0d6:	60b9      	str	r1, [r7, #8]
 800c0d8:	4613      	mov	r3, r2
 800c0da:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	3301      	adds	r3, #1
 800c0e0:	781b      	ldrb	r3, [r3, #0]
 800c0e2:	2b03      	cmp	r3, #3
 800c0e4:	d120      	bne.n	800c128 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	781b      	ldrb	r3, [r3, #0]
 800c0ea:	1e9a      	subs	r2, r3, #2
 800c0ec:	88fb      	ldrh	r3, [r7, #6]
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	bf28      	it	cs
 800c0f2:	4613      	movcs	r3, r2
 800c0f4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	3302      	adds	r3, #2
 800c0fa:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	82fb      	strh	r3, [r7, #22]
 800c100:	e00b      	b.n	800c11a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c102:	8afb      	ldrh	r3, [r7, #22]
 800c104:	68fa      	ldr	r2, [r7, #12]
 800c106:	4413      	add	r3, r2
 800c108:	781a      	ldrb	r2, [r3, #0]
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	3301      	adds	r3, #1
 800c112:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c114:	8afb      	ldrh	r3, [r7, #22]
 800c116:	3302      	adds	r3, #2
 800c118:	82fb      	strh	r3, [r7, #22]
 800c11a:	8afa      	ldrh	r2, [r7, #22]
 800c11c:	8abb      	ldrh	r3, [r7, #20]
 800c11e:	429a      	cmp	r2, r3
 800c120:	d3ef      	bcc.n	800c102 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	2200      	movs	r2, #0
 800c126:	701a      	strb	r2, [r3, #0]
  }
}
 800c128:	bf00      	nop
 800c12a:	371c      	adds	r7, #28
 800c12c:	46bd      	mov	sp, r7
 800c12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c132:	4770      	bx	lr

0800c134 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800c134:	b480      	push	{r7}
 800c136:	b085      	sub	sp, #20
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	881a      	ldrh	r2, [r3, #0]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	b29b      	uxth	r3, r3
 800c148:	4413      	add	r3, r2
 800c14a:	b29a      	uxth	r2, r3
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	781b      	ldrb	r3, [r3, #0]
 800c154:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	4413      	add	r3, r2
 800c15a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c15c:	68fb      	ldr	r3, [r7, #12]
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3714      	adds	r7, #20
 800c162:	46bd      	mov	sp, r7
 800c164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c168:	4770      	bx	lr

0800c16a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c16a:	b580      	push	{r7, lr}
 800c16c:	b086      	sub	sp, #24
 800c16e:	af00      	add	r7, sp, #0
 800c170:	60f8      	str	r0, [r7, #12]
 800c172:	60b9      	str	r1, [r7, #8]
 800c174:	4613      	mov	r3, r2
 800c176:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c178:	2301      	movs	r3, #1
 800c17a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	789b      	ldrb	r3, [r3, #2]
 800c180:	2b01      	cmp	r3, #1
 800c182:	d002      	beq.n	800c18a <USBH_CtlReq+0x20>
 800c184:	2b02      	cmp	r3, #2
 800c186:	d00f      	beq.n	800c1a8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c188:	e027      	b.n	800c1da <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	68ba      	ldr	r2, [r7, #8]
 800c18e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	88fa      	ldrh	r2, [r7, #6]
 800c194:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	2201      	movs	r2, #1
 800c19a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2202      	movs	r2, #2
 800c1a0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	75fb      	strb	r3, [r7, #23]
      break;
 800c1a6:	e018      	b.n	800c1da <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c1a8:	68f8      	ldr	r0, [r7, #12]
 800c1aa:	f000 f81b 	bl	800c1e4 <USBH_HandleControl>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c1b2:	7dfb      	ldrb	r3, [r7, #23]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d002      	beq.n	800c1be <USBH_CtlReq+0x54>
 800c1b8:	7dfb      	ldrb	r3, [r7, #23]
 800c1ba:	2b03      	cmp	r3, #3
 800c1bc:	d106      	bne.n	800c1cc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	2201      	movs	r2, #1
 800c1c2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	761a      	strb	r2, [r3, #24]
      break;
 800c1ca:	e005      	b.n	800c1d8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c1cc:	7dfb      	ldrb	r3, [r7, #23]
 800c1ce:	2b02      	cmp	r3, #2
 800c1d0:	d102      	bne.n	800c1d8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	2201      	movs	r2, #1
 800c1d6:	709a      	strb	r2, [r3, #2]
      break;
 800c1d8:	bf00      	nop
  }
  return status;
 800c1da:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3718      	adds	r7, #24
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b086      	sub	sp, #24
 800c1e8:	af02      	add	r7, sp, #8
 800c1ea:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	7e1b      	ldrb	r3, [r3, #24]
 800c1f8:	3b01      	subs	r3, #1
 800c1fa:	2b0a      	cmp	r3, #10
 800c1fc:	f200 8156 	bhi.w	800c4ac <USBH_HandleControl+0x2c8>
 800c200:	a201      	add	r2, pc, #4	; (adr r2, 800c208 <USBH_HandleControl+0x24>)
 800c202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c206:	bf00      	nop
 800c208:	0800c235 	.word	0x0800c235
 800c20c:	0800c24f 	.word	0x0800c24f
 800c210:	0800c2b9 	.word	0x0800c2b9
 800c214:	0800c2df 	.word	0x0800c2df
 800c218:	0800c317 	.word	0x0800c317
 800c21c:	0800c341 	.word	0x0800c341
 800c220:	0800c393 	.word	0x0800c393
 800c224:	0800c3b5 	.word	0x0800c3b5
 800c228:	0800c3f1 	.word	0x0800c3f1
 800c22c:	0800c417 	.word	0x0800c417
 800c230:	0800c455 	.word	0x0800c455
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f103 0110 	add.w	r1, r3, #16
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	795b      	ldrb	r3, [r3, #5]
 800c23e:	461a      	mov	r2, r3
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f000 f943 	bl	800c4cc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2202      	movs	r2, #2
 800c24a:	761a      	strb	r2, [r3, #24]
      break;
 800c24c:	e139      	b.n	800c4c2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	795b      	ldrb	r3, [r3, #5]
 800c252:	4619      	mov	r1, r3
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f003 ffbb 	bl	80101d0 <USBH_LL_GetURBState>
 800c25a:	4603      	mov	r3, r0
 800c25c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c25e:	7bbb      	ldrb	r3, [r7, #14]
 800c260:	2b01      	cmp	r3, #1
 800c262:	d11e      	bne.n	800c2a2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	7c1b      	ldrb	r3, [r3, #16]
 800c268:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c26c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	8adb      	ldrh	r3, [r3, #22]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d00a      	beq.n	800c28c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c276:	7b7b      	ldrb	r3, [r7, #13]
 800c278:	2b80      	cmp	r3, #128	; 0x80
 800c27a:	d103      	bne.n	800c284 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2203      	movs	r2, #3
 800c280:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c282:	e115      	b.n	800c4b0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2205      	movs	r2, #5
 800c288:	761a      	strb	r2, [r3, #24]
      break;
 800c28a:	e111      	b.n	800c4b0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c28c:	7b7b      	ldrb	r3, [r7, #13]
 800c28e:	2b80      	cmp	r3, #128	; 0x80
 800c290:	d103      	bne.n	800c29a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2209      	movs	r2, #9
 800c296:	761a      	strb	r2, [r3, #24]
      break;
 800c298:	e10a      	b.n	800c4b0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2207      	movs	r2, #7
 800c29e:	761a      	strb	r2, [r3, #24]
      break;
 800c2a0:	e106      	b.n	800c4b0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c2a2:	7bbb      	ldrb	r3, [r7, #14]
 800c2a4:	2b04      	cmp	r3, #4
 800c2a6:	d003      	beq.n	800c2b0 <USBH_HandleControl+0xcc>
 800c2a8:	7bbb      	ldrb	r3, [r7, #14]
 800c2aa:	2b02      	cmp	r3, #2
 800c2ac:	f040 8100 	bne.w	800c4b0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	220b      	movs	r2, #11
 800c2b4:	761a      	strb	r2, [r3, #24]
      break;
 800c2b6:	e0fb      	b.n	800c4b0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c2be:	b29a      	uxth	r2, r3
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6899      	ldr	r1, [r3, #8]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	899a      	ldrh	r2, [r3, #12]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	791b      	ldrb	r3, [r3, #4]
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 f93a 	bl	800c54a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2204      	movs	r2, #4
 800c2da:	761a      	strb	r2, [r3, #24]
      break;
 800c2dc:	e0f1      	b.n	800c4c2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	791b      	ldrb	r3, [r3, #4]
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f003 ff73 	bl	80101d0 <USBH_LL_GetURBState>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c2ee:	7bbb      	ldrb	r3, [r7, #14]
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	d102      	bne.n	800c2fa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2209      	movs	r2, #9
 800c2f8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c2fa:	7bbb      	ldrb	r3, [r7, #14]
 800c2fc:	2b05      	cmp	r3, #5
 800c2fe:	d102      	bne.n	800c306 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c300:	2303      	movs	r3, #3
 800c302:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c304:	e0d6      	b.n	800c4b4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800c306:	7bbb      	ldrb	r3, [r7, #14]
 800c308:	2b04      	cmp	r3, #4
 800c30a:	f040 80d3 	bne.w	800c4b4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	220b      	movs	r2, #11
 800c312:	761a      	strb	r2, [r3, #24]
      break;
 800c314:	e0ce      	b.n	800c4b4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6899      	ldr	r1, [r3, #8]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	899a      	ldrh	r2, [r3, #12]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	795b      	ldrb	r3, [r3, #5]
 800c322:	2001      	movs	r0, #1
 800c324:	9000      	str	r0, [sp, #0]
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 f8ea 	bl	800c500 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c332:	b29a      	uxth	r2, r3
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2206      	movs	r2, #6
 800c33c:	761a      	strb	r2, [r3, #24]
      break;
 800c33e:	e0c0      	b.n	800c4c2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	795b      	ldrb	r3, [r3, #5]
 800c344:	4619      	mov	r1, r3
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f003 ff42 	bl	80101d0 <USBH_LL_GetURBState>
 800c34c:	4603      	mov	r3, r0
 800c34e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c350:	7bbb      	ldrb	r3, [r7, #14]
 800c352:	2b01      	cmp	r3, #1
 800c354:	d103      	bne.n	800c35e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2207      	movs	r2, #7
 800c35a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c35c:	e0ac      	b.n	800c4b8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800c35e:	7bbb      	ldrb	r3, [r7, #14]
 800c360:	2b05      	cmp	r3, #5
 800c362:	d105      	bne.n	800c370 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	220c      	movs	r2, #12
 800c368:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c36a:	2303      	movs	r3, #3
 800c36c:	73fb      	strb	r3, [r7, #15]
      break;
 800c36e:	e0a3      	b.n	800c4b8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c370:	7bbb      	ldrb	r3, [r7, #14]
 800c372:	2b02      	cmp	r3, #2
 800c374:	d103      	bne.n	800c37e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2205      	movs	r2, #5
 800c37a:	761a      	strb	r2, [r3, #24]
      break;
 800c37c:	e09c      	b.n	800c4b8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c37e:	7bbb      	ldrb	r3, [r7, #14]
 800c380:	2b04      	cmp	r3, #4
 800c382:	f040 8099 	bne.w	800c4b8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	220b      	movs	r2, #11
 800c38a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c38c:	2302      	movs	r3, #2
 800c38e:	73fb      	strb	r3, [r7, #15]
      break;
 800c390:	e092      	b.n	800c4b8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	791b      	ldrb	r3, [r3, #4]
 800c396:	2200      	movs	r2, #0
 800c398:	2100      	movs	r1, #0
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 f8d5 	bl	800c54a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c3a6:	b29a      	uxth	r2, r3
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2208      	movs	r2, #8
 800c3b0:	761a      	strb	r2, [r3, #24]

      break;
 800c3b2:	e086      	b.n	800c4c2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	791b      	ldrb	r3, [r3, #4]
 800c3b8:	4619      	mov	r1, r3
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f003 ff08 	bl	80101d0 <USBH_LL_GetURBState>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c3c4:	7bbb      	ldrb	r3, [r7, #14]
 800c3c6:	2b01      	cmp	r3, #1
 800c3c8:	d105      	bne.n	800c3d6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	220d      	movs	r2, #13
 800c3ce:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c3d4:	e072      	b.n	800c4bc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800c3d6:	7bbb      	ldrb	r3, [r7, #14]
 800c3d8:	2b04      	cmp	r3, #4
 800c3da:	d103      	bne.n	800c3e4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	220b      	movs	r2, #11
 800c3e0:	761a      	strb	r2, [r3, #24]
      break;
 800c3e2:	e06b      	b.n	800c4bc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800c3e4:	7bbb      	ldrb	r3, [r7, #14]
 800c3e6:	2b05      	cmp	r3, #5
 800c3e8:	d168      	bne.n	800c4bc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800c3ea:	2303      	movs	r3, #3
 800c3ec:	73fb      	strb	r3, [r7, #15]
      break;
 800c3ee:	e065      	b.n	800c4bc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	795b      	ldrb	r3, [r3, #5]
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	9200      	str	r2, [sp, #0]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	2100      	movs	r1, #0
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f000 f87f 	bl	800c500 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c408:	b29a      	uxth	r2, r3
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	220a      	movs	r2, #10
 800c412:	761a      	strb	r2, [r3, #24]
      break;
 800c414:	e055      	b.n	800c4c2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	795b      	ldrb	r3, [r3, #5]
 800c41a:	4619      	mov	r1, r3
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f003 fed7 	bl	80101d0 <USBH_LL_GetURBState>
 800c422:	4603      	mov	r3, r0
 800c424:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c426:	7bbb      	ldrb	r3, [r7, #14]
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d105      	bne.n	800c438 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800c42c:	2300      	movs	r3, #0
 800c42e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	220d      	movs	r2, #13
 800c434:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c436:	e043      	b.n	800c4c0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c438:	7bbb      	ldrb	r3, [r7, #14]
 800c43a:	2b02      	cmp	r3, #2
 800c43c:	d103      	bne.n	800c446 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2209      	movs	r2, #9
 800c442:	761a      	strb	r2, [r3, #24]
      break;
 800c444:	e03c      	b.n	800c4c0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800c446:	7bbb      	ldrb	r3, [r7, #14]
 800c448:	2b04      	cmp	r3, #4
 800c44a:	d139      	bne.n	800c4c0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	220b      	movs	r2, #11
 800c450:	761a      	strb	r2, [r3, #24]
      break;
 800c452:	e035      	b.n	800c4c0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	7e5b      	ldrb	r3, [r3, #25]
 800c458:	3301      	adds	r3, #1
 800c45a:	b2da      	uxtb	r2, r3
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	765a      	strb	r2, [r3, #25]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	7e5b      	ldrb	r3, [r3, #25]
 800c464:	2b02      	cmp	r3, #2
 800c466:	d806      	bhi.n	800c476 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2201      	movs	r2, #1
 800c46c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2201      	movs	r2, #1
 800c472:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c474:	e025      	b.n	800c4c2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c47c:	2106      	movs	r1, #6
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2200      	movs	r2, #0
 800c486:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	795b      	ldrb	r3, [r3, #5]
 800c48c:	4619      	mov	r1, r3
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f000 f90c 	bl	800c6ac <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	791b      	ldrb	r3, [r3, #4]
 800c498:	4619      	mov	r1, r3
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 f906 	bl	800c6ac <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c4a6:	2302      	movs	r3, #2
 800c4a8:	73fb      	strb	r3, [r7, #15]
      break;
 800c4aa:	e00a      	b.n	800c4c2 <USBH_HandleControl+0x2de>

    default:
      break;
 800c4ac:	bf00      	nop
 800c4ae:	e008      	b.n	800c4c2 <USBH_HandleControl+0x2de>
      break;
 800c4b0:	bf00      	nop
 800c4b2:	e006      	b.n	800c4c2 <USBH_HandleControl+0x2de>
      break;
 800c4b4:	bf00      	nop
 800c4b6:	e004      	b.n	800c4c2 <USBH_HandleControl+0x2de>
      break;
 800c4b8:	bf00      	nop
 800c4ba:	e002      	b.n	800c4c2 <USBH_HandleControl+0x2de>
      break;
 800c4bc:	bf00      	nop
 800c4be:	e000      	b.n	800c4c2 <USBH_HandleControl+0x2de>
      break;
 800c4c0:	bf00      	nop
  }

  return status;
 800c4c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3710      	adds	r7, #16
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b088      	sub	sp, #32
 800c4d0:	af04      	add	r7, sp, #16
 800c4d2:	60f8      	str	r0, [r7, #12]
 800c4d4:	60b9      	str	r1, [r7, #8]
 800c4d6:	4613      	mov	r3, r2
 800c4d8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c4da:	79f9      	ldrb	r1, [r7, #7]
 800c4dc:	2300      	movs	r3, #0
 800c4de:	9303      	str	r3, [sp, #12]
 800c4e0:	2308      	movs	r3, #8
 800c4e2:	9302      	str	r3, [sp, #8]
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	9301      	str	r3, [sp, #4]
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	9300      	str	r3, [sp, #0]
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	68f8      	ldr	r0, [r7, #12]
 800c4f2:	f003 fe3c 	bl	801016e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800c4f6:	2300      	movs	r3, #0
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3710      	adds	r7, #16
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b088      	sub	sp, #32
 800c504:	af04      	add	r7, sp, #16
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	4611      	mov	r1, r2
 800c50c:	461a      	mov	r2, r3
 800c50e:	460b      	mov	r3, r1
 800c510:	80fb      	strh	r3, [r7, #6]
 800c512:	4613      	mov	r3, r2
 800c514:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d001      	beq.n	800c524 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c520:	2300      	movs	r3, #0
 800c522:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c524:	7979      	ldrb	r1, [r7, #5]
 800c526:	7e3b      	ldrb	r3, [r7, #24]
 800c528:	9303      	str	r3, [sp, #12]
 800c52a:	88fb      	ldrh	r3, [r7, #6]
 800c52c:	9302      	str	r3, [sp, #8]
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	9301      	str	r3, [sp, #4]
 800c532:	2301      	movs	r3, #1
 800c534:	9300      	str	r3, [sp, #0]
 800c536:	2300      	movs	r3, #0
 800c538:	2200      	movs	r2, #0
 800c53a:	68f8      	ldr	r0, [r7, #12]
 800c53c:	f003 fe17 	bl	801016e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c540:	2300      	movs	r3, #0
}
 800c542:	4618      	mov	r0, r3
 800c544:	3710      	adds	r7, #16
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}

0800c54a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c54a:	b580      	push	{r7, lr}
 800c54c:	b088      	sub	sp, #32
 800c54e:	af04      	add	r7, sp, #16
 800c550:	60f8      	str	r0, [r7, #12]
 800c552:	60b9      	str	r1, [r7, #8]
 800c554:	4611      	mov	r1, r2
 800c556:	461a      	mov	r2, r3
 800c558:	460b      	mov	r3, r1
 800c55a:	80fb      	strh	r3, [r7, #6]
 800c55c:	4613      	mov	r3, r2
 800c55e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c560:	7979      	ldrb	r1, [r7, #5]
 800c562:	2300      	movs	r3, #0
 800c564:	9303      	str	r3, [sp, #12]
 800c566:	88fb      	ldrh	r3, [r7, #6]
 800c568:	9302      	str	r3, [sp, #8]
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	9301      	str	r3, [sp, #4]
 800c56e:	2301      	movs	r3, #1
 800c570:	9300      	str	r3, [sp, #0]
 800c572:	2300      	movs	r3, #0
 800c574:	2201      	movs	r2, #1
 800c576:	68f8      	ldr	r0, [r7, #12]
 800c578:	f003 fdf9 	bl	801016e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c57c:	2300      	movs	r3, #0

}
 800c57e:	4618      	mov	r0, r3
 800c580:	3710      	adds	r7, #16
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}

0800c586 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c586:	b580      	push	{r7, lr}
 800c588:	b088      	sub	sp, #32
 800c58a:	af04      	add	r7, sp, #16
 800c58c:	60f8      	str	r0, [r7, #12]
 800c58e:	60b9      	str	r1, [r7, #8]
 800c590:	4611      	mov	r1, r2
 800c592:	461a      	mov	r2, r3
 800c594:	460b      	mov	r3, r1
 800c596:	80fb      	strh	r3, [r7, #6]
 800c598:	4613      	mov	r3, r2
 800c59a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d001      	beq.n	800c5aa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c5aa:	7979      	ldrb	r1, [r7, #5]
 800c5ac:	7e3b      	ldrb	r3, [r7, #24]
 800c5ae:	9303      	str	r3, [sp, #12]
 800c5b0:	88fb      	ldrh	r3, [r7, #6]
 800c5b2:	9302      	str	r3, [sp, #8]
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	9301      	str	r3, [sp, #4]
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	9300      	str	r3, [sp, #0]
 800c5bc:	2302      	movs	r3, #2
 800c5be:	2200      	movs	r2, #0
 800c5c0:	68f8      	ldr	r0, [r7, #12]
 800c5c2:	f003 fdd4 	bl	801016e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c5c6:	2300      	movs	r3, #0
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3710      	adds	r7, #16
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}

0800c5d0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b088      	sub	sp, #32
 800c5d4:	af04      	add	r7, sp, #16
 800c5d6:	60f8      	str	r0, [r7, #12]
 800c5d8:	60b9      	str	r1, [r7, #8]
 800c5da:	4611      	mov	r1, r2
 800c5dc:	461a      	mov	r2, r3
 800c5de:	460b      	mov	r3, r1
 800c5e0:	80fb      	strh	r3, [r7, #6]
 800c5e2:	4613      	mov	r3, r2
 800c5e4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c5e6:	7979      	ldrb	r1, [r7, #5]
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	9303      	str	r3, [sp, #12]
 800c5ec:	88fb      	ldrh	r3, [r7, #6]
 800c5ee:	9302      	str	r3, [sp, #8]
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	9301      	str	r3, [sp, #4]
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	9300      	str	r3, [sp, #0]
 800c5f8:	2302      	movs	r3, #2
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	68f8      	ldr	r0, [r7, #12]
 800c5fe:	f003 fdb6 	bl	801016e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c602:	2300      	movs	r3, #0
}
 800c604:	4618      	mov	r0, r3
 800c606:	3710      	adds	r7, #16
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}

0800c60c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b086      	sub	sp, #24
 800c610:	af04      	add	r7, sp, #16
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	4608      	mov	r0, r1
 800c616:	4611      	mov	r1, r2
 800c618:	461a      	mov	r2, r3
 800c61a:	4603      	mov	r3, r0
 800c61c:	70fb      	strb	r3, [r7, #3]
 800c61e:	460b      	mov	r3, r1
 800c620:	70bb      	strb	r3, [r7, #2]
 800c622:	4613      	mov	r3, r2
 800c624:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c626:	7878      	ldrb	r0, [r7, #1]
 800c628:	78ba      	ldrb	r2, [r7, #2]
 800c62a:	78f9      	ldrb	r1, [r7, #3]
 800c62c:	8b3b      	ldrh	r3, [r7, #24]
 800c62e:	9302      	str	r3, [sp, #8]
 800c630:	7d3b      	ldrb	r3, [r7, #20]
 800c632:	9301      	str	r3, [sp, #4]
 800c634:	7c3b      	ldrb	r3, [r7, #16]
 800c636:	9300      	str	r3, [sp, #0]
 800c638:	4603      	mov	r3, r0
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f003 fd49 	bl	80100d2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800c640:	2300      	movs	r3, #0
}
 800c642:	4618      	mov	r0, r3
 800c644:	3708      	adds	r7, #8
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}

0800c64a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c64a:	b580      	push	{r7, lr}
 800c64c:	b082      	sub	sp, #8
 800c64e:	af00      	add	r7, sp, #0
 800c650:	6078      	str	r0, [r7, #4]
 800c652:	460b      	mov	r3, r1
 800c654:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800c656:	78fb      	ldrb	r3, [r7, #3]
 800c658:	4619      	mov	r1, r3
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f003 fd68 	bl	8010130 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c660:	2300      	movs	r3, #0
}
 800c662:	4618      	mov	r0, r3
 800c664:	3708      	adds	r7, #8
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}

0800c66a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c66a:	b580      	push	{r7, lr}
 800c66c:	b084      	sub	sp, #16
 800c66e:	af00      	add	r7, sp, #0
 800c670:	6078      	str	r0, [r7, #4]
 800c672:	460b      	mov	r3, r1
 800c674:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f000 f836 	bl	800c6e8 <USBH_GetFreePipe>
 800c67c:	4603      	mov	r3, r0
 800c67e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c680:	89fb      	ldrh	r3, [r7, #14]
 800c682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c686:	4293      	cmp	r3, r2
 800c688:	d00a      	beq.n	800c6a0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800c68a:	78fa      	ldrb	r2, [r7, #3]
 800c68c:	89fb      	ldrh	r3, [r7, #14]
 800c68e:	f003 030f 	and.w	r3, r3, #15
 800c692:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c696:	6879      	ldr	r1, [r7, #4]
 800c698:	33e0      	adds	r3, #224	; 0xe0
 800c69a:	009b      	lsls	r3, r3, #2
 800c69c:	440b      	add	r3, r1
 800c69e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c6a0:	89fb      	ldrh	r3, [r7, #14]
 800c6a2:	b2db      	uxtb	r3, r3
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3710      	adds	r7, #16
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}

0800c6ac <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b083      	sub	sp, #12
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	460b      	mov	r3, r1
 800c6b6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800c6b8:	78fb      	ldrb	r3, [r7, #3]
 800c6ba:	2b0a      	cmp	r3, #10
 800c6bc:	d80d      	bhi.n	800c6da <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c6be:	78fb      	ldrb	r3, [r7, #3]
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	33e0      	adds	r3, #224	; 0xe0
 800c6c4:	009b      	lsls	r3, r3, #2
 800c6c6:	4413      	add	r3, r2
 800c6c8:	685a      	ldr	r2, [r3, #4]
 800c6ca:	78fb      	ldrb	r3, [r7, #3]
 800c6cc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c6d0:	6879      	ldr	r1, [r7, #4]
 800c6d2:	33e0      	adds	r3, #224	; 0xe0
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	440b      	add	r3, r1
 800c6d8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c6da:	2300      	movs	r3, #0
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	370c      	adds	r7, #12
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr

0800c6e8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b085      	sub	sp, #20
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	73fb      	strb	r3, [r7, #15]
 800c6f8:	e00f      	b.n	800c71a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c6fa:	7bfb      	ldrb	r3, [r7, #15]
 800c6fc:	687a      	ldr	r2, [r7, #4]
 800c6fe:	33e0      	adds	r3, #224	; 0xe0
 800c700:	009b      	lsls	r3, r3, #2
 800c702:	4413      	add	r3, r2
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d102      	bne.n	800c714 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c70e:	7bfb      	ldrb	r3, [r7, #15]
 800c710:	b29b      	uxth	r3, r3
 800c712:	e007      	b.n	800c724 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800c714:	7bfb      	ldrb	r3, [r7, #15]
 800c716:	3301      	adds	r3, #1
 800c718:	73fb      	strb	r3, [r7, #15]
 800c71a:	7bfb      	ldrb	r3, [r7, #15]
 800c71c:	2b0a      	cmp	r3, #10
 800c71e:	d9ec      	bls.n	800c6fa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c720:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c724:	4618      	mov	r0, r3
 800c726:	3714      	adds	r7, #20
 800c728:	46bd      	mov	sp, r7
 800c72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72e:	4770      	bx	lr

0800c730 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b084      	sub	sp, #16
 800c734:	af00      	add	r7, sp, #0
 800c736:	4603      	mov	r3, r0
 800c738:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c73a:	79fb      	ldrb	r3, [r7, #7]
 800c73c:	4a08      	ldr	r2, [pc, #32]	; (800c760 <disk_status+0x30>)
 800c73e:	009b      	lsls	r3, r3, #2
 800c740:	4413      	add	r3, r2
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	685b      	ldr	r3, [r3, #4]
 800c746:	79fa      	ldrb	r2, [r7, #7]
 800c748:	4905      	ldr	r1, [pc, #20]	; (800c760 <disk_status+0x30>)
 800c74a:	440a      	add	r2, r1
 800c74c:	7a12      	ldrb	r2, [r2, #8]
 800c74e:	4610      	mov	r0, r2
 800c750:	4798      	blx	r3
 800c752:	4603      	mov	r3, r0
 800c754:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c756:	7bfb      	ldrb	r3, [r7, #15]
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3710      	adds	r7, #16
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}
 800c760:	200013f4 	.word	0x200013f4

0800c764 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b084      	sub	sp, #16
 800c768:	af00      	add	r7, sp, #0
 800c76a:	4603      	mov	r3, r0
 800c76c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c76e:	2300      	movs	r3, #0
 800c770:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c772:	79fb      	ldrb	r3, [r7, #7]
 800c774:	4a0d      	ldr	r2, [pc, #52]	; (800c7ac <disk_initialize+0x48>)
 800c776:	5cd3      	ldrb	r3, [r2, r3]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d111      	bne.n	800c7a0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c77c:	79fb      	ldrb	r3, [r7, #7]
 800c77e:	4a0b      	ldr	r2, [pc, #44]	; (800c7ac <disk_initialize+0x48>)
 800c780:	2101      	movs	r1, #1
 800c782:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c784:	79fb      	ldrb	r3, [r7, #7]
 800c786:	4a09      	ldr	r2, [pc, #36]	; (800c7ac <disk_initialize+0x48>)
 800c788:	009b      	lsls	r3, r3, #2
 800c78a:	4413      	add	r3, r2
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	79fa      	ldrb	r2, [r7, #7]
 800c792:	4906      	ldr	r1, [pc, #24]	; (800c7ac <disk_initialize+0x48>)
 800c794:	440a      	add	r2, r1
 800c796:	7a12      	ldrb	r2, [r2, #8]
 800c798:	4610      	mov	r0, r2
 800c79a:	4798      	blx	r3
 800c79c:	4603      	mov	r3, r0
 800c79e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c7a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3710      	adds	r7, #16
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	200013f4 	.word	0x200013f4

0800c7b0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c7b0:	b590      	push	{r4, r7, lr}
 800c7b2:	b087      	sub	sp, #28
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	60b9      	str	r1, [r7, #8]
 800c7b8:	607a      	str	r2, [r7, #4]
 800c7ba:	603b      	str	r3, [r7, #0]
 800c7bc:	4603      	mov	r3, r0
 800c7be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c7c0:	7bfb      	ldrb	r3, [r7, #15]
 800c7c2:	4a0a      	ldr	r2, [pc, #40]	; (800c7ec <disk_read+0x3c>)
 800c7c4:	009b      	lsls	r3, r3, #2
 800c7c6:	4413      	add	r3, r2
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	689c      	ldr	r4, [r3, #8]
 800c7cc:	7bfb      	ldrb	r3, [r7, #15]
 800c7ce:	4a07      	ldr	r2, [pc, #28]	; (800c7ec <disk_read+0x3c>)
 800c7d0:	4413      	add	r3, r2
 800c7d2:	7a18      	ldrb	r0, [r3, #8]
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	687a      	ldr	r2, [r7, #4]
 800c7d8:	68b9      	ldr	r1, [r7, #8]
 800c7da:	47a0      	blx	r4
 800c7dc:	4603      	mov	r3, r0
 800c7de:	75fb      	strb	r3, [r7, #23]
  return res;
 800c7e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	371c      	adds	r7, #28
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd90      	pop	{r4, r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	200013f4 	.word	0x200013f4

0800c7f0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c7f0:	b590      	push	{r4, r7, lr}
 800c7f2:	b087      	sub	sp, #28
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	60b9      	str	r1, [r7, #8]
 800c7f8:	607a      	str	r2, [r7, #4]
 800c7fa:	603b      	str	r3, [r7, #0]
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c800:	7bfb      	ldrb	r3, [r7, #15]
 800c802:	4a0a      	ldr	r2, [pc, #40]	; (800c82c <disk_write+0x3c>)
 800c804:	009b      	lsls	r3, r3, #2
 800c806:	4413      	add	r3, r2
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	68dc      	ldr	r4, [r3, #12]
 800c80c:	7bfb      	ldrb	r3, [r7, #15]
 800c80e:	4a07      	ldr	r2, [pc, #28]	; (800c82c <disk_write+0x3c>)
 800c810:	4413      	add	r3, r2
 800c812:	7a18      	ldrb	r0, [r3, #8]
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	687a      	ldr	r2, [r7, #4]
 800c818:	68b9      	ldr	r1, [r7, #8]
 800c81a:	47a0      	blx	r4
 800c81c:	4603      	mov	r3, r0
 800c81e:	75fb      	strb	r3, [r7, #23]
  return res;
 800c820:	7dfb      	ldrb	r3, [r7, #23]
}
 800c822:	4618      	mov	r0, r3
 800c824:	371c      	adds	r7, #28
 800c826:	46bd      	mov	sp, r7
 800c828:	bd90      	pop	{r4, r7, pc}
 800c82a:	bf00      	nop
 800c82c:	200013f4 	.word	0x200013f4

0800c830 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b084      	sub	sp, #16
 800c834:	af00      	add	r7, sp, #0
 800c836:	4603      	mov	r3, r0
 800c838:	603a      	str	r2, [r7, #0]
 800c83a:	71fb      	strb	r3, [r7, #7]
 800c83c:	460b      	mov	r3, r1
 800c83e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c840:	79fb      	ldrb	r3, [r7, #7]
 800c842:	4a09      	ldr	r2, [pc, #36]	; (800c868 <disk_ioctl+0x38>)
 800c844:	009b      	lsls	r3, r3, #2
 800c846:	4413      	add	r3, r2
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	691b      	ldr	r3, [r3, #16]
 800c84c:	79fa      	ldrb	r2, [r7, #7]
 800c84e:	4906      	ldr	r1, [pc, #24]	; (800c868 <disk_ioctl+0x38>)
 800c850:	440a      	add	r2, r1
 800c852:	7a10      	ldrb	r0, [r2, #8]
 800c854:	79b9      	ldrb	r1, [r7, #6]
 800c856:	683a      	ldr	r2, [r7, #0]
 800c858:	4798      	blx	r3
 800c85a:	4603      	mov	r3, r0
 800c85c:	73fb      	strb	r3, [r7, #15]
  return res;
 800c85e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c860:	4618      	mov	r0, r3
 800c862:	3710      	adds	r7, #16
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}
 800c868:	200013f4 	.word	0x200013f4

0800c86c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c86c:	b480      	push	{r7}
 800c86e:	b085      	sub	sp, #20
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	3301      	adds	r3, #1
 800c878:	781b      	ldrb	r3, [r3, #0]
 800c87a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c87c:	89fb      	ldrh	r3, [r7, #14]
 800c87e:	021b      	lsls	r3, r3, #8
 800c880:	b21a      	sxth	r2, r3
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	781b      	ldrb	r3, [r3, #0]
 800c886:	b21b      	sxth	r3, r3
 800c888:	4313      	orrs	r3, r2
 800c88a:	b21b      	sxth	r3, r3
 800c88c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c88e:	89fb      	ldrh	r3, [r7, #14]
}
 800c890:	4618      	mov	r0, r3
 800c892:	3714      	adds	r7, #20
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr

0800c89c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c89c:	b480      	push	{r7}
 800c89e:	b085      	sub	sp, #20
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	3303      	adds	r3, #3
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	021b      	lsls	r3, r3, #8
 800c8b0:	687a      	ldr	r2, [r7, #4]
 800c8b2:	3202      	adds	r2, #2
 800c8b4:	7812      	ldrb	r2, [r2, #0]
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	021b      	lsls	r3, r3, #8
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	3201      	adds	r2, #1
 800c8c2:	7812      	ldrb	r2, [r2, #0]
 800c8c4:	4313      	orrs	r3, r2
 800c8c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	021b      	lsls	r3, r3, #8
 800c8cc:	687a      	ldr	r2, [r7, #4]
 800c8ce:	7812      	ldrb	r2, [r2, #0]
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	60fb      	str	r3, [r7, #12]
	return rv;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3714      	adds	r7, #20
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e0:	4770      	bx	lr

0800c8e2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c8e2:	b480      	push	{r7}
 800c8e4:	b083      	sub	sp, #12
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
 800c8ea:	460b      	mov	r3, r1
 800c8ec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	1c5a      	adds	r2, r3, #1
 800c8f2:	607a      	str	r2, [r7, #4]
 800c8f4:	887a      	ldrh	r2, [r7, #2]
 800c8f6:	b2d2      	uxtb	r2, r2
 800c8f8:	701a      	strb	r2, [r3, #0]
 800c8fa:	887b      	ldrh	r3, [r7, #2]
 800c8fc:	0a1b      	lsrs	r3, r3, #8
 800c8fe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	1c5a      	adds	r2, r3, #1
 800c904:	607a      	str	r2, [r7, #4]
 800c906:	887a      	ldrh	r2, [r7, #2]
 800c908:	b2d2      	uxtb	r2, r2
 800c90a:	701a      	strb	r2, [r3, #0]
}
 800c90c:	bf00      	nop
 800c90e:	370c      	adds	r7, #12
 800c910:	46bd      	mov	sp, r7
 800c912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c916:	4770      	bx	lr

0800c918 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c918:	b480      	push	{r7}
 800c91a:	b083      	sub	sp, #12
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	1c5a      	adds	r2, r3, #1
 800c926:	607a      	str	r2, [r7, #4]
 800c928:	683a      	ldr	r2, [r7, #0]
 800c92a:	b2d2      	uxtb	r2, r2
 800c92c:	701a      	strb	r2, [r3, #0]
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	0a1b      	lsrs	r3, r3, #8
 800c932:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	1c5a      	adds	r2, r3, #1
 800c938:	607a      	str	r2, [r7, #4]
 800c93a:	683a      	ldr	r2, [r7, #0]
 800c93c:	b2d2      	uxtb	r2, r2
 800c93e:	701a      	strb	r2, [r3, #0]
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	0a1b      	lsrs	r3, r3, #8
 800c944:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	1c5a      	adds	r2, r3, #1
 800c94a:	607a      	str	r2, [r7, #4]
 800c94c:	683a      	ldr	r2, [r7, #0]
 800c94e:	b2d2      	uxtb	r2, r2
 800c950:	701a      	strb	r2, [r3, #0]
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	0a1b      	lsrs	r3, r3, #8
 800c956:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	1c5a      	adds	r2, r3, #1
 800c95c:	607a      	str	r2, [r7, #4]
 800c95e:	683a      	ldr	r2, [r7, #0]
 800c960:	b2d2      	uxtb	r2, r2
 800c962:	701a      	strb	r2, [r3, #0]
}
 800c964:	bf00      	nop
 800c966:	370c      	adds	r7, #12
 800c968:	46bd      	mov	sp, r7
 800c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96e:	4770      	bx	lr

0800c970 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c970:	b480      	push	{r7}
 800c972:	b087      	sub	sp, #28
 800c974:	af00      	add	r7, sp, #0
 800c976:	60f8      	str	r0, [r7, #12]
 800c978:	60b9      	str	r1, [r7, #8]
 800c97a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d00d      	beq.n	800c9a6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c98a:	693a      	ldr	r2, [r7, #16]
 800c98c:	1c53      	adds	r3, r2, #1
 800c98e:	613b      	str	r3, [r7, #16]
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	1c59      	adds	r1, r3, #1
 800c994:	6179      	str	r1, [r7, #20]
 800c996:	7812      	ldrb	r2, [r2, #0]
 800c998:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	3b01      	subs	r3, #1
 800c99e:	607b      	str	r3, [r7, #4]
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d1f1      	bne.n	800c98a <mem_cpy+0x1a>
	}
}
 800c9a6:	bf00      	nop
 800c9a8:	371c      	adds	r7, #28
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr

0800c9b2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c9b2:	b480      	push	{r7}
 800c9b4:	b087      	sub	sp, #28
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	60f8      	str	r0, [r7, #12]
 800c9ba:	60b9      	str	r1, [r7, #8]
 800c9bc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	1c5a      	adds	r2, r3, #1
 800c9c6:	617a      	str	r2, [r7, #20]
 800c9c8:	68ba      	ldr	r2, [r7, #8]
 800c9ca:	b2d2      	uxtb	r2, r2
 800c9cc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	3b01      	subs	r3, #1
 800c9d2:	607b      	str	r3, [r7, #4]
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d1f3      	bne.n	800c9c2 <mem_set+0x10>
}
 800c9da:	bf00      	nop
 800c9dc:	bf00      	nop
 800c9de:	371c      	adds	r7, #28
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c9e8:	b480      	push	{r7}
 800c9ea:	b089      	sub	sp, #36	; 0x24
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	60f8      	str	r0, [r7, #12]
 800c9f0:	60b9      	str	r1, [r7, #8]
 800c9f2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	61fb      	str	r3, [r7, #28]
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ca00:	69fb      	ldr	r3, [r7, #28]
 800ca02:	1c5a      	adds	r2, r3, #1
 800ca04:	61fa      	str	r2, [r7, #28]
 800ca06:	781b      	ldrb	r3, [r3, #0]
 800ca08:	4619      	mov	r1, r3
 800ca0a:	69bb      	ldr	r3, [r7, #24]
 800ca0c:	1c5a      	adds	r2, r3, #1
 800ca0e:	61ba      	str	r2, [r7, #24]
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	1acb      	subs	r3, r1, r3
 800ca14:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	3b01      	subs	r3, #1
 800ca1a:	607b      	str	r3, [r7, #4]
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d002      	beq.n	800ca28 <mem_cmp+0x40>
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d0eb      	beq.n	800ca00 <mem_cmp+0x18>

	return r;
 800ca28:	697b      	ldr	r3, [r7, #20]
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3724      	adds	r7, #36	; 0x24
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca34:	4770      	bx	lr

0800ca36 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ca36:	b480      	push	{r7}
 800ca38:	b083      	sub	sp, #12
 800ca3a:	af00      	add	r7, sp, #0
 800ca3c:	6078      	str	r0, [r7, #4]
 800ca3e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ca40:	e002      	b.n	800ca48 <chk_chr+0x12>
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	3301      	adds	r3, #1
 800ca46:	607b      	str	r3, [r7, #4]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d005      	beq.n	800ca5c <chk_chr+0x26>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	781b      	ldrb	r3, [r3, #0]
 800ca54:	461a      	mov	r2, r3
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d1f2      	bne.n	800ca42 <chk_chr+0xc>
	return *str;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	781b      	ldrb	r3, [r3, #0]
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	370c      	adds	r7, #12
 800ca64:	46bd      	mov	sp, r7
 800ca66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6a:	4770      	bx	lr

0800ca6c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b085      	sub	sp, #20
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ca76:	2300      	movs	r3, #0
 800ca78:	60bb      	str	r3, [r7, #8]
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	60fb      	str	r3, [r7, #12]
 800ca7e:	e029      	b.n	800cad4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ca80:	4a27      	ldr	r2, [pc, #156]	; (800cb20 <chk_lock+0xb4>)
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	011b      	lsls	r3, r3, #4
 800ca86:	4413      	add	r3, r2
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d01d      	beq.n	800caca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ca8e:	4a24      	ldr	r2, [pc, #144]	; (800cb20 <chk_lock+0xb4>)
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	011b      	lsls	r3, r3, #4
 800ca94:	4413      	add	r3, r2
 800ca96:	681a      	ldr	r2, [r3, #0]
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	d116      	bne.n	800cace <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800caa0:	4a1f      	ldr	r2, [pc, #124]	; (800cb20 <chk_lock+0xb4>)
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	011b      	lsls	r3, r3, #4
 800caa6:	4413      	add	r3, r2
 800caa8:	3304      	adds	r3, #4
 800caaa:	681a      	ldr	r2, [r3, #0]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d10c      	bne.n	800cace <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cab4:	4a1a      	ldr	r2, [pc, #104]	; (800cb20 <chk_lock+0xb4>)
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	011b      	lsls	r3, r3, #4
 800caba:	4413      	add	r3, r2
 800cabc:	3308      	adds	r3, #8
 800cabe:	681a      	ldr	r2, [r3, #0]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d102      	bne.n	800cace <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cac8:	e007      	b.n	800cada <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800caca:	2301      	movs	r3, #1
 800cacc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	3301      	adds	r3, #1
 800cad2:	60fb      	str	r3, [r7, #12]
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2b01      	cmp	r3, #1
 800cad8:	d9d2      	bls.n	800ca80 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	2b02      	cmp	r3, #2
 800cade:	d109      	bne.n	800caf4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d102      	bne.n	800caec <chk_lock+0x80>
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	2b02      	cmp	r3, #2
 800caea:	d101      	bne.n	800caf0 <chk_lock+0x84>
 800caec:	2300      	movs	r3, #0
 800caee:	e010      	b.n	800cb12 <chk_lock+0xa6>
 800caf0:	2312      	movs	r3, #18
 800caf2:	e00e      	b.n	800cb12 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d108      	bne.n	800cb0c <chk_lock+0xa0>
 800cafa:	4a09      	ldr	r2, [pc, #36]	; (800cb20 <chk_lock+0xb4>)
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	011b      	lsls	r3, r3, #4
 800cb00:	4413      	add	r3, r2
 800cb02:	330c      	adds	r3, #12
 800cb04:	881b      	ldrh	r3, [r3, #0]
 800cb06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb0a:	d101      	bne.n	800cb10 <chk_lock+0xa4>
 800cb0c:	2310      	movs	r3, #16
 800cb0e:	e000      	b.n	800cb12 <chk_lock+0xa6>
 800cb10:	2300      	movs	r3, #0
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3714      	adds	r7, #20
 800cb16:	46bd      	mov	sp, r7
 800cb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1c:	4770      	bx	lr
 800cb1e:	bf00      	nop
 800cb20:	200011d4 	.word	0x200011d4

0800cb24 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cb24:	b480      	push	{r7}
 800cb26:	b083      	sub	sp, #12
 800cb28:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	607b      	str	r3, [r7, #4]
 800cb2e:	e002      	b.n	800cb36 <enq_lock+0x12>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	3301      	adds	r3, #1
 800cb34:	607b      	str	r3, [r7, #4]
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2b01      	cmp	r3, #1
 800cb3a:	d806      	bhi.n	800cb4a <enq_lock+0x26>
 800cb3c:	4a09      	ldr	r2, [pc, #36]	; (800cb64 <enq_lock+0x40>)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	011b      	lsls	r3, r3, #4
 800cb42:	4413      	add	r3, r2
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d1f2      	bne.n	800cb30 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2b02      	cmp	r3, #2
 800cb4e:	bf14      	ite	ne
 800cb50:	2301      	movne	r3, #1
 800cb52:	2300      	moveq	r3, #0
 800cb54:	b2db      	uxtb	r3, r3
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	370c      	adds	r7, #12
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb60:	4770      	bx	lr
 800cb62:	bf00      	nop
 800cb64:	200011d4 	.word	0x200011d4

0800cb68 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b085      	sub	sp, #20
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cb72:	2300      	movs	r3, #0
 800cb74:	60fb      	str	r3, [r7, #12]
 800cb76:	e01f      	b.n	800cbb8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800cb78:	4a41      	ldr	r2, [pc, #260]	; (800cc80 <inc_lock+0x118>)
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	011b      	lsls	r3, r3, #4
 800cb7e:	4413      	add	r3, r2
 800cb80:	681a      	ldr	r2, [r3, #0]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d113      	bne.n	800cbb2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cb8a:	4a3d      	ldr	r2, [pc, #244]	; (800cc80 <inc_lock+0x118>)
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	011b      	lsls	r3, r3, #4
 800cb90:	4413      	add	r3, r2
 800cb92:	3304      	adds	r3, #4
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	d109      	bne.n	800cbb2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800cb9e:	4a38      	ldr	r2, [pc, #224]	; (800cc80 <inc_lock+0x118>)
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	011b      	lsls	r3, r3, #4
 800cba4:	4413      	add	r3, r2
 800cba6:	3308      	adds	r3, #8
 800cba8:	681a      	ldr	r2, [r3, #0]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800cbae:	429a      	cmp	r2, r3
 800cbb0:	d006      	beq.n	800cbc0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	3301      	adds	r3, #1
 800cbb6:	60fb      	str	r3, [r7, #12]
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2b01      	cmp	r3, #1
 800cbbc:	d9dc      	bls.n	800cb78 <inc_lock+0x10>
 800cbbe:	e000      	b.n	800cbc2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800cbc0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	2b02      	cmp	r3, #2
 800cbc6:	d132      	bne.n	800cc2e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	60fb      	str	r3, [r7, #12]
 800cbcc:	e002      	b.n	800cbd4 <inc_lock+0x6c>
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	3301      	adds	r3, #1
 800cbd2:	60fb      	str	r3, [r7, #12]
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	2b01      	cmp	r3, #1
 800cbd8:	d806      	bhi.n	800cbe8 <inc_lock+0x80>
 800cbda:	4a29      	ldr	r2, [pc, #164]	; (800cc80 <inc_lock+0x118>)
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	011b      	lsls	r3, r3, #4
 800cbe0:	4413      	add	r3, r2
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d1f2      	bne.n	800cbce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	2b02      	cmp	r3, #2
 800cbec:	d101      	bne.n	800cbf2 <inc_lock+0x8a>
 800cbee:	2300      	movs	r3, #0
 800cbf0:	e040      	b.n	800cc74 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681a      	ldr	r2, [r3, #0]
 800cbf6:	4922      	ldr	r1, [pc, #136]	; (800cc80 <inc_lock+0x118>)
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	011b      	lsls	r3, r3, #4
 800cbfc:	440b      	add	r3, r1
 800cbfe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	689a      	ldr	r2, [r3, #8]
 800cc04:	491e      	ldr	r1, [pc, #120]	; (800cc80 <inc_lock+0x118>)
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	011b      	lsls	r3, r3, #4
 800cc0a:	440b      	add	r3, r1
 800cc0c:	3304      	adds	r3, #4
 800cc0e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	695a      	ldr	r2, [r3, #20]
 800cc14:	491a      	ldr	r1, [pc, #104]	; (800cc80 <inc_lock+0x118>)
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	011b      	lsls	r3, r3, #4
 800cc1a:	440b      	add	r3, r1
 800cc1c:	3308      	adds	r3, #8
 800cc1e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cc20:	4a17      	ldr	r2, [pc, #92]	; (800cc80 <inc_lock+0x118>)
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	011b      	lsls	r3, r3, #4
 800cc26:	4413      	add	r3, r2
 800cc28:	330c      	adds	r3, #12
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d009      	beq.n	800cc48 <inc_lock+0xe0>
 800cc34:	4a12      	ldr	r2, [pc, #72]	; (800cc80 <inc_lock+0x118>)
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	011b      	lsls	r3, r3, #4
 800cc3a:	4413      	add	r3, r2
 800cc3c:	330c      	adds	r3, #12
 800cc3e:	881b      	ldrh	r3, [r3, #0]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d001      	beq.n	800cc48 <inc_lock+0xe0>
 800cc44:	2300      	movs	r3, #0
 800cc46:	e015      	b.n	800cc74 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d108      	bne.n	800cc60 <inc_lock+0xf8>
 800cc4e:	4a0c      	ldr	r2, [pc, #48]	; (800cc80 <inc_lock+0x118>)
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	011b      	lsls	r3, r3, #4
 800cc54:	4413      	add	r3, r2
 800cc56:	330c      	adds	r3, #12
 800cc58:	881b      	ldrh	r3, [r3, #0]
 800cc5a:	3301      	adds	r3, #1
 800cc5c:	b29a      	uxth	r2, r3
 800cc5e:	e001      	b.n	800cc64 <inc_lock+0xfc>
 800cc60:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cc64:	4906      	ldr	r1, [pc, #24]	; (800cc80 <inc_lock+0x118>)
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	011b      	lsls	r3, r3, #4
 800cc6a:	440b      	add	r3, r1
 800cc6c:	330c      	adds	r3, #12
 800cc6e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	3301      	adds	r3, #1
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3714      	adds	r7, #20
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr
 800cc80:	200011d4 	.word	0x200011d4

0800cc84 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cc84:	b480      	push	{r7}
 800cc86:	b085      	sub	sp, #20
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	3b01      	subs	r3, #1
 800cc90:	607b      	str	r3, [r7, #4]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2b01      	cmp	r3, #1
 800cc96:	d825      	bhi.n	800cce4 <dec_lock+0x60>
		n = Files[i].ctr;
 800cc98:	4a17      	ldr	r2, [pc, #92]	; (800ccf8 <dec_lock+0x74>)
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	011b      	lsls	r3, r3, #4
 800cc9e:	4413      	add	r3, r2
 800cca0:	330c      	adds	r3, #12
 800cca2:	881b      	ldrh	r3, [r3, #0]
 800cca4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cca6:	89fb      	ldrh	r3, [r7, #14]
 800cca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccac:	d101      	bne.n	800ccb2 <dec_lock+0x2e>
 800ccae:	2300      	movs	r3, #0
 800ccb0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ccb2:	89fb      	ldrh	r3, [r7, #14]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d002      	beq.n	800ccbe <dec_lock+0x3a>
 800ccb8:	89fb      	ldrh	r3, [r7, #14]
 800ccba:	3b01      	subs	r3, #1
 800ccbc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ccbe:	4a0e      	ldr	r2, [pc, #56]	; (800ccf8 <dec_lock+0x74>)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	011b      	lsls	r3, r3, #4
 800ccc4:	4413      	add	r3, r2
 800ccc6:	330c      	adds	r3, #12
 800ccc8:	89fa      	ldrh	r2, [r7, #14]
 800ccca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800cccc:	89fb      	ldrh	r3, [r7, #14]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d105      	bne.n	800ccde <dec_lock+0x5a>
 800ccd2:	4a09      	ldr	r2, [pc, #36]	; (800ccf8 <dec_lock+0x74>)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	011b      	lsls	r3, r3, #4
 800ccd8:	4413      	add	r3, r2
 800ccda:	2200      	movs	r2, #0
 800ccdc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ccde:	2300      	movs	r3, #0
 800cce0:	737b      	strb	r3, [r7, #13]
 800cce2:	e001      	b.n	800cce8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800cce4:	2302      	movs	r3, #2
 800cce6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800cce8:	7b7b      	ldrb	r3, [r7, #13]
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3714      	adds	r7, #20
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf4:	4770      	bx	lr
 800ccf6:	bf00      	nop
 800ccf8:	200011d4 	.word	0x200011d4

0800ccfc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b085      	sub	sp, #20
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800cd04:	2300      	movs	r3, #0
 800cd06:	60fb      	str	r3, [r7, #12]
 800cd08:	e010      	b.n	800cd2c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cd0a:	4a0d      	ldr	r2, [pc, #52]	; (800cd40 <clear_lock+0x44>)
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	011b      	lsls	r3, r3, #4
 800cd10:	4413      	add	r3, r2
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	687a      	ldr	r2, [r7, #4]
 800cd16:	429a      	cmp	r2, r3
 800cd18:	d105      	bne.n	800cd26 <clear_lock+0x2a>
 800cd1a:	4a09      	ldr	r2, [pc, #36]	; (800cd40 <clear_lock+0x44>)
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	011b      	lsls	r3, r3, #4
 800cd20:	4413      	add	r3, r2
 800cd22:	2200      	movs	r2, #0
 800cd24:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	3301      	adds	r3, #1
 800cd2a:	60fb      	str	r3, [r7, #12]
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2b01      	cmp	r3, #1
 800cd30:	d9eb      	bls.n	800cd0a <clear_lock+0xe>
	}
}
 800cd32:	bf00      	nop
 800cd34:	bf00      	nop
 800cd36:	3714      	adds	r7, #20
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3e:	4770      	bx	lr
 800cd40:	200011d4 	.word	0x200011d4

0800cd44 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b086      	sub	sp, #24
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	78db      	ldrb	r3, [r3, #3]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d034      	beq.n	800cdc2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd5c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	7858      	ldrb	r0, [r3, #1]
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cd68:	2301      	movs	r3, #1
 800cd6a:	697a      	ldr	r2, [r7, #20]
 800cd6c:	f7ff fd40 	bl	800c7f0 <disk_write>
 800cd70:	4603      	mov	r3, r0
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d002      	beq.n	800cd7c <sync_window+0x38>
			res = FR_DISK_ERR;
 800cd76:	2301      	movs	r3, #1
 800cd78:	73fb      	strb	r3, [r7, #15]
 800cd7a:	e022      	b.n	800cdc2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd86:	697a      	ldr	r2, [r7, #20]
 800cd88:	1ad2      	subs	r2, r2, r3
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	69db      	ldr	r3, [r3, #28]
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d217      	bcs.n	800cdc2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	789b      	ldrb	r3, [r3, #2]
 800cd96:	613b      	str	r3, [r7, #16]
 800cd98:	e010      	b.n	800cdbc <sync_window+0x78>
					wsect += fs->fsize;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	69db      	ldr	r3, [r3, #28]
 800cd9e:	697a      	ldr	r2, [r7, #20]
 800cda0:	4413      	add	r3, r2
 800cda2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	7858      	ldrb	r0, [r3, #1]
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cdae:	2301      	movs	r3, #1
 800cdb0:	697a      	ldr	r2, [r7, #20]
 800cdb2:	f7ff fd1d 	bl	800c7f0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	3b01      	subs	r3, #1
 800cdba:	613b      	str	r3, [r7, #16]
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	2b01      	cmp	r3, #1
 800cdc0:	d8eb      	bhi.n	800cd9a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cdc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3718      	adds	r7, #24
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}

0800cdcc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdde:	683a      	ldr	r2, [r7, #0]
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d01b      	beq.n	800ce1c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f7ff ffad 	bl	800cd44 <sync_window>
 800cdea:	4603      	mov	r3, r0
 800cdec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cdee:	7bfb      	ldrb	r3, [r7, #15]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d113      	bne.n	800ce1c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	7858      	ldrb	r0, [r3, #1]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cdfe:	2301      	movs	r3, #1
 800ce00:	683a      	ldr	r2, [r7, #0]
 800ce02:	f7ff fcd5 	bl	800c7b0 <disk_read>
 800ce06:	4603      	mov	r3, r0
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d004      	beq.n	800ce16 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ce0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ce10:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ce12:	2301      	movs	r3, #1
 800ce14:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	683a      	ldr	r2, [r7, #0]
 800ce1a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800ce1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3710      	adds	r7, #16
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
	...

0800ce28 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b084      	sub	sp, #16
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f7ff ff87 	bl	800cd44 <sync_window>
 800ce36:	4603      	mov	r3, r0
 800ce38:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ce3a:	7bfb      	ldrb	r3, [r7, #15]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d158      	bne.n	800cef2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	781b      	ldrb	r3, [r3, #0]
 800ce44:	2b03      	cmp	r3, #3
 800ce46:	d148      	bne.n	800ceda <sync_fs+0xb2>
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	791b      	ldrb	r3, [r3, #4]
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	d144      	bne.n	800ceda <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	3334      	adds	r3, #52	; 0x34
 800ce54:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ce58:	2100      	movs	r1, #0
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f7ff fda9 	bl	800c9b2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	3334      	adds	r3, #52	; 0x34
 800ce64:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ce68:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7ff fd38 	bl	800c8e2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	3334      	adds	r3, #52	; 0x34
 800ce76:	4921      	ldr	r1, [pc, #132]	; (800cefc <sync_fs+0xd4>)
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f7ff fd4d 	bl	800c918 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	3334      	adds	r3, #52	; 0x34
 800ce82:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ce86:	491e      	ldr	r1, [pc, #120]	; (800cf00 <sync_fs+0xd8>)
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7ff fd45 	bl	800c918 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	3334      	adds	r3, #52	; 0x34
 800ce92:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	695b      	ldr	r3, [r3, #20]
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	4610      	mov	r0, r2
 800ce9e:	f7ff fd3b 	bl	800c918 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	3334      	adds	r3, #52	; 0x34
 800cea6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	691b      	ldr	r3, [r3, #16]
 800ceae:	4619      	mov	r1, r3
 800ceb0:	4610      	mov	r0, r2
 800ceb2:	f7ff fd31 	bl	800c918 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6a1b      	ldr	r3, [r3, #32]
 800ceba:	1c5a      	adds	r2, r3, #1
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	7858      	ldrb	r0, [r3, #1]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cece:	2301      	movs	r3, #1
 800ced0:	f7ff fc8e 	bl	800c7f0 <disk_write>
			fs->fsi_flag = 0;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2200      	movs	r2, #0
 800ced8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	785b      	ldrb	r3, [r3, #1]
 800cede:	2200      	movs	r2, #0
 800cee0:	2100      	movs	r1, #0
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7ff fca4 	bl	800c830 <disk_ioctl>
 800cee8:	4603      	mov	r3, r0
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d001      	beq.n	800cef2 <sync_fs+0xca>
 800ceee:	2301      	movs	r3, #1
 800cef0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800cef2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3710      	adds	r7, #16
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}
 800cefc:	41615252 	.word	0x41615252
 800cf00:	61417272 	.word	0x61417272

0800cf04 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b083      	sub	sp, #12
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	3b02      	subs	r3, #2
 800cf12:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	699b      	ldr	r3, [r3, #24]
 800cf18:	3b02      	subs	r3, #2
 800cf1a:	683a      	ldr	r2, [r7, #0]
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d301      	bcc.n	800cf24 <clust2sect+0x20>
 800cf20:	2300      	movs	r3, #0
 800cf22:	e008      	b.n	800cf36 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	895b      	ldrh	r3, [r3, #10]
 800cf28:	461a      	mov	r2, r3
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	fb03 f202 	mul.w	r2, r3, r2
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf34:	4413      	add	r3, r2
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	370c      	adds	r7, #12
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf40:	4770      	bx	lr

0800cf42 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cf42:	b580      	push	{r7, lr}
 800cf44:	b086      	sub	sp, #24
 800cf46:	af00      	add	r7, sp, #0
 800cf48:	6078      	str	r0, [r7, #4]
 800cf4a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	2b01      	cmp	r3, #1
 800cf56:	d904      	bls.n	800cf62 <get_fat+0x20>
 800cf58:	693b      	ldr	r3, [r7, #16]
 800cf5a:	699b      	ldr	r3, [r3, #24]
 800cf5c:	683a      	ldr	r2, [r7, #0]
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d302      	bcc.n	800cf68 <get_fat+0x26>
		val = 1;	/* Internal error */
 800cf62:	2301      	movs	r3, #1
 800cf64:	617b      	str	r3, [r7, #20]
 800cf66:	e08f      	b.n	800d088 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cf68:	f04f 33ff 	mov.w	r3, #4294967295
 800cf6c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	2b03      	cmp	r3, #3
 800cf74:	d062      	beq.n	800d03c <get_fat+0xfa>
 800cf76:	2b03      	cmp	r3, #3
 800cf78:	dc7c      	bgt.n	800d074 <get_fat+0x132>
 800cf7a:	2b01      	cmp	r3, #1
 800cf7c:	d002      	beq.n	800cf84 <get_fat+0x42>
 800cf7e:	2b02      	cmp	r3, #2
 800cf80:	d042      	beq.n	800d008 <get_fat+0xc6>
 800cf82:	e077      	b.n	800d074 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	60fb      	str	r3, [r7, #12]
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	085b      	lsrs	r3, r3, #1
 800cf8c:	68fa      	ldr	r2, [r7, #12]
 800cf8e:	4413      	add	r3, r2
 800cf90:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cf92:	693b      	ldr	r3, [r7, #16]
 800cf94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	0a5b      	lsrs	r3, r3, #9
 800cf9a:	4413      	add	r3, r2
 800cf9c:	4619      	mov	r1, r3
 800cf9e:	6938      	ldr	r0, [r7, #16]
 800cfa0:	f7ff ff14 	bl	800cdcc <move_window>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d167      	bne.n	800d07a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	1c5a      	adds	r2, r3, #1
 800cfae:	60fa      	str	r2, [r7, #12]
 800cfb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfb4:	693a      	ldr	r2, [r7, #16]
 800cfb6:	4413      	add	r3, r2
 800cfb8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cfbc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	0a5b      	lsrs	r3, r3, #9
 800cfc6:	4413      	add	r3, r2
 800cfc8:	4619      	mov	r1, r3
 800cfca:	6938      	ldr	r0, [r7, #16]
 800cfcc:	f7ff fefe 	bl	800cdcc <move_window>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d153      	bne.n	800d07e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfdc:	693a      	ldr	r2, [r7, #16]
 800cfde:	4413      	add	r3, r2
 800cfe0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cfe4:	021b      	lsls	r3, r3, #8
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	4313      	orrs	r3, r2
 800cfec:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	f003 0301 	and.w	r3, r3, #1
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d002      	beq.n	800cffe <get_fat+0xbc>
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	091b      	lsrs	r3, r3, #4
 800cffc:	e002      	b.n	800d004 <get_fat+0xc2>
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d004:	617b      	str	r3, [r7, #20]
			break;
 800d006:	e03f      	b.n	800d088 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	0a1b      	lsrs	r3, r3, #8
 800d010:	4413      	add	r3, r2
 800d012:	4619      	mov	r1, r3
 800d014:	6938      	ldr	r0, [r7, #16]
 800d016:	f7ff fed9 	bl	800cdcc <move_window>
 800d01a:	4603      	mov	r3, r0
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d130      	bne.n	800d082 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d020:	693b      	ldr	r3, [r7, #16]
 800d022:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	005b      	lsls	r3, r3, #1
 800d02a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d02e:	4413      	add	r3, r2
 800d030:	4618      	mov	r0, r3
 800d032:	f7ff fc1b 	bl	800c86c <ld_word>
 800d036:	4603      	mov	r3, r0
 800d038:	617b      	str	r3, [r7, #20]
			break;
 800d03a:	e025      	b.n	800d088 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	09db      	lsrs	r3, r3, #7
 800d044:	4413      	add	r3, r2
 800d046:	4619      	mov	r1, r3
 800d048:	6938      	ldr	r0, [r7, #16]
 800d04a:	f7ff febf 	bl	800cdcc <move_window>
 800d04e:	4603      	mov	r3, r0
 800d050:	2b00      	cmp	r3, #0
 800d052:	d118      	bne.n	800d086 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	009b      	lsls	r3, r3, #2
 800d05e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d062:	4413      	add	r3, r2
 800d064:	4618      	mov	r0, r3
 800d066:	f7ff fc19 	bl	800c89c <ld_dword>
 800d06a:	4603      	mov	r3, r0
 800d06c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d070:	617b      	str	r3, [r7, #20]
			break;
 800d072:	e009      	b.n	800d088 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d074:	2301      	movs	r3, #1
 800d076:	617b      	str	r3, [r7, #20]
 800d078:	e006      	b.n	800d088 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d07a:	bf00      	nop
 800d07c:	e004      	b.n	800d088 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d07e:	bf00      	nop
 800d080:	e002      	b.n	800d088 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d082:	bf00      	nop
 800d084:	e000      	b.n	800d088 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d086:	bf00      	nop
		}
	}

	return val;
 800d088:	697b      	ldr	r3, [r7, #20]
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3718      	adds	r7, #24
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}

0800d092 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d092:	b590      	push	{r4, r7, lr}
 800d094:	b089      	sub	sp, #36	; 0x24
 800d096:	af00      	add	r7, sp, #0
 800d098:	60f8      	str	r0, [r7, #12]
 800d09a:	60b9      	str	r1, [r7, #8]
 800d09c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d09e:	2302      	movs	r3, #2
 800d0a0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	2b01      	cmp	r3, #1
 800d0a6:	f240 80d2 	bls.w	800d24e <put_fat+0x1bc>
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	699b      	ldr	r3, [r3, #24]
 800d0ae:	68ba      	ldr	r2, [r7, #8]
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	f080 80cc 	bcs.w	800d24e <put_fat+0x1bc>
		switch (fs->fs_type) {
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	2b03      	cmp	r3, #3
 800d0bc:	f000 8096 	beq.w	800d1ec <put_fat+0x15a>
 800d0c0:	2b03      	cmp	r3, #3
 800d0c2:	f300 80cd 	bgt.w	800d260 <put_fat+0x1ce>
 800d0c6:	2b01      	cmp	r3, #1
 800d0c8:	d002      	beq.n	800d0d0 <put_fat+0x3e>
 800d0ca:	2b02      	cmp	r3, #2
 800d0cc:	d06e      	beq.n	800d1ac <put_fat+0x11a>
 800d0ce:	e0c7      	b.n	800d260 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	61bb      	str	r3, [r7, #24]
 800d0d4:	69bb      	ldr	r3, [r7, #24]
 800d0d6:	085b      	lsrs	r3, r3, #1
 800d0d8:	69ba      	ldr	r2, [r7, #24]
 800d0da:	4413      	add	r3, r2
 800d0dc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d0e2:	69bb      	ldr	r3, [r7, #24]
 800d0e4:	0a5b      	lsrs	r3, r3, #9
 800d0e6:	4413      	add	r3, r2
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	68f8      	ldr	r0, [r7, #12]
 800d0ec:	f7ff fe6e 	bl	800cdcc <move_window>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d0f4:	7ffb      	ldrb	r3, [r7, #31]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	f040 80ab 	bne.w	800d252 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d102:	69bb      	ldr	r3, [r7, #24]
 800d104:	1c59      	adds	r1, r3, #1
 800d106:	61b9      	str	r1, [r7, #24]
 800d108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d10c:	4413      	add	r3, r2
 800d10e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	f003 0301 	and.w	r3, r3, #1
 800d116:	2b00      	cmp	r3, #0
 800d118:	d00d      	beq.n	800d136 <put_fat+0xa4>
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	781b      	ldrb	r3, [r3, #0]
 800d11e:	b25b      	sxtb	r3, r3
 800d120:	f003 030f 	and.w	r3, r3, #15
 800d124:	b25a      	sxtb	r2, r3
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	011b      	lsls	r3, r3, #4
 800d12c:	b25b      	sxtb	r3, r3
 800d12e:	4313      	orrs	r3, r2
 800d130:	b25b      	sxtb	r3, r3
 800d132:	b2db      	uxtb	r3, r3
 800d134:	e001      	b.n	800d13a <put_fat+0xa8>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	b2db      	uxtb	r3, r3
 800d13a:	697a      	ldr	r2, [r7, #20]
 800d13c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	2201      	movs	r2, #1
 800d142:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d148:	69bb      	ldr	r3, [r7, #24]
 800d14a:	0a5b      	lsrs	r3, r3, #9
 800d14c:	4413      	add	r3, r2
 800d14e:	4619      	mov	r1, r3
 800d150:	68f8      	ldr	r0, [r7, #12]
 800d152:	f7ff fe3b 	bl	800cdcc <move_window>
 800d156:	4603      	mov	r3, r0
 800d158:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d15a:	7ffb      	ldrb	r3, [r7, #31]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d17a      	bne.n	800d256 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d166:	69bb      	ldr	r3, [r7, #24]
 800d168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d16c:	4413      	add	r3, r2
 800d16e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	f003 0301 	and.w	r3, r3, #1
 800d176:	2b00      	cmp	r3, #0
 800d178:	d003      	beq.n	800d182 <put_fat+0xf0>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	091b      	lsrs	r3, r3, #4
 800d17e:	b2db      	uxtb	r3, r3
 800d180:	e00e      	b.n	800d1a0 <put_fat+0x10e>
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	781b      	ldrb	r3, [r3, #0]
 800d186:	b25b      	sxtb	r3, r3
 800d188:	f023 030f 	bic.w	r3, r3, #15
 800d18c:	b25a      	sxtb	r2, r3
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	0a1b      	lsrs	r3, r3, #8
 800d192:	b25b      	sxtb	r3, r3
 800d194:	f003 030f 	and.w	r3, r3, #15
 800d198:	b25b      	sxtb	r3, r3
 800d19a:	4313      	orrs	r3, r2
 800d19c:	b25b      	sxtb	r3, r3
 800d19e:	b2db      	uxtb	r3, r3
 800d1a0:	697a      	ldr	r2, [r7, #20]
 800d1a2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	70da      	strb	r2, [r3, #3]
			break;
 800d1aa:	e059      	b.n	800d260 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	0a1b      	lsrs	r3, r3, #8
 800d1b4:	4413      	add	r3, r2
 800d1b6:	4619      	mov	r1, r3
 800d1b8:	68f8      	ldr	r0, [r7, #12]
 800d1ba:	f7ff fe07 	bl	800cdcc <move_window>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d1c2:	7ffb      	ldrb	r3, [r7, #31]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d148      	bne.n	800d25a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	005b      	lsls	r3, r3, #1
 800d1d2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d1d6:	4413      	add	r3, r2
 800d1d8:	687a      	ldr	r2, [r7, #4]
 800d1da:	b292      	uxth	r2, r2
 800d1dc:	4611      	mov	r1, r2
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7ff fb7f 	bl	800c8e2 <st_word>
			fs->wflag = 1;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	2201      	movs	r2, #1
 800d1e8:	70da      	strb	r2, [r3, #3]
			break;
 800d1ea:	e039      	b.n	800d260 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	09db      	lsrs	r3, r3, #7
 800d1f4:	4413      	add	r3, r2
 800d1f6:	4619      	mov	r1, r3
 800d1f8:	68f8      	ldr	r0, [r7, #12]
 800d1fa:	f7ff fde7 	bl	800cdcc <move_window>
 800d1fe:	4603      	mov	r3, r0
 800d200:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d202:	7ffb      	ldrb	r3, [r7, #31]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d12a      	bne.n	800d25e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	009b      	lsls	r3, r3, #2
 800d218:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d21c:	4413      	add	r3, r2
 800d21e:	4618      	mov	r0, r3
 800d220:	f7ff fb3c 	bl	800c89c <ld_dword>
 800d224:	4603      	mov	r3, r0
 800d226:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d22a:	4323      	orrs	r3, r4
 800d22c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	009b      	lsls	r3, r3, #2
 800d238:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d23c:	4413      	add	r3, r2
 800d23e:	6879      	ldr	r1, [r7, #4]
 800d240:	4618      	mov	r0, r3
 800d242:	f7ff fb69 	bl	800c918 <st_dword>
			fs->wflag = 1;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	2201      	movs	r2, #1
 800d24a:	70da      	strb	r2, [r3, #3]
			break;
 800d24c:	e008      	b.n	800d260 <put_fat+0x1ce>
		}
	}
 800d24e:	bf00      	nop
 800d250:	e006      	b.n	800d260 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d252:	bf00      	nop
 800d254:	e004      	b.n	800d260 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d256:	bf00      	nop
 800d258:	e002      	b.n	800d260 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d25a:	bf00      	nop
 800d25c:	e000      	b.n	800d260 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d25e:	bf00      	nop
	return res;
 800d260:	7ffb      	ldrb	r3, [r7, #31]
}
 800d262:	4618      	mov	r0, r3
 800d264:	3724      	adds	r7, #36	; 0x24
 800d266:	46bd      	mov	sp, r7
 800d268:	bd90      	pop	{r4, r7, pc}

0800d26a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d26a:	b580      	push	{r7, lr}
 800d26c:	b088      	sub	sp, #32
 800d26e:	af00      	add	r7, sp, #0
 800d270:	60f8      	str	r0, [r7, #12]
 800d272:	60b9      	str	r1, [r7, #8]
 800d274:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d276:	2300      	movs	r3, #0
 800d278:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	2b01      	cmp	r3, #1
 800d284:	d904      	bls.n	800d290 <remove_chain+0x26>
 800d286:	69bb      	ldr	r3, [r7, #24]
 800d288:	699b      	ldr	r3, [r3, #24]
 800d28a:	68ba      	ldr	r2, [r7, #8]
 800d28c:	429a      	cmp	r2, r3
 800d28e:	d301      	bcc.n	800d294 <remove_chain+0x2a>
 800d290:	2302      	movs	r3, #2
 800d292:	e04b      	b.n	800d32c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d00c      	beq.n	800d2b4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d29a:	f04f 32ff 	mov.w	r2, #4294967295
 800d29e:	6879      	ldr	r1, [r7, #4]
 800d2a0:	69b8      	ldr	r0, [r7, #24]
 800d2a2:	f7ff fef6 	bl	800d092 <put_fat>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d2aa:	7ffb      	ldrb	r3, [r7, #31]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d001      	beq.n	800d2b4 <remove_chain+0x4a>
 800d2b0:	7ffb      	ldrb	r3, [r7, #31]
 800d2b2:	e03b      	b.n	800d32c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d2b4:	68b9      	ldr	r1, [r7, #8]
 800d2b6:	68f8      	ldr	r0, [r7, #12]
 800d2b8:	f7ff fe43 	bl	800cf42 <get_fat>
 800d2bc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d031      	beq.n	800d328 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	2b01      	cmp	r3, #1
 800d2c8:	d101      	bne.n	800d2ce <remove_chain+0x64>
 800d2ca:	2302      	movs	r3, #2
 800d2cc:	e02e      	b.n	800d32c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2d4:	d101      	bne.n	800d2da <remove_chain+0x70>
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	e028      	b.n	800d32c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d2da:	2200      	movs	r2, #0
 800d2dc:	68b9      	ldr	r1, [r7, #8]
 800d2de:	69b8      	ldr	r0, [r7, #24]
 800d2e0:	f7ff fed7 	bl	800d092 <put_fat>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d2e8:	7ffb      	ldrb	r3, [r7, #31]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d001      	beq.n	800d2f2 <remove_chain+0x88>
 800d2ee:	7ffb      	ldrb	r3, [r7, #31]
 800d2f0:	e01c      	b.n	800d32c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d2f2:	69bb      	ldr	r3, [r7, #24]
 800d2f4:	695a      	ldr	r2, [r3, #20]
 800d2f6:	69bb      	ldr	r3, [r7, #24]
 800d2f8:	699b      	ldr	r3, [r3, #24]
 800d2fa:	3b02      	subs	r3, #2
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d20b      	bcs.n	800d318 <remove_chain+0xae>
			fs->free_clst++;
 800d300:	69bb      	ldr	r3, [r7, #24]
 800d302:	695b      	ldr	r3, [r3, #20]
 800d304:	1c5a      	adds	r2, r3, #1
 800d306:	69bb      	ldr	r3, [r7, #24]
 800d308:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d30a:	69bb      	ldr	r3, [r7, #24]
 800d30c:	791b      	ldrb	r3, [r3, #4]
 800d30e:	f043 0301 	orr.w	r3, r3, #1
 800d312:	b2da      	uxtb	r2, r3
 800d314:	69bb      	ldr	r3, [r7, #24]
 800d316:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d31c:	69bb      	ldr	r3, [r7, #24]
 800d31e:	699b      	ldr	r3, [r3, #24]
 800d320:	68ba      	ldr	r2, [r7, #8]
 800d322:	429a      	cmp	r2, r3
 800d324:	d3c6      	bcc.n	800d2b4 <remove_chain+0x4a>
 800d326:	e000      	b.n	800d32a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d328:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d32a:	2300      	movs	r3, #0
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3720      	adds	r7, #32
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}

0800d334 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b088      	sub	sp, #32
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
 800d33c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d10d      	bne.n	800d366 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	691b      	ldr	r3, [r3, #16]
 800d34e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d350:	69bb      	ldr	r3, [r7, #24]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d004      	beq.n	800d360 <create_chain+0x2c>
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	699b      	ldr	r3, [r3, #24]
 800d35a:	69ba      	ldr	r2, [r7, #24]
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d31b      	bcc.n	800d398 <create_chain+0x64>
 800d360:	2301      	movs	r3, #1
 800d362:	61bb      	str	r3, [r7, #24]
 800d364:	e018      	b.n	800d398 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d366:	6839      	ldr	r1, [r7, #0]
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f7ff fdea 	bl	800cf42 <get_fat>
 800d36e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2b01      	cmp	r3, #1
 800d374:	d801      	bhi.n	800d37a <create_chain+0x46>
 800d376:	2301      	movs	r3, #1
 800d378:	e070      	b.n	800d45c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d380:	d101      	bne.n	800d386 <create_chain+0x52>
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	e06a      	b.n	800d45c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	699b      	ldr	r3, [r3, #24]
 800d38a:	68fa      	ldr	r2, [r7, #12]
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d201      	bcs.n	800d394 <create_chain+0x60>
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	e063      	b.n	800d45c <create_chain+0x128>
		scl = clst;
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d398:	69bb      	ldr	r3, [r7, #24]
 800d39a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d39c:	69fb      	ldr	r3, [r7, #28]
 800d39e:	3301      	adds	r3, #1
 800d3a0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	699b      	ldr	r3, [r3, #24]
 800d3a6:	69fa      	ldr	r2, [r7, #28]
 800d3a8:	429a      	cmp	r2, r3
 800d3aa:	d307      	bcc.n	800d3bc <create_chain+0x88>
				ncl = 2;
 800d3ac:	2302      	movs	r3, #2
 800d3ae:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d3b0:	69fa      	ldr	r2, [r7, #28]
 800d3b2:	69bb      	ldr	r3, [r7, #24]
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d901      	bls.n	800d3bc <create_chain+0x88>
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	e04f      	b.n	800d45c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d3bc:	69f9      	ldr	r1, [r7, #28]
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f7ff fdbf 	bl	800cf42 <get_fat>
 800d3c4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d00e      	beq.n	800d3ea <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	2b01      	cmp	r3, #1
 800d3d0:	d003      	beq.n	800d3da <create_chain+0xa6>
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3d8:	d101      	bne.n	800d3de <create_chain+0xaa>
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	e03e      	b.n	800d45c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d3de:	69fa      	ldr	r2, [r7, #28]
 800d3e0:	69bb      	ldr	r3, [r7, #24]
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	d1da      	bne.n	800d39c <create_chain+0x68>
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	e038      	b.n	800d45c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d3ea:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d3ec:	f04f 32ff 	mov.w	r2, #4294967295
 800d3f0:	69f9      	ldr	r1, [r7, #28]
 800d3f2:	6938      	ldr	r0, [r7, #16]
 800d3f4:	f7ff fe4d 	bl	800d092 <put_fat>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d3fc:	7dfb      	ldrb	r3, [r7, #23]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d109      	bne.n	800d416 <create_chain+0xe2>
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d006      	beq.n	800d416 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d408:	69fa      	ldr	r2, [r7, #28]
 800d40a:	6839      	ldr	r1, [r7, #0]
 800d40c:	6938      	ldr	r0, [r7, #16]
 800d40e:	f7ff fe40 	bl	800d092 <put_fat>
 800d412:	4603      	mov	r3, r0
 800d414:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d416:	7dfb      	ldrb	r3, [r7, #23]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d116      	bne.n	800d44a <create_chain+0x116>
		fs->last_clst = ncl;
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	69fa      	ldr	r2, [r7, #28]
 800d420:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	695a      	ldr	r2, [r3, #20]
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	699b      	ldr	r3, [r3, #24]
 800d42a:	3b02      	subs	r3, #2
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d804      	bhi.n	800d43a <create_chain+0x106>
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	695b      	ldr	r3, [r3, #20]
 800d434:	1e5a      	subs	r2, r3, #1
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	791b      	ldrb	r3, [r3, #4]
 800d43e:	f043 0301 	orr.w	r3, r3, #1
 800d442:	b2da      	uxtb	r2, r3
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	711a      	strb	r2, [r3, #4]
 800d448:	e007      	b.n	800d45a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d44a:	7dfb      	ldrb	r3, [r7, #23]
 800d44c:	2b01      	cmp	r3, #1
 800d44e:	d102      	bne.n	800d456 <create_chain+0x122>
 800d450:	f04f 33ff 	mov.w	r3, #4294967295
 800d454:	e000      	b.n	800d458 <create_chain+0x124>
 800d456:	2301      	movs	r3, #1
 800d458:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d45a:	69fb      	ldr	r3, [r7, #28]
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3720      	adds	r7, #32
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}

0800d464 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d464:	b480      	push	{r7}
 800d466:	b087      	sub	sp, #28
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d478:	3304      	adds	r3, #4
 800d47a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	0a5b      	lsrs	r3, r3, #9
 800d480:	68fa      	ldr	r2, [r7, #12]
 800d482:	8952      	ldrh	r2, [r2, #10]
 800d484:	fbb3 f3f2 	udiv	r3, r3, r2
 800d488:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	1d1a      	adds	r2, r3, #4
 800d48e:	613a      	str	r2, [r7, #16]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d101      	bne.n	800d49e <clmt_clust+0x3a>
 800d49a:	2300      	movs	r3, #0
 800d49c:	e010      	b.n	800d4c0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d49e:	697a      	ldr	r2, [r7, #20]
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d307      	bcc.n	800d4b6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d4a6:	697a      	ldr	r2, [r7, #20]
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	1ad3      	subs	r3, r2, r3
 800d4ac:	617b      	str	r3, [r7, #20]
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	3304      	adds	r3, #4
 800d4b2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d4b4:	e7e9      	b.n	800d48a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d4b6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d4b8:	693b      	ldr	r3, [r7, #16]
 800d4ba:	681a      	ldr	r2, [r3, #0]
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	4413      	add	r3, r2
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	371c      	adds	r7, #28
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr

0800d4cc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b086      	sub	sp, #24
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d4e2:	d204      	bcs.n	800d4ee <dir_sdi+0x22>
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	f003 031f 	and.w	r3, r3, #31
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d001      	beq.n	800d4f2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d4ee:	2302      	movs	r3, #2
 800d4f0:	e063      	b.n	800d5ba <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	683a      	ldr	r2, [r7, #0]
 800d4f6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	689b      	ldr	r3, [r3, #8]
 800d4fc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d106      	bne.n	800d512 <dir_sdi+0x46>
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	781b      	ldrb	r3, [r3, #0]
 800d508:	2b02      	cmp	r3, #2
 800d50a:	d902      	bls.n	800d512 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d510:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d10c      	bne.n	800d532 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	095b      	lsrs	r3, r3, #5
 800d51c:	693a      	ldr	r2, [r7, #16]
 800d51e:	8912      	ldrh	r2, [r2, #8]
 800d520:	4293      	cmp	r3, r2
 800d522:	d301      	bcc.n	800d528 <dir_sdi+0x5c>
 800d524:	2302      	movs	r3, #2
 800d526:	e048      	b.n	800d5ba <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	61da      	str	r2, [r3, #28]
 800d530:	e029      	b.n	800d586 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	895b      	ldrh	r3, [r3, #10]
 800d536:	025b      	lsls	r3, r3, #9
 800d538:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d53a:	e019      	b.n	800d570 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6979      	ldr	r1, [r7, #20]
 800d540:	4618      	mov	r0, r3
 800d542:	f7ff fcfe 	bl	800cf42 <get_fat>
 800d546:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d54e:	d101      	bne.n	800d554 <dir_sdi+0x88>
 800d550:	2301      	movs	r3, #1
 800d552:	e032      	b.n	800d5ba <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	2b01      	cmp	r3, #1
 800d558:	d904      	bls.n	800d564 <dir_sdi+0x98>
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	699b      	ldr	r3, [r3, #24]
 800d55e:	697a      	ldr	r2, [r7, #20]
 800d560:	429a      	cmp	r2, r3
 800d562:	d301      	bcc.n	800d568 <dir_sdi+0x9c>
 800d564:	2302      	movs	r3, #2
 800d566:	e028      	b.n	800d5ba <dir_sdi+0xee>
			ofs -= csz;
 800d568:	683a      	ldr	r2, [r7, #0]
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	1ad3      	subs	r3, r2, r3
 800d56e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d570:	683a      	ldr	r2, [r7, #0]
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	429a      	cmp	r2, r3
 800d576:	d2e1      	bcs.n	800d53c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d578:	6979      	ldr	r1, [r7, #20]
 800d57a:	6938      	ldr	r0, [r7, #16]
 800d57c:	f7ff fcc2 	bl	800cf04 <clust2sect>
 800d580:	4602      	mov	r2, r0
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	697a      	ldr	r2, [r7, #20]
 800d58a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	69db      	ldr	r3, [r3, #28]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d101      	bne.n	800d598 <dir_sdi+0xcc>
 800d594:	2302      	movs	r3, #2
 800d596:	e010      	b.n	800d5ba <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	69da      	ldr	r2, [r3, #28]
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	0a5b      	lsrs	r3, r3, #9
 800d5a0:	441a      	add	r2, r3
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d5a6:	693b      	ldr	r3, [r7, #16]
 800d5a8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5b2:	441a      	add	r2, r3
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d5b8:	2300      	movs	r3, #0
}
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	3718      	adds	r7, #24
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}

0800d5c2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d5c2:	b580      	push	{r7, lr}
 800d5c4:	b086      	sub	sp, #24
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	6078      	str	r0, [r7, #4]
 800d5ca:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	695b      	ldr	r3, [r3, #20]
 800d5d6:	3320      	adds	r3, #32
 800d5d8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	69db      	ldr	r3, [r3, #28]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d003      	beq.n	800d5ea <dir_next+0x28>
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d5e8:	d301      	bcc.n	800d5ee <dir_next+0x2c>
 800d5ea:	2304      	movs	r3, #4
 800d5ec:	e0aa      	b.n	800d744 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	f040 8098 	bne.w	800d72a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	69db      	ldr	r3, [r3, #28]
 800d5fe:	1c5a      	adds	r2, r3, #1
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	699b      	ldr	r3, [r3, #24]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d10b      	bne.n	800d624 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	095b      	lsrs	r3, r3, #5
 800d610:	68fa      	ldr	r2, [r7, #12]
 800d612:	8912      	ldrh	r2, [r2, #8]
 800d614:	4293      	cmp	r3, r2
 800d616:	f0c0 8088 	bcc.w	800d72a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2200      	movs	r2, #0
 800d61e:	61da      	str	r2, [r3, #28]
 800d620:	2304      	movs	r3, #4
 800d622:	e08f      	b.n	800d744 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	0a5b      	lsrs	r3, r3, #9
 800d628:	68fa      	ldr	r2, [r7, #12]
 800d62a:	8952      	ldrh	r2, [r2, #10]
 800d62c:	3a01      	subs	r2, #1
 800d62e:	4013      	ands	r3, r2
 800d630:	2b00      	cmp	r3, #0
 800d632:	d17a      	bne.n	800d72a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d634:	687a      	ldr	r2, [r7, #4]
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	699b      	ldr	r3, [r3, #24]
 800d63a:	4619      	mov	r1, r3
 800d63c:	4610      	mov	r0, r2
 800d63e:	f7ff fc80 	bl	800cf42 <get_fat>
 800d642:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	2b01      	cmp	r3, #1
 800d648:	d801      	bhi.n	800d64e <dir_next+0x8c>
 800d64a:	2302      	movs	r3, #2
 800d64c:	e07a      	b.n	800d744 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d654:	d101      	bne.n	800d65a <dir_next+0x98>
 800d656:	2301      	movs	r3, #1
 800d658:	e074      	b.n	800d744 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	699b      	ldr	r3, [r3, #24]
 800d65e:	697a      	ldr	r2, [r7, #20]
 800d660:	429a      	cmp	r2, r3
 800d662:	d358      	bcc.n	800d716 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d104      	bne.n	800d674 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2200      	movs	r2, #0
 800d66e:	61da      	str	r2, [r3, #28]
 800d670:	2304      	movs	r3, #4
 800d672:	e067      	b.n	800d744 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d674:	687a      	ldr	r2, [r7, #4]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	699b      	ldr	r3, [r3, #24]
 800d67a:	4619      	mov	r1, r3
 800d67c:	4610      	mov	r0, r2
 800d67e:	f7ff fe59 	bl	800d334 <create_chain>
 800d682:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d101      	bne.n	800d68e <dir_next+0xcc>
 800d68a:	2307      	movs	r3, #7
 800d68c:	e05a      	b.n	800d744 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	2b01      	cmp	r3, #1
 800d692:	d101      	bne.n	800d698 <dir_next+0xd6>
 800d694:	2302      	movs	r3, #2
 800d696:	e055      	b.n	800d744 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d69e:	d101      	bne.n	800d6a4 <dir_next+0xe2>
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	e04f      	b.n	800d744 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d6a4:	68f8      	ldr	r0, [r7, #12]
 800d6a6:	f7ff fb4d 	bl	800cd44 <sync_window>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d001      	beq.n	800d6b4 <dir_next+0xf2>
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	e047      	b.n	800d744 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	3334      	adds	r3, #52	; 0x34
 800d6b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d6bc:	2100      	movs	r1, #0
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f7ff f977 	bl	800c9b2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	613b      	str	r3, [r7, #16]
 800d6c8:	6979      	ldr	r1, [r7, #20]
 800d6ca:	68f8      	ldr	r0, [r7, #12]
 800d6cc:	f7ff fc1a 	bl	800cf04 <clust2sect>
 800d6d0:	4602      	mov	r2, r0
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	631a      	str	r2, [r3, #48]	; 0x30
 800d6d6:	e012      	b.n	800d6fe <dir_next+0x13c>
						fs->wflag = 1;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	2201      	movs	r2, #1
 800d6dc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d6de:	68f8      	ldr	r0, [r7, #12]
 800d6e0:	f7ff fb30 	bl	800cd44 <sync_window>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d001      	beq.n	800d6ee <dir_next+0x12c>
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	e02a      	b.n	800d744 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	3301      	adds	r3, #1
 800d6f2:	613b      	str	r3, [r7, #16]
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6f8:	1c5a      	adds	r2, r3, #1
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	631a      	str	r2, [r3, #48]	; 0x30
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	895b      	ldrh	r3, [r3, #10]
 800d702:	461a      	mov	r2, r3
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	4293      	cmp	r3, r2
 800d708:	d3e6      	bcc.n	800d6d8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	1ad2      	subs	r2, r2, r3
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	697a      	ldr	r2, [r7, #20]
 800d71a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d71c:	6979      	ldr	r1, [r7, #20]
 800d71e:	68f8      	ldr	r0, [r7, #12]
 800d720:	f7ff fbf0 	bl	800cf04 <clust2sect>
 800d724:	4602      	mov	r2, r0
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	68ba      	ldr	r2, [r7, #8]
 800d72e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d73c:	441a      	add	r2, r3
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d742:	2300      	movs	r3, #0
}
 800d744:	4618      	mov	r0, r3
 800d746:	3718      	adds	r7, #24
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b086      	sub	sp, #24
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
 800d754:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d75c:	2100      	movs	r1, #0
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f7ff feb4 	bl	800d4cc <dir_sdi>
 800d764:	4603      	mov	r3, r0
 800d766:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d768:	7dfb      	ldrb	r3, [r7, #23]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d12b      	bne.n	800d7c6 <dir_alloc+0x7a>
		n = 0;
 800d76e:	2300      	movs	r3, #0
 800d770:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	69db      	ldr	r3, [r3, #28]
 800d776:	4619      	mov	r1, r3
 800d778:	68f8      	ldr	r0, [r7, #12]
 800d77a:	f7ff fb27 	bl	800cdcc <move_window>
 800d77e:	4603      	mov	r3, r0
 800d780:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d782:	7dfb      	ldrb	r3, [r7, #23]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d11d      	bne.n	800d7c4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6a1b      	ldr	r3, [r3, #32]
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	2be5      	cmp	r3, #229	; 0xe5
 800d790:	d004      	beq.n	800d79c <dir_alloc+0x50>
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6a1b      	ldr	r3, [r3, #32]
 800d796:	781b      	ldrb	r3, [r3, #0]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d107      	bne.n	800d7ac <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	3301      	adds	r3, #1
 800d7a0:	613b      	str	r3, [r7, #16]
 800d7a2:	693a      	ldr	r2, [r7, #16]
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	d102      	bne.n	800d7b0 <dir_alloc+0x64>
 800d7aa:	e00c      	b.n	800d7c6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d7b0:	2101      	movs	r1, #1
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f7ff ff05 	bl	800d5c2 <dir_next>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d7bc:	7dfb      	ldrb	r3, [r7, #23]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d0d7      	beq.n	800d772 <dir_alloc+0x26>
 800d7c2:	e000      	b.n	800d7c6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d7c4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d7c6:	7dfb      	ldrb	r3, [r7, #23]
 800d7c8:	2b04      	cmp	r3, #4
 800d7ca:	d101      	bne.n	800d7d0 <dir_alloc+0x84>
 800d7cc:	2307      	movs	r3, #7
 800d7ce:	75fb      	strb	r3, [r7, #23]
	return res;
 800d7d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	3718      	adds	r7, #24
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}

0800d7da <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d7da:	b580      	push	{r7, lr}
 800d7dc:	b084      	sub	sp, #16
 800d7de:	af00      	add	r7, sp, #0
 800d7e0:	6078      	str	r0, [r7, #4]
 800d7e2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	331a      	adds	r3, #26
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7ff f83f 	bl	800c86c <ld_word>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	781b      	ldrb	r3, [r3, #0]
 800d7f6:	2b03      	cmp	r3, #3
 800d7f8:	d109      	bne.n	800d80e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	3314      	adds	r3, #20
 800d7fe:	4618      	mov	r0, r3
 800d800:	f7ff f834 	bl	800c86c <ld_word>
 800d804:	4603      	mov	r3, r0
 800d806:	041b      	lsls	r3, r3, #16
 800d808:	68fa      	ldr	r2, [r7, #12]
 800d80a:	4313      	orrs	r3, r2
 800d80c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d80e:	68fb      	ldr	r3, [r7, #12]
}
 800d810:	4618      	mov	r0, r3
 800d812:	3710      	adds	r7, #16
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b084      	sub	sp, #16
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	60f8      	str	r0, [r7, #12]
 800d820:	60b9      	str	r1, [r7, #8]
 800d822:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	331a      	adds	r3, #26
 800d828:	687a      	ldr	r2, [r7, #4]
 800d82a:	b292      	uxth	r2, r2
 800d82c:	4611      	mov	r1, r2
 800d82e:	4618      	mov	r0, r3
 800d830:	f7ff f857 	bl	800c8e2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	781b      	ldrb	r3, [r3, #0]
 800d838:	2b03      	cmp	r3, #3
 800d83a:	d109      	bne.n	800d850 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	f103 0214 	add.w	r2, r3, #20
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	0c1b      	lsrs	r3, r3, #16
 800d846:	b29b      	uxth	r3, r3
 800d848:	4619      	mov	r1, r3
 800d84a:	4610      	mov	r0, r2
 800d84c:	f7ff f849 	bl	800c8e2 <st_word>
	}
}
 800d850:	bf00      	nop
 800d852:	3710      	adds	r7, #16
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}

0800d858 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d858:	b590      	push	{r4, r7, lr}
 800d85a:	b087      	sub	sp, #28
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	331a      	adds	r3, #26
 800d866:	4618      	mov	r0, r3
 800d868:	f7ff f800 	bl	800c86c <ld_word>
 800d86c:	4603      	mov	r3, r0
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d001      	beq.n	800d876 <cmp_lfn+0x1e>
 800d872:	2300      	movs	r3, #0
 800d874:	e059      	b.n	800d92a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	781b      	ldrb	r3, [r3, #0]
 800d87a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d87e:	1e5a      	subs	r2, r3, #1
 800d880:	4613      	mov	r3, r2
 800d882:	005b      	lsls	r3, r3, #1
 800d884:	4413      	add	r3, r2
 800d886:	009b      	lsls	r3, r3, #2
 800d888:	4413      	add	r3, r2
 800d88a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d88c:	2301      	movs	r3, #1
 800d88e:	81fb      	strh	r3, [r7, #14]
 800d890:	2300      	movs	r3, #0
 800d892:	613b      	str	r3, [r7, #16]
 800d894:	e033      	b.n	800d8fe <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d896:	4a27      	ldr	r2, [pc, #156]	; (800d934 <cmp_lfn+0xdc>)
 800d898:	693b      	ldr	r3, [r7, #16]
 800d89a:	4413      	add	r3, r2
 800d89c:	781b      	ldrb	r3, [r3, #0]
 800d89e:	461a      	mov	r2, r3
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	4413      	add	r3, r2
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f7fe ffe1 	bl	800c86c <ld_word>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d8ae:	89fb      	ldrh	r3, [r7, #14]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d01a      	beq.n	800d8ea <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d8b4:	697b      	ldr	r3, [r7, #20]
 800d8b6:	2bfe      	cmp	r3, #254	; 0xfe
 800d8b8:	d812      	bhi.n	800d8e0 <cmp_lfn+0x88>
 800d8ba:	89bb      	ldrh	r3, [r7, #12]
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f002 f9a3 	bl	800fc08 <ff_wtoupper>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	461c      	mov	r4, r3
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	1c5a      	adds	r2, r3, #1
 800d8ca:	617a      	str	r2, [r7, #20]
 800d8cc:	005b      	lsls	r3, r3, #1
 800d8ce:	687a      	ldr	r2, [r7, #4]
 800d8d0:	4413      	add	r3, r2
 800d8d2:	881b      	ldrh	r3, [r3, #0]
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f002 f997 	bl	800fc08 <ff_wtoupper>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	429c      	cmp	r4, r3
 800d8de:	d001      	beq.n	800d8e4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	e022      	b.n	800d92a <cmp_lfn+0xd2>
			}
			wc = uc;
 800d8e4:	89bb      	ldrh	r3, [r7, #12]
 800d8e6:	81fb      	strh	r3, [r7, #14]
 800d8e8:	e006      	b.n	800d8f8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d8ea:	89bb      	ldrh	r3, [r7, #12]
 800d8ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	d001      	beq.n	800d8f8 <cmp_lfn+0xa0>
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	e018      	b.n	800d92a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	613b      	str	r3, [r7, #16]
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	2b0c      	cmp	r3, #12
 800d902:	d9c8      	bls.n	800d896 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	781b      	ldrb	r3, [r3, #0]
 800d908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d00b      	beq.n	800d928 <cmp_lfn+0xd0>
 800d910:	89fb      	ldrh	r3, [r7, #14]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d008      	beq.n	800d928 <cmp_lfn+0xd0>
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	005b      	lsls	r3, r3, #1
 800d91a:	687a      	ldr	r2, [r7, #4]
 800d91c:	4413      	add	r3, r2
 800d91e:	881b      	ldrh	r3, [r3, #0]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d001      	beq.n	800d928 <cmp_lfn+0xd0>
 800d924:	2300      	movs	r3, #0
 800d926:	e000      	b.n	800d92a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d928:	2301      	movs	r3, #1
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	371c      	adds	r7, #28
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd90      	pop	{r4, r7, pc}
 800d932:	bf00      	nop
 800d934:	08010790 	.word	0x08010790

0800d938 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b086      	sub	sp, #24
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	331a      	adds	r3, #26
 800d946:	4618      	mov	r0, r3
 800d948:	f7fe ff90 	bl	800c86c <ld_word>
 800d94c:	4603      	mov	r3, r0
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d001      	beq.n	800d956 <pick_lfn+0x1e>
 800d952:	2300      	movs	r3, #0
 800d954:	e04d      	b.n	800d9f2 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d95e:	1e5a      	subs	r2, r3, #1
 800d960:	4613      	mov	r3, r2
 800d962:	005b      	lsls	r3, r3, #1
 800d964:	4413      	add	r3, r2
 800d966:	009b      	lsls	r3, r3, #2
 800d968:	4413      	add	r3, r2
 800d96a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d96c:	2301      	movs	r3, #1
 800d96e:	81fb      	strh	r3, [r7, #14]
 800d970:	2300      	movs	r3, #0
 800d972:	613b      	str	r3, [r7, #16]
 800d974:	e028      	b.n	800d9c8 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d976:	4a21      	ldr	r2, [pc, #132]	; (800d9fc <pick_lfn+0xc4>)
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	4413      	add	r3, r2
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	461a      	mov	r2, r3
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	4413      	add	r3, r2
 800d984:	4618      	mov	r0, r3
 800d986:	f7fe ff71 	bl	800c86c <ld_word>
 800d98a:	4603      	mov	r3, r0
 800d98c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d98e:	89fb      	ldrh	r3, [r7, #14]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d00f      	beq.n	800d9b4 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	2bfe      	cmp	r3, #254	; 0xfe
 800d998:	d901      	bls.n	800d99e <pick_lfn+0x66>
 800d99a:	2300      	movs	r3, #0
 800d99c:	e029      	b.n	800d9f2 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d99e:	89bb      	ldrh	r3, [r7, #12]
 800d9a0:	81fb      	strh	r3, [r7, #14]
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	1c5a      	adds	r2, r3, #1
 800d9a6:	617a      	str	r2, [r7, #20]
 800d9a8:	005b      	lsls	r3, r3, #1
 800d9aa:	687a      	ldr	r2, [r7, #4]
 800d9ac:	4413      	add	r3, r2
 800d9ae:	89fa      	ldrh	r2, [r7, #14]
 800d9b0:	801a      	strh	r2, [r3, #0]
 800d9b2:	e006      	b.n	800d9c2 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d9b4:	89bb      	ldrh	r3, [r7, #12]
 800d9b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d001      	beq.n	800d9c2 <pick_lfn+0x8a>
 800d9be:	2300      	movs	r3, #0
 800d9c0:	e017      	b.n	800d9f2 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	3301      	adds	r3, #1
 800d9c6:	613b      	str	r3, [r7, #16]
 800d9c8:	693b      	ldr	r3, [r7, #16]
 800d9ca:	2b0c      	cmp	r3, #12
 800d9cc:	d9d3      	bls.n	800d976 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	781b      	ldrb	r3, [r3, #0]
 800d9d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d00a      	beq.n	800d9f0 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	2bfe      	cmp	r3, #254	; 0xfe
 800d9de:	d901      	bls.n	800d9e4 <pick_lfn+0xac>
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	e006      	b.n	800d9f2 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	005b      	lsls	r3, r3, #1
 800d9e8:	687a      	ldr	r2, [r7, #4]
 800d9ea:	4413      	add	r3, r2
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800d9f0:	2301      	movs	r3, #1
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3718      	adds	r7, #24
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}
 800d9fa:	bf00      	nop
 800d9fc:	08010790 	.word	0x08010790

0800da00 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b088      	sub	sp, #32
 800da04:	af00      	add	r7, sp, #0
 800da06:	60f8      	str	r0, [r7, #12]
 800da08:	60b9      	str	r1, [r7, #8]
 800da0a:	4611      	mov	r1, r2
 800da0c:	461a      	mov	r2, r3
 800da0e:	460b      	mov	r3, r1
 800da10:	71fb      	strb	r3, [r7, #7]
 800da12:	4613      	mov	r3, r2
 800da14:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	330d      	adds	r3, #13
 800da1a:	79ba      	ldrb	r2, [r7, #6]
 800da1c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	330b      	adds	r3, #11
 800da22:	220f      	movs	r2, #15
 800da24:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	330c      	adds	r3, #12
 800da2a:	2200      	movs	r2, #0
 800da2c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	331a      	adds	r3, #26
 800da32:	2100      	movs	r1, #0
 800da34:	4618      	mov	r0, r3
 800da36:	f7fe ff54 	bl	800c8e2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800da3a:	79fb      	ldrb	r3, [r7, #7]
 800da3c:	1e5a      	subs	r2, r3, #1
 800da3e:	4613      	mov	r3, r2
 800da40:	005b      	lsls	r3, r3, #1
 800da42:	4413      	add	r3, r2
 800da44:	009b      	lsls	r3, r3, #2
 800da46:	4413      	add	r3, r2
 800da48:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800da4a:	2300      	movs	r3, #0
 800da4c:	82fb      	strh	r3, [r7, #22]
 800da4e:	2300      	movs	r3, #0
 800da50:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800da52:	8afb      	ldrh	r3, [r7, #22]
 800da54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da58:	4293      	cmp	r3, r2
 800da5a:	d007      	beq.n	800da6c <put_lfn+0x6c>
 800da5c:	69fb      	ldr	r3, [r7, #28]
 800da5e:	1c5a      	adds	r2, r3, #1
 800da60:	61fa      	str	r2, [r7, #28]
 800da62:	005b      	lsls	r3, r3, #1
 800da64:	68fa      	ldr	r2, [r7, #12]
 800da66:	4413      	add	r3, r2
 800da68:	881b      	ldrh	r3, [r3, #0]
 800da6a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800da6c:	4a17      	ldr	r2, [pc, #92]	; (800dacc <put_lfn+0xcc>)
 800da6e:	69bb      	ldr	r3, [r7, #24]
 800da70:	4413      	add	r3, r2
 800da72:	781b      	ldrb	r3, [r3, #0]
 800da74:	461a      	mov	r2, r3
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	4413      	add	r3, r2
 800da7a:	8afa      	ldrh	r2, [r7, #22]
 800da7c:	4611      	mov	r1, r2
 800da7e:	4618      	mov	r0, r3
 800da80:	f7fe ff2f 	bl	800c8e2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800da84:	8afb      	ldrh	r3, [r7, #22]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d102      	bne.n	800da90 <put_lfn+0x90>
 800da8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800da8e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800da90:	69bb      	ldr	r3, [r7, #24]
 800da92:	3301      	adds	r3, #1
 800da94:	61bb      	str	r3, [r7, #24]
 800da96:	69bb      	ldr	r3, [r7, #24]
 800da98:	2b0c      	cmp	r3, #12
 800da9a:	d9da      	bls.n	800da52 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800da9c:	8afb      	ldrh	r3, [r7, #22]
 800da9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d006      	beq.n	800dab4 <put_lfn+0xb4>
 800daa6:	69fb      	ldr	r3, [r7, #28]
 800daa8:	005b      	lsls	r3, r3, #1
 800daaa:	68fa      	ldr	r2, [r7, #12]
 800daac:	4413      	add	r3, r2
 800daae:	881b      	ldrh	r3, [r3, #0]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d103      	bne.n	800dabc <put_lfn+0xbc>
 800dab4:	79fb      	ldrb	r3, [r7, #7]
 800dab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800daba:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	79fa      	ldrb	r2, [r7, #7]
 800dac0:	701a      	strb	r2, [r3, #0]
}
 800dac2:	bf00      	nop
 800dac4:	3720      	adds	r7, #32
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	bf00      	nop
 800dacc:	08010790 	.word	0x08010790

0800dad0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b08c      	sub	sp, #48	; 0x30
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	60f8      	str	r0, [r7, #12]
 800dad8:	60b9      	str	r1, [r7, #8]
 800dada:	607a      	str	r2, [r7, #4]
 800dadc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800dade:	220b      	movs	r2, #11
 800dae0:	68b9      	ldr	r1, [r7, #8]
 800dae2:	68f8      	ldr	r0, [r7, #12]
 800dae4:	f7fe ff44 	bl	800c970 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	2b05      	cmp	r3, #5
 800daec:	d92b      	bls.n	800db46 <gen_numname+0x76>
		sr = seq;
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800daf2:	e022      	b.n	800db3a <gen_numname+0x6a>
			wc = *lfn++;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	1c9a      	adds	r2, r3, #2
 800daf8:	607a      	str	r2, [r7, #4]
 800dafa:	881b      	ldrh	r3, [r3, #0]
 800dafc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800dafe:	2300      	movs	r3, #0
 800db00:	62bb      	str	r3, [r7, #40]	; 0x28
 800db02:	e017      	b.n	800db34 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800db04:	69fb      	ldr	r3, [r7, #28]
 800db06:	005a      	lsls	r2, r3, #1
 800db08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db0a:	f003 0301 	and.w	r3, r3, #1
 800db0e:	4413      	add	r3, r2
 800db10:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800db12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db14:	085b      	lsrs	r3, r3, #1
 800db16:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800db18:	69fb      	ldr	r3, [r7, #28]
 800db1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d005      	beq.n	800db2e <gen_numname+0x5e>
 800db22:	69fb      	ldr	r3, [r7, #28]
 800db24:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800db28:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800db2c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800db2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db30:	3301      	adds	r3, #1
 800db32:	62bb      	str	r3, [r7, #40]	; 0x28
 800db34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db36:	2b0f      	cmp	r3, #15
 800db38:	d9e4      	bls.n	800db04 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	881b      	ldrh	r3, [r3, #0]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d1d8      	bne.n	800daf4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800db42:	69fb      	ldr	r3, [r7, #28]
 800db44:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800db46:	2307      	movs	r3, #7
 800db48:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	b2db      	uxtb	r3, r3
 800db4e:	f003 030f 	and.w	r3, r3, #15
 800db52:	b2db      	uxtb	r3, r3
 800db54:	3330      	adds	r3, #48	; 0x30
 800db56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800db5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db5e:	2b39      	cmp	r3, #57	; 0x39
 800db60:	d904      	bls.n	800db6c <gen_numname+0x9c>
 800db62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db66:	3307      	adds	r3, #7
 800db68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800db6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db6e:	1e5a      	subs	r2, r3, #1
 800db70:	62ba      	str	r2, [r7, #40]	; 0x28
 800db72:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800db76:	4413      	add	r3, r2
 800db78:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800db7c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	091b      	lsrs	r3, r3, #4
 800db84:	603b      	str	r3, [r7, #0]
	} while (seq);
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d1de      	bne.n	800db4a <gen_numname+0x7a>
	ns[i] = '~';
 800db8c:	f107 0214 	add.w	r2, r7, #20
 800db90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db92:	4413      	add	r3, r2
 800db94:	227e      	movs	r2, #126	; 0x7e
 800db96:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800db98:	2300      	movs	r3, #0
 800db9a:	627b      	str	r3, [r7, #36]	; 0x24
 800db9c:	e002      	b.n	800dba4 <gen_numname+0xd4>
 800db9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba0:	3301      	adds	r3, #1
 800dba2:	627b      	str	r3, [r7, #36]	; 0x24
 800dba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	d205      	bcs.n	800dbb8 <gen_numname+0xe8>
 800dbac:	68fa      	ldr	r2, [r7, #12]
 800dbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb0:	4413      	add	r3, r2
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	2b20      	cmp	r3, #32
 800dbb6:	d1f2      	bne.n	800db9e <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800dbb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbba:	2b07      	cmp	r3, #7
 800dbbc:	d808      	bhi.n	800dbd0 <gen_numname+0x100>
 800dbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc0:	1c5a      	adds	r2, r3, #1
 800dbc2:	62ba      	str	r2, [r7, #40]	; 0x28
 800dbc4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800dbc8:	4413      	add	r3, r2
 800dbca:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800dbce:	e000      	b.n	800dbd2 <gen_numname+0x102>
 800dbd0:	2120      	movs	r1, #32
 800dbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd4:	1c5a      	adds	r2, r3, #1
 800dbd6:	627a      	str	r2, [r7, #36]	; 0x24
 800dbd8:	68fa      	ldr	r2, [r7, #12]
 800dbda:	4413      	add	r3, r2
 800dbdc:	460a      	mov	r2, r1
 800dbde:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800dbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe2:	2b07      	cmp	r3, #7
 800dbe4:	d9e8      	bls.n	800dbb8 <gen_numname+0xe8>
}
 800dbe6:	bf00      	nop
 800dbe8:	bf00      	nop
 800dbea:	3730      	adds	r7, #48	; 0x30
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}

0800dbf0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	b085      	sub	sp, #20
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800dbfc:	230b      	movs	r3, #11
 800dbfe:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800dc00:	7bfb      	ldrb	r3, [r7, #15]
 800dc02:	b2da      	uxtb	r2, r3
 800dc04:	0852      	lsrs	r2, r2, #1
 800dc06:	01db      	lsls	r3, r3, #7
 800dc08:	4313      	orrs	r3, r2
 800dc0a:	b2da      	uxtb	r2, r3
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	1c59      	adds	r1, r3, #1
 800dc10:	6079      	str	r1, [r7, #4]
 800dc12:	781b      	ldrb	r3, [r3, #0]
 800dc14:	4413      	add	r3, r2
 800dc16:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	3b01      	subs	r3, #1
 800dc1c:	60bb      	str	r3, [r7, #8]
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d1ed      	bne.n	800dc00 <sum_sfn+0x10>
	return sum;
 800dc24:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc26:	4618      	mov	r0, r3
 800dc28:	3714      	adds	r7, #20
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc30:	4770      	bx	lr

0800dc32 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800dc32:	b580      	push	{r7, lr}
 800dc34:	b086      	sub	sp, #24
 800dc36:	af00      	add	r7, sp, #0
 800dc38:	6078      	str	r0, [r7, #4]
 800dc3a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800dc3c:	2304      	movs	r3, #4
 800dc3e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800dc46:	23ff      	movs	r3, #255	; 0xff
 800dc48:	757b      	strb	r3, [r7, #21]
 800dc4a:	23ff      	movs	r3, #255	; 0xff
 800dc4c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800dc4e:	e081      	b.n	800dd54 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	69db      	ldr	r3, [r3, #28]
 800dc54:	4619      	mov	r1, r3
 800dc56:	6938      	ldr	r0, [r7, #16]
 800dc58:	f7ff f8b8 	bl	800cdcc <move_window>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dc60:	7dfb      	ldrb	r3, [r7, #23]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d17c      	bne.n	800dd60 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6a1b      	ldr	r3, [r3, #32]
 800dc6a:	781b      	ldrb	r3, [r3, #0]
 800dc6c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800dc6e:	7dbb      	ldrb	r3, [r7, #22]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d102      	bne.n	800dc7a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800dc74:	2304      	movs	r3, #4
 800dc76:	75fb      	strb	r3, [r7, #23]
 800dc78:	e077      	b.n	800dd6a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6a1b      	ldr	r3, [r3, #32]
 800dc7e:	330b      	adds	r3, #11
 800dc80:	781b      	ldrb	r3, [r3, #0]
 800dc82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc86:	73fb      	strb	r3, [r7, #15]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	7bfa      	ldrb	r2, [r7, #15]
 800dc8c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800dc8e:	7dbb      	ldrb	r3, [r7, #22]
 800dc90:	2be5      	cmp	r3, #229	; 0xe5
 800dc92:	d00e      	beq.n	800dcb2 <dir_read+0x80>
 800dc94:	7dbb      	ldrb	r3, [r7, #22]
 800dc96:	2b2e      	cmp	r3, #46	; 0x2e
 800dc98:	d00b      	beq.n	800dcb2 <dir_read+0x80>
 800dc9a:	7bfb      	ldrb	r3, [r7, #15]
 800dc9c:	f023 0320 	bic.w	r3, r3, #32
 800dca0:	2b08      	cmp	r3, #8
 800dca2:	bf0c      	ite	eq
 800dca4:	2301      	moveq	r3, #1
 800dca6:	2300      	movne	r3, #0
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	461a      	mov	r2, r3
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	4293      	cmp	r3, r2
 800dcb0:	d002      	beq.n	800dcb8 <dir_read+0x86>
				ord = 0xFF;
 800dcb2:	23ff      	movs	r3, #255	; 0xff
 800dcb4:	757b      	strb	r3, [r7, #21]
 800dcb6:	e044      	b.n	800dd42 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800dcb8:	7bfb      	ldrb	r3, [r7, #15]
 800dcba:	2b0f      	cmp	r3, #15
 800dcbc:	d12f      	bne.n	800dd1e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800dcbe:	7dbb      	ldrb	r3, [r7, #22]
 800dcc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d00d      	beq.n	800dce4 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	6a1b      	ldr	r3, [r3, #32]
 800dccc:	7b5b      	ldrb	r3, [r3, #13]
 800dcce:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800dcd0:	7dbb      	ldrb	r3, [r7, #22]
 800dcd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dcd6:	75bb      	strb	r3, [r7, #22]
 800dcd8:	7dbb      	ldrb	r3, [r7, #22]
 800dcda:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	695a      	ldr	r2, [r3, #20]
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800dce4:	7dba      	ldrb	r2, [r7, #22]
 800dce6:	7d7b      	ldrb	r3, [r7, #21]
 800dce8:	429a      	cmp	r2, r3
 800dcea:	d115      	bne.n	800dd18 <dir_read+0xe6>
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6a1b      	ldr	r3, [r3, #32]
 800dcf0:	330d      	adds	r3, #13
 800dcf2:	781b      	ldrb	r3, [r3, #0]
 800dcf4:	7d3a      	ldrb	r2, [r7, #20]
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d10e      	bne.n	800dd18 <dir_read+0xe6>
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	68da      	ldr	r2, [r3, #12]
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6a1b      	ldr	r3, [r3, #32]
 800dd02:	4619      	mov	r1, r3
 800dd04:	4610      	mov	r0, r2
 800dd06:	f7ff fe17 	bl	800d938 <pick_lfn>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d003      	beq.n	800dd18 <dir_read+0xe6>
 800dd10:	7d7b      	ldrb	r3, [r7, #21]
 800dd12:	3b01      	subs	r3, #1
 800dd14:	b2db      	uxtb	r3, r3
 800dd16:	e000      	b.n	800dd1a <dir_read+0xe8>
 800dd18:	23ff      	movs	r3, #255	; 0xff
 800dd1a:	757b      	strb	r3, [r7, #21]
 800dd1c:	e011      	b.n	800dd42 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800dd1e:	7d7b      	ldrb	r3, [r7, #21]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d109      	bne.n	800dd38 <dir_read+0x106>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6a1b      	ldr	r3, [r3, #32]
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f7ff ff61 	bl	800dbf0 <sum_sfn>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	461a      	mov	r2, r3
 800dd32:	7d3b      	ldrb	r3, [r7, #20]
 800dd34:	4293      	cmp	r3, r2
 800dd36:	d015      	beq.n	800dd64 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f04f 32ff 	mov.w	r2, #4294967295
 800dd3e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800dd40:	e010      	b.n	800dd64 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800dd42:	2100      	movs	r1, #0
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f7ff fc3c 	bl	800d5c2 <dir_next>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dd4e:	7dfb      	ldrb	r3, [r7, #23]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d109      	bne.n	800dd68 <dir_read+0x136>
	while (dp->sect) {
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	69db      	ldr	r3, [r3, #28]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	f47f af79 	bne.w	800dc50 <dir_read+0x1e>
 800dd5e:	e004      	b.n	800dd6a <dir_read+0x138>
		if (res != FR_OK) break;
 800dd60:	bf00      	nop
 800dd62:	e002      	b.n	800dd6a <dir_read+0x138>
					break;
 800dd64:	bf00      	nop
 800dd66:	e000      	b.n	800dd6a <dir_read+0x138>
		if (res != FR_OK) break;
 800dd68:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800dd6a:	7dfb      	ldrb	r3, [r7, #23]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d002      	beq.n	800dd76 <dir_read+0x144>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2200      	movs	r2, #0
 800dd74:	61da      	str	r2, [r3, #28]
	return res;
 800dd76:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3718      	adds	r7, #24
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}

0800dd80 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b086      	sub	sp, #24
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800dd8e:	2100      	movs	r1, #0
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f7ff fb9b 	bl	800d4cc <dir_sdi>
 800dd96:	4603      	mov	r3, r0
 800dd98:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800dd9a:	7dfb      	ldrb	r3, [r7, #23]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d001      	beq.n	800dda4 <dir_find+0x24>
 800dda0:	7dfb      	ldrb	r3, [r7, #23]
 800dda2:	e0a9      	b.n	800def8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800dda4:	23ff      	movs	r3, #255	; 0xff
 800dda6:	753b      	strb	r3, [r7, #20]
 800dda8:	7d3b      	ldrb	r3, [r7, #20]
 800ddaa:	757b      	strb	r3, [r7, #21]
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f04f 32ff 	mov.w	r2, #4294967295
 800ddb2:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	69db      	ldr	r3, [r3, #28]
 800ddb8:	4619      	mov	r1, r3
 800ddba:	6938      	ldr	r0, [r7, #16]
 800ddbc:	f7ff f806 	bl	800cdcc <move_window>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ddc4:	7dfb      	ldrb	r3, [r7, #23]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	f040 8090 	bne.w	800deec <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6a1b      	ldr	r3, [r3, #32]
 800ddd0:	781b      	ldrb	r3, [r3, #0]
 800ddd2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ddd4:	7dbb      	ldrb	r3, [r7, #22]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d102      	bne.n	800dde0 <dir_find+0x60>
 800ddda:	2304      	movs	r3, #4
 800dddc:	75fb      	strb	r3, [r7, #23]
 800ddde:	e08a      	b.n	800def6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6a1b      	ldr	r3, [r3, #32]
 800dde4:	330b      	adds	r3, #11
 800dde6:	781b      	ldrb	r3, [r3, #0]
 800dde8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ddec:	73fb      	strb	r3, [r7, #15]
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	7bfa      	ldrb	r2, [r7, #15]
 800ddf2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ddf4:	7dbb      	ldrb	r3, [r7, #22]
 800ddf6:	2be5      	cmp	r3, #229	; 0xe5
 800ddf8:	d007      	beq.n	800de0a <dir_find+0x8a>
 800ddfa:	7bfb      	ldrb	r3, [r7, #15]
 800ddfc:	f003 0308 	and.w	r3, r3, #8
 800de00:	2b00      	cmp	r3, #0
 800de02:	d009      	beq.n	800de18 <dir_find+0x98>
 800de04:	7bfb      	ldrb	r3, [r7, #15]
 800de06:	2b0f      	cmp	r3, #15
 800de08:	d006      	beq.n	800de18 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800de0a:	23ff      	movs	r3, #255	; 0xff
 800de0c:	757b      	strb	r3, [r7, #21]
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f04f 32ff 	mov.w	r2, #4294967295
 800de14:	631a      	str	r2, [r3, #48]	; 0x30
 800de16:	e05e      	b.n	800ded6 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800de18:	7bfb      	ldrb	r3, [r7, #15]
 800de1a:	2b0f      	cmp	r3, #15
 800de1c:	d136      	bne.n	800de8c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800de24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d154      	bne.n	800ded6 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800de2c:	7dbb      	ldrb	r3, [r7, #22]
 800de2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de32:	2b00      	cmp	r3, #0
 800de34:	d00d      	beq.n	800de52 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6a1b      	ldr	r3, [r3, #32]
 800de3a:	7b5b      	ldrb	r3, [r3, #13]
 800de3c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800de3e:	7dbb      	ldrb	r3, [r7, #22]
 800de40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de44:	75bb      	strb	r3, [r7, #22]
 800de46:	7dbb      	ldrb	r3, [r7, #22]
 800de48:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	695a      	ldr	r2, [r3, #20]
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800de52:	7dba      	ldrb	r2, [r7, #22]
 800de54:	7d7b      	ldrb	r3, [r7, #21]
 800de56:	429a      	cmp	r2, r3
 800de58:	d115      	bne.n	800de86 <dir_find+0x106>
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6a1b      	ldr	r3, [r3, #32]
 800de5e:	330d      	adds	r3, #13
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	7d3a      	ldrb	r2, [r7, #20]
 800de64:	429a      	cmp	r2, r3
 800de66:	d10e      	bne.n	800de86 <dir_find+0x106>
 800de68:	693b      	ldr	r3, [r7, #16]
 800de6a:	68da      	ldr	r2, [r3, #12]
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	6a1b      	ldr	r3, [r3, #32]
 800de70:	4619      	mov	r1, r3
 800de72:	4610      	mov	r0, r2
 800de74:	f7ff fcf0 	bl	800d858 <cmp_lfn>
 800de78:	4603      	mov	r3, r0
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d003      	beq.n	800de86 <dir_find+0x106>
 800de7e:	7d7b      	ldrb	r3, [r7, #21]
 800de80:	3b01      	subs	r3, #1
 800de82:	b2db      	uxtb	r3, r3
 800de84:	e000      	b.n	800de88 <dir_find+0x108>
 800de86:	23ff      	movs	r3, #255	; 0xff
 800de88:	757b      	strb	r3, [r7, #21]
 800de8a:	e024      	b.n	800ded6 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800de8c:	7d7b      	ldrb	r3, [r7, #21]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d109      	bne.n	800dea6 <dir_find+0x126>
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6a1b      	ldr	r3, [r3, #32]
 800de96:	4618      	mov	r0, r3
 800de98:	f7ff feaa 	bl	800dbf0 <sum_sfn>
 800de9c:	4603      	mov	r3, r0
 800de9e:	461a      	mov	r2, r3
 800dea0:	7d3b      	ldrb	r3, [r7, #20]
 800dea2:	4293      	cmp	r3, r2
 800dea4:	d024      	beq.n	800def0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800deac:	f003 0301 	and.w	r3, r3, #1
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d10a      	bne.n	800deca <dir_find+0x14a>
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	6a18      	ldr	r0, [r3, #32]
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	3324      	adds	r3, #36	; 0x24
 800debc:	220b      	movs	r2, #11
 800debe:	4619      	mov	r1, r3
 800dec0:	f7fe fd92 	bl	800c9e8 <mem_cmp>
 800dec4:	4603      	mov	r3, r0
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d014      	beq.n	800def4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800deca:	23ff      	movs	r3, #255	; 0xff
 800decc:	757b      	strb	r3, [r7, #21]
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f04f 32ff 	mov.w	r2, #4294967295
 800ded4:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ded6:	2100      	movs	r1, #0
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f7ff fb72 	bl	800d5c2 <dir_next>
 800dede:	4603      	mov	r3, r0
 800dee0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800dee2:	7dfb      	ldrb	r3, [r7, #23]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	f43f af65 	beq.w	800ddb4 <dir_find+0x34>
 800deea:	e004      	b.n	800def6 <dir_find+0x176>
		if (res != FR_OK) break;
 800deec:	bf00      	nop
 800deee:	e002      	b.n	800def6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800def0:	bf00      	nop
 800def2:	e000      	b.n	800def6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800def4:	bf00      	nop

	return res;
 800def6:	7dfb      	ldrb	r3, [r7, #23]
}
 800def8:	4618      	mov	r0, r3
 800defa:	3718      	adds	r7, #24
 800defc:	46bd      	mov	sp, r7
 800defe:	bd80      	pop	{r7, pc}

0800df00 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b08c      	sub	sp, #48	; 0x30
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800df14:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d001      	beq.n	800df20 <dir_register+0x20>
 800df1c:	2306      	movs	r3, #6
 800df1e:	e0e0      	b.n	800e0e2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800df20:	2300      	movs	r3, #0
 800df22:	627b      	str	r3, [r7, #36]	; 0x24
 800df24:	e002      	b.n	800df2c <dir_register+0x2c>
 800df26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df28:	3301      	adds	r3, #1
 800df2a:	627b      	str	r3, [r7, #36]	; 0x24
 800df2c:	69fb      	ldr	r3, [r7, #28]
 800df2e:	68da      	ldr	r2, [r3, #12]
 800df30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df32:	005b      	lsls	r3, r3, #1
 800df34:	4413      	add	r3, r2
 800df36:	881b      	ldrh	r3, [r3, #0]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d1f4      	bne.n	800df26 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800df42:	f107 030c 	add.w	r3, r7, #12
 800df46:	220c      	movs	r2, #12
 800df48:	4618      	mov	r0, r3
 800df4a:	f7fe fd11 	bl	800c970 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800df4e:	7dfb      	ldrb	r3, [r7, #23]
 800df50:	f003 0301 	and.w	r3, r3, #1
 800df54:	2b00      	cmp	r3, #0
 800df56:	d032      	beq.n	800dfbe <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2240      	movs	r2, #64	; 0x40
 800df5c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800df60:	2301      	movs	r3, #1
 800df62:	62bb      	str	r3, [r7, #40]	; 0x28
 800df64:	e016      	b.n	800df94 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800df6c:	69fb      	ldr	r3, [r7, #28]
 800df6e:	68da      	ldr	r2, [r3, #12]
 800df70:	f107 010c 	add.w	r1, r7, #12
 800df74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df76:	f7ff fdab 	bl	800dad0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f7ff ff00 	bl	800dd80 <dir_find>
 800df80:	4603      	mov	r3, r0
 800df82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800df86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d106      	bne.n	800df9c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800df8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df90:	3301      	adds	r3, #1
 800df92:	62bb      	str	r3, [r7, #40]	; 0x28
 800df94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df96:	2b63      	cmp	r3, #99	; 0x63
 800df98:	d9e5      	bls.n	800df66 <dir_register+0x66>
 800df9a:	e000      	b.n	800df9e <dir_register+0x9e>
			if (res != FR_OK) break;
 800df9c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800df9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa0:	2b64      	cmp	r3, #100	; 0x64
 800dfa2:	d101      	bne.n	800dfa8 <dir_register+0xa8>
 800dfa4:	2307      	movs	r3, #7
 800dfa6:	e09c      	b.n	800e0e2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800dfa8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dfac:	2b04      	cmp	r3, #4
 800dfae:	d002      	beq.n	800dfb6 <dir_register+0xb6>
 800dfb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dfb4:	e095      	b.n	800e0e2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800dfb6:	7dfa      	ldrb	r2, [r7, #23]
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800dfbe:	7dfb      	ldrb	r3, [r7, #23]
 800dfc0:	f003 0302 	and.w	r3, r3, #2
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d007      	beq.n	800dfd8 <dir_register+0xd8>
 800dfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfca:	330c      	adds	r3, #12
 800dfcc:	4a47      	ldr	r2, [pc, #284]	; (800e0ec <dir_register+0x1ec>)
 800dfce:	fba2 2303 	umull	r2, r3, r2, r3
 800dfd2:	089b      	lsrs	r3, r3, #2
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	e000      	b.n	800dfda <dir_register+0xda>
 800dfd8:	2301      	movs	r3, #1
 800dfda:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800dfdc:	6a39      	ldr	r1, [r7, #32]
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f7ff fbb4 	bl	800d74c <dir_alloc>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800dfea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d148      	bne.n	800e084 <dir_register+0x184>
 800dff2:	6a3b      	ldr	r3, [r7, #32]
 800dff4:	3b01      	subs	r3, #1
 800dff6:	623b      	str	r3, [r7, #32]
 800dff8:	6a3b      	ldr	r3, [r7, #32]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d042      	beq.n	800e084 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	695a      	ldr	r2, [r3, #20]
 800e002:	6a3b      	ldr	r3, [r7, #32]
 800e004:	015b      	lsls	r3, r3, #5
 800e006:	1ad3      	subs	r3, r2, r3
 800e008:	4619      	mov	r1, r3
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	f7ff fa5e 	bl	800d4cc <dir_sdi>
 800e010:	4603      	mov	r3, r0
 800e012:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e016:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d132      	bne.n	800e084 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	3324      	adds	r3, #36	; 0x24
 800e022:	4618      	mov	r0, r3
 800e024:	f7ff fde4 	bl	800dbf0 <sum_sfn>
 800e028:	4603      	mov	r3, r0
 800e02a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	69db      	ldr	r3, [r3, #28]
 800e030:	4619      	mov	r1, r3
 800e032:	69f8      	ldr	r0, [r7, #28]
 800e034:	f7fe feca 	bl	800cdcc <move_window>
 800e038:	4603      	mov	r3, r0
 800e03a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800e03e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e042:	2b00      	cmp	r3, #0
 800e044:	d11d      	bne.n	800e082 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e046:	69fb      	ldr	r3, [r7, #28]
 800e048:	68d8      	ldr	r0, [r3, #12]
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6a19      	ldr	r1, [r3, #32]
 800e04e:	6a3b      	ldr	r3, [r7, #32]
 800e050:	b2da      	uxtb	r2, r3
 800e052:	7efb      	ldrb	r3, [r7, #27]
 800e054:	f7ff fcd4 	bl	800da00 <put_lfn>
				fs->wflag = 1;
 800e058:	69fb      	ldr	r3, [r7, #28]
 800e05a:	2201      	movs	r2, #1
 800e05c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e05e:	2100      	movs	r1, #0
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f7ff faae 	bl	800d5c2 <dir_next>
 800e066:	4603      	mov	r3, r0
 800e068:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800e06c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e070:	2b00      	cmp	r3, #0
 800e072:	d107      	bne.n	800e084 <dir_register+0x184>
 800e074:	6a3b      	ldr	r3, [r7, #32]
 800e076:	3b01      	subs	r3, #1
 800e078:	623b      	str	r3, [r7, #32]
 800e07a:	6a3b      	ldr	r3, [r7, #32]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d1d5      	bne.n	800e02c <dir_register+0x12c>
 800e080:	e000      	b.n	800e084 <dir_register+0x184>
				if (res != FR_OK) break;
 800e082:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e084:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d128      	bne.n	800e0de <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	69db      	ldr	r3, [r3, #28]
 800e090:	4619      	mov	r1, r3
 800e092:	69f8      	ldr	r0, [r7, #28]
 800e094:	f7fe fe9a 	bl	800cdcc <move_window>
 800e098:	4603      	mov	r3, r0
 800e09a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e09e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d11b      	bne.n	800e0de <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6a1b      	ldr	r3, [r3, #32]
 800e0aa:	2220      	movs	r2, #32
 800e0ac:	2100      	movs	r1, #0
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f7fe fc7f 	bl	800c9b2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6a18      	ldr	r0, [r3, #32]
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	3324      	adds	r3, #36	; 0x24
 800e0bc:	220b      	movs	r2, #11
 800e0be:	4619      	mov	r1, r3
 800e0c0:	f7fe fc56 	bl	800c970 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6a1b      	ldr	r3, [r3, #32]
 800e0ce:	330c      	adds	r3, #12
 800e0d0:	f002 0218 	and.w	r2, r2, #24
 800e0d4:	b2d2      	uxtb	r2, r2
 800e0d6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e0d8:	69fb      	ldr	r3, [r7, #28]
 800e0da:	2201      	movs	r2, #1
 800e0dc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e0de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	3730      	adds	r7, #48	; 0x30
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}
 800e0ea:	bf00      	nop
 800e0ec:	4ec4ec4f 	.word	0x4ec4ec4f

0800e0f0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b088      	sub	sp, #32
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
 800e0f8:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	2200      	movs	r2, #0
 800e104:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	69db      	ldr	r3, [r3, #28]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	f000 80c9 	beq.w	800e2a2 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e114:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e118:	d032      	beq.n	800e180 <get_fileinfo+0x90>
			i = j = 0;
 800e11a:	2300      	movs	r3, #0
 800e11c:	61bb      	str	r3, [r7, #24]
 800e11e:	69bb      	ldr	r3, [r7, #24]
 800e120:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e122:	e01b      	b.n	800e15c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800e124:	89fb      	ldrh	r3, [r7, #14]
 800e126:	2100      	movs	r1, #0
 800e128:	4618      	mov	r0, r3
 800e12a:	f001 fd31 	bl	800fb90 <ff_convert>
 800e12e:	4603      	mov	r3, r0
 800e130:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800e132:	89fb      	ldrh	r3, [r7, #14]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d102      	bne.n	800e13e <get_fileinfo+0x4e>
 800e138:	2300      	movs	r3, #0
 800e13a:	61fb      	str	r3, [r7, #28]
 800e13c:	e01a      	b.n	800e174 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800e13e:	69fb      	ldr	r3, [r7, #28]
 800e140:	2bfe      	cmp	r3, #254	; 0xfe
 800e142:	d902      	bls.n	800e14a <get_fileinfo+0x5a>
 800e144:	2300      	movs	r3, #0
 800e146:	61fb      	str	r3, [r7, #28]
 800e148:	e014      	b.n	800e174 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800e14a:	69fb      	ldr	r3, [r7, #28]
 800e14c:	1c5a      	adds	r2, r3, #1
 800e14e:	61fa      	str	r2, [r7, #28]
 800e150:	89fa      	ldrh	r2, [r7, #14]
 800e152:	b2d1      	uxtb	r1, r2
 800e154:	683a      	ldr	r2, [r7, #0]
 800e156:	4413      	add	r3, r2
 800e158:	460a      	mov	r2, r1
 800e15a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e15c:	693b      	ldr	r3, [r7, #16]
 800e15e:	68da      	ldr	r2, [r3, #12]
 800e160:	69bb      	ldr	r3, [r7, #24]
 800e162:	1c59      	adds	r1, r3, #1
 800e164:	61b9      	str	r1, [r7, #24]
 800e166:	005b      	lsls	r3, r3, #1
 800e168:	4413      	add	r3, r2
 800e16a:	881b      	ldrh	r3, [r3, #0]
 800e16c:	81fb      	strh	r3, [r7, #14]
 800e16e:	89fb      	ldrh	r3, [r7, #14]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d1d7      	bne.n	800e124 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800e174:	683a      	ldr	r2, [r7, #0]
 800e176:	69fb      	ldr	r3, [r7, #28]
 800e178:	4413      	add	r3, r2
 800e17a:	3316      	adds	r3, #22
 800e17c:	2200      	movs	r2, #0
 800e17e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800e180:	2300      	movs	r3, #0
 800e182:	61bb      	str	r3, [r7, #24]
 800e184:	69bb      	ldr	r3, [r7, #24]
 800e186:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800e188:	683a      	ldr	r2, [r7, #0]
 800e18a:	69fb      	ldr	r3, [r7, #28]
 800e18c:	4413      	add	r3, r2
 800e18e:	3316      	adds	r3, #22
 800e190:	781b      	ldrb	r3, [r3, #0]
 800e192:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800e194:	e04c      	b.n	800e230 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	6a1a      	ldr	r2, [r3, #32]
 800e19a:	69fb      	ldr	r3, [r7, #28]
 800e19c:	1c59      	adds	r1, r3, #1
 800e19e:	61f9      	str	r1, [r7, #28]
 800e1a0:	4413      	add	r3, r2
 800e1a2:	781b      	ldrb	r3, [r3, #0]
 800e1a4:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800e1a6:	7dfb      	ldrb	r3, [r7, #23]
 800e1a8:	2b20      	cmp	r3, #32
 800e1aa:	d100      	bne.n	800e1ae <get_fileinfo+0xbe>
 800e1ac:	e040      	b.n	800e230 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e1ae:	7dfb      	ldrb	r3, [r7, #23]
 800e1b0:	2b05      	cmp	r3, #5
 800e1b2:	d101      	bne.n	800e1b8 <get_fileinfo+0xc8>
 800e1b4:	23e5      	movs	r3, #229	; 0xe5
 800e1b6:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800e1b8:	69fb      	ldr	r3, [r7, #28]
 800e1ba:	2b09      	cmp	r3, #9
 800e1bc:	d10f      	bne.n	800e1de <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800e1be:	89bb      	ldrh	r3, [r7, #12]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d105      	bne.n	800e1d0 <get_fileinfo+0xe0>
 800e1c4:	683a      	ldr	r2, [r7, #0]
 800e1c6:	69bb      	ldr	r3, [r7, #24]
 800e1c8:	4413      	add	r3, r2
 800e1ca:	3316      	adds	r3, #22
 800e1cc:	222e      	movs	r2, #46	; 0x2e
 800e1ce:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800e1d0:	69bb      	ldr	r3, [r7, #24]
 800e1d2:	1c5a      	adds	r2, r3, #1
 800e1d4:	61ba      	str	r2, [r7, #24]
 800e1d6:	683a      	ldr	r2, [r7, #0]
 800e1d8:	4413      	add	r3, r2
 800e1da:	222e      	movs	r2, #46	; 0x2e
 800e1dc:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800e1de:	683a      	ldr	r2, [r7, #0]
 800e1e0:	69bb      	ldr	r3, [r7, #24]
 800e1e2:	4413      	add	r3, r2
 800e1e4:	3309      	adds	r3, #9
 800e1e6:	7dfa      	ldrb	r2, [r7, #23]
 800e1e8:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800e1ea:	89bb      	ldrh	r3, [r7, #12]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d11c      	bne.n	800e22a <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800e1f0:	7dfb      	ldrb	r3, [r7, #23]
 800e1f2:	2b40      	cmp	r3, #64	; 0x40
 800e1f4:	d913      	bls.n	800e21e <get_fileinfo+0x12e>
 800e1f6:	7dfb      	ldrb	r3, [r7, #23]
 800e1f8:	2b5a      	cmp	r3, #90	; 0x5a
 800e1fa:	d810      	bhi.n	800e21e <get_fileinfo+0x12e>
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6a1b      	ldr	r3, [r3, #32]
 800e200:	330c      	adds	r3, #12
 800e202:	781b      	ldrb	r3, [r3, #0]
 800e204:	461a      	mov	r2, r3
 800e206:	69fb      	ldr	r3, [r7, #28]
 800e208:	2b08      	cmp	r3, #8
 800e20a:	d901      	bls.n	800e210 <get_fileinfo+0x120>
 800e20c:	2310      	movs	r3, #16
 800e20e:	e000      	b.n	800e212 <get_fileinfo+0x122>
 800e210:	2308      	movs	r3, #8
 800e212:	4013      	ands	r3, r2
 800e214:	2b00      	cmp	r3, #0
 800e216:	d002      	beq.n	800e21e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800e218:	7dfb      	ldrb	r3, [r7, #23]
 800e21a:	3320      	adds	r3, #32
 800e21c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800e21e:	683a      	ldr	r2, [r7, #0]
 800e220:	69bb      	ldr	r3, [r7, #24]
 800e222:	4413      	add	r3, r2
 800e224:	3316      	adds	r3, #22
 800e226:	7dfa      	ldrb	r2, [r7, #23]
 800e228:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800e22a:	69bb      	ldr	r3, [r7, #24]
 800e22c:	3301      	adds	r3, #1
 800e22e:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800e230:	69fb      	ldr	r3, [r7, #28]
 800e232:	2b0a      	cmp	r3, #10
 800e234:	d9af      	bls.n	800e196 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800e236:	89bb      	ldrh	r3, [r7, #12]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d10d      	bne.n	800e258 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800e23c:	683a      	ldr	r2, [r7, #0]
 800e23e:	69bb      	ldr	r3, [r7, #24]
 800e240:	4413      	add	r3, r2
 800e242:	3316      	adds	r3, #22
 800e244:	2200      	movs	r2, #0
 800e246:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6a1b      	ldr	r3, [r3, #32]
 800e24c:	330c      	adds	r3, #12
 800e24e:	781b      	ldrb	r3, [r3, #0]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d101      	bne.n	800e258 <get_fileinfo+0x168>
 800e254:	2300      	movs	r3, #0
 800e256:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800e258:	683a      	ldr	r2, [r7, #0]
 800e25a:	69bb      	ldr	r3, [r7, #24]
 800e25c:	4413      	add	r3, r2
 800e25e:	3309      	adds	r3, #9
 800e260:	2200      	movs	r2, #0
 800e262:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	6a1b      	ldr	r3, [r3, #32]
 800e268:	7ada      	ldrb	r2, [r3, #11]
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6a1b      	ldr	r3, [r3, #32]
 800e272:	331c      	adds	r3, #28
 800e274:	4618      	mov	r0, r3
 800e276:	f7fe fb11 	bl	800c89c <ld_dword>
 800e27a:	4602      	mov	r2, r0
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6a1b      	ldr	r3, [r3, #32]
 800e284:	3316      	adds	r3, #22
 800e286:	4618      	mov	r0, r3
 800e288:	f7fe fb08 	bl	800c89c <ld_dword>
 800e28c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	b29a      	uxth	r2, r3
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	80da      	strh	r2, [r3, #6]
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	0c1b      	lsrs	r3, r3, #16
 800e29a:	b29a      	uxth	r2, r3
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	809a      	strh	r2, [r3, #4]
 800e2a0:	e000      	b.n	800e2a4 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e2a2:	bf00      	nop
}
 800e2a4:	3720      	adds	r7, #32
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}
	...

0800e2ac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b08a      	sub	sp, #40	; 0x28
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
 800e2b4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	613b      	str	r3, [r7, #16]
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	68db      	ldr	r3, [r3, #12]
 800e2c2:	60fb      	str	r3, [r7, #12]
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	617b      	str	r3, [r7, #20]
 800e2c8:	697b      	ldr	r3, [r7, #20]
 800e2ca:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e2cc:	69bb      	ldr	r3, [r7, #24]
 800e2ce:	1c5a      	adds	r2, r3, #1
 800e2d0:	61ba      	str	r2, [r7, #24]
 800e2d2:	693a      	ldr	r2, [r7, #16]
 800e2d4:	4413      	add	r3, r2
 800e2d6:	781b      	ldrb	r3, [r3, #0]
 800e2d8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e2da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2dc:	2b1f      	cmp	r3, #31
 800e2de:	d940      	bls.n	800e362 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e2e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2e2:	2b2f      	cmp	r3, #47	; 0x2f
 800e2e4:	d006      	beq.n	800e2f4 <create_name+0x48>
 800e2e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2e8:	2b5c      	cmp	r3, #92	; 0x5c
 800e2ea:	d110      	bne.n	800e30e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e2ec:	e002      	b.n	800e2f4 <create_name+0x48>
 800e2ee:	69bb      	ldr	r3, [r7, #24]
 800e2f0:	3301      	adds	r3, #1
 800e2f2:	61bb      	str	r3, [r7, #24]
 800e2f4:	693a      	ldr	r2, [r7, #16]
 800e2f6:	69bb      	ldr	r3, [r7, #24]
 800e2f8:	4413      	add	r3, r2
 800e2fa:	781b      	ldrb	r3, [r3, #0]
 800e2fc:	2b2f      	cmp	r3, #47	; 0x2f
 800e2fe:	d0f6      	beq.n	800e2ee <create_name+0x42>
 800e300:	693a      	ldr	r2, [r7, #16]
 800e302:	69bb      	ldr	r3, [r7, #24]
 800e304:	4413      	add	r3, r2
 800e306:	781b      	ldrb	r3, [r3, #0]
 800e308:	2b5c      	cmp	r3, #92	; 0x5c
 800e30a:	d0f0      	beq.n	800e2ee <create_name+0x42>
			break;
 800e30c:	e02a      	b.n	800e364 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	2bfe      	cmp	r3, #254	; 0xfe
 800e312:	d901      	bls.n	800e318 <create_name+0x6c>
 800e314:	2306      	movs	r3, #6
 800e316:	e177      	b.n	800e608 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e318:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e31a:	b2db      	uxtb	r3, r3
 800e31c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e31e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e320:	2101      	movs	r1, #1
 800e322:	4618      	mov	r0, r3
 800e324:	f001 fc34 	bl	800fb90 <ff_convert>
 800e328:	4603      	mov	r3, r0
 800e32a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e32c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d101      	bne.n	800e336 <create_name+0x8a>
 800e332:	2306      	movs	r3, #6
 800e334:	e168      	b.n	800e608 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e336:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e338:	2b7f      	cmp	r3, #127	; 0x7f
 800e33a:	d809      	bhi.n	800e350 <create_name+0xa4>
 800e33c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e33e:	4619      	mov	r1, r3
 800e340:	48b3      	ldr	r0, [pc, #716]	; (800e610 <create_name+0x364>)
 800e342:	f7fe fb78 	bl	800ca36 <chk_chr>
 800e346:	4603      	mov	r3, r0
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d001      	beq.n	800e350 <create_name+0xa4>
 800e34c:	2306      	movs	r3, #6
 800e34e:	e15b      	b.n	800e608 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800e350:	697b      	ldr	r3, [r7, #20]
 800e352:	1c5a      	adds	r2, r3, #1
 800e354:	617a      	str	r2, [r7, #20]
 800e356:	005b      	lsls	r3, r3, #1
 800e358:	68fa      	ldr	r2, [r7, #12]
 800e35a:	4413      	add	r3, r2
 800e35c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e35e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e360:	e7b4      	b.n	800e2cc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e362:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e364:	693a      	ldr	r2, [r7, #16]
 800e366:	69bb      	ldr	r3, [r7, #24]
 800e368:	441a      	add	r2, r3
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e36e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e370:	2b1f      	cmp	r3, #31
 800e372:	d801      	bhi.n	800e378 <create_name+0xcc>
 800e374:	2304      	movs	r3, #4
 800e376:	e000      	b.n	800e37a <create_name+0xce>
 800e378:	2300      	movs	r3, #0
 800e37a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e37e:	e011      	b.n	800e3a4 <create_name+0xf8>
		w = lfn[di - 1];
 800e380:	697b      	ldr	r3, [r7, #20]
 800e382:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e386:	3b01      	subs	r3, #1
 800e388:	005b      	lsls	r3, r3, #1
 800e38a:	68fa      	ldr	r2, [r7, #12]
 800e38c:	4413      	add	r3, r2
 800e38e:	881b      	ldrh	r3, [r3, #0]
 800e390:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800e392:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e394:	2b20      	cmp	r3, #32
 800e396:	d002      	beq.n	800e39e <create_name+0xf2>
 800e398:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e39a:	2b2e      	cmp	r3, #46	; 0x2e
 800e39c:	d106      	bne.n	800e3ac <create_name+0x100>
		di--;
 800e39e:	697b      	ldr	r3, [r7, #20]
 800e3a0:	3b01      	subs	r3, #1
 800e3a2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e3a4:	697b      	ldr	r3, [r7, #20]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d1ea      	bne.n	800e380 <create_name+0xd4>
 800e3aa:	e000      	b.n	800e3ae <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e3ac:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e3ae:	697b      	ldr	r3, [r7, #20]
 800e3b0:	005b      	lsls	r3, r3, #1
 800e3b2:	68fa      	ldr	r2, [r7, #12]
 800e3b4:	4413      	add	r3, r2
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e3ba:	697b      	ldr	r3, [r7, #20]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d101      	bne.n	800e3c4 <create_name+0x118>
 800e3c0:	2306      	movs	r3, #6
 800e3c2:	e121      	b.n	800e608 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	3324      	adds	r3, #36	; 0x24
 800e3c8:	220b      	movs	r2, #11
 800e3ca:	2120      	movs	r1, #32
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f7fe faf0 	bl	800c9b2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	61bb      	str	r3, [r7, #24]
 800e3d6:	e002      	b.n	800e3de <create_name+0x132>
 800e3d8:	69bb      	ldr	r3, [r7, #24]
 800e3da:	3301      	adds	r3, #1
 800e3dc:	61bb      	str	r3, [r7, #24]
 800e3de:	69bb      	ldr	r3, [r7, #24]
 800e3e0:	005b      	lsls	r3, r3, #1
 800e3e2:	68fa      	ldr	r2, [r7, #12]
 800e3e4:	4413      	add	r3, r2
 800e3e6:	881b      	ldrh	r3, [r3, #0]
 800e3e8:	2b20      	cmp	r3, #32
 800e3ea:	d0f5      	beq.n	800e3d8 <create_name+0x12c>
 800e3ec:	69bb      	ldr	r3, [r7, #24]
 800e3ee:	005b      	lsls	r3, r3, #1
 800e3f0:	68fa      	ldr	r2, [r7, #12]
 800e3f2:	4413      	add	r3, r2
 800e3f4:	881b      	ldrh	r3, [r3, #0]
 800e3f6:	2b2e      	cmp	r3, #46	; 0x2e
 800e3f8:	d0ee      	beq.n	800e3d8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e3fa:	69bb      	ldr	r3, [r7, #24]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d009      	beq.n	800e414 <create_name+0x168>
 800e400:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e404:	f043 0303 	orr.w	r3, r3, #3
 800e408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e40c:	e002      	b.n	800e414 <create_name+0x168>
 800e40e:	697b      	ldr	r3, [r7, #20]
 800e410:	3b01      	subs	r3, #1
 800e412:	617b      	str	r3, [r7, #20]
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d009      	beq.n	800e42e <create_name+0x182>
 800e41a:	697b      	ldr	r3, [r7, #20]
 800e41c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e420:	3b01      	subs	r3, #1
 800e422:	005b      	lsls	r3, r3, #1
 800e424:	68fa      	ldr	r2, [r7, #12]
 800e426:	4413      	add	r3, r2
 800e428:	881b      	ldrh	r3, [r3, #0]
 800e42a:	2b2e      	cmp	r3, #46	; 0x2e
 800e42c:	d1ef      	bne.n	800e40e <create_name+0x162>

	i = b = 0; ni = 8;
 800e42e:	2300      	movs	r3, #0
 800e430:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e434:	2300      	movs	r3, #0
 800e436:	623b      	str	r3, [r7, #32]
 800e438:	2308      	movs	r3, #8
 800e43a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e43c:	69bb      	ldr	r3, [r7, #24]
 800e43e:	1c5a      	adds	r2, r3, #1
 800e440:	61ba      	str	r2, [r7, #24]
 800e442:	005b      	lsls	r3, r3, #1
 800e444:	68fa      	ldr	r2, [r7, #12]
 800e446:	4413      	add	r3, r2
 800e448:	881b      	ldrh	r3, [r3, #0]
 800e44a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e44c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e44e:	2b00      	cmp	r3, #0
 800e450:	f000 8090 	beq.w	800e574 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e454:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e456:	2b20      	cmp	r3, #32
 800e458:	d006      	beq.n	800e468 <create_name+0x1bc>
 800e45a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e45c:	2b2e      	cmp	r3, #46	; 0x2e
 800e45e:	d10a      	bne.n	800e476 <create_name+0x1ca>
 800e460:	69ba      	ldr	r2, [r7, #24]
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	429a      	cmp	r2, r3
 800e466:	d006      	beq.n	800e476 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e46c:	f043 0303 	orr.w	r3, r3, #3
 800e470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e474:	e07d      	b.n	800e572 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e476:	6a3a      	ldr	r2, [r7, #32]
 800e478:	69fb      	ldr	r3, [r7, #28]
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d203      	bcs.n	800e486 <create_name+0x1da>
 800e47e:	69ba      	ldr	r2, [r7, #24]
 800e480:	697b      	ldr	r3, [r7, #20]
 800e482:	429a      	cmp	r2, r3
 800e484:	d123      	bne.n	800e4ce <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e486:	69fb      	ldr	r3, [r7, #28]
 800e488:	2b0b      	cmp	r3, #11
 800e48a:	d106      	bne.n	800e49a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e48c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e490:	f043 0303 	orr.w	r3, r3, #3
 800e494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e498:	e06f      	b.n	800e57a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e49a:	69ba      	ldr	r2, [r7, #24]
 800e49c:	697b      	ldr	r3, [r7, #20]
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d005      	beq.n	800e4ae <create_name+0x202>
 800e4a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4a6:	f043 0303 	orr.w	r3, r3, #3
 800e4aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800e4ae:	69ba      	ldr	r2, [r7, #24]
 800e4b0:	697b      	ldr	r3, [r7, #20]
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d860      	bhi.n	800e578 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e4b6:	697b      	ldr	r3, [r7, #20]
 800e4b8:	61bb      	str	r3, [r7, #24]
 800e4ba:	2308      	movs	r3, #8
 800e4bc:	623b      	str	r3, [r7, #32]
 800e4be:	230b      	movs	r3, #11
 800e4c0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e4c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e4c6:	009b      	lsls	r3, r3, #2
 800e4c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e4cc:	e051      	b.n	800e572 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e4ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4d0:	2b7f      	cmp	r3, #127	; 0x7f
 800e4d2:	d914      	bls.n	800e4fe <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e4d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4d6:	2100      	movs	r1, #0
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f001 fb59 	bl	800fb90 <ff_convert>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e4e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d004      	beq.n	800e4f2 <create_name+0x246>
 800e4e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4ea:	3b80      	subs	r3, #128	; 0x80
 800e4ec:	4a49      	ldr	r2, [pc, #292]	; (800e614 <create_name+0x368>)
 800e4ee:	5cd3      	ldrb	r3, [r2, r3]
 800e4f0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e4f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4f6:	f043 0302 	orr.w	r3, r3, #2
 800e4fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e4fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e500:	2b00      	cmp	r3, #0
 800e502:	d007      	beq.n	800e514 <create_name+0x268>
 800e504:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e506:	4619      	mov	r1, r3
 800e508:	4843      	ldr	r0, [pc, #268]	; (800e618 <create_name+0x36c>)
 800e50a:	f7fe fa94 	bl	800ca36 <chk_chr>
 800e50e:	4603      	mov	r3, r0
 800e510:	2b00      	cmp	r3, #0
 800e512:	d008      	beq.n	800e526 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e514:	235f      	movs	r3, #95	; 0x5f
 800e516:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e51c:	f043 0303 	orr.w	r3, r3, #3
 800e520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e524:	e01b      	b.n	800e55e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e526:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e528:	2b40      	cmp	r3, #64	; 0x40
 800e52a:	d909      	bls.n	800e540 <create_name+0x294>
 800e52c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e52e:	2b5a      	cmp	r3, #90	; 0x5a
 800e530:	d806      	bhi.n	800e540 <create_name+0x294>
					b |= 2;
 800e532:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e536:	f043 0302 	orr.w	r3, r3, #2
 800e53a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e53e:	e00e      	b.n	800e55e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e540:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e542:	2b60      	cmp	r3, #96	; 0x60
 800e544:	d90b      	bls.n	800e55e <create_name+0x2b2>
 800e546:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e548:	2b7a      	cmp	r3, #122	; 0x7a
 800e54a:	d808      	bhi.n	800e55e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e54c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e550:	f043 0301 	orr.w	r3, r3, #1
 800e554:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e558:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e55a:	3b20      	subs	r3, #32
 800e55c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e55e:	6a3b      	ldr	r3, [r7, #32]
 800e560:	1c5a      	adds	r2, r3, #1
 800e562:	623a      	str	r2, [r7, #32]
 800e564:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e566:	b2d1      	uxtb	r1, r2
 800e568:	687a      	ldr	r2, [r7, #4]
 800e56a:	4413      	add	r3, r2
 800e56c:	460a      	mov	r2, r1
 800e56e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800e572:	e763      	b.n	800e43c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e574:	bf00      	nop
 800e576:	e000      	b.n	800e57a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800e578:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e580:	2be5      	cmp	r3, #229	; 0xe5
 800e582:	d103      	bne.n	800e58c <create_name+0x2e0>
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2205      	movs	r2, #5
 800e588:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800e58c:	69fb      	ldr	r3, [r7, #28]
 800e58e:	2b08      	cmp	r3, #8
 800e590:	d104      	bne.n	800e59c <create_name+0x2f0>
 800e592:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e596:	009b      	lsls	r3, r3, #2
 800e598:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e59c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e5a0:	f003 030c 	and.w	r3, r3, #12
 800e5a4:	2b0c      	cmp	r3, #12
 800e5a6:	d005      	beq.n	800e5b4 <create_name+0x308>
 800e5a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e5ac:	f003 0303 	and.w	r3, r3, #3
 800e5b0:	2b03      	cmp	r3, #3
 800e5b2:	d105      	bne.n	800e5c0 <create_name+0x314>
 800e5b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5b8:	f043 0302 	orr.w	r3, r3, #2
 800e5bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e5c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5c4:	f003 0302 	and.w	r3, r3, #2
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d117      	bne.n	800e5fc <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e5cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e5d0:	f003 0303 	and.w	r3, r3, #3
 800e5d4:	2b01      	cmp	r3, #1
 800e5d6:	d105      	bne.n	800e5e4 <create_name+0x338>
 800e5d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5dc:	f043 0310 	orr.w	r3, r3, #16
 800e5e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e5e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e5e8:	f003 030c 	and.w	r3, r3, #12
 800e5ec:	2b04      	cmp	r3, #4
 800e5ee:	d105      	bne.n	800e5fc <create_name+0x350>
 800e5f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5f4:	f043 0308 	orr.w	r3, r3, #8
 800e5f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e602:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800e606:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e608:	4618      	mov	r0, r3
 800e60a:	3728      	adds	r7, #40	; 0x28
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}
 800e610:	08010634 	.word	0x08010634
 800e614:	08010710 	.word	0x08010710
 800e618:	08010640 	.word	0x08010640

0800e61c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b086      	sub	sp, #24
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
 800e624:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e62a:	693b      	ldr	r3, [r7, #16]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e630:	e002      	b.n	800e638 <follow_path+0x1c>
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	3301      	adds	r3, #1
 800e636:	603b      	str	r3, [r7, #0]
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	2b2f      	cmp	r3, #47	; 0x2f
 800e63e:	d0f8      	beq.n	800e632 <follow_path+0x16>
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	781b      	ldrb	r3, [r3, #0]
 800e644:	2b5c      	cmp	r3, #92	; 0x5c
 800e646:	d0f4      	beq.n	800e632 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	2200      	movs	r2, #0
 800e64c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	781b      	ldrb	r3, [r3, #0]
 800e652:	2b1f      	cmp	r3, #31
 800e654:	d80a      	bhi.n	800e66c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2280      	movs	r2, #128	; 0x80
 800e65a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e65e:	2100      	movs	r1, #0
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f7fe ff33 	bl	800d4cc <dir_sdi>
 800e666:	4603      	mov	r3, r0
 800e668:	75fb      	strb	r3, [r7, #23]
 800e66a:	e043      	b.n	800e6f4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e66c:	463b      	mov	r3, r7
 800e66e:	4619      	mov	r1, r3
 800e670:	6878      	ldr	r0, [r7, #4]
 800e672:	f7ff fe1b 	bl	800e2ac <create_name>
 800e676:	4603      	mov	r3, r0
 800e678:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e67a:	7dfb      	ldrb	r3, [r7, #23]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d134      	bne.n	800e6ea <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f7ff fb7d 	bl	800dd80 <dir_find>
 800e686:	4603      	mov	r3, r0
 800e688:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e690:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e692:	7dfb      	ldrb	r3, [r7, #23]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d00a      	beq.n	800e6ae <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e698:	7dfb      	ldrb	r3, [r7, #23]
 800e69a:	2b04      	cmp	r3, #4
 800e69c:	d127      	bne.n	800e6ee <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e69e:	7afb      	ldrb	r3, [r7, #11]
 800e6a0:	f003 0304 	and.w	r3, r3, #4
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d122      	bne.n	800e6ee <follow_path+0xd2>
 800e6a8:	2305      	movs	r3, #5
 800e6aa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e6ac:	e01f      	b.n	800e6ee <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e6ae:	7afb      	ldrb	r3, [r7, #11]
 800e6b0:	f003 0304 	and.w	r3, r3, #4
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d11c      	bne.n	800e6f2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	799b      	ldrb	r3, [r3, #6]
 800e6bc:	f003 0310 	and.w	r3, r3, #16
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d102      	bne.n	800e6ca <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e6c4:	2305      	movs	r3, #5
 800e6c6:	75fb      	strb	r3, [r7, #23]
 800e6c8:	e014      	b.n	800e6f4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	695b      	ldr	r3, [r3, #20]
 800e6d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6d8:	4413      	add	r3, r2
 800e6da:	4619      	mov	r1, r3
 800e6dc:	68f8      	ldr	r0, [r7, #12]
 800e6de:	f7ff f87c 	bl	800d7da <ld_clust>
 800e6e2:	4602      	mov	r2, r0
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e6e8:	e7c0      	b.n	800e66c <follow_path+0x50>
			if (res != FR_OK) break;
 800e6ea:	bf00      	nop
 800e6ec:	e002      	b.n	800e6f4 <follow_path+0xd8>
				break;
 800e6ee:	bf00      	nop
 800e6f0:	e000      	b.n	800e6f4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e6f2:	bf00      	nop
			}
		}
	}

	return res;
 800e6f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3718      	adds	r7, #24
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}

0800e6fe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e6fe:	b480      	push	{r7}
 800e700:	b087      	sub	sp, #28
 800e702:	af00      	add	r7, sp, #0
 800e704:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e706:	f04f 33ff 	mov.w	r3, #4294967295
 800e70a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d031      	beq.n	800e778 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	617b      	str	r3, [r7, #20]
 800e71a:	e002      	b.n	800e722 <get_ldnumber+0x24>
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	3301      	adds	r3, #1
 800e720:	617b      	str	r3, [r7, #20]
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	781b      	ldrb	r3, [r3, #0]
 800e726:	2b1f      	cmp	r3, #31
 800e728:	d903      	bls.n	800e732 <get_ldnumber+0x34>
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	781b      	ldrb	r3, [r3, #0]
 800e72e:	2b3a      	cmp	r3, #58	; 0x3a
 800e730:	d1f4      	bne.n	800e71c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	781b      	ldrb	r3, [r3, #0]
 800e736:	2b3a      	cmp	r3, #58	; 0x3a
 800e738:	d11c      	bne.n	800e774 <get_ldnumber+0x76>
			tp = *path;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	1c5a      	adds	r2, r3, #1
 800e744:	60fa      	str	r2, [r7, #12]
 800e746:	781b      	ldrb	r3, [r3, #0]
 800e748:	3b30      	subs	r3, #48	; 0x30
 800e74a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	2b09      	cmp	r3, #9
 800e750:	d80e      	bhi.n	800e770 <get_ldnumber+0x72>
 800e752:	68fa      	ldr	r2, [r7, #12]
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	429a      	cmp	r2, r3
 800e758:	d10a      	bne.n	800e770 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d107      	bne.n	800e770 <get_ldnumber+0x72>
					vol = (int)i;
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	3301      	adds	r3, #1
 800e768:	617b      	str	r3, [r7, #20]
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	697a      	ldr	r2, [r7, #20]
 800e76e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e770:	693b      	ldr	r3, [r7, #16]
 800e772:	e002      	b.n	800e77a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e774:	2300      	movs	r3, #0
 800e776:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e778:	693b      	ldr	r3, [r7, #16]
}
 800e77a:	4618      	mov	r0, r3
 800e77c:	371c      	adds	r7, #28
 800e77e:	46bd      	mov	sp, r7
 800e780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e784:	4770      	bx	lr
	...

0800e788 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b082      	sub	sp, #8
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2200      	movs	r2, #0
 800e796:	70da      	strb	r2, [r3, #3]
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f04f 32ff 	mov.w	r2, #4294967295
 800e79e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e7a0:	6839      	ldr	r1, [r7, #0]
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f7fe fb12 	bl	800cdcc <move_window>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d001      	beq.n	800e7b2 <check_fs+0x2a>
 800e7ae:	2304      	movs	r3, #4
 800e7b0:	e038      	b.n	800e824 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	3334      	adds	r3, #52	; 0x34
 800e7b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f7fe f856 	bl	800c86c <ld_word>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	461a      	mov	r2, r3
 800e7c4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e7c8:	429a      	cmp	r2, r3
 800e7ca:	d001      	beq.n	800e7d0 <check_fs+0x48>
 800e7cc:	2303      	movs	r3, #3
 800e7ce:	e029      	b.n	800e824 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e7d6:	2be9      	cmp	r3, #233	; 0xe9
 800e7d8:	d009      	beq.n	800e7ee <check_fs+0x66>
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e7e0:	2beb      	cmp	r3, #235	; 0xeb
 800e7e2:	d11e      	bne.n	800e822 <check_fs+0x9a>
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e7ea:	2b90      	cmp	r3, #144	; 0x90
 800e7ec:	d119      	bne.n	800e822 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	3334      	adds	r3, #52	; 0x34
 800e7f2:	3336      	adds	r3, #54	; 0x36
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f7fe f851 	bl	800c89c <ld_dword>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e800:	4a0a      	ldr	r2, [pc, #40]	; (800e82c <check_fs+0xa4>)
 800e802:	4293      	cmp	r3, r2
 800e804:	d101      	bne.n	800e80a <check_fs+0x82>
 800e806:	2300      	movs	r3, #0
 800e808:	e00c      	b.n	800e824 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	3334      	adds	r3, #52	; 0x34
 800e80e:	3352      	adds	r3, #82	; 0x52
 800e810:	4618      	mov	r0, r3
 800e812:	f7fe f843 	bl	800c89c <ld_dword>
 800e816:	4603      	mov	r3, r0
 800e818:	4a05      	ldr	r2, [pc, #20]	; (800e830 <check_fs+0xa8>)
 800e81a:	4293      	cmp	r3, r2
 800e81c:	d101      	bne.n	800e822 <check_fs+0x9a>
 800e81e:	2300      	movs	r3, #0
 800e820:	e000      	b.n	800e824 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e822:	2302      	movs	r3, #2
}
 800e824:	4618      	mov	r0, r3
 800e826:	3708      	adds	r7, #8
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd80      	pop	{r7, pc}
 800e82c:	00544146 	.word	0x00544146
 800e830:	33544146 	.word	0x33544146

0800e834 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b096      	sub	sp, #88	; 0x58
 800e838:	af00      	add	r7, sp, #0
 800e83a:	60f8      	str	r0, [r7, #12]
 800e83c:	60b9      	str	r1, [r7, #8]
 800e83e:	4613      	mov	r3, r2
 800e840:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	2200      	movs	r2, #0
 800e846:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e848:	68f8      	ldr	r0, [r7, #12]
 800e84a:	f7ff ff58 	bl	800e6fe <get_ldnumber>
 800e84e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e852:	2b00      	cmp	r3, #0
 800e854:	da01      	bge.n	800e85a <find_volume+0x26>
 800e856:	230b      	movs	r3, #11
 800e858:	e231      	b.n	800ecbe <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e85a:	4aa8      	ldr	r2, [pc, #672]	; (800eafc <find_volume+0x2c8>)
 800e85c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e85e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e862:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e866:	2b00      	cmp	r3, #0
 800e868:	d101      	bne.n	800e86e <find_volume+0x3a>
 800e86a:	230c      	movs	r3, #12
 800e86c:	e227      	b.n	800ecbe <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e86e:	68bb      	ldr	r3, [r7, #8]
 800e870:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e872:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e874:	79fb      	ldrb	r3, [r7, #7]
 800e876:	f023 0301 	bic.w	r3, r3, #1
 800e87a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e87e:	781b      	ldrb	r3, [r3, #0]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d01a      	beq.n	800e8ba <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e886:	785b      	ldrb	r3, [r3, #1]
 800e888:	4618      	mov	r0, r3
 800e88a:	f7fd ff51 	bl	800c730 <disk_status>
 800e88e:	4603      	mov	r3, r0
 800e890:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e894:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e898:	f003 0301 	and.w	r3, r3, #1
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d10c      	bne.n	800e8ba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e8a0:	79fb      	ldrb	r3, [r7, #7]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d007      	beq.n	800e8b6 <find_volume+0x82>
 800e8a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e8aa:	f003 0304 	and.w	r3, r3, #4
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d001      	beq.n	800e8b6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e8b2:	230a      	movs	r3, #10
 800e8b4:	e203      	b.n	800ecbe <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	e201      	b.n	800ecbe <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8bc:	2200      	movs	r2, #0
 800e8be:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e8c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8c2:	b2da      	uxtb	r2, r3
 800e8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ca:	785b      	ldrb	r3, [r3, #1]
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f7fd ff49 	bl	800c764 <disk_initialize>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e8d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e8dc:	f003 0301 	and.w	r3, r3, #1
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d001      	beq.n	800e8e8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e8e4:	2303      	movs	r3, #3
 800e8e6:	e1ea      	b.n	800ecbe <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e8e8:	79fb      	ldrb	r3, [r7, #7]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d007      	beq.n	800e8fe <find_volume+0xca>
 800e8ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e8f2:	f003 0304 	and.w	r3, r3, #4
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d001      	beq.n	800e8fe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e8fa:	230a      	movs	r3, #10
 800e8fc:	e1df      	b.n	800ecbe <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e8fe:	2300      	movs	r3, #0
 800e900:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e902:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e904:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e906:	f7ff ff3f 	bl	800e788 <check_fs>
 800e90a:	4603      	mov	r3, r0
 800e90c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e910:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e914:	2b02      	cmp	r3, #2
 800e916:	d14b      	bne.n	800e9b0 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e918:	2300      	movs	r3, #0
 800e91a:	643b      	str	r3, [r7, #64]	; 0x40
 800e91c:	e01f      	b.n	800e95e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e920:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e926:	011b      	lsls	r3, r3, #4
 800e928:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e92c:	4413      	add	r3, r2
 800e92e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e932:	3304      	adds	r3, #4
 800e934:	781b      	ldrb	r3, [r3, #0]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d006      	beq.n	800e948 <find_volume+0x114>
 800e93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e93c:	3308      	adds	r3, #8
 800e93e:	4618      	mov	r0, r3
 800e940:	f7fd ffac 	bl	800c89c <ld_dword>
 800e944:	4602      	mov	r2, r0
 800e946:	e000      	b.n	800e94a <find_volume+0x116>
 800e948:	2200      	movs	r2, #0
 800e94a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e94c:	009b      	lsls	r3, r3, #2
 800e94e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800e952:	440b      	add	r3, r1
 800e954:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e95a:	3301      	adds	r3, #1
 800e95c:	643b      	str	r3, [r7, #64]	; 0x40
 800e95e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e960:	2b03      	cmp	r3, #3
 800e962:	d9dc      	bls.n	800e91e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e964:	2300      	movs	r3, #0
 800e966:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d002      	beq.n	800e974 <find_volume+0x140>
 800e96e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e970:	3b01      	subs	r3, #1
 800e972:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e976:	009b      	lsls	r3, r3, #2
 800e978:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e97c:	4413      	add	r3, r2
 800e97e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e982:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e986:	2b00      	cmp	r3, #0
 800e988:	d005      	beq.n	800e996 <find_volume+0x162>
 800e98a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e98c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e98e:	f7ff fefb 	bl	800e788 <check_fs>
 800e992:	4603      	mov	r3, r0
 800e994:	e000      	b.n	800e998 <find_volume+0x164>
 800e996:	2303      	movs	r3, #3
 800e998:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e99c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e9a0:	2b01      	cmp	r3, #1
 800e9a2:	d905      	bls.n	800e9b0 <find_volume+0x17c>
 800e9a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9a6:	3301      	adds	r3, #1
 800e9a8:	643b      	str	r3, [r7, #64]	; 0x40
 800e9aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9ac:	2b03      	cmp	r3, #3
 800e9ae:	d9e1      	bls.n	800e974 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e9b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e9b4:	2b04      	cmp	r3, #4
 800e9b6:	d101      	bne.n	800e9bc <find_volume+0x188>
 800e9b8:	2301      	movs	r3, #1
 800e9ba:	e180      	b.n	800ecbe <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e9bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e9c0:	2b01      	cmp	r3, #1
 800e9c2:	d901      	bls.n	800e9c8 <find_volume+0x194>
 800e9c4:	230d      	movs	r3, #13
 800e9c6:	e17a      	b.n	800ecbe <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ca:	3334      	adds	r3, #52	; 0x34
 800e9cc:	330b      	adds	r3, #11
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f7fd ff4c 	bl	800c86c <ld_word>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9da:	d001      	beq.n	800e9e0 <find_volume+0x1ac>
 800e9dc:	230d      	movs	r3, #13
 800e9de:	e16e      	b.n	800ecbe <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9e2:	3334      	adds	r3, #52	; 0x34
 800e9e4:	3316      	adds	r3, #22
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f7fd ff40 	bl	800c86c <ld_word>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e9f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d106      	bne.n	800ea04 <find_volume+0x1d0>
 800e9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9f8:	3334      	adds	r3, #52	; 0x34
 800e9fa:	3324      	adds	r3, #36	; 0x24
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f7fd ff4d 	bl	800c89c <ld_dword>
 800ea02:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ea04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ea08:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ea0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea0c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ea10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea12:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ea14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea16:	789b      	ldrb	r3, [r3, #2]
 800ea18:	2b01      	cmp	r3, #1
 800ea1a:	d005      	beq.n	800ea28 <find_volume+0x1f4>
 800ea1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea1e:	789b      	ldrb	r3, [r3, #2]
 800ea20:	2b02      	cmp	r3, #2
 800ea22:	d001      	beq.n	800ea28 <find_volume+0x1f4>
 800ea24:	230d      	movs	r3, #13
 800ea26:	e14a      	b.n	800ecbe <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ea28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea2a:	789b      	ldrb	r3, [r3, #2]
 800ea2c:	461a      	mov	r2, r3
 800ea2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea30:	fb02 f303 	mul.w	r3, r2, r3
 800ea34:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ea36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ea3c:	b29a      	uxth	r2, r3
 800ea3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea40:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ea42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea44:	895b      	ldrh	r3, [r3, #10]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d008      	beq.n	800ea5c <find_volume+0x228>
 800ea4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea4c:	895b      	ldrh	r3, [r3, #10]
 800ea4e:	461a      	mov	r2, r3
 800ea50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea52:	895b      	ldrh	r3, [r3, #10]
 800ea54:	3b01      	subs	r3, #1
 800ea56:	4013      	ands	r3, r2
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d001      	beq.n	800ea60 <find_volume+0x22c>
 800ea5c:	230d      	movs	r3, #13
 800ea5e:	e12e      	b.n	800ecbe <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ea60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea62:	3334      	adds	r3, #52	; 0x34
 800ea64:	3311      	adds	r3, #17
 800ea66:	4618      	mov	r0, r3
 800ea68:	f7fd ff00 	bl	800c86c <ld_word>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	461a      	mov	r2, r3
 800ea70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea72:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ea74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea76:	891b      	ldrh	r3, [r3, #8]
 800ea78:	f003 030f 	and.w	r3, r3, #15
 800ea7c:	b29b      	uxth	r3, r3
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d001      	beq.n	800ea86 <find_volume+0x252>
 800ea82:	230d      	movs	r3, #13
 800ea84:	e11b      	b.n	800ecbe <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ea86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea88:	3334      	adds	r3, #52	; 0x34
 800ea8a:	3313      	adds	r3, #19
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	f7fd feed 	bl	800c86c <ld_word>
 800ea92:	4603      	mov	r3, r0
 800ea94:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ea96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d106      	bne.n	800eaaa <find_volume+0x276>
 800ea9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea9e:	3334      	adds	r3, #52	; 0x34
 800eaa0:	3320      	adds	r3, #32
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f7fd fefa 	bl	800c89c <ld_dword>
 800eaa8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800eaaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaac:	3334      	adds	r3, #52	; 0x34
 800eaae:	330e      	adds	r3, #14
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7fd fedb 	bl	800c86c <ld_word>
 800eab6:	4603      	mov	r3, r0
 800eab8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800eaba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d101      	bne.n	800eac4 <find_volume+0x290>
 800eac0:	230d      	movs	r3, #13
 800eac2:	e0fc      	b.n	800ecbe <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800eac4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800eac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eac8:	4413      	add	r3, r2
 800eaca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eacc:	8912      	ldrh	r2, [r2, #8]
 800eace:	0912      	lsrs	r2, r2, #4
 800ead0:	b292      	uxth	r2, r2
 800ead2:	4413      	add	r3, r2
 800ead4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ead6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ead8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eada:	429a      	cmp	r2, r3
 800eadc:	d201      	bcs.n	800eae2 <find_volume+0x2ae>
 800eade:	230d      	movs	r3, #13
 800eae0:	e0ed      	b.n	800ecbe <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800eae2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae6:	1ad3      	subs	r3, r2, r3
 800eae8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eaea:	8952      	ldrh	r2, [r2, #10]
 800eaec:	fbb3 f3f2 	udiv	r3, r3, r2
 800eaf0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800eaf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d103      	bne.n	800eb00 <find_volume+0x2cc>
 800eaf8:	230d      	movs	r3, #13
 800eafa:	e0e0      	b.n	800ecbe <find_volume+0x48a>
 800eafc:	200011cc 	.word	0x200011cc
		fmt = FS_FAT32;
 800eb00:	2303      	movs	r3, #3
 800eb02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800eb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb08:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800eb0c:	4293      	cmp	r3, r2
 800eb0e:	d802      	bhi.n	800eb16 <find_volume+0x2e2>
 800eb10:	2302      	movs	r3, #2
 800eb12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800eb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb18:	f640 72f5 	movw	r2, #4085	; 0xff5
 800eb1c:	4293      	cmp	r3, r2
 800eb1e:	d802      	bhi.n	800eb26 <find_volume+0x2f2>
 800eb20:	2301      	movs	r3, #1
 800eb22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800eb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb28:	1c9a      	adds	r2, r3, #2
 800eb2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb2c:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800eb2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eb32:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800eb34:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800eb36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb38:	441a      	add	r2, r3
 800eb3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb3c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800eb3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb42:	441a      	add	r2, r3
 800eb44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb46:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800eb48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eb4c:	2b03      	cmp	r3, #3
 800eb4e:	d11e      	bne.n	800eb8e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800eb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb52:	3334      	adds	r3, #52	; 0x34
 800eb54:	332a      	adds	r3, #42	; 0x2a
 800eb56:	4618      	mov	r0, r3
 800eb58:	f7fd fe88 	bl	800c86c <ld_word>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d001      	beq.n	800eb66 <find_volume+0x332>
 800eb62:	230d      	movs	r3, #13
 800eb64:	e0ab      	b.n	800ecbe <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800eb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb68:	891b      	ldrh	r3, [r3, #8]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d001      	beq.n	800eb72 <find_volume+0x33e>
 800eb6e:	230d      	movs	r3, #13
 800eb70:	e0a5      	b.n	800ecbe <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800eb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb74:	3334      	adds	r3, #52	; 0x34
 800eb76:	332c      	adds	r3, #44	; 0x2c
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f7fd fe8f 	bl	800c89c <ld_dword>
 800eb7e:	4602      	mov	r2, r0
 800eb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb82:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800eb84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb86:	699b      	ldr	r3, [r3, #24]
 800eb88:	009b      	lsls	r3, r3, #2
 800eb8a:	647b      	str	r3, [r7, #68]	; 0x44
 800eb8c:	e01f      	b.n	800ebce <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800eb8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb90:	891b      	ldrh	r3, [r3, #8]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d101      	bne.n	800eb9a <find_volume+0x366>
 800eb96:	230d      	movs	r3, #13
 800eb98:	e091      	b.n	800ecbe <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800eb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eba0:	441a      	add	r2, r3
 800eba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800eba6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ebaa:	2b02      	cmp	r3, #2
 800ebac:	d103      	bne.n	800ebb6 <find_volume+0x382>
 800ebae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb0:	699b      	ldr	r3, [r3, #24]
 800ebb2:	005b      	lsls	r3, r3, #1
 800ebb4:	e00a      	b.n	800ebcc <find_volume+0x398>
 800ebb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb8:	699a      	ldr	r2, [r3, #24]
 800ebba:	4613      	mov	r3, r2
 800ebbc:	005b      	lsls	r3, r3, #1
 800ebbe:	4413      	add	r3, r2
 800ebc0:	085a      	lsrs	r2, r3, #1
 800ebc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebc4:	699b      	ldr	r3, [r3, #24]
 800ebc6:	f003 0301 	and.w	r3, r3, #1
 800ebca:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ebcc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ebce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebd0:	69da      	ldr	r2, [r3, #28]
 800ebd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebd4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ebd8:	0a5b      	lsrs	r3, r3, #9
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d201      	bcs.n	800ebe2 <find_volume+0x3ae>
 800ebde:	230d      	movs	r3, #13
 800ebe0:	e06d      	b.n	800ecbe <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ebe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebe4:	f04f 32ff 	mov.w	r2, #4294967295
 800ebe8:	615a      	str	r2, [r3, #20]
 800ebea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebec:	695a      	ldr	r2, [r3, #20]
 800ebee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebf0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ebf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebf4:	2280      	movs	r2, #128	; 0x80
 800ebf6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ebf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ebfc:	2b03      	cmp	r3, #3
 800ebfe:	d149      	bne.n	800ec94 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ec00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec02:	3334      	adds	r3, #52	; 0x34
 800ec04:	3330      	adds	r3, #48	; 0x30
 800ec06:	4618      	mov	r0, r3
 800ec08:	f7fd fe30 	bl	800c86c <ld_word>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	2b01      	cmp	r3, #1
 800ec10:	d140      	bne.n	800ec94 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ec12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec14:	3301      	adds	r3, #1
 800ec16:	4619      	mov	r1, r3
 800ec18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ec1a:	f7fe f8d7 	bl	800cdcc <move_window>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d137      	bne.n	800ec94 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800ec24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec26:	2200      	movs	r2, #0
 800ec28:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ec2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec2c:	3334      	adds	r3, #52	; 0x34
 800ec2e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ec32:	4618      	mov	r0, r3
 800ec34:	f7fd fe1a 	bl	800c86c <ld_word>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	461a      	mov	r2, r3
 800ec3c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ec40:	429a      	cmp	r2, r3
 800ec42:	d127      	bne.n	800ec94 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ec44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec46:	3334      	adds	r3, #52	; 0x34
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f7fd fe27 	bl	800c89c <ld_dword>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	4a1d      	ldr	r2, [pc, #116]	; (800ecc8 <find_volume+0x494>)
 800ec52:	4293      	cmp	r3, r2
 800ec54:	d11e      	bne.n	800ec94 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ec56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec58:	3334      	adds	r3, #52	; 0x34
 800ec5a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f7fd fe1c 	bl	800c89c <ld_dword>
 800ec64:	4603      	mov	r3, r0
 800ec66:	4a19      	ldr	r2, [pc, #100]	; (800eccc <find_volume+0x498>)
 800ec68:	4293      	cmp	r3, r2
 800ec6a:	d113      	bne.n	800ec94 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ec6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec6e:	3334      	adds	r3, #52	; 0x34
 800ec70:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ec74:	4618      	mov	r0, r3
 800ec76:	f7fd fe11 	bl	800c89c <ld_dword>
 800ec7a:	4602      	mov	r2, r0
 800ec7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec7e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ec80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec82:	3334      	adds	r3, #52	; 0x34
 800ec84:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f7fd fe07 	bl	800c89c <ld_dword>
 800ec8e:	4602      	mov	r2, r0
 800ec90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec92:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ec94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec96:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ec9a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ec9c:	4b0c      	ldr	r3, [pc, #48]	; (800ecd0 <find_volume+0x49c>)
 800ec9e:	881b      	ldrh	r3, [r3, #0]
 800eca0:	3301      	adds	r3, #1
 800eca2:	b29a      	uxth	r2, r3
 800eca4:	4b0a      	ldr	r3, [pc, #40]	; (800ecd0 <find_volume+0x49c>)
 800eca6:	801a      	strh	r2, [r3, #0]
 800eca8:	4b09      	ldr	r3, [pc, #36]	; (800ecd0 <find_volume+0x49c>)
 800ecaa:	881a      	ldrh	r2, [r3, #0]
 800ecac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecae:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ecb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb2:	4a08      	ldr	r2, [pc, #32]	; (800ecd4 <find_volume+0x4a0>)
 800ecb4:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ecb6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ecb8:	f7fe f820 	bl	800ccfc <clear_lock>
#endif
	return FR_OK;
 800ecbc:	2300      	movs	r3, #0
}
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	3758      	adds	r7, #88	; 0x58
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}
 800ecc6:	bf00      	nop
 800ecc8:	41615252 	.word	0x41615252
 800eccc:	61417272 	.word	0x61417272
 800ecd0:	200011d0 	.word	0x200011d0
 800ecd4:	200011f4 	.word	0x200011f4

0800ecd8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b084      	sub	sp, #16
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
 800ece0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ece2:	2309      	movs	r3, #9
 800ece4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d01c      	beq.n	800ed26 <validate+0x4e>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d018      	beq.n	800ed26 <validate+0x4e>
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	781b      	ldrb	r3, [r3, #0]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d013      	beq.n	800ed26 <validate+0x4e>
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	889a      	ldrh	r2, [r3, #4]
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	88db      	ldrh	r3, [r3, #6]
 800ed08:	429a      	cmp	r2, r3
 800ed0a:	d10c      	bne.n	800ed26 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	785b      	ldrb	r3, [r3, #1]
 800ed12:	4618      	mov	r0, r3
 800ed14:	f7fd fd0c 	bl	800c730 <disk_status>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	f003 0301 	and.w	r3, r3, #1
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d101      	bne.n	800ed26 <validate+0x4e>
			res = FR_OK;
 800ed22:	2300      	movs	r3, #0
 800ed24:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ed26:	7bfb      	ldrb	r3, [r7, #15]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d102      	bne.n	800ed32 <validate+0x5a>
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	e000      	b.n	800ed34 <validate+0x5c>
 800ed32:	2300      	movs	r3, #0
 800ed34:	683a      	ldr	r2, [r7, #0]
 800ed36:	6013      	str	r3, [r2, #0]
	return res;
 800ed38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	3710      	adds	r7, #16
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}
	...

0800ed44 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b088      	sub	sp, #32
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	60f8      	str	r0, [r7, #12]
 800ed4c:	60b9      	str	r1, [r7, #8]
 800ed4e:	4613      	mov	r3, r2
 800ed50:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ed56:	f107 0310 	add.w	r3, r7, #16
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f7ff fccf 	bl	800e6fe <get_ldnumber>
 800ed60:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ed62:	69fb      	ldr	r3, [r7, #28]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	da01      	bge.n	800ed6c <f_mount+0x28>
 800ed68:	230b      	movs	r3, #11
 800ed6a:	e02b      	b.n	800edc4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ed6c:	4a17      	ldr	r2, [pc, #92]	; (800edcc <f_mount+0x88>)
 800ed6e:	69fb      	ldr	r3, [r7, #28]
 800ed70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed74:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ed76:	69bb      	ldr	r3, [r7, #24]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d005      	beq.n	800ed88 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ed7c:	69b8      	ldr	r0, [r7, #24]
 800ed7e:	f7fd ffbd 	bl	800ccfc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ed82:	69bb      	ldr	r3, [r7, #24]
 800ed84:	2200      	movs	r2, #0
 800ed86:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d002      	beq.n	800ed94 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	2200      	movs	r2, #0
 800ed92:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ed94:	68fa      	ldr	r2, [r7, #12]
 800ed96:	490d      	ldr	r1, [pc, #52]	; (800edcc <f_mount+0x88>)
 800ed98:	69fb      	ldr	r3, [r7, #28]
 800ed9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d002      	beq.n	800edaa <f_mount+0x66>
 800eda4:	79fb      	ldrb	r3, [r7, #7]
 800eda6:	2b01      	cmp	r3, #1
 800eda8:	d001      	beq.n	800edae <f_mount+0x6a>
 800edaa:	2300      	movs	r3, #0
 800edac:	e00a      	b.n	800edc4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800edae:	f107 010c 	add.w	r1, r7, #12
 800edb2:	f107 0308 	add.w	r3, r7, #8
 800edb6:	2200      	movs	r2, #0
 800edb8:	4618      	mov	r0, r3
 800edba:	f7ff fd3b 	bl	800e834 <find_volume>
 800edbe:	4603      	mov	r3, r0
 800edc0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800edc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	3720      	adds	r7, #32
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}
 800edcc:	200011cc 	.word	0x200011cc

0800edd0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b09a      	sub	sp, #104	; 0x68
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	60f8      	str	r0, [r7, #12]
 800edd8:	60b9      	str	r1, [r7, #8]
 800edda:	4613      	mov	r3, r2
 800eddc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d101      	bne.n	800ede8 <f_open+0x18>
 800ede4:	2309      	movs	r3, #9
 800ede6:	e1ad      	b.n	800f144 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ede8:	79fb      	ldrb	r3, [r7, #7]
 800edea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800edee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800edf0:	79fa      	ldrb	r2, [r7, #7]
 800edf2:	f107 0114 	add.w	r1, r7, #20
 800edf6:	f107 0308 	add.w	r3, r7, #8
 800edfa:	4618      	mov	r0, r3
 800edfc:	f7ff fd1a 	bl	800e834 <find_volume>
 800ee00:	4603      	mov	r3, r0
 800ee02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800ee06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	f040 8191 	bne.w	800f132 <f_open+0x362>
		dj.obj.fs = fs;
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ee14:	68ba      	ldr	r2, [r7, #8]
 800ee16:	f107 0318 	add.w	r3, r7, #24
 800ee1a:	4611      	mov	r1, r2
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f7ff fbfd 	bl	800e61c <follow_path>
 800ee22:	4603      	mov	r3, r0
 800ee24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ee28:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d11a      	bne.n	800ee66 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ee30:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ee34:	b25b      	sxtb	r3, r3
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	da03      	bge.n	800ee42 <f_open+0x72>
				res = FR_INVALID_NAME;
 800ee3a:	2306      	movs	r3, #6
 800ee3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ee40:	e011      	b.n	800ee66 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ee42:	79fb      	ldrb	r3, [r7, #7]
 800ee44:	f023 0301 	bic.w	r3, r3, #1
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	bf14      	ite	ne
 800ee4c:	2301      	movne	r3, #1
 800ee4e:	2300      	moveq	r3, #0
 800ee50:	b2db      	uxtb	r3, r3
 800ee52:	461a      	mov	r2, r3
 800ee54:	f107 0318 	add.w	r3, r7, #24
 800ee58:	4611      	mov	r1, r2
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f7fd fe06 	bl	800ca6c <chk_lock>
 800ee60:	4603      	mov	r3, r0
 800ee62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ee66:	79fb      	ldrb	r3, [r7, #7]
 800ee68:	f003 031c 	and.w	r3, r3, #28
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d07f      	beq.n	800ef70 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ee70:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d017      	beq.n	800eea8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ee78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ee7c:	2b04      	cmp	r3, #4
 800ee7e:	d10e      	bne.n	800ee9e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ee80:	f7fd fe50 	bl	800cb24 <enq_lock>
 800ee84:	4603      	mov	r3, r0
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d006      	beq.n	800ee98 <f_open+0xc8>
 800ee8a:	f107 0318 	add.w	r3, r7, #24
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f7ff f836 	bl	800df00 <dir_register>
 800ee94:	4603      	mov	r3, r0
 800ee96:	e000      	b.n	800ee9a <f_open+0xca>
 800ee98:	2312      	movs	r3, #18
 800ee9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ee9e:	79fb      	ldrb	r3, [r7, #7]
 800eea0:	f043 0308 	orr.w	r3, r3, #8
 800eea4:	71fb      	strb	r3, [r7, #7]
 800eea6:	e010      	b.n	800eeca <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800eea8:	7fbb      	ldrb	r3, [r7, #30]
 800eeaa:	f003 0311 	and.w	r3, r3, #17
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d003      	beq.n	800eeba <f_open+0xea>
					res = FR_DENIED;
 800eeb2:	2307      	movs	r3, #7
 800eeb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800eeb8:	e007      	b.n	800eeca <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800eeba:	79fb      	ldrb	r3, [r7, #7]
 800eebc:	f003 0304 	and.w	r3, r3, #4
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d002      	beq.n	800eeca <f_open+0xfa>
 800eec4:	2308      	movs	r3, #8
 800eec6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800eeca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d168      	bne.n	800efa4 <f_open+0x1d4>
 800eed2:	79fb      	ldrb	r3, [r7, #7]
 800eed4:	f003 0308 	and.w	r3, r3, #8
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d063      	beq.n	800efa4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800eedc:	f7fa fc2c 	bl	8009738 <get_fattime>
 800eee0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800eee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eee4:	330e      	adds	r3, #14
 800eee6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eee8:	4618      	mov	r0, r3
 800eeea:	f7fd fd15 	bl	800c918 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800eeee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef0:	3316      	adds	r3, #22
 800eef2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eef4:	4618      	mov	r0, r3
 800eef6:	f7fd fd0f 	bl	800c918 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800eefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eefc:	330b      	adds	r3, #11
 800eefe:	2220      	movs	r2, #32
 800ef00:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ef02:	697b      	ldr	r3, [r7, #20]
 800ef04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef06:	4611      	mov	r1, r2
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f7fe fc66 	bl	800d7da <ld_clust>
 800ef0e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ef10:	697b      	ldr	r3, [r7, #20]
 800ef12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef14:	2200      	movs	r2, #0
 800ef16:	4618      	mov	r0, r3
 800ef18:	f7fe fc7e 	bl	800d818 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ef1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef1e:	331c      	adds	r3, #28
 800ef20:	2100      	movs	r1, #0
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7fd fcf8 	bl	800c918 <st_dword>
					fs->wflag = 1;
 800ef28:	697b      	ldr	r3, [r7, #20]
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ef2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d037      	beq.n	800efa4 <f_open+0x1d4>
						dw = fs->winsect;
 800ef34:	697b      	ldr	r3, [r7, #20]
 800ef36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef38:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800ef3a:	f107 0318 	add.w	r3, r7, #24
 800ef3e:	2200      	movs	r2, #0
 800ef40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7fe f991 	bl	800d26a <remove_chain>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800ef4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d126      	bne.n	800efa4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f7fd ff36 	bl	800cdcc <move_window>
 800ef60:	4603      	mov	r3, r0
 800ef62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ef6a:	3a01      	subs	r2, #1
 800ef6c:	611a      	str	r2, [r3, #16]
 800ef6e:	e019      	b.n	800efa4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ef70:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d115      	bne.n	800efa4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ef78:	7fbb      	ldrb	r3, [r7, #30]
 800ef7a:	f003 0310 	and.w	r3, r3, #16
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d003      	beq.n	800ef8a <f_open+0x1ba>
					res = FR_NO_FILE;
 800ef82:	2304      	movs	r3, #4
 800ef84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ef88:	e00c      	b.n	800efa4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ef8a:	79fb      	ldrb	r3, [r7, #7]
 800ef8c:	f003 0302 	and.w	r3, r3, #2
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d007      	beq.n	800efa4 <f_open+0x1d4>
 800ef94:	7fbb      	ldrb	r3, [r7, #30]
 800ef96:	f003 0301 	and.w	r3, r3, #1
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d002      	beq.n	800efa4 <f_open+0x1d4>
						res = FR_DENIED;
 800ef9e:	2307      	movs	r3, #7
 800efa0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800efa4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d128      	bne.n	800effe <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800efac:	79fb      	ldrb	r3, [r7, #7]
 800efae:	f003 0308 	and.w	r3, r3, #8
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d003      	beq.n	800efbe <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800efb6:	79fb      	ldrb	r3, [r7, #7]
 800efb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efbc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800efc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800efcc:	79fb      	ldrb	r3, [r7, #7]
 800efce:	f023 0301 	bic.w	r3, r3, #1
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	bf14      	ite	ne
 800efd6:	2301      	movne	r3, #1
 800efd8:	2300      	moveq	r3, #0
 800efda:	b2db      	uxtb	r3, r3
 800efdc:	461a      	mov	r2, r3
 800efde:	f107 0318 	add.w	r3, r7, #24
 800efe2:	4611      	mov	r1, r2
 800efe4:	4618      	mov	r0, r3
 800efe6:	f7fd fdbf 	bl	800cb68 <inc_lock>
 800efea:	4602      	mov	r2, r0
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	691b      	ldr	r3, [r3, #16]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d102      	bne.n	800effe <f_open+0x22e>
 800eff8:	2302      	movs	r3, #2
 800effa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800effe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f002:	2b00      	cmp	r3, #0
 800f004:	f040 8095 	bne.w	800f132 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f008:	697b      	ldr	r3, [r7, #20]
 800f00a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f00c:	4611      	mov	r1, r2
 800f00e:	4618      	mov	r0, r3
 800f010:	f7fe fbe3 	bl	800d7da <ld_clust>
 800f014:	4602      	mov	r2, r0
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f01c:	331c      	adds	r3, #28
 800f01e:	4618      	mov	r0, r3
 800f020:	f7fd fc3c 	bl	800c89c <ld_dword>
 800f024:	4602      	mov	r2, r0
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	2200      	movs	r2, #0
 800f02e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f030:	697a      	ldr	r2, [r7, #20]
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f036:	697b      	ldr	r3, [r7, #20]
 800f038:	88da      	ldrh	r2, [r3, #6]
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	79fa      	ldrb	r2, [r7, #7]
 800f042:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	2200      	movs	r2, #0
 800f048:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	2200      	movs	r2, #0
 800f04e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	2200      	movs	r2, #0
 800f054:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	3330      	adds	r3, #48	; 0x30
 800f05a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f05e:	2100      	movs	r1, #0
 800f060:	4618      	mov	r0, r3
 800f062:	f7fd fca6 	bl	800c9b2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f066:	79fb      	ldrb	r3, [r7, #7]
 800f068:	f003 0320 	and.w	r3, r3, #32
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d060      	beq.n	800f132 <f_open+0x362>
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	68db      	ldr	r3, [r3, #12]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d05c      	beq.n	800f132 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	68da      	ldr	r2, [r3, #12]
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f080:	697b      	ldr	r3, [r7, #20]
 800f082:	895b      	ldrh	r3, [r3, #10]
 800f084:	025b      	lsls	r3, r3, #9
 800f086:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	689b      	ldr	r3, [r3, #8]
 800f08c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	68db      	ldr	r3, [r3, #12]
 800f092:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f094:	e016      	b.n	800f0c4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7fd ff51 	bl	800cf42 <get_fat>
 800f0a0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f0a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f0a4:	2b01      	cmp	r3, #1
 800f0a6:	d802      	bhi.n	800f0ae <f_open+0x2de>
 800f0a8:	2302      	movs	r3, #2
 800f0aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f0ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f0b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0b4:	d102      	bne.n	800f0bc <f_open+0x2ec>
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f0bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f0be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0c0:	1ad3      	subs	r3, r2, r3
 800f0c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f0c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d103      	bne.n	800f0d4 <f_open+0x304>
 800f0cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f0ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0d0:	429a      	cmp	r2, r3
 800f0d2:	d8e0      	bhi.n	800f096 <f_open+0x2c6>
				}
				fp->clust = clst;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f0d8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f0da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d127      	bne.n	800f132 <f_open+0x362>
 800f0e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d022      	beq.n	800f132 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f0ec:	697b      	ldr	r3, [r7, #20]
 800f0ee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f7fd ff07 	bl	800cf04 <clust2sect>
 800f0f6:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f0f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d103      	bne.n	800f106 <f_open+0x336>
						res = FR_INT_ERR;
 800f0fe:	2302      	movs	r3, #2
 800f100:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f104:	e015      	b.n	800f132 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f106:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f108:	0a5a      	lsrs	r2, r3, #9
 800f10a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f10c:	441a      	add	r2, r3
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	7858      	ldrb	r0, [r3, #1]
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	6a1a      	ldr	r2, [r3, #32]
 800f120:	2301      	movs	r3, #1
 800f122:	f7fd fb45 	bl	800c7b0 <disk_read>
 800f126:	4603      	mov	r3, r0
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d002      	beq.n	800f132 <f_open+0x362>
 800f12c:	2301      	movs	r3, #1
 800f12e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f132:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f136:	2b00      	cmp	r3, #0
 800f138:	d002      	beq.n	800f140 <f_open+0x370>
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	2200      	movs	r2, #0
 800f13e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f140:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800f144:	4618      	mov	r0, r3
 800f146:	3768      	adds	r7, #104	; 0x68
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}

0800f14c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b08e      	sub	sp, #56	; 0x38
 800f150:	af00      	add	r7, sp, #0
 800f152:	60f8      	str	r0, [r7, #12]
 800f154:	60b9      	str	r1, [r7, #8]
 800f156:	607a      	str	r2, [r7, #4]
 800f158:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800f15a:	68bb      	ldr	r3, [r7, #8]
 800f15c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	2200      	movs	r2, #0
 800f162:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	f107 0214 	add.w	r2, r7, #20
 800f16a:	4611      	mov	r1, r2
 800f16c:	4618      	mov	r0, r3
 800f16e:	f7ff fdb3 	bl	800ecd8 <validate>
 800f172:	4603      	mov	r3, r0
 800f174:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f178:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d107      	bne.n	800f190 <f_read+0x44>
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	7d5b      	ldrb	r3, [r3, #21]
 800f184:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f188:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d002      	beq.n	800f196 <f_read+0x4a>
 800f190:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f194:	e115      	b.n	800f3c2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	7d1b      	ldrb	r3, [r3, #20]
 800f19a:	f003 0301 	and.w	r3, r3, #1
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d101      	bne.n	800f1a6 <f_read+0x5a>
 800f1a2:	2307      	movs	r3, #7
 800f1a4:	e10d      	b.n	800f3c2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	68da      	ldr	r2, [r3, #12]
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	699b      	ldr	r3, [r3, #24]
 800f1ae:	1ad3      	subs	r3, r2, r3
 800f1b0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800f1b2:	687a      	ldr	r2, [r7, #4]
 800f1b4:	6a3b      	ldr	r3, [r7, #32]
 800f1b6:	429a      	cmp	r2, r3
 800f1b8:	f240 80fe 	bls.w	800f3b8 <f_read+0x26c>
 800f1bc:	6a3b      	ldr	r3, [r7, #32]
 800f1be:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800f1c0:	e0fa      	b.n	800f3b8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	699b      	ldr	r3, [r3, #24]
 800f1c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	f040 80c6 	bne.w	800f35c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	699b      	ldr	r3, [r3, #24]
 800f1d4:	0a5b      	lsrs	r3, r3, #9
 800f1d6:	697a      	ldr	r2, [r7, #20]
 800f1d8:	8952      	ldrh	r2, [r2, #10]
 800f1da:	3a01      	subs	r2, #1
 800f1dc:	4013      	ands	r3, r2
 800f1de:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800f1e0:	69fb      	ldr	r3, [r7, #28]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d12f      	bne.n	800f246 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	699b      	ldr	r3, [r3, #24]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d103      	bne.n	800f1f6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	689b      	ldr	r3, [r3, #8]
 800f1f2:	633b      	str	r3, [r7, #48]	; 0x30
 800f1f4:	e013      	b.n	800f21e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d007      	beq.n	800f20e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	699b      	ldr	r3, [r3, #24]
 800f202:	4619      	mov	r1, r3
 800f204:	68f8      	ldr	r0, [r7, #12]
 800f206:	f7fe f92d 	bl	800d464 <clmt_clust>
 800f20a:	6338      	str	r0, [r7, #48]	; 0x30
 800f20c:	e007      	b.n	800f21e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f20e:	68fa      	ldr	r2, [r7, #12]
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	69db      	ldr	r3, [r3, #28]
 800f214:	4619      	mov	r1, r3
 800f216:	4610      	mov	r0, r2
 800f218:	f7fd fe93 	bl	800cf42 <get_fat>
 800f21c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f220:	2b01      	cmp	r3, #1
 800f222:	d804      	bhi.n	800f22e <f_read+0xe2>
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	2202      	movs	r2, #2
 800f228:	755a      	strb	r2, [r3, #21]
 800f22a:	2302      	movs	r3, #2
 800f22c:	e0c9      	b.n	800f3c2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f230:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f234:	d104      	bne.n	800f240 <f_read+0xf4>
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	2201      	movs	r2, #1
 800f23a:	755a      	strb	r2, [r3, #21]
 800f23c:	2301      	movs	r3, #1
 800f23e:	e0c0      	b.n	800f3c2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f244:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f246:	697a      	ldr	r2, [r7, #20]
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	69db      	ldr	r3, [r3, #28]
 800f24c:	4619      	mov	r1, r3
 800f24e:	4610      	mov	r0, r2
 800f250:	f7fd fe58 	bl	800cf04 <clust2sect>
 800f254:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f256:	69bb      	ldr	r3, [r7, #24]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d104      	bne.n	800f266 <f_read+0x11a>
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	2202      	movs	r2, #2
 800f260:	755a      	strb	r2, [r3, #21]
 800f262:	2302      	movs	r3, #2
 800f264:	e0ad      	b.n	800f3c2 <f_read+0x276>
			sect += csect;
 800f266:	69ba      	ldr	r2, [r7, #24]
 800f268:	69fb      	ldr	r3, [r7, #28]
 800f26a:	4413      	add	r3, r2
 800f26c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	0a5b      	lsrs	r3, r3, #9
 800f272:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f276:	2b00      	cmp	r3, #0
 800f278:	d039      	beq.n	800f2ee <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f27a:	69fa      	ldr	r2, [r7, #28]
 800f27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f27e:	4413      	add	r3, r2
 800f280:	697a      	ldr	r2, [r7, #20]
 800f282:	8952      	ldrh	r2, [r2, #10]
 800f284:	4293      	cmp	r3, r2
 800f286:	d905      	bls.n	800f294 <f_read+0x148>
					cc = fs->csize - csect;
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	895b      	ldrh	r3, [r3, #10]
 800f28c:	461a      	mov	r2, r3
 800f28e:	69fb      	ldr	r3, [r7, #28]
 800f290:	1ad3      	subs	r3, r2, r3
 800f292:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f294:	697b      	ldr	r3, [r7, #20]
 800f296:	7858      	ldrb	r0, [r3, #1]
 800f298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f29a:	69ba      	ldr	r2, [r7, #24]
 800f29c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f29e:	f7fd fa87 	bl	800c7b0 <disk_read>
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d004      	beq.n	800f2b2 <f_read+0x166>
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	2201      	movs	r2, #1
 800f2ac:	755a      	strb	r2, [r3, #21]
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	e087      	b.n	800f3c2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	7d1b      	ldrb	r3, [r3, #20]
 800f2b6:	b25b      	sxtb	r3, r3
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	da14      	bge.n	800f2e6 <f_read+0x19a>
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	6a1a      	ldr	r2, [r3, #32]
 800f2c0:	69bb      	ldr	r3, [r7, #24]
 800f2c2:	1ad3      	subs	r3, r2, r3
 800f2c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2c6:	429a      	cmp	r2, r3
 800f2c8:	d90d      	bls.n	800f2e6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	6a1a      	ldr	r2, [r3, #32]
 800f2ce:	69bb      	ldr	r3, [r7, #24]
 800f2d0:	1ad3      	subs	r3, r2, r3
 800f2d2:	025b      	lsls	r3, r3, #9
 800f2d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2d6:	18d0      	adds	r0, r2, r3
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	3330      	adds	r3, #48	; 0x30
 800f2dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f2e0:	4619      	mov	r1, r3
 800f2e2:	f7fd fb45 	bl	800c970 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2e8:	025b      	lsls	r3, r3, #9
 800f2ea:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800f2ec:	e050      	b.n	800f390 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	6a1b      	ldr	r3, [r3, #32]
 800f2f2:	69ba      	ldr	r2, [r7, #24]
 800f2f4:	429a      	cmp	r2, r3
 800f2f6:	d02e      	beq.n	800f356 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	7d1b      	ldrb	r3, [r3, #20]
 800f2fc:	b25b      	sxtb	r3, r3
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	da18      	bge.n	800f334 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	7858      	ldrb	r0, [r3, #1]
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	6a1a      	ldr	r2, [r3, #32]
 800f310:	2301      	movs	r3, #1
 800f312:	f7fd fa6d 	bl	800c7f0 <disk_write>
 800f316:	4603      	mov	r3, r0
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d004      	beq.n	800f326 <f_read+0x1da>
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	2201      	movs	r2, #1
 800f320:	755a      	strb	r2, [r3, #21]
 800f322:	2301      	movs	r3, #1
 800f324:	e04d      	b.n	800f3c2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	7d1b      	ldrb	r3, [r3, #20]
 800f32a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f32e:	b2da      	uxtb	r2, r3
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	7858      	ldrb	r0, [r3, #1]
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f33e:	2301      	movs	r3, #1
 800f340:	69ba      	ldr	r2, [r7, #24]
 800f342:	f7fd fa35 	bl	800c7b0 <disk_read>
 800f346:	4603      	mov	r3, r0
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d004      	beq.n	800f356 <f_read+0x20a>
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	2201      	movs	r2, #1
 800f350:	755a      	strb	r2, [r3, #21]
 800f352:	2301      	movs	r3, #1
 800f354:	e035      	b.n	800f3c2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	69ba      	ldr	r2, [r7, #24]
 800f35a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	699b      	ldr	r3, [r3, #24]
 800f360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f364:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f368:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f36a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	429a      	cmp	r2, r3
 800f370:	d901      	bls.n	800f376 <f_read+0x22a>
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	699b      	ldr	r3, [r3, #24]
 800f380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f384:	4413      	add	r3, r2
 800f386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f388:	4619      	mov	r1, r3
 800f38a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f38c:	f7fd faf0 	bl	800c970 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f394:	4413      	add	r3, r2
 800f396:	627b      	str	r3, [r7, #36]	; 0x24
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	699a      	ldr	r2, [r3, #24]
 800f39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f39e:	441a      	add	r2, r3
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	619a      	str	r2, [r3, #24]
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	681a      	ldr	r2, [r3, #0]
 800f3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3aa:	441a      	add	r2, r3
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	601a      	str	r2, [r3, #0]
 800f3b0:	687a      	ldr	r2, [r7, #4]
 800f3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b4:	1ad3      	subs	r3, r2, r3
 800f3b6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	f47f af01 	bne.w	800f1c2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800f3c0:	2300      	movs	r3, #0
}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	3738      	adds	r7, #56	; 0x38
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd80      	pop	{r7, pc}

0800f3ca <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f3ca:	b580      	push	{r7, lr}
 800f3cc:	b086      	sub	sp, #24
 800f3ce:	af00      	add	r7, sp, #0
 800f3d0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	f107 0208 	add.w	r2, r7, #8
 800f3d8:	4611      	mov	r1, r2
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f7ff fc7c 	bl	800ecd8 <validate>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f3e4:	7dfb      	ldrb	r3, [r7, #23]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d168      	bne.n	800f4bc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	7d1b      	ldrb	r3, [r3, #20]
 800f3ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d062      	beq.n	800f4bc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	7d1b      	ldrb	r3, [r3, #20]
 800f3fa:	b25b      	sxtb	r3, r3
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	da15      	bge.n	800f42c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f400:	68bb      	ldr	r3, [r7, #8]
 800f402:	7858      	ldrb	r0, [r3, #1]
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	6a1a      	ldr	r2, [r3, #32]
 800f40e:	2301      	movs	r3, #1
 800f410:	f7fd f9ee 	bl	800c7f0 <disk_write>
 800f414:	4603      	mov	r3, r0
 800f416:	2b00      	cmp	r3, #0
 800f418:	d001      	beq.n	800f41e <f_sync+0x54>
 800f41a:	2301      	movs	r3, #1
 800f41c:	e04f      	b.n	800f4be <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	7d1b      	ldrb	r3, [r3, #20]
 800f422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f426:	b2da      	uxtb	r2, r3
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f42c:	f7fa f984 	bl	8009738 <get_fattime>
 800f430:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f432:	68ba      	ldr	r2, [r7, #8]
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f438:	4619      	mov	r1, r3
 800f43a:	4610      	mov	r0, r2
 800f43c:	f7fd fcc6 	bl	800cdcc <move_window>
 800f440:	4603      	mov	r3, r0
 800f442:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f444:	7dfb      	ldrb	r3, [r7, #23]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d138      	bne.n	800f4bc <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f44e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	330b      	adds	r3, #11
 800f454:	781a      	ldrb	r2, [r3, #0]
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	330b      	adds	r3, #11
 800f45a:	f042 0220 	orr.w	r2, r2, #32
 800f45e:	b2d2      	uxtb	r2, r2
 800f460:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	6818      	ldr	r0, [r3, #0]
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	689b      	ldr	r3, [r3, #8]
 800f46a:	461a      	mov	r2, r3
 800f46c:	68f9      	ldr	r1, [r7, #12]
 800f46e:	f7fe f9d3 	bl	800d818 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	f103 021c 	add.w	r2, r3, #28
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	68db      	ldr	r3, [r3, #12]
 800f47c:	4619      	mov	r1, r3
 800f47e:	4610      	mov	r0, r2
 800f480:	f7fd fa4a 	bl	800c918 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	3316      	adds	r3, #22
 800f488:	6939      	ldr	r1, [r7, #16]
 800f48a:	4618      	mov	r0, r3
 800f48c:	f7fd fa44 	bl	800c918 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	3312      	adds	r3, #18
 800f494:	2100      	movs	r1, #0
 800f496:	4618      	mov	r0, r3
 800f498:	f7fd fa23 	bl	800c8e2 <st_word>
					fs->wflag = 1;
 800f49c:	68bb      	ldr	r3, [r7, #8]
 800f49e:	2201      	movs	r2, #1
 800f4a0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f7fd fcbf 	bl	800ce28 <sync_fs>
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	7d1b      	ldrb	r3, [r3, #20]
 800f4b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f4b6:	b2da      	uxtb	r2, r3
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f4bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	3718      	adds	r7, #24
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}

0800f4c6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f4c6:	b580      	push	{r7, lr}
 800f4c8:	b084      	sub	sp, #16
 800f4ca:	af00      	add	r7, sp, #0
 800f4cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f7ff ff7b 	bl	800f3ca <f_sync>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f4d8:	7bfb      	ldrb	r3, [r7, #15]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d118      	bne.n	800f510 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f107 0208 	add.w	r2, r7, #8
 800f4e4:	4611      	mov	r1, r2
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f7ff fbf6 	bl	800ecd8 <validate>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f4f0:	7bfb      	ldrb	r3, [r7, #15]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d10c      	bne.n	800f510 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	691b      	ldr	r3, [r3, #16]
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f7fd fbc2 	bl	800cc84 <dec_lock>
 800f500:	4603      	mov	r3, r0
 800f502:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f504:	7bfb      	ldrb	r3, [r7, #15]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d102      	bne.n	800f510 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	2200      	movs	r2, #0
 800f50e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f510:	7bfb      	ldrb	r3, [r7, #15]
}
 800f512:	4618      	mov	r0, r3
 800f514:	3710      	adds	r7, #16
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}

0800f51a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800f51a:	b580      	push	{r7, lr}
 800f51c:	b090      	sub	sp, #64	; 0x40
 800f51e:	af00      	add	r7, sp, #0
 800f520:	6078      	str	r0, [r7, #4]
 800f522:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	f107 0208 	add.w	r2, r7, #8
 800f52a:	4611      	mov	r1, r2
 800f52c:	4618      	mov	r0, r3
 800f52e:	f7ff fbd3 	bl	800ecd8 <validate>
 800f532:	4603      	mov	r3, r0
 800f534:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800f538:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d103      	bne.n	800f548 <f_lseek+0x2e>
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	7d5b      	ldrb	r3, [r3, #21]
 800f544:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f548:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d002      	beq.n	800f556 <f_lseek+0x3c>
 800f550:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f554:	e1e6      	b.n	800f924 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	f000 80d1 	beq.w	800f702 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f566:	d15a      	bne.n	800f61e <f_lseek+0x104>
			tbl = fp->cltbl;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f56c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f570:	1d1a      	adds	r2, r3, #4
 800f572:	627a      	str	r2, [r7, #36]	; 0x24
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	617b      	str	r3, [r7, #20]
 800f578:	2302      	movs	r3, #2
 800f57a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	689b      	ldr	r3, [r3, #8]
 800f580:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800f582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f584:	2b00      	cmp	r3, #0
 800f586:	d03a      	beq.n	800f5fe <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f58a:	613b      	str	r3, [r7, #16]
 800f58c:	2300      	movs	r3, #0
 800f58e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f592:	3302      	adds	r3, #2
 800f594:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800f596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f598:	60fb      	str	r3, [r7, #12]
 800f59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f59c:	3301      	adds	r3, #1
 800f59e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f7fd fccc 	bl	800cf42 <get_fat>
 800f5aa:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ae:	2b01      	cmp	r3, #1
 800f5b0:	d804      	bhi.n	800f5bc <f_lseek+0xa2>
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	2202      	movs	r2, #2
 800f5b6:	755a      	strb	r2, [r3, #21]
 800f5b8:	2302      	movs	r3, #2
 800f5ba:	e1b3      	b.n	800f924 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5c2:	d104      	bne.n	800f5ce <f_lseek+0xb4>
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2201      	movs	r2, #1
 800f5c8:	755a      	strb	r2, [r3, #21]
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	e1aa      	b.n	800f924 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	3301      	adds	r3, #1
 800f5d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5d4:	429a      	cmp	r2, r3
 800f5d6:	d0de      	beq.n	800f596 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f5d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f5da:	697b      	ldr	r3, [r7, #20]
 800f5dc:	429a      	cmp	r2, r3
 800f5de:	d809      	bhi.n	800f5f4 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800f5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e2:	1d1a      	adds	r2, r3, #4
 800f5e4:	627a      	str	r2, [r7, #36]	; 0x24
 800f5e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5e8:	601a      	str	r2, [r3, #0]
 800f5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ec:	1d1a      	adds	r2, r3, #4
 800f5ee:	627a      	str	r2, [r7, #36]	; 0x24
 800f5f0:	693a      	ldr	r2, [r7, #16]
 800f5f2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f5f4:	68bb      	ldr	r3, [r7, #8]
 800f5f6:	699b      	ldr	r3, [r3, #24]
 800f5f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5fa:	429a      	cmp	r2, r3
 800f5fc:	d3c4      	bcc.n	800f588 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f602:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f604:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800f606:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f608:	697b      	ldr	r3, [r7, #20]
 800f60a:	429a      	cmp	r2, r3
 800f60c:	d803      	bhi.n	800f616 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800f60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f610:	2200      	movs	r2, #0
 800f612:	601a      	str	r2, [r3, #0]
 800f614:	e184      	b.n	800f920 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f616:	2311      	movs	r3, #17
 800f618:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f61c:	e180      	b.n	800f920 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	68db      	ldr	r3, [r3, #12]
 800f622:	683a      	ldr	r2, [r7, #0]
 800f624:	429a      	cmp	r2, r3
 800f626:	d902      	bls.n	800f62e <f_lseek+0x114>
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	68db      	ldr	r3, [r3, #12]
 800f62c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	683a      	ldr	r2, [r7, #0]
 800f632:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	2b00      	cmp	r3, #0
 800f638:	f000 8172 	beq.w	800f920 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	3b01      	subs	r3, #1
 800f640:	4619      	mov	r1, r3
 800f642:	6878      	ldr	r0, [r7, #4]
 800f644:	f7fd ff0e 	bl	800d464 <clmt_clust>
 800f648:	4602      	mov	r2, r0
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800f64e:	68ba      	ldr	r2, [r7, #8]
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	69db      	ldr	r3, [r3, #28]
 800f654:	4619      	mov	r1, r3
 800f656:	4610      	mov	r0, r2
 800f658:	f7fd fc54 	bl	800cf04 <clust2sect>
 800f65c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f65e:	69bb      	ldr	r3, [r7, #24]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d104      	bne.n	800f66e <f_lseek+0x154>
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2202      	movs	r2, #2
 800f668:	755a      	strb	r2, [r3, #21]
 800f66a:	2302      	movs	r3, #2
 800f66c:	e15a      	b.n	800f924 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f66e:	683b      	ldr	r3, [r7, #0]
 800f670:	3b01      	subs	r3, #1
 800f672:	0a5b      	lsrs	r3, r3, #9
 800f674:	68ba      	ldr	r2, [r7, #8]
 800f676:	8952      	ldrh	r2, [r2, #10]
 800f678:	3a01      	subs	r2, #1
 800f67a:	4013      	ands	r3, r2
 800f67c:	69ba      	ldr	r2, [r7, #24]
 800f67e:	4413      	add	r3, r2
 800f680:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	699b      	ldr	r3, [r3, #24]
 800f686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	f000 8148 	beq.w	800f920 <f_lseek+0x406>
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	6a1b      	ldr	r3, [r3, #32]
 800f694:	69ba      	ldr	r2, [r7, #24]
 800f696:	429a      	cmp	r2, r3
 800f698:	f000 8142 	beq.w	800f920 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	7d1b      	ldrb	r3, [r3, #20]
 800f6a0:	b25b      	sxtb	r3, r3
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	da18      	bge.n	800f6d8 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f6a6:	68bb      	ldr	r3, [r7, #8]
 800f6a8:	7858      	ldrb	r0, [r3, #1]
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	6a1a      	ldr	r2, [r3, #32]
 800f6b4:	2301      	movs	r3, #1
 800f6b6:	f7fd f89b 	bl	800c7f0 <disk_write>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d004      	beq.n	800f6ca <f_lseek+0x1b0>
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2201      	movs	r2, #1
 800f6c4:	755a      	strb	r2, [r3, #21]
 800f6c6:	2301      	movs	r3, #1
 800f6c8:	e12c      	b.n	800f924 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	7d1b      	ldrb	r3, [r3, #20]
 800f6ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f6d2:	b2da      	uxtb	r2, r3
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	7858      	ldrb	r0, [r3, #1]
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f6e2:	2301      	movs	r3, #1
 800f6e4:	69ba      	ldr	r2, [r7, #24]
 800f6e6:	f7fd f863 	bl	800c7b0 <disk_read>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d004      	beq.n	800f6fa <f_lseek+0x1e0>
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	2201      	movs	r2, #1
 800f6f4:	755a      	strb	r2, [r3, #21]
 800f6f6:	2301      	movs	r3, #1
 800f6f8:	e114      	b.n	800f924 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	69ba      	ldr	r2, [r7, #24]
 800f6fe:	621a      	str	r2, [r3, #32]
 800f700:	e10e      	b.n	800f920 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	68db      	ldr	r3, [r3, #12]
 800f706:	683a      	ldr	r2, [r7, #0]
 800f708:	429a      	cmp	r2, r3
 800f70a:	d908      	bls.n	800f71e <f_lseek+0x204>
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	7d1b      	ldrb	r3, [r3, #20]
 800f710:	f003 0302 	and.w	r3, r3, #2
 800f714:	2b00      	cmp	r3, #0
 800f716:	d102      	bne.n	800f71e <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	68db      	ldr	r3, [r3, #12]
 800f71c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	699b      	ldr	r3, [r3, #24]
 800f722:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f724:	2300      	movs	r3, #0
 800f726:	637b      	str	r3, [r7, #52]	; 0x34
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f72c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	2b00      	cmp	r3, #0
 800f732:	f000 80a7 	beq.w	800f884 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f736:	68bb      	ldr	r3, [r7, #8]
 800f738:	895b      	ldrh	r3, [r3, #10]
 800f73a:	025b      	lsls	r3, r3, #9
 800f73c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f73e:	6a3b      	ldr	r3, [r7, #32]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d01b      	beq.n	800f77c <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	1e5a      	subs	r2, r3, #1
 800f748:	69fb      	ldr	r3, [r7, #28]
 800f74a:	fbb2 f2f3 	udiv	r2, r2, r3
 800f74e:	6a3b      	ldr	r3, [r7, #32]
 800f750:	1e59      	subs	r1, r3, #1
 800f752:	69fb      	ldr	r3, [r7, #28]
 800f754:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f758:	429a      	cmp	r2, r3
 800f75a:	d30f      	bcc.n	800f77c <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f75c:	6a3b      	ldr	r3, [r7, #32]
 800f75e:	1e5a      	subs	r2, r3, #1
 800f760:	69fb      	ldr	r3, [r7, #28]
 800f762:	425b      	negs	r3, r3
 800f764:	401a      	ands	r2, r3
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	699b      	ldr	r3, [r3, #24]
 800f76e:	683a      	ldr	r2, [r7, #0]
 800f770:	1ad3      	subs	r3, r2, r3
 800f772:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	69db      	ldr	r3, [r3, #28]
 800f778:	63bb      	str	r3, [r7, #56]	; 0x38
 800f77a:	e022      	b.n	800f7c2 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	689b      	ldr	r3, [r3, #8]
 800f780:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f784:	2b00      	cmp	r3, #0
 800f786:	d119      	bne.n	800f7bc <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2100      	movs	r1, #0
 800f78c:	4618      	mov	r0, r3
 800f78e:	f7fd fdd1 	bl	800d334 <create_chain>
 800f792:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f796:	2b01      	cmp	r3, #1
 800f798:	d104      	bne.n	800f7a4 <f_lseek+0x28a>
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	2202      	movs	r2, #2
 800f79e:	755a      	strb	r2, [r3, #21]
 800f7a0:	2302      	movs	r3, #2
 800f7a2:	e0bf      	b.n	800f924 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7aa:	d104      	bne.n	800f7b6 <f_lseek+0x29c>
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	2201      	movs	r2, #1
 800f7b0:	755a      	strb	r2, [r3, #21]
 800f7b2:	2301      	movs	r3, #1
 800f7b4:	e0b6      	b.n	800f924 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f7ba:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f7c0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d05d      	beq.n	800f884 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800f7c8:	e03a      	b.n	800f840 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800f7ca:	683a      	ldr	r2, [r7, #0]
 800f7cc:	69fb      	ldr	r3, [r7, #28]
 800f7ce:	1ad3      	subs	r3, r2, r3
 800f7d0:	603b      	str	r3, [r7, #0]
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	699a      	ldr	r2, [r3, #24]
 800f7d6:	69fb      	ldr	r3, [r7, #28]
 800f7d8:	441a      	add	r2, r3
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	7d1b      	ldrb	r3, [r3, #20]
 800f7e2:	f003 0302 	and.w	r3, r3, #2
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d00b      	beq.n	800f802 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f7fd fda0 	bl	800d334 <create_chain>
 800f7f4:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d108      	bne.n	800f80e <f_lseek+0x2f4>
							ofs = 0; break;
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	603b      	str	r3, [r7, #0]
 800f800:	e022      	b.n	800f848 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f806:	4618      	mov	r0, r3
 800f808:	f7fd fb9b 	bl	800cf42 <get_fat>
 800f80c:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f810:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f814:	d104      	bne.n	800f820 <f_lseek+0x306>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	2201      	movs	r2, #1
 800f81a:	755a      	strb	r2, [r3, #21]
 800f81c:	2301      	movs	r3, #1
 800f81e:	e081      	b.n	800f924 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f822:	2b01      	cmp	r3, #1
 800f824:	d904      	bls.n	800f830 <f_lseek+0x316>
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	699b      	ldr	r3, [r3, #24]
 800f82a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f82c:	429a      	cmp	r2, r3
 800f82e:	d304      	bcc.n	800f83a <f_lseek+0x320>
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2202      	movs	r2, #2
 800f834:	755a      	strb	r2, [r3, #21]
 800f836:	2302      	movs	r3, #2
 800f838:	e074      	b.n	800f924 <f_lseek+0x40a>
					fp->clust = clst;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f83e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f840:	683a      	ldr	r2, [r7, #0]
 800f842:	69fb      	ldr	r3, [r7, #28]
 800f844:	429a      	cmp	r2, r3
 800f846:	d8c0      	bhi.n	800f7ca <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	699a      	ldr	r2, [r3, #24]
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	441a      	add	r2, r3
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d012      	beq.n	800f884 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f862:	4618      	mov	r0, r3
 800f864:	f7fd fb4e 	bl	800cf04 <clust2sect>
 800f868:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f86a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d104      	bne.n	800f87a <f_lseek+0x360>
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2202      	movs	r2, #2
 800f874:	755a      	strb	r2, [r3, #21]
 800f876:	2302      	movs	r3, #2
 800f878:	e054      	b.n	800f924 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	0a5b      	lsrs	r3, r3, #9
 800f87e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f880:	4413      	add	r3, r2
 800f882:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	699a      	ldr	r2, [r3, #24]
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	68db      	ldr	r3, [r3, #12]
 800f88c:	429a      	cmp	r2, r3
 800f88e:	d90a      	bls.n	800f8a6 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	699a      	ldr	r2, [r3, #24]
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	7d1b      	ldrb	r3, [r3, #20]
 800f89c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8a0:	b2da      	uxtb	r2, r3
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	699b      	ldr	r3, [r3, #24]
 800f8aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d036      	beq.n	800f920 <f_lseek+0x406>
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	6a1b      	ldr	r3, [r3, #32]
 800f8b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f8b8:	429a      	cmp	r2, r3
 800f8ba:	d031      	beq.n	800f920 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	7d1b      	ldrb	r3, [r3, #20]
 800f8c0:	b25b      	sxtb	r3, r3
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	da18      	bge.n	800f8f8 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f8c6:	68bb      	ldr	r3, [r7, #8]
 800f8c8:	7858      	ldrb	r0, [r3, #1]
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6a1a      	ldr	r2, [r3, #32]
 800f8d4:	2301      	movs	r3, #1
 800f8d6:	f7fc ff8b 	bl	800c7f0 <disk_write>
 800f8da:	4603      	mov	r3, r0
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d004      	beq.n	800f8ea <f_lseek+0x3d0>
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2201      	movs	r2, #1
 800f8e4:	755a      	strb	r2, [r3, #21]
 800f8e6:	2301      	movs	r3, #1
 800f8e8:	e01c      	b.n	800f924 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	7d1b      	ldrb	r3, [r3, #20]
 800f8ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f8f2:	b2da      	uxtb	r2, r3
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	7858      	ldrb	r0, [r3, #1]
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f902:	2301      	movs	r3, #1
 800f904:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f906:	f7fc ff53 	bl	800c7b0 <disk_read>
 800f90a:	4603      	mov	r3, r0
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d004      	beq.n	800f91a <f_lseek+0x400>
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2201      	movs	r2, #1
 800f914:	755a      	strb	r2, [r3, #21]
 800f916:	2301      	movs	r3, #1
 800f918:	e004      	b.n	800f924 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f91e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f920:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f924:	4618      	mov	r0, r3
 800f926:	3740      	adds	r7, #64	; 0x40
 800f928:	46bd      	mov	sp, r7
 800f92a:	bd80      	pop	{r7, pc}

0800f92c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b086      	sub	sp, #24
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
 800f934:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d101      	bne.n	800f940 <f_opendir+0x14>
 800f93c:	2309      	movs	r3, #9
 800f93e:	e064      	b.n	800fa0a <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800f944:	f107 010c 	add.w	r1, r7, #12
 800f948:	463b      	mov	r3, r7
 800f94a:	2200      	movs	r2, #0
 800f94c:	4618      	mov	r0, r3
 800f94e:	f7fe ff71 	bl	800e834 <find_volume>
 800f952:	4603      	mov	r3, r0
 800f954:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f956:	7dfb      	ldrb	r3, [r7, #23]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d14f      	bne.n	800f9fc <f_opendir+0xd0>
		obj->fs = fs;
 800f95c:	68fa      	ldr	r2, [r7, #12]
 800f95e:	693b      	ldr	r3, [r7, #16]
 800f960:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f962:	683b      	ldr	r3, [r7, #0]
 800f964:	4619      	mov	r1, r3
 800f966:	6878      	ldr	r0, [r7, #4]
 800f968:	f7fe fe58 	bl	800e61c <follow_path>
 800f96c:	4603      	mov	r3, r0
 800f96e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800f970:	7dfb      	ldrb	r3, [r7, #23]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d13d      	bne.n	800f9f2 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f97c:	b25b      	sxtb	r3, r3
 800f97e:	2b00      	cmp	r3, #0
 800f980:	db12      	blt.n	800f9a8 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800f982:	693b      	ldr	r3, [r7, #16]
 800f984:	799b      	ldrb	r3, [r3, #6]
 800f986:	f003 0310 	and.w	r3, r3, #16
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d00a      	beq.n	800f9a4 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800f98e:	68fa      	ldr	r2, [r7, #12]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	6a1b      	ldr	r3, [r3, #32]
 800f994:	4619      	mov	r1, r3
 800f996:	4610      	mov	r0, r2
 800f998:	f7fd ff1f 	bl	800d7da <ld_clust>
 800f99c:	4602      	mov	r2, r0
 800f99e:	693b      	ldr	r3, [r7, #16]
 800f9a0:	609a      	str	r2, [r3, #8]
 800f9a2:	e001      	b.n	800f9a8 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800f9a4:	2305      	movs	r3, #5
 800f9a6:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800f9a8:	7dfb      	ldrb	r3, [r7, #23]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d121      	bne.n	800f9f2 <f_opendir+0xc6>
				obj->id = fs->id;
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	88da      	ldrh	r2, [r3, #6]
 800f9b2:	693b      	ldr	r3, [r7, #16]
 800f9b4:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800f9b6:	2100      	movs	r1, #0
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f7fd fd87 	bl	800d4cc <dir_sdi>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800f9c2:	7dfb      	ldrb	r3, [r7, #23]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d114      	bne.n	800f9f2 <f_opendir+0xc6>
					if (obj->sclust) {
 800f9c8:	693b      	ldr	r3, [r7, #16]
 800f9ca:	689b      	ldr	r3, [r3, #8]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d00d      	beq.n	800f9ec <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800f9d0:	2100      	movs	r1, #0
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f7fd f8c8 	bl	800cb68 <inc_lock>
 800f9d8:	4602      	mov	r2, r0
 800f9da:	693b      	ldr	r3, [r7, #16]
 800f9dc:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800f9de:	693b      	ldr	r3, [r7, #16]
 800f9e0:	691b      	ldr	r3, [r3, #16]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d105      	bne.n	800f9f2 <f_opendir+0xc6>
 800f9e6:	2312      	movs	r3, #18
 800f9e8:	75fb      	strb	r3, [r7, #23]
 800f9ea:	e002      	b.n	800f9f2 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800f9ec:	693b      	ldr	r3, [r7, #16]
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800f9f2:	7dfb      	ldrb	r3, [r7, #23]
 800f9f4:	2b04      	cmp	r3, #4
 800f9f6:	d101      	bne.n	800f9fc <f_opendir+0xd0>
 800f9f8:	2305      	movs	r3, #5
 800f9fa:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800f9fc:	7dfb      	ldrb	r3, [r7, #23]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d002      	beq.n	800fa08 <f_opendir+0xdc>
 800fa02:	693b      	ldr	r3, [r7, #16]
 800fa04:	2200      	movs	r2, #0
 800fa06:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fa08:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	3718      	adds	r7, #24
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	bd80      	pop	{r7, pc}

0800fa12 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800fa12:	b580      	push	{r7, lr}
 800fa14:	b084      	sub	sp, #16
 800fa16:	af00      	add	r7, sp, #0
 800fa18:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	f107 0208 	add.w	r2, r7, #8
 800fa20:	4611      	mov	r1, r2
 800fa22:	4618      	mov	r0, r3
 800fa24:	f7ff f958 	bl	800ecd8 <validate>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fa2c:	7bfb      	ldrb	r3, [r7, #15]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d110      	bne.n	800fa54 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	691b      	ldr	r3, [r3, #16]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d006      	beq.n	800fa48 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	691b      	ldr	r3, [r3, #16]
 800fa3e:	4618      	mov	r0, r3
 800fa40:	f7fd f920 	bl	800cc84 <dec_lock>
 800fa44:	4603      	mov	r3, r0
 800fa46:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800fa48:	7bfb      	ldrb	r3, [r7, #15]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d102      	bne.n	800fa54 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	2200      	movs	r2, #0
 800fa52:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800fa54:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa56:	4618      	mov	r0, r3
 800fa58:	3710      	adds	r7, #16
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	bd80      	pop	{r7, pc}

0800fa5e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800fa5e:	b580      	push	{r7, lr}
 800fa60:	b084      	sub	sp, #16
 800fa62:	af00      	add	r7, sp, #0
 800fa64:	6078      	str	r0, [r7, #4]
 800fa66:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	f107 0208 	add.w	r2, r7, #8
 800fa6e:	4611      	mov	r1, r2
 800fa70:	4618      	mov	r0, r3
 800fa72:	f7ff f931 	bl	800ecd8 <validate>
 800fa76:	4603      	mov	r3, r0
 800fa78:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fa7a:	7bfb      	ldrb	r3, [r7, #15]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d126      	bne.n	800face <f_readdir+0x70>
		if (!fno) {
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d106      	bne.n	800fa94 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800fa86:	2100      	movs	r1, #0
 800fa88:	6878      	ldr	r0, [r7, #4]
 800fa8a:	f7fd fd1f 	bl	800d4cc <dir_sdi>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	73fb      	strb	r3, [r7, #15]
 800fa92:	e01c      	b.n	800face <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800fa94:	2100      	movs	r1, #0
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f7fe f8cb 	bl	800dc32 <dir_read>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800faa0:	7bfb      	ldrb	r3, [r7, #15]
 800faa2:	2b04      	cmp	r3, #4
 800faa4:	d101      	bne.n	800faaa <f_readdir+0x4c>
 800faa6:	2300      	movs	r3, #0
 800faa8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800faaa:	7bfb      	ldrb	r3, [r7, #15]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d10e      	bne.n	800face <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800fab0:	6839      	ldr	r1, [r7, #0]
 800fab2:	6878      	ldr	r0, [r7, #4]
 800fab4:	f7fe fb1c 	bl	800e0f0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800fab8:	2100      	movs	r1, #0
 800faba:	6878      	ldr	r0, [r7, #4]
 800fabc:	f7fd fd81 	bl	800d5c2 <dir_next>
 800fac0:	4603      	mov	r3, r0
 800fac2:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800fac4:	7bfb      	ldrb	r3, [r7, #15]
 800fac6:	2b04      	cmp	r3, #4
 800fac8:	d101      	bne.n	800face <f_readdir+0x70>
 800faca:	2300      	movs	r3, #0
 800facc:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800face:	7bfb      	ldrb	r3, [r7, #15]
}
 800fad0:	4618      	mov	r0, r3
 800fad2:	3710      	adds	r7, #16
 800fad4:	46bd      	mov	sp, r7
 800fad6:	bd80      	pop	{r7, pc}

0800fad8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fad8:	b480      	push	{r7}
 800fada:	b087      	sub	sp, #28
 800fadc:	af00      	add	r7, sp, #0
 800fade:	60f8      	str	r0, [r7, #12]
 800fae0:	60b9      	str	r1, [r7, #8]
 800fae2:	4613      	mov	r3, r2
 800fae4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fae6:	2301      	movs	r3, #1
 800fae8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800faea:	2300      	movs	r3, #0
 800faec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800faee:	4b1f      	ldr	r3, [pc, #124]	; (800fb6c <FATFS_LinkDriverEx+0x94>)
 800faf0:	7a5b      	ldrb	r3, [r3, #9]
 800faf2:	b2db      	uxtb	r3, r3
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d131      	bne.n	800fb5c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800faf8:	4b1c      	ldr	r3, [pc, #112]	; (800fb6c <FATFS_LinkDriverEx+0x94>)
 800fafa:	7a5b      	ldrb	r3, [r3, #9]
 800fafc:	b2db      	uxtb	r3, r3
 800fafe:	461a      	mov	r2, r3
 800fb00:	4b1a      	ldr	r3, [pc, #104]	; (800fb6c <FATFS_LinkDriverEx+0x94>)
 800fb02:	2100      	movs	r1, #0
 800fb04:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fb06:	4b19      	ldr	r3, [pc, #100]	; (800fb6c <FATFS_LinkDriverEx+0x94>)
 800fb08:	7a5b      	ldrb	r3, [r3, #9]
 800fb0a:	b2db      	uxtb	r3, r3
 800fb0c:	4a17      	ldr	r2, [pc, #92]	; (800fb6c <FATFS_LinkDriverEx+0x94>)
 800fb0e:	009b      	lsls	r3, r3, #2
 800fb10:	4413      	add	r3, r2
 800fb12:	68fa      	ldr	r2, [r7, #12]
 800fb14:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fb16:	4b15      	ldr	r3, [pc, #84]	; (800fb6c <FATFS_LinkDriverEx+0x94>)
 800fb18:	7a5b      	ldrb	r3, [r3, #9]
 800fb1a:	b2db      	uxtb	r3, r3
 800fb1c:	461a      	mov	r2, r3
 800fb1e:	4b13      	ldr	r3, [pc, #76]	; (800fb6c <FATFS_LinkDriverEx+0x94>)
 800fb20:	4413      	add	r3, r2
 800fb22:	79fa      	ldrb	r2, [r7, #7]
 800fb24:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fb26:	4b11      	ldr	r3, [pc, #68]	; (800fb6c <FATFS_LinkDriverEx+0x94>)
 800fb28:	7a5b      	ldrb	r3, [r3, #9]
 800fb2a:	b2db      	uxtb	r3, r3
 800fb2c:	1c5a      	adds	r2, r3, #1
 800fb2e:	b2d1      	uxtb	r1, r2
 800fb30:	4a0e      	ldr	r2, [pc, #56]	; (800fb6c <FATFS_LinkDriverEx+0x94>)
 800fb32:	7251      	strb	r1, [r2, #9]
 800fb34:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fb36:	7dbb      	ldrb	r3, [r7, #22]
 800fb38:	3330      	adds	r3, #48	; 0x30
 800fb3a:	b2da      	uxtb	r2, r3
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fb40:	68bb      	ldr	r3, [r7, #8]
 800fb42:	3301      	adds	r3, #1
 800fb44:	223a      	movs	r2, #58	; 0x3a
 800fb46:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fb48:	68bb      	ldr	r3, [r7, #8]
 800fb4a:	3302      	adds	r3, #2
 800fb4c:	222f      	movs	r2, #47	; 0x2f
 800fb4e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fb50:	68bb      	ldr	r3, [r7, #8]
 800fb52:	3303      	adds	r3, #3
 800fb54:	2200      	movs	r2, #0
 800fb56:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fb58:	2300      	movs	r3, #0
 800fb5a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fb5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb5e:	4618      	mov	r0, r3
 800fb60:	371c      	adds	r7, #28
 800fb62:	46bd      	mov	sp, r7
 800fb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb68:	4770      	bx	lr
 800fb6a:	bf00      	nop
 800fb6c:	200013f4 	.word	0x200013f4

0800fb70 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b082      	sub	sp, #8
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	6839      	ldr	r1, [r7, #0]
 800fb7e:	6878      	ldr	r0, [r7, #4]
 800fb80:	f7ff ffaa 	bl	800fad8 <FATFS_LinkDriverEx>
 800fb84:	4603      	mov	r3, r0
}
 800fb86:	4618      	mov	r0, r3
 800fb88:	3708      	adds	r7, #8
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}
	...

0800fb90 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800fb90:	b480      	push	{r7}
 800fb92:	b085      	sub	sp, #20
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	4603      	mov	r3, r0
 800fb98:	6039      	str	r1, [r7, #0]
 800fb9a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800fb9c:	88fb      	ldrh	r3, [r7, #6]
 800fb9e:	2b7f      	cmp	r3, #127	; 0x7f
 800fba0:	d802      	bhi.n	800fba8 <ff_convert+0x18>
		c = chr;
 800fba2:	88fb      	ldrh	r3, [r7, #6]
 800fba4:	81fb      	strh	r3, [r7, #14]
 800fba6:	e025      	b.n	800fbf4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d00b      	beq.n	800fbc6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800fbae:	88fb      	ldrh	r3, [r7, #6]
 800fbb0:	2bff      	cmp	r3, #255	; 0xff
 800fbb2:	d805      	bhi.n	800fbc0 <ff_convert+0x30>
 800fbb4:	88fb      	ldrh	r3, [r7, #6]
 800fbb6:	3b80      	subs	r3, #128	; 0x80
 800fbb8:	4a12      	ldr	r2, [pc, #72]	; (800fc04 <ff_convert+0x74>)
 800fbba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fbbe:	e000      	b.n	800fbc2 <ff_convert+0x32>
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	81fb      	strh	r3, [r7, #14]
 800fbc4:	e016      	b.n	800fbf4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	81fb      	strh	r3, [r7, #14]
 800fbca:	e009      	b.n	800fbe0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800fbcc:	89fb      	ldrh	r3, [r7, #14]
 800fbce:	4a0d      	ldr	r2, [pc, #52]	; (800fc04 <ff_convert+0x74>)
 800fbd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fbd4:	88fa      	ldrh	r2, [r7, #6]
 800fbd6:	429a      	cmp	r2, r3
 800fbd8:	d006      	beq.n	800fbe8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800fbda:	89fb      	ldrh	r3, [r7, #14]
 800fbdc:	3301      	adds	r3, #1
 800fbde:	81fb      	strh	r3, [r7, #14]
 800fbe0:	89fb      	ldrh	r3, [r7, #14]
 800fbe2:	2b7f      	cmp	r3, #127	; 0x7f
 800fbe4:	d9f2      	bls.n	800fbcc <ff_convert+0x3c>
 800fbe6:	e000      	b.n	800fbea <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800fbe8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800fbea:	89fb      	ldrh	r3, [r7, #14]
 800fbec:	3380      	adds	r3, #128	; 0x80
 800fbee:	b29b      	uxth	r3, r3
 800fbf0:	b2db      	uxtb	r3, r3
 800fbf2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800fbf4:	89fb      	ldrh	r3, [r7, #14]
}
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	3714      	adds	r7, #20
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc00:	4770      	bx	lr
 800fc02:	bf00      	nop
 800fc04:	080107a0 	.word	0x080107a0

0800fc08 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800fc08:	b480      	push	{r7}
 800fc0a:	b087      	sub	sp, #28
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	4603      	mov	r3, r0
 800fc10:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800fc12:	88fb      	ldrh	r3, [r7, #6]
 800fc14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc18:	d201      	bcs.n	800fc1e <ff_wtoupper+0x16>
 800fc1a:	4b3e      	ldr	r3, [pc, #248]	; (800fd14 <ff_wtoupper+0x10c>)
 800fc1c:	e000      	b.n	800fc20 <ff_wtoupper+0x18>
 800fc1e:	4b3e      	ldr	r3, [pc, #248]	; (800fd18 <ff_wtoupper+0x110>)
 800fc20:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	1c9a      	adds	r2, r3, #2
 800fc26:	617a      	str	r2, [r7, #20]
 800fc28:	881b      	ldrh	r3, [r3, #0]
 800fc2a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800fc2c:	8a7b      	ldrh	r3, [r7, #18]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d068      	beq.n	800fd04 <ff_wtoupper+0xfc>
 800fc32:	88fa      	ldrh	r2, [r7, #6]
 800fc34:	8a7b      	ldrh	r3, [r7, #18]
 800fc36:	429a      	cmp	r2, r3
 800fc38:	d364      	bcc.n	800fd04 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	1c9a      	adds	r2, r3, #2
 800fc3e:	617a      	str	r2, [r7, #20]
 800fc40:	881b      	ldrh	r3, [r3, #0]
 800fc42:	823b      	strh	r3, [r7, #16]
 800fc44:	8a3b      	ldrh	r3, [r7, #16]
 800fc46:	0a1b      	lsrs	r3, r3, #8
 800fc48:	81fb      	strh	r3, [r7, #14]
 800fc4a:	8a3b      	ldrh	r3, [r7, #16]
 800fc4c:	b2db      	uxtb	r3, r3
 800fc4e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800fc50:	88fa      	ldrh	r2, [r7, #6]
 800fc52:	8a79      	ldrh	r1, [r7, #18]
 800fc54:	8a3b      	ldrh	r3, [r7, #16]
 800fc56:	440b      	add	r3, r1
 800fc58:	429a      	cmp	r2, r3
 800fc5a:	da49      	bge.n	800fcf0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800fc5c:	89fb      	ldrh	r3, [r7, #14]
 800fc5e:	2b08      	cmp	r3, #8
 800fc60:	d84f      	bhi.n	800fd02 <ff_wtoupper+0xfa>
 800fc62:	a201      	add	r2, pc, #4	; (adr r2, 800fc68 <ff_wtoupper+0x60>)
 800fc64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc68:	0800fc8d 	.word	0x0800fc8d
 800fc6c:	0800fc9f 	.word	0x0800fc9f
 800fc70:	0800fcb5 	.word	0x0800fcb5
 800fc74:	0800fcbd 	.word	0x0800fcbd
 800fc78:	0800fcc5 	.word	0x0800fcc5
 800fc7c:	0800fccd 	.word	0x0800fccd
 800fc80:	0800fcd5 	.word	0x0800fcd5
 800fc84:	0800fcdd 	.word	0x0800fcdd
 800fc88:	0800fce5 	.word	0x0800fce5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800fc8c:	88fa      	ldrh	r2, [r7, #6]
 800fc8e:	8a7b      	ldrh	r3, [r7, #18]
 800fc90:	1ad3      	subs	r3, r2, r3
 800fc92:	005b      	lsls	r3, r3, #1
 800fc94:	697a      	ldr	r2, [r7, #20]
 800fc96:	4413      	add	r3, r2
 800fc98:	881b      	ldrh	r3, [r3, #0]
 800fc9a:	80fb      	strh	r3, [r7, #6]
 800fc9c:	e027      	b.n	800fcee <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800fc9e:	88fa      	ldrh	r2, [r7, #6]
 800fca0:	8a7b      	ldrh	r3, [r7, #18]
 800fca2:	1ad3      	subs	r3, r2, r3
 800fca4:	b29b      	uxth	r3, r3
 800fca6:	f003 0301 	and.w	r3, r3, #1
 800fcaa:	b29b      	uxth	r3, r3
 800fcac:	88fa      	ldrh	r2, [r7, #6]
 800fcae:	1ad3      	subs	r3, r2, r3
 800fcb0:	80fb      	strh	r3, [r7, #6]
 800fcb2:	e01c      	b.n	800fcee <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800fcb4:	88fb      	ldrh	r3, [r7, #6]
 800fcb6:	3b10      	subs	r3, #16
 800fcb8:	80fb      	strh	r3, [r7, #6]
 800fcba:	e018      	b.n	800fcee <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800fcbc:	88fb      	ldrh	r3, [r7, #6]
 800fcbe:	3b20      	subs	r3, #32
 800fcc0:	80fb      	strh	r3, [r7, #6]
 800fcc2:	e014      	b.n	800fcee <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800fcc4:	88fb      	ldrh	r3, [r7, #6]
 800fcc6:	3b30      	subs	r3, #48	; 0x30
 800fcc8:	80fb      	strh	r3, [r7, #6]
 800fcca:	e010      	b.n	800fcee <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800fccc:	88fb      	ldrh	r3, [r7, #6]
 800fcce:	3b1a      	subs	r3, #26
 800fcd0:	80fb      	strh	r3, [r7, #6]
 800fcd2:	e00c      	b.n	800fcee <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800fcd4:	88fb      	ldrh	r3, [r7, #6]
 800fcd6:	3308      	adds	r3, #8
 800fcd8:	80fb      	strh	r3, [r7, #6]
 800fcda:	e008      	b.n	800fcee <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800fcdc:	88fb      	ldrh	r3, [r7, #6]
 800fcde:	3b50      	subs	r3, #80	; 0x50
 800fce0:	80fb      	strh	r3, [r7, #6]
 800fce2:	e004      	b.n	800fcee <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800fce4:	88fb      	ldrh	r3, [r7, #6]
 800fce6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800fcea:	80fb      	strh	r3, [r7, #6]
 800fcec:	bf00      	nop
			}
			break;
 800fcee:	e008      	b.n	800fd02 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800fcf0:	89fb      	ldrh	r3, [r7, #14]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d195      	bne.n	800fc22 <ff_wtoupper+0x1a>
 800fcf6:	8a3b      	ldrh	r3, [r7, #16]
 800fcf8:	005b      	lsls	r3, r3, #1
 800fcfa:	697a      	ldr	r2, [r7, #20]
 800fcfc:	4413      	add	r3, r2
 800fcfe:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800fd00:	e78f      	b.n	800fc22 <ff_wtoupper+0x1a>
			break;
 800fd02:	bf00      	nop
	}

	return chr;
 800fd04:	88fb      	ldrh	r3, [r7, #6]
}
 800fd06:	4618      	mov	r0, r3
 800fd08:	371c      	adds	r7, #28
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd10:	4770      	bx	lr
 800fd12:	bf00      	nop
 800fd14:	080108a0 	.word	0x080108a0
 800fd18:	08010a94 	.word	0x08010a94

0800fd1c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800fd20:	2201      	movs	r2, #1
 800fd22:	490e      	ldr	r1, [pc, #56]	; (800fd5c <MX_USB_HOST_Init+0x40>)
 800fd24:	480e      	ldr	r0, [pc, #56]	; (800fd60 <MX_USB_HOST_Init+0x44>)
 800fd26:	f7fb f9ab 	bl	800b080 <USBH_Init>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d001      	beq.n	800fd34 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800fd30:	f7f1 fdb4 	bl	800189c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800fd34:	490b      	ldr	r1, [pc, #44]	; (800fd64 <MX_USB_HOST_Init+0x48>)
 800fd36:	480a      	ldr	r0, [pc, #40]	; (800fd60 <MX_USB_HOST_Init+0x44>)
 800fd38:	f7fb fa30 	bl	800b19c <USBH_RegisterClass>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d001      	beq.n	800fd46 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800fd42:	f7f1 fdab 	bl	800189c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800fd46:	4806      	ldr	r0, [pc, #24]	; (800fd60 <MX_USB_HOST_Init+0x44>)
 800fd48:	f7fb fab4 	bl	800b2b4 <USBH_Start>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d001      	beq.n	800fd56 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800fd52:	f7f1 fda3 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800fd56:	bf00      	nop
 800fd58:	bd80      	pop	{r7, pc}
 800fd5a:	bf00      	nop
 800fd5c:	0800fd7d 	.word	0x0800fd7d
 800fd60:	20002580 	.word	0x20002580
 800fd64:	20000048 	.word	0x20000048

0800fd68 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800fd6c:	4802      	ldr	r0, [pc, #8]	; (800fd78 <MX_USB_HOST_Process+0x10>)
 800fd6e:	f7fb fab1 	bl	800b2d4 <USBH_Process>
}
 800fd72:	bf00      	nop
 800fd74:	bd80      	pop	{r7, pc}
 800fd76:	bf00      	nop
 800fd78:	20002580 	.word	0x20002580

0800fd7c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800fd7c:	b480      	push	{r7}
 800fd7e:	b083      	sub	sp, #12
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
 800fd84:	460b      	mov	r3, r1
 800fd86:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800fd88:	78fb      	ldrb	r3, [r7, #3]
 800fd8a:	3b01      	subs	r3, #1
 800fd8c:	2b04      	cmp	r3, #4
 800fd8e:	d819      	bhi.n	800fdc4 <USBH_UserProcess+0x48>
 800fd90:	a201      	add	r2, pc, #4	; (adr r2, 800fd98 <USBH_UserProcess+0x1c>)
 800fd92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd96:	bf00      	nop
 800fd98:	0800fdc5 	.word	0x0800fdc5
 800fd9c:	0800fdb5 	.word	0x0800fdb5
 800fda0:	0800fdc5 	.word	0x0800fdc5
 800fda4:	0800fdbd 	.word	0x0800fdbd
 800fda8:	0800fdad 	.word	0x0800fdad
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800fdac:	4b09      	ldr	r3, [pc, #36]	; (800fdd4 <USBH_UserProcess+0x58>)
 800fdae:	2203      	movs	r2, #3
 800fdb0:	701a      	strb	r2, [r3, #0]
  break;
 800fdb2:	e008      	b.n	800fdc6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800fdb4:	4b07      	ldr	r3, [pc, #28]	; (800fdd4 <USBH_UserProcess+0x58>)
 800fdb6:	2202      	movs	r2, #2
 800fdb8:	701a      	strb	r2, [r3, #0]
  break;
 800fdba:	e004      	b.n	800fdc6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800fdbc:	4b05      	ldr	r3, [pc, #20]	; (800fdd4 <USBH_UserProcess+0x58>)
 800fdbe:	2201      	movs	r2, #1
 800fdc0:	701a      	strb	r2, [r3, #0]
  break;
 800fdc2:	e000      	b.n	800fdc6 <USBH_UserProcess+0x4a>

  default:
  break;
 800fdc4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800fdc6:	bf00      	nop
 800fdc8:	370c      	adds	r7, #12
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd0:	4770      	bx	lr
 800fdd2:	bf00      	nop
 800fdd4:	20001400 	.word	0x20001400

0800fdd8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b08a      	sub	sp, #40	; 0x28
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fde0:	f107 0314 	add.w	r3, r7, #20
 800fde4:	2200      	movs	r2, #0
 800fde6:	601a      	str	r2, [r3, #0]
 800fde8:	605a      	str	r2, [r3, #4]
 800fdea:	609a      	str	r2, [r3, #8]
 800fdec:	60da      	str	r2, [r3, #12]
 800fdee:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fdf8:	d147      	bne.n	800fe8a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	613b      	str	r3, [r7, #16]
 800fdfe:	4b25      	ldr	r3, [pc, #148]	; (800fe94 <HAL_HCD_MspInit+0xbc>)
 800fe00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe02:	4a24      	ldr	r2, [pc, #144]	; (800fe94 <HAL_HCD_MspInit+0xbc>)
 800fe04:	f043 0301 	orr.w	r3, r3, #1
 800fe08:	6313      	str	r3, [r2, #48]	; 0x30
 800fe0a:	4b22      	ldr	r3, [pc, #136]	; (800fe94 <HAL_HCD_MspInit+0xbc>)
 800fe0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe0e:	f003 0301 	and.w	r3, r3, #1
 800fe12:	613b      	str	r3, [r7, #16]
 800fe14:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800fe16:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe20:	2300      	movs	r3, #0
 800fe22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fe24:	f107 0314 	add.w	r3, r7, #20
 800fe28:	4619      	mov	r1, r3
 800fe2a:	481b      	ldr	r0, [pc, #108]	; (800fe98 <HAL_HCD_MspInit+0xc0>)
 800fe2c:	f7f3 fdf2 	bl	8003a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fe30:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fe34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fe36:	2302      	movs	r3, #2
 800fe38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fe3e:	2303      	movs	r3, #3
 800fe40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fe42:	230a      	movs	r3, #10
 800fe44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fe46:	f107 0314 	add.w	r3, r7, #20
 800fe4a:	4619      	mov	r1, r3
 800fe4c:	4812      	ldr	r0, [pc, #72]	; (800fe98 <HAL_HCD_MspInit+0xc0>)
 800fe4e:	f7f3 fde1 	bl	8003a14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fe52:	4b10      	ldr	r3, [pc, #64]	; (800fe94 <HAL_HCD_MspInit+0xbc>)
 800fe54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe56:	4a0f      	ldr	r2, [pc, #60]	; (800fe94 <HAL_HCD_MspInit+0xbc>)
 800fe58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe5c:	6353      	str	r3, [r2, #52]	; 0x34
 800fe5e:	2300      	movs	r3, #0
 800fe60:	60fb      	str	r3, [r7, #12]
 800fe62:	4b0c      	ldr	r3, [pc, #48]	; (800fe94 <HAL_HCD_MspInit+0xbc>)
 800fe64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe66:	4a0b      	ldr	r2, [pc, #44]	; (800fe94 <HAL_HCD_MspInit+0xbc>)
 800fe68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fe6c:	6453      	str	r3, [r2, #68]	; 0x44
 800fe6e:	4b09      	ldr	r3, [pc, #36]	; (800fe94 <HAL_HCD_MspInit+0xbc>)
 800fe70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fe76:	60fb      	str	r3, [r7, #12]
 800fe78:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	2100      	movs	r1, #0
 800fe7e:	2043      	movs	r0, #67	; 0x43
 800fe80:	f7f3 f953 	bl	800312a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fe84:	2043      	movs	r0, #67	; 0x43
 800fe86:	f7f3 f96c 	bl	8003162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fe8a:	bf00      	nop
 800fe8c:	3728      	adds	r7, #40	; 0x28
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	bd80      	pop	{r7, pc}
 800fe92:	bf00      	nop
 800fe94:	40023800 	.word	0x40023800
 800fe98:	40020000 	.word	0x40020000

0800fe9c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b082      	sub	sp, #8
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800feaa:	4618      	mov	r0, r3
 800feac:	f7fb fde5 	bl	800ba7a <USBH_LL_IncTimer>
}
 800feb0:	bf00      	nop
 800feb2:	3708      	adds	r7, #8
 800feb4:	46bd      	mov	sp, r7
 800feb6:	bd80      	pop	{r7, pc}

0800feb8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b082      	sub	sp, #8
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fec6:	4618      	mov	r0, r3
 800fec8:	f7fb fe1d 	bl	800bb06 <USBH_LL_Connect>
}
 800fecc:	bf00      	nop
 800fece:	3708      	adds	r7, #8
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}

0800fed4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b082      	sub	sp, #8
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fee2:	4618      	mov	r0, r3
 800fee4:	f7fb fe26 	bl	800bb34 <USBH_LL_Disconnect>
}
 800fee8:	bf00      	nop
 800feea:	3708      	adds	r7, #8
 800feec:	46bd      	mov	sp, r7
 800feee:	bd80      	pop	{r7, pc}

0800fef0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800fef0:	b480      	push	{r7}
 800fef2:	b083      	sub	sp, #12
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
 800fef8:	460b      	mov	r3, r1
 800fefa:	70fb      	strb	r3, [r7, #3]
 800fefc:	4613      	mov	r3, r2
 800fefe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ff00:	bf00      	nop
 800ff02:	370c      	adds	r7, #12
 800ff04:	46bd      	mov	sp, r7
 800ff06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0a:	4770      	bx	lr

0800ff0c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b082      	sub	sp, #8
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f7fb fdd7 	bl	800bace <USBH_LL_PortEnabled>
}
 800ff20:	bf00      	nop
 800ff22:	3708      	adds	r7, #8
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}

0800ff28 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b082      	sub	sp, #8
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ff36:	4618      	mov	r0, r3
 800ff38:	f7fb fdd7 	bl	800baea <USBH_LL_PortDisabled>
}
 800ff3c:	bf00      	nop
 800ff3e:	3708      	adds	r7, #8
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}

0800ff44 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b082      	sub	sp, #8
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ff52:	2b01      	cmp	r3, #1
 800ff54:	d12a      	bne.n	800ffac <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ff56:	4a18      	ldr	r2, [pc, #96]	; (800ffb8 <USBH_LL_Init+0x74>)
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	4a15      	ldr	r2, [pc, #84]	; (800ffb8 <USBH_LL_Init+0x74>)
 800ff62:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ff66:	4b14      	ldr	r3, [pc, #80]	; (800ffb8 <USBH_LL_Init+0x74>)
 800ff68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ff6c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ff6e:	4b12      	ldr	r3, [pc, #72]	; (800ffb8 <USBH_LL_Init+0x74>)
 800ff70:	2208      	movs	r2, #8
 800ff72:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ff74:	4b10      	ldr	r3, [pc, #64]	; (800ffb8 <USBH_LL_Init+0x74>)
 800ff76:	2201      	movs	r2, #1
 800ff78:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ff7a:	4b0f      	ldr	r3, [pc, #60]	; (800ffb8 <USBH_LL_Init+0x74>)
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ff80:	4b0d      	ldr	r3, [pc, #52]	; (800ffb8 <USBH_LL_Init+0x74>)
 800ff82:	2202      	movs	r2, #2
 800ff84:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ff86:	4b0c      	ldr	r3, [pc, #48]	; (800ffb8 <USBH_LL_Init+0x74>)
 800ff88:	2200      	movs	r2, #0
 800ff8a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ff8c:	480a      	ldr	r0, [pc, #40]	; (800ffb8 <USBH_LL_Init+0x74>)
 800ff8e:	f7f4 f82e 	bl	8003fee <HAL_HCD_Init>
 800ff92:	4603      	mov	r3, r0
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d001      	beq.n	800ff9c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ff98:	f7f1 fc80 	bl	800189c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ff9c:	4806      	ldr	r0, [pc, #24]	; (800ffb8 <USBH_LL_Init+0x74>)
 800ff9e:	f7f4 fc12 	bl	80047c6 <HAL_HCD_GetCurrentFrame>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	4619      	mov	r1, r3
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f7fb fd58 	bl	800ba5c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ffac:	2300      	movs	r3, #0
}
 800ffae:	4618      	mov	r0, r3
 800ffb0:	3708      	adds	r7, #8
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	bd80      	pop	{r7, pc}
 800ffb6:	bf00      	nop
 800ffb8:	20002958 	.word	0x20002958

0800ffbc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b084      	sub	sp, #16
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ffc8:	2300      	movs	r3, #0
 800ffca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	f7f4 fb81 	bl	80046da <HAL_HCD_Start>
 800ffd8:	4603      	mov	r3, r0
 800ffda:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ffdc:	7bfb      	ldrb	r3, [r7, #15]
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f000 f98c 	bl	80102fc <USBH_Get_USB_Status>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ffe8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ffea:	4618      	mov	r0, r3
 800ffec:	3710      	adds	r7, #16
 800ffee:	46bd      	mov	sp, r7
 800fff0:	bd80      	pop	{r7, pc}

0800fff2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800fff2:	b580      	push	{r7, lr}
 800fff4:	b084      	sub	sp, #16
 800fff6:	af00      	add	r7, sp, #0
 800fff8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fffa:	2300      	movs	r3, #0
 800fffc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fffe:	2300      	movs	r3, #0
 8010000:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010008:	4618      	mov	r0, r3
 801000a:	f7f4 fb89 	bl	8004720 <HAL_HCD_Stop>
 801000e:	4603      	mov	r3, r0
 8010010:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010012:	7bfb      	ldrb	r3, [r7, #15]
 8010014:	4618      	mov	r0, r3
 8010016:	f000 f971 	bl	80102fc <USBH_Get_USB_Status>
 801001a:	4603      	mov	r3, r0
 801001c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801001e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010020:	4618      	mov	r0, r3
 8010022:	3710      	adds	r7, #16
 8010024:	46bd      	mov	sp, r7
 8010026:	bd80      	pop	{r7, pc}

08010028 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010028:	b580      	push	{r7, lr}
 801002a:	b084      	sub	sp, #16
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010030:	2301      	movs	r3, #1
 8010032:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801003a:	4618      	mov	r0, r3
 801003c:	f7f4 fbd1 	bl	80047e2 <HAL_HCD_GetCurrentSpeed>
 8010040:	4603      	mov	r3, r0
 8010042:	2b02      	cmp	r3, #2
 8010044:	d00c      	beq.n	8010060 <USBH_LL_GetSpeed+0x38>
 8010046:	2b02      	cmp	r3, #2
 8010048:	d80d      	bhi.n	8010066 <USBH_LL_GetSpeed+0x3e>
 801004a:	2b00      	cmp	r3, #0
 801004c:	d002      	beq.n	8010054 <USBH_LL_GetSpeed+0x2c>
 801004e:	2b01      	cmp	r3, #1
 8010050:	d003      	beq.n	801005a <USBH_LL_GetSpeed+0x32>
 8010052:	e008      	b.n	8010066 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010054:	2300      	movs	r3, #0
 8010056:	73fb      	strb	r3, [r7, #15]
    break;
 8010058:	e008      	b.n	801006c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801005a:	2301      	movs	r3, #1
 801005c:	73fb      	strb	r3, [r7, #15]
    break;
 801005e:	e005      	b.n	801006c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010060:	2302      	movs	r3, #2
 8010062:	73fb      	strb	r3, [r7, #15]
    break;
 8010064:	e002      	b.n	801006c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010066:	2301      	movs	r3, #1
 8010068:	73fb      	strb	r3, [r7, #15]
    break;
 801006a:	bf00      	nop
  }
  return  speed;
 801006c:	7bfb      	ldrb	r3, [r7, #15]
}
 801006e:	4618      	mov	r0, r3
 8010070:	3710      	adds	r7, #16
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}

08010076 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010076:	b580      	push	{r7, lr}
 8010078:	b084      	sub	sp, #16
 801007a:	af00      	add	r7, sp, #0
 801007c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801007e:	2300      	movs	r3, #0
 8010080:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010082:	2300      	movs	r3, #0
 8010084:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801008c:	4618      	mov	r0, r3
 801008e:	f7f4 fb64 	bl	800475a <HAL_HCD_ResetPort>
 8010092:	4603      	mov	r3, r0
 8010094:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010096:	7bfb      	ldrb	r3, [r7, #15]
 8010098:	4618      	mov	r0, r3
 801009a:	f000 f92f 	bl	80102fc <USBH_Get_USB_Status>
 801009e:	4603      	mov	r3, r0
 80100a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80100a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80100a4:	4618      	mov	r0, r3
 80100a6:	3710      	adds	r7, #16
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bd80      	pop	{r7, pc}

080100ac <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b082      	sub	sp, #8
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
 80100b4:	460b      	mov	r3, r1
 80100b6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80100be:	78fa      	ldrb	r2, [r7, #3]
 80100c0:	4611      	mov	r1, r2
 80100c2:	4618      	mov	r0, r3
 80100c4:	f7f4 fb6b 	bl	800479e <HAL_HCD_HC_GetXferCount>
 80100c8:	4603      	mov	r3, r0
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	3708      	adds	r7, #8
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}

080100d2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80100d2:	b590      	push	{r4, r7, lr}
 80100d4:	b089      	sub	sp, #36	; 0x24
 80100d6:	af04      	add	r7, sp, #16
 80100d8:	6078      	str	r0, [r7, #4]
 80100da:	4608      	mov	r0, r1
 80100dc:	4611      	mov	r1, r2
 80100de:	461a      	mov	r2, r3
 80100e0:	4603      	mov	r3, r0
 80100e2:	70fb      	strb	r3, [r7, #3]
 80100e4:	460b      	mov	r3, r1
 80100e6:	70bb      	strb	r3, [r7, #2]
 80100e8:	4613      	mov	r3, r2
 80100ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100ec:	2300      	movs	r3, #0
 80100ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80100f0:	2300      	movs	r3, #0
 80100f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80100fa:	787c      	ldrb	r4, [r7, #1]
 80100fc:	78ba      	ldrb	r2, [r7, #2]
 80100fe:	78f9      	ldrb	r1, [r7, #3]
 8010100:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010102:	9302      	str	r3, [sp, #8]
 8010104:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010108:	9301      	str	r3, [sp, #4]
 801010a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801010e:	9300      	str	r3, [sp, #0]
 8010110:	4623      	mov	r3, r4
 8010112:	f7f3 ffce 	bl	80040b2 <HAL_HCD_HC_Init>
 8010116:	4603      	mov	r3, r0
 8010118:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801011a:	7bfb      	ldrb	r3, [r7, #15]
 801011c:	4618      	mov	r0, r3
 801011e:	f000 f8ed 	bl	80102fc <USBH_Get_USB_Status>
 8010122:	4603      	mov	r3, r0
 8010124:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010126:	7bbb      	ldrb	r3, [r7, #14]
}
 8010128:	4618      	mov	r0, r3
 801012a:	3714      	adds	r7, #20
 801012c:	46bd      	mov	sp, r7
 801012e:	bd90      	pop	{r4, r7, pc}

08010130 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b084      	sub	sp, #16
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
 8010138:	460b      	mov	r3, r1
 801013a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801013c:	2300      	movs	r3, #0
 801013e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010140:	2300      	movs	r3, #0
 8010142:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801014a:	78fa      	ldrb	r2, [r7, #3]
 801014c:	4611      	mov	r1, r2
 801014e:	4618      	mov	r0, r3
 8010150:	f7f4 f83e 	bl	80041d0 <HAL_HCD_HC_Halt>
 8010154:	4603      	mov	r3, r0
 8010156:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010158:	7bfb      	ldrb	r3, [r7, #15]
 801015a:	4618      	mov	r0, r3
 801015c:	f000 f8ce 	bl	80102fc <USBH_Get_USB_Status>
 8010160:	4603      	mov	r3, r0
 8010162:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010164:	7bbb      	ldrb	r3, [r7, #14]
}
 8010166:	4618      	mov	r0, r3
 8010168:	3710      	adds	r7, #16
 801016a:	46bd      	mov	sp, r7
 801016c:	bd80      	pop	{r7, pc}

0801016e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801016e:	b590      	push	{r4, r7, lr}
 8010170:	b089      	sub	sp, #36	; 0x24
 8010172:	af04      	add	r7, sp, #16
 8010174:	6078      	str	r0, [r7, #4]
 8010176:	4608      	mov	r0, r1
 8010178:	4611      	mov	r1, r2
 801017a:	461a      	mov	r2, r3
 801017c:	4603      	mov	r3, r0
 801017e:	70fb      	strb	r3, [r7, #3]
 8010180:	460b      	mov	r3, r1
 8010182:	70bb      	strb	r3, [r7, #2]
 8010184:	4613      	mov	r3, r2
 8010186:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010188:	2300      	movs	r3, #0
 801018a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801018c:	2300      	movs	r3, #0
 801018e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010196:	787c      	ldrb	r4, [r7, #1]
 8010198:	78ba      	ldrb	r2, [r7, #2]
 801019a:	78f9      	ldrb	r1, [r7, #3]
 801019c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80101a0:	9303      	str	r3, [sp, #12]
 80101a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80101a4:	9302      	str	r3, [sp, #8]
 80101a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a8:	9301      	str	r3, [sp, #4]
 80101aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80101ae:	9300      	str	r3, [sp, #0]
 80101b0:	4623      	mov	r3, r4
 80101b2:	f7f4 f831 	bl	8004218 <HAL_HCD_HC_SubmitRequest>
 80101b6:	4603      	mov	r3, r0
 80101b8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80101ba:	7bfb      	ldrb	r3, [r7, #15]
 80101bc:	4618      	mov	r0, r3
 80101be:	f000 f89d 	bl	80102fc <USBH_Get_USB_Status>
 80101c2:	4603      	mov	r3, r0
 80101c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80101c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80101c8:	4618      	mov	r0, r3
 80101ca:	3714      	adds	r7, #20
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bd90      	pop	{r4, r7, pc}

080101d0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b082      	sub	sp, #8
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
 80101d8:	460b      	mov	r3, r1
 80101da:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80101e2:	78fa      	ldrb	r2, [r7, #3]
 80101e4:	4611      	mov	r1, r2
 80101e6:	4618      	mov	r0, r3
 80101e8:	f7f4 fac5 	bl	8004776 <HAL_HCD_HC_GetURBState>
 80101ec:	4603      	mov	r3, r0
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	3708      	adds	r7, #8
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}

080101f6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80101f6:	b580      	push	{r7, lr}
 80101f8:	b082      	sub	sp, #8
 80101fa:	af00      	add	r7, sp, #0
 80101fc:	6078      	str	r0, [r7, #4]
 80101fe:	460b      	mov	r3, r1
 8010200:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010208:	2b01      	cmp	r3, #1
 801020a:	d103      	bne.n	8010214 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801020c:	78fb      	ldrb	r3, [r7, #3]
 801020e:	4618      	mov	r0, r3
 8010210:	f000 f8a0 	bl	8010354 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010214:	20c8      	movs	r0, #200	; 0xc8
 8010216:	f7f2 f81d 	bl	8002254 <HAL_Delay>
  return USBH_OK;
 801021a:	2300      	movs	r3, #0
}
 801021c:	4618      	mov	r0, r3
 801021e:	3708      	adds	r7, #8
 8010220:	46bd      	mov	sp, r7
 8010222:	bd80      	pop	{r7, pc}

08010224 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010224:	b480      	push	{r7}
 8010226:	b085      	sub	sp, #20
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
 801022c:	460b      	mov	r3, r1
 801022e:	70fb      	strb	r3, [r7, #3]
 8010230:	4613      	mov	r3, r2
 8010232:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801023a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801023c:	78fb      	ldrb	r3, [r7, #3]
 801023e:	68fa      	ldr	r2, [r7, #12]
 8010240:	212c      	movs	r1, #44	; 0x2c
 8010242:	fb01 f303 	mul.w	r3, r1, r3
 8010246:	4413      	add	r3, r2
 8010248:	333b      	adds	r3, #59	; 0x3b
 801024a:	781b      	ldrb	r3, [r3, #0]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d009      	beq.n	8010264 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010250:	78fb      	ldrb	r3, [r7, #3]
 8010252:	68fa      	ldr	r2, [r7, #12]
 8010254:	212c      	movs	r1, #44	; 0x2c
 8010256:	fb01 f303 	mul.w	r3, r1, r3
 801025a:	4413      	add	r3, r2
 801025c:	3354      	adds	r3, #84	; 0x54
 801025e:	78ba      	ldrb	r2, [r7, #2]
 8010260:	701a      	strb	r2, [r3, #0]
 8010262:	e008      	b.n	8010276 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010264:	78fb      	ldrb	r3, [r7, #3]
 8010266:	68fa      	ldr	r2, [r7, #12]
 8010268:	212c      	movs	r1, #44	; 0x2c
 801026a:	fb01 f303 	mul.w	r3, r1, r3
 801026e:	4413      	add	r3, r2
 8010270:	3355      	adds	r3, #85	; 0x55
 8010272:	78ba      	ldrb	r2, [r7, #2]
 8010274:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010276:	2300      	movs	r3, #0
}
 8010278:	4618      	mov	r0, r3
 801027a:	3714      	adds	r7, #20
 801027c:	46bd      	mov	sp, r7
 801027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010282:	4770      	bx	lr

08010284 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010284:	b480      	push	{r7}
 8010286:	b085      	sub	sp, #20
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
 801028c:	460b      	mov	r3, r1
 801028e:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8010290:	2300      	movs	r3, #0
 8010292:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801029a:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 801029c:	78fb      	ldrb	r3, [r7, #3]
 801029e:	68ba      	ldr	r2, [r7, #8]
 80102a0:	212c      	movs	r1, #44	; 0x2c
 80102a2:	fb01 f303 	mul.w	r3, r1, r3
 80102a6:	4413      	add	r3, r2
 80102a8:	333b      	adds	r3, #59	; 0x3b
 80102aa:	781b      	ldrb	r3, [r3, #0]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d009      	beq.n	80102c4 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 80102b0:	78fb      	ldrb	r3, [r7, #3]
 80102b2:	68ba      	ldr	r2, [r7, #8]
 80102b4:	212c      	movs	r1, #44	; 0x2c
 80102b6:	fb01 f303 	mul.w	r3, r1, r3
 80102ba:	4413      	add	r3, r2
 80102bc:	3354      	adds	r3, #84	; 0x54
 80102be:	781b      	ldrb	r3, [r3, #0]
 80102c0:	73fb      	strb	r3, [r7, #15]
 80102c2:	e008      	b.n	80102d6 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 80102c4:	78fb      	ldrb	r3, [r7, #3]
 80102c6:	68ba      	ldr	r2, [r7, #8]
 80102c8:	212c      	movs	r1, #44	; 0x2c
 80102ca:	fb01 f303 	mul.w	r3, r1, r3
 80102ce:	4413      	add	r3, r2
 80102d0:	3355      	adds	r3, #85	; 0x55
 80102d2:	781b      	ldrb	r3, [r3, #0]
 80102d4:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 80102d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80102d8:	4618      	mov	r0, r3
 80102da:	3714      	adds	r7, #20
 80102dc:	46bd      	mov	sp, r7
 80102de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e2:	4770      	bx	lr

080102e4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b082      	sub	sp, #8
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80102ec:	6878      	ldr	r0, [r7, #4]
 80102ee:	f7f1 ffb1 	bl	8002254 <HAL_Delay>
}
 80102f2:	bf00      	nop
 80102f4:	3708      	adds	r7, #8
 80102f6:	46bd      	mov	sp, r7
 80102f8:	bd80      	pop	{r7, pc}
	...

080102fc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80102fc:	b480      	push	{r7}
 80102fe:	b085      	sub	sp, #20
 8010300:	af00      	add	r7, sp, #0
 8010302:	4603      	mov	r3, r0
 8010304:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010306:	2300      	movs	r3, #0
 8010308:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801030a:	79fb      	ldrb	r3, [r7, #7]
 801030c:	2b03      	cmp	r3, #3
 801030e:	d817      	bhi.n	8010340 <USBH_Get_USB_Status+0x44>
 8010310:	a201      	add	r2, pc, #4	; (adr r2, 8010318 <USBH_Get_USB_Status+0x1c>)
 8010312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010316:	bf00      	nop
 8010318:	08010329 	.word	0x08010329
 801031c:	0801032f 	.word	0x0801032f
 8010320:	08010335 	.word	0x08010335
 8010324:	0801033b 	.word	0x0801033b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010328:	2300      	movs	r3, #0
 801032a:	73fb      	strb	r3, [r7, #15]
    break;
 801032c:	e00b      	b.n	8010346 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801032e:	2302      	movs	r3, #2
 8010330:	73fb      	strb	r3, [r7, #15]
    break;
 8010332:	e008      	b.n	8010346 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010334:	2301      	movs	r3, #1
 8010336:	73fb      	strb	r3, [r7, #15]
    break;
 8010338:	e005      	b.n	8010346 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801033a:	2302      	movs	r3, #2
 801033c:	73fb      	strb	r3, [r7, #15]
    break;
 801033e:	e002      	b.n	8010346 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010340:	2302      	movs	r3, #2
 8010342:	73fb      	strb	r3, [r7, #15]
    break;
 8010344:	bf00      	nop
  }
  return usb_status;
 8010346:	7bfb      	ldrb	r3, [r7, #15]
}
 8010348:	4618      	mov	r0, r3
 801034a:	3714      	adds	r7, #20
 801034c:	46bd      	mov	sp, r7
 801034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010352:	4770      	bx	lr

08010354 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b084      	sub	sp, #16
 8010358:	af00      	add	r7, sp, #0
 801035a:	4603      	mov	r3, r0
 801035c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801035e:	79fb      	ldrb	r3, [r7, #7]
 8010360:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8010362:	79fb      	ldrb	r3, [r7, #7]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d102      	bne.n	801036e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8010368:	2301      	movs	r3, #1
 801036a:	73fb      	strb	r3, [r7, #15]
 801036c:	e001      	b.n	8010372 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801036e:	2300      	movs	r3, #0
 8010370:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8010372:	7bfb      	ldrb	r3, [r7, #15]
 8010374:	461a      	mov	r2, r3
 8010376:	2101      	movs	r1, #1
 8010378:	4803      	ldr	r0, [pc, #12]	; (8010388 <MX_DriverVbusFS+0x34>)
 801037a:	f7f3 fdfb 	bl	8003f74 <HAL_GPIO_WritePin>
}
 801037e:	bf00      	nop
 8010380:	3710      	adds	r7, #16
 8010382:	46bd      	mov	sp, r7
 8010384:	bd80      	pop	{r7, pc}
 8010386:	bf00      	nop
 8010388:	40020800 	.word	0x40020800

0801038c <__errno>:
 801038c:	4b01      	ldr	r3, [pc, #4]	; (8010394 <__errno+0x8>)
 801038e:	6818      	ldr	r0, [r3, #0]
 8010390:	4770      	bx	lr
 8010392:	bf00      	nop
 8010394:	20000068 	.word	0x20000068

08010398 <__libc_init_array>:
 8010398:	b570      	push	{r4, r5, r6, lr}
 801039a:	4d0d      	ldr	r5, [pc, #52]	; (80103d0 <__libc_init_array+0x38>)
 801039c:	4c0d      	ldr	r4, [pc, #52]	; (80103d4 <__libc_init_array+0x3c>)
 801039e:	1b64      	subs	r4, r4, r5
 80103a0:	10a4      	asrs	r4, r4, #2
 80103a2:	2600      	movs	r6, #0
 80103a4:	42a6      	cmp	r6, r4
 80103a6:	d109      	bne.n	80103bc <__libc_init_array+0x24>
 80103a8:	4d0b      	ldr	r5, [pc, #44]	; (80103d8 <__libc_init_array+0x40>)
 80103aa:	4c0c      	ldr	r4, [pc, #48]	; (80103dc <__libc_init_array+0x44>)
 80103ac:	f000 f930 	bl	8010610 <_init>
 80103b0:	1b64      	subs	r4, r4, r5
 80103b2:	10a4      	asrs	r4, r4, #2
 80103b4:	2600      	movs	r6, #0
 80103b6:	42a6      	cmp	r6, r4
 80103b8:	d105      	bne.n	80103c6 <__libc_init_array+0x2e>
 80103ba:	bd70      	pop	{r4, r5, r6, pc}
 80103bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80103c0:	4798      	blx	r3
 80103c2:	3601      	adds	r6, #1
 80103c4:	e7ee      	b.n	80103a4 <__libc_init_array+0xc>
 80103c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80103ca:	4798      	blx	r3
 80103cc:	3601      	adds	r6, #1
 80103ce:	e7f2      	b.n	80103b6 <__libc_init_array+0x1e>
 80103d0:	08010b58 	.word	0x08010b58
 80103d4:	08010b58 	.word	0x08010b58
 80103d8:	08010b58 	.word	0x08010b58
 80103dc:	08010b5c 	.word	0x08010b5c

080103e0 <malloc>:
 80103e0:	4b02      	ldr	r3, [pc, #8]	; (80103ec <malloc+0xc>)
 80103e2:	4601      	mov	r1, r0
 80103e4:	6818      	ldr	r0, [r3, #0]
 80103e6:	f000 b871 	b.w	80104cc <_malloc_r>
 80103ea:	bf00      	nop
 80103ec:	20000068 	.word	0x20000068

080103f0 <free>:
 80103f0:	4b02      	ldr	r3, [pc, #8]	; (80103fc <free+0xc>)
 80103f2:	4601      	mov	r1, r0
 80103f4:	6818      	ldr	r0, [r3, #0]
 80103f6:	f000 b819 	b.w	801042c <_free_r>
 80103fa:	bf00      	nop
 80103fc:	20000068 	.word	0x20000068

08010400 <memcpy>:
 8010400:	440a      	add	r2, r1
 8010402:	4291      	cmp	r1, r2
 8010404:	f100 33ff 	add.w	r3, r0, #4294967295
 8010408:	d100      	bne.n	801040c <memcpy+0xc>
 801040a:	4770      	bx	lr
 801040c:	b510      	push	{r4, lr}
 801040e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010412:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010416:	4291      	cmp	r1, r2
 8010418:	d1f9      	bne.n	801040e <memcpy+0xe>
 801041a:	bd10      	pop	{r4, pc}

0801041c <memset>:
 801041c:	4402      	add	r2, r0
 801041e:	4603      	mov	r3, r0
 8010420:	4293      	cmp	r3, r2
 8010422:	d100      	bne.n	8010426 <memset+0xa>
 8010424:	4770      	bx	lr
 8010426:	f803 1b01 	strb.w	r1, [r3], #1
 801042a:	e7f9      	b.n	8010420 <memset+0x4>

0801042c <_free_r>:
 801042c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801042e:	2900      	cmp	r1, #0
 8010430:	d048      	beq.n	80104c4 <_free_r+0x98>
 8010432:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010436:	9001      	str	r0, [sp, #4]
 8010438:	2b00      	cmp	r3, #0
 801043a:	f1a1 0404 	sub.w	r4, r1, #4
 801043e:	bfb8      	it	lt
 8010440:	18e4      	addlt	r4, r4, r3
 8010442:	f000 f8d7 	bl	80105f4 <__malloc_lock>
 8010446:	4a20      	ldr	r2, [pc, #128]	; (80104c8 <_free_r+0x9c>)
 8010448:	9801      	ldr	r0, [sp, #4]
 801044a:	6813      	ldr	r3, [r2, #0]
 801044c:	4615      	mov	r5, r2
 801044e:	b933      	cbnz	r3, 801045e <_free_r+0x32>
 8010450:	6063      	str	r3, [r4, #4]
 8010452:	6014      	str	r4, [r2, #0]
 8010454:	b003      	add	sp, #12
 8010456:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801045a:	f000 b8d1 	b.w	8010600 <__malloc_unlock>
 801045e:	42a3      	cmp	r3, r4
 8010460:	d90b      	bls.n	801047a <_free_r+0x4e>
 8010462:	6821      	ldr	r1, [r4, #0]
 8010464:	1862      	adds	r2, r4, r1
 8010466:	4293      	cmp	r3, r2
 8010468:	bf04      	itt	eq
 801046a:	681a      	ldreq	r2, [r3, #0]
 801046c:	685b      	ldreq	r3, [r3, #4]
 801046e:	6063      	str	r3, [r4, #4]
 8010470:	bf04      	itt	eq
 8010472:	1852      	addeq	r2, r2, r1
 8010474:	6022      	streq	r2, [r4, #0]
 8010476:	602c      	str	r4, [r5, #0]
 8010478:	e7ec      	b.n	8010454 <_free_r+0x28>
 801047a:	461a      	mov	r2, r3
 801047c:	685b      	ldr	r3, [r3, #4]
 801047e:	b10b      	cbz	r3, 8010484 <_free_r+0x58>
 8010480:	42a3      	cmp	r3, r4
 8010482:	d9fa      	bls.n	801047a <_free_r+0x4e>
 8010484:	6811      	ldr	r1, [r2, #0]
 8010486:	1855      	adds	r5, r2, r1
 8010488:	42a5      	cmp	r5, r4
 801048a:	d10b      	bne.n	80104a4 <_free_r+0x78>
 801048c:	6824      	ldr	r4, [r4, #0]
 801048e:	4421      	add	r1, r4
 8010490:	1854      	adds	r4, r2, r1
 8010492:	42a3      	cmp	r3, r4
 8010494:	6011      	str	r1, [r2, #0]
 8010496:	d1dd      	bne.n	8010454 <_free_r+0x28>
 8010498:	681c      	ldr	r4, [r3, #0]
 801049a:	685b      	ldr	r3, [r3, #4]
 801049c:	6053      	str	r3, [r2, #4]
 801049e:	4421      	add	r1, r4
 80104a0:	6011      	str	r1, [r2, #0]
 80104a2:	e7d7      	b.n	8010454 <_free_r+0x28>
 80104a4:	d902      	bls.n	80104ac <_free_r+0x80>
 80104a6:	230c      	movs	r3, #12
 80104a8:	6003      	str	r3, [r0, #0]
 80104aa:	e7d3      	b.n	8010454 <_free_r+0x28>
 80104ac:	6825      	ldr	r5, [r4, #0]
 80104ae:	1961      	adds	r1, r4, r5
 80104b0:	428b      	cmp	r3, r1
 80104b2:	bf04      	itt	eq
 80104b4:	6819      	ldreq	r1, [r3, #0]
 80104b6:	685b      	ldreq	r3, [r3, #4]
 80104b8:	6063      	str	r3, [r4, #4]
 80104ba:	bf04      	itt	eq
 80104bc:	1949      	addeq	r1, r1, r5
 80104be:	6021      	streq	r1, [r4, #0]
 80104c0:	6054      	str	r4, [r2, #4]
 80104c2:	e7c7      	b.n	8010454 <_free_r+0x28>
 80104c4:	b003      	add	sp, #12
 80104c6:	bd30      	pop	{r4, r5, pc}
 80104c8:	20001404 	.word	0x20001404

080104cc <_malloc_r>:
 80104cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ce:	1ccd      	adds	r5, r1, #3
 80104d0:	f025 0503 	bic.w	r5, r5, #3
 80104d4:	3508      	adds	r5, #8
 80104d6:	2d0c      	cmp	r5, #12
 80104d8:	bf38      	it	cc
 80104da:	250c      	movcc	r5, #12
 80104dc:	2d00      	cmp	r5, #0
 80104de:	4606      	mov	r6, r0
 80104e0:	db01      	blt.n	80104e6 <_malloc_r+0x1a>
 80104e2:	42a9      	cmp	r1, r5
 80104e4:	d903      	bls.n	80104ee <_malloc_r+0x22>
 80104e6:	230c      	movs	r3, #12
 80104e8:	6033      	str	r3, [r6, #0]
 80104ea:	2000      	movs	r0, #0
 80104ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104ee:	f000 f881 	bl	80105f4 <__malloc_lock>
 80104f2:	4921      	ldr	r1, [pc, #132]	; (8010578 <_malloc_r+0xac>)
 80104f4:	680a      	ldr	r2, [r1, #0]
 80104f6:	4614      	mov	r4, r2
 80104f8:	b99c      	cbnz	r4, 8010522 <_malloc_r+0x56>
 80104fa:	4f20      	ldr	r7, [pc, #128]	; (801057c <_malloc_r+0xb0>)
 80104fc:	683b      	ldr	r3, [r7, #0]
 80104fe:	b923      	cbnz	r3, 801050a <_malloc_r+0x3e>
 8010500:	4621      	mov	r1, r4
 8010502:	4630      	mov	r0, r6
 8010504:	f000 f83c 	bl	8010580 <_sbrk_r>
 8010508:	6038      	str	r0, [r7, #0]
 801050a:	4629      	mov	r1, r5
 801050c:	4630      	mov	r0, r6
 801050e:	f000 f837 	bl	8010580 <_sbrk_r>
 8010512:	1c43      	adds	r3, r0, #1
 8010514:	d123      	bne.n	801055e <_malloc_r+0x92>
 8010516:	230c      	movs	r3, #12
 8010518:	6033      	str	r3, [r6, #0]
 801051a:	4630      	mov	r0, r6
 801051c:	f000 f870 	bl	8010600 <__malloc_unlock>
 8010520:	e7e3      	b.n	80104ea <_malloc_r+0x1e>
 8010522:	6823      	ldr	r3, [r4, #0]
 8010524:	1b5b      	subs	r3, r3, r5
 8010526:	d417      	bmi.n	8010558 <_malloc_r+0x8c>
 8010528:	2b0b      	cmp	r3, #11
 801052a:	d903      	bls.n	8010534 <_malloc_r+0x68>
 801052c:	6023      	str	r3, [r4, #0]
 801052e:	441c      	add	r4, r3
 8010530:	6025      	str	r5, [r4, #0]
 8010532:	e004      	b.n	801053e <_malloc_r+0x72>
 8010534:	6863      	ldr	r3, [r4, #4]
 8010536:	42a2      	cmp	r2, r4
 8010538:	bf0c      	ite	eq
 801053a:	600b      	streq	r3, [r1, #0]
 801053c:	6053      	strne	r3, [r2, #4]
 801053e:	4630      	mov	r0, r6
 8010540:	f000 f85e 	bl	8010600 <__malloc_unlock>
 8010544:	f104 000b 	add.w	r0, r4, #11
 8010548:	1d23      	adds	r3, r4, #4
 801054a:	f020 0007 	bic.w	r0, r0, #7
 801054e:	1ac2      	subs	r2, r0, r3
 8010550:	d0cc      	beq.n	80104ec <_malloc_r+0x20>
 8010552:	1a1b      	subs	r3, r3, r0
 8010554:	50a3      	str	r3, [r4, r2]
 8010556:	e7c9      	b.n	80104ec <_malloc_r+0x20>
 8010558:	4622      	mov	r2, r4
 801055a:	6864      	ldr	r4, [r4, #4]
 801055c:	e7cc      	b.n	80104f8 <_malloc_r+0x2c>
 801055e:	1cc4      	adds	r4, r0, #3
 8010560:	f024 0403 	bic.w	r4, r4, #3
 8010564:	42a0      	cmp	r0, r4
 8010566:	d0e3      	beq.n	8010530 <_malloc_r+0x64>
 8010568:	1a21      	subs	r1, r4, r0
 801056a:	4630      	mov	r0, r6
 801056c:	f000 f808 	bl	8010580 <_sbrk_r>
 8010570:	3001      	adds	r0, #1
 8010572:	d1dd      	bne.n	8010530 <_malloc_r+0x64>
 8010574:	e7cf      	b.n	8010516 <_malloc_r+0x4a>
 8010576:	bf00      	nop
 8010578:	20001404 	.word	0x20001404
 801057c:	20001408 	.word	0x20001408

08010580 <_sbrk_r>:
 8010580:	b538      	push	{r3, r4, r5, lr}
 8010582:	4d06      	ldr	r5, [pc, #24]	; (801059c <_sbrk_r+0x1c>)
 8010584:	2300      	movs	r3, #0
 8010586:	4604      	mov	r4, r0
 8010588:	4608      	mov	r0, r1
 801058a:	602b      	str	r3, [r5, #0]
 801058c:	f7f1 fbc0 	bl	8001d10 <_sbrk>
 8010590:	1c43      	adds	r3, r0, #1
 8010592:	d102      	bne.n	801059a <_sbrk_r+0x1a>
 8010594:	682b      	ldr	r3, [r5, #0]
 8010596:	b103      	cbz	r3, 801059a <_sbrk_r+0x1a>
 8010598:	6023      	str	r3, [r4, #0]
 801059a:	bd38      	pop	{r3, r4, r5, pc}
 801059c:	20002c5c 	.word	0x20002c5c

080105a0 <strncpy>:
 80105a0:	b510      	push	{r4, lr}
 80105a2:	3901      	subs	r1, #1
 80105a4:	4603      	mov	r3, r0
 80105a6:	b132      	cbz	r2, 80105b6 <strncpy+0x16>
 80105a8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80105ac:	f803 4b01 	strb.w	r4, [r3], #1
 80105b0:	3a01      	subs	r2, #1
 80105b2:	2c00      	cmp	r4, #0
 80105b4:	d1f7      	bne.n	80105a6 <strncpy+0x6>
 80105b6:	441a      	add	r2, r3
 80105b8:	2100      	movs	r1, #0
 80105ba:	4293      	cmp	r3, r2
 80105bc:	d100      	bne.n	80105c0 <strncpy+0x20>
 80105be:	bd10      	pop	{r4, pc}
 80105c0:	f803 1b01 	strb.w	r1, [r3], #1
 80105c4:	e7f9      	b.n	80105ba <strncpy+0x1a>

080105c6 <strstr>:
 80105c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105c8:	780c      	ldrb	r4, [r1, #0]
 80105ca:	b164      	cbz	r4, 80105e6 <strstr+0x20>
 80105cc:	4603      	mov	r3, r0
 80105ce:	781a      	ldrb	r2, [r3, #0]
 80105d0:	4618      	mov	r0, r3
 80105d2:	1c5e      	adds	r6, r3, #1
 80105d4:	b90a      	cbnz	r2, 80105da <strstr+0x14>
 80105d6:	4610      	mov	r0, r2
 80105d8:	e005      	b.n	80105e6 <strstr+0x20>
 80105da:	4294      	cmp	r4, r2
 80105dc:	d108      	bne.n	80105f0 <strstr+0x2a>
 80105de:	460d      	mov	r5, r1
 80105e0:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80105e4:	b902      	cbnz	r2, 80105e8 <strstr+0x22>
 80105e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105e8:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80105ec:	4297      	cmp	r7, r2
 80105ee:	d0f7      	beq.n	80105e0 <strstr+0x1a>
 80105f0:	4633      	mov	r3, r6
 80105f2:	e7ec      	b.n	80105ce <strstr+0x8>

080105f4 <__malloc_lock>:
 80105f4:	4801      	ldr	r0, [pc, #4]	; (80105fc <__malloc_lock+0x8>)
 80105f6:	f000 b809 	b.w	801060c <__retarget_lock_acquire_recursive>
 80105fa:	bf00      	nop
 80105fc:	20002c64 	.word	0x20002c64

08010600 <__malloc_unlock>:
 8010600:	4801      	ldr	r0, [pc, #4]	; (8010608 <__malloc_unlock+0x8>)
 8010602:	f000 b804 	b.w	801060e <__retarget_lock_release_recursive>
 8010606:	bf00      	nop
 8010608:	20002c64 	.word	0x20002c64

0801060c <__retarget_lock_acquire_recursive>:
 801060c:	4770      	bx	lr

0801060e <__retarget_lock_release_recursive>:
 801060e:	4770      	bx	lr

08010610 <_init>:
 8010610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010612:	bf00      	nop
 8010614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010616:	bc08      	pop	{r3}
 8010618:	469e      	mov	lr, r3
 801061a:	4770      	bx	lr

0801061c <_fini>:
 801061c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801061e:	bf00      	nop
 8010620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010622:	bc08      	pop	{r3}
 8010624:	469e      	mov	lr, r3
 8010626:	4770      	bx	lr
