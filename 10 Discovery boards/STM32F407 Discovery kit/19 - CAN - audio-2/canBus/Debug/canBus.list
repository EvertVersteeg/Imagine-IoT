
canBus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010a24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  08010bb4  08010bb4  00020bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010ee4  08010ee4  000300a4  2**0
                  CONTENTS
  4 .ARM          00000008  08010ee4  08010ee4  00020ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010eec  08010eec  000300a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010eec  08010eec  00020eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010ef0  08010ef0  00020ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08010ef4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300a4  2**0
                  CONTENTS
 10 .bss          000020d4  200000a4  200000a4  000300a4  2**2
                  ALLOC
 11 ._user_heap_stack 00004000  20002178  20002178  000300a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00033841  00000000  00000000  000300d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006481  00000000  00000000  00063915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c60  00000000  00000000  00069d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a10  00000000  00000000  0006b9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029545  00000000  00000000  0006d408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028622  00000000  00000000  0009694d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7fa7  00000000  00000000  000bef6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00196f16  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f6c  00000000  00000000  00196f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010b9c 	.word	0x08010b9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	08010b9c 	.word	0x08010b9c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <write_register>:
static void write_register(uint8_t reg, uint8_t *data);
static void read_register(uint8_t reg, uint8_t *data);

// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af02      	add	r7, sp, #8
 800056e:	4603      	mov	r3, r0
 8000570:	6039      	str	r1, [r7, #0]
 8000572:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	733b      	strb	r3, [r7, #12]
	iData[1] = data[0];
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 800057e:	f107 020c 	add.w	r2, r7, #12
 8000582:	2364      	movs	r3, #100	; 0x64
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2302      	movs	r3, #2
 8000588:	2194      	movs	r1, #148	; 0x94
 800058a:	4803      	ldr	r0, [pc, #12]	; (8000598 <write_register+0x30>)
 800058c:	f005 fbca 	bl	8005d24 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 8000590:	bf00      	nop
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	200000c0 	.word	0x200000c0

0800059c <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af02      	add	r7, sp, #8
 80005a2:	4603      	mov	r3, r0
 80005a4:	6039      	str	r1, [r7, #0]
 80005a6:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 80005ac:	f107 020c 	add.w	r2, r7, #12
 80005b0:	2364      	movs	r3, #100	; 0x64
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2301      	movs	r3, #1
 80005b6:	2194      	movs	r1, #148	; 0x94
 80005b8:	4807      	ldr	r0, [pc, #28]	; (80005d8 <read_register+0x3c>)
 80005ba:	f005 fbb3 	bl	8005d24 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 80005be:	2364      	movs	r3, #100	; 0x64
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2301      	movs	r3, #1
 80005c4:	683a      	ldr	r2, [r7, #0]
 80005c6:	2194      	movs	r1, #148	; 0x94
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <read_register+0x3c>)
 80005ca:	f005 fca9 	bl	8005f20 <HAL_I2C_Master_Receive>
}
 80005ce:	bf00      	nop
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200000c0 	.word	0x200000c0

080005dc <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 80005dc:	b084      	sub	sp, #16
 80005de:	b580      	push	{r7, lr}
 80005e0:	b082      	sub	sp, #8
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	f107 0c10 	add.w	ip, r7, #16
 80005e8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t iData[2];
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 80005ec:	4b7b      	ldr	r3, [pc, #492]	; (80007dc <CS43_Init+0x200>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 80005f4:	4b79      	ldr	r3, [pc, #484]	; (80007dc <CS43_Init+0x200>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	69da      	ldr	r2, [r3, #28]
 80005fa:	4b78      	ldr	r3, [pc, #480]	; (80007dc <CS43_Init+0x200>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000602:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000604:	2201      	movs	r2, #1
 8000606:	2110      	movs	r1, #16
 8000608:	4875      	ldr	r0, [pc, #468]	; (80007e0 <CS43_Init+0x204>)
 800060a:	f003 fc99 	bl	8003f40 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 800060e:	4b75      	ldr	r3, [pc, #468]	; (80007e4 <CS43_Init+0x208>)
 8000610:	4618      	mov	r0, r3
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	2254      	movs	r2, #84	; 0x54
 8000618:	4619      	mov	r1, r3
 800061a:	f00f faaf 	bl	800fb7c <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 800061e:	2301      	movs	r3, #1
 8000620:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,iData);
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	4619      	mov	r1, r3
 8000626:	2002      	movs	r0, #2
 8000628:	f7ff ff9e 	bl	8000568 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800062c:	2380      	movs	r3, #128	; 0x80
 800062e:	717b      	strb	r3, [r7, #5]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000630:	797b      	ldrb	r3, [r7, #5]
 8000632:	f043 0320 	orr.w	r3, r3, #32
 8000636:	b2db      	uxtb	r3, r3
 8000638:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 800063a:	797b      	ldrb	r3, [r7, #5]
 800063c:	f043 030c 	orr.w	r3, r3, #12
 8000640:	b2db      	uxtb	r3, r3
 8000642:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000644:	797b      	ldrb	r3, [r7, #5]
 8000646:	f043 0303 	orr.w	r3, r3, #3
 800064a:	b2db      	uxtb	r3, r3
 800064c:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL2,&iData[1]);
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	3301      	adds	r3, #1
 8000652:	4619      	mov	r1, r3
 8000654:	2004      	movs	r0, #4
 8000656:	f7ff ff87 	bl	8000568 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 800065a:	2380      	movs	r3, #128	; 0x80
 800065c:	717b      	strb	r3, [r7, #5]
	write_register(CLOCKING_CONTROL,&iData[1]);
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	3301      	adds	r3, #1
 8000662:	4619      	mov	r1, r3
 8000664:	2005      	movs	r0, #5
 8000666:	f7ff ff7f 	bl	8000568 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	4619      	mov	r1, r3
 800066e:	2006      	movs	r0, #6
 8000670:	f7ff ff94 	bl	800059c <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8000674:	797b      	ldrb	r3, [r7, #5]
 8000676:	f003 0320 	and.w	r3, r3, #32
 800067a:	b2db      	uxtb	r3, r3
 800067c:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 7);  // Slave
 800067e:	797b      	ldrb	r3, [r7, #5]
 8000680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000684:	b2db      	uxtb	r3, r3
 8000686:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 8000688:	797b      	ldrb	r3, [r7, #5]
 800068a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800068e:	b2db      	uxtb	r3, r3
 8000690:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8000692:	797b      	ldrb	r3, [r7, #5]
 8000694:	f023 0310 	bic.w	r3, r3, #16
 8000698:	b2db      	uxtb	r3, r3
 800069a:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 800069c:	797b      	ldrb	r3, [r7, #5]
 800069e:	f023 0304 	bic.w	r3, r3, #4
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	717b      	strb	r3, [r7, #5]
	iData[1] |= (1 << 2);
 80006a6:	797b      	ldrb	r3, [r7, #5]
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	717b      	strb	r3, [r7, #5]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 80006b0:	797b      	ldrb	r3, [r7, #5]
 80006b2:	f043 0303 	orr.w	r3, r3, #3
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	717b      	strb	r3, [r7, #5]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	3301      	adds	r3, #1
 80006be:	4619      	mov	r1, r3
 80006c0:	2006      	movs	r0, #6
 80006c2:	f7ff ff51 	bl	8000568 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	3301      	adds	r3, #1
 80006ca:	4619      	mov	r1, r3
 80006cc:	2008      	movs	r0, #8
 80006ce:	f7ff ff65 	bl	800059c <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 80006d2:	797b      	ldrb	r3, [r7, #5]
 80006d4:	f023 030f 	bic.w	r3, r3, #15
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 80006dc:	797b      	ldrb	r3, [r7, #5]
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_A,&iData[1]);
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	3301      	adds	r3, #1
 80006ea:	4619      	mov	r1, r3
 80006ec:	2008      	movs	r0, #8
 80006ee:	f7ff ff3b 	bl	8000568 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	3301      	adds	r3, #1
 80006f6:	4619      	mov	r1, r3
 80006f8:	2009      	movs	r0, #9
 80006fa:	f7ff ff4f 	bl	800059c <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 80006fe:	797b      	ldrb	r3, [r7, #5]
 8000700:	f023 030f 	bic.w	r3, r3, #15
 8000704:	b2db      	uxtb	r3, r3
 8000706:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000708:	797b      	ldrb	r3, [r7, #5]
 800070a:	f043 0301 	orr.w	r3, r3, #1
 800070e:	b2db      	uxtb	r3, r3
 8000710:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_B,&iData[1]);
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	3301      	adds	r3, #1
 8000716:	4619      	mov	r1, r3
 8000718:	2009      	movs	r0, #9
 800071a:	f7ff ff25 	bl	8000568 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	3301      	adds	r3, #1
 8000722:	4619      	mov	r1, r3
 8000724:	200e      	movs	r0, #14
 8000726:	f7ff ff39 	bl	800059c <read_register>
	if(outputMode == MODE_ANALOG)
 800072a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800072e:	2b03      	cmp	r3, #3
 8000730:	d119      	bne.n	8000766 <CS43_Init+0x18a>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 8000732:	797b      	ldrb	r3, [r7, #5]
 8000734:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000738:	b2db      	uxtb	r3, r3
 800073a:	717b      	strb	r3, [r7, #5]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 800073c:	797b      	ldrb	r3, [r7, #5]
 800073e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000742:	b2db      	uxtb	r3, r3
 8000744:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 8000746:	797b      	ldrb	r3, [r7, #5]
 8000748:	f023 0320 	bic.w	r3, r3, #32
 800074c:	b2db      	uxtb	r3, r3
 800074e:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 8000750:	797b      	ldrb	r3, [r7, #5]
 8000752:	f023 0310 	bic.w	r3, r3, #16
 8000756:	b2db      	uxtb	r3, r3
 8000758:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 800075a:	797b      	ldrb	r3, [r7, #5]
 800075c:	f023 0308 	bic.w	r3, r3, #8
 8000760:	b2db      	uxtb	r3, r3
 8000762:	717b      	strb	r3, [r7, #5]
 8000764:	e005      	b.n	8000772 <CS43_Init+0x196>
	}
	else if(outputMode == MODE_I2S)
 8000766:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800076a:	2b00      	cmp	r3, #0
 800076c:	d101      	bne.n	8000772 <CS43_Init+0x196>
	{
		iData[1] = 0x02;
 800076e:	2302      	movs	r3, #2
 8000770:	717b      	strb	r3, [r7, #5]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	3301      	adds	r3, #1
 8000776:	4619      	mov	r1, r3
 8000778:	200e      	movs	r0, #14
 800077a:	f7ff fef5 	bl	8000568 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	3301      	adds	r3, #1
 8000782:	4619      	mov	r1, r3
 8000784:	200f      	movs	r0, #15
 8000786:	f7ff ff09 	bl	800059c <read_register>
	iData[1] = 0x00;
 800078a:	2300      	movs	r3, #0
 800078c:	717b      	strb	r3, [r7, #5]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	3301      	adds	r3, #1
 8000792:	4619      	mov	r1, r3
 8000794:	200f      	movs	r0, #15
 8000796:	f7ff fee7 	bl	8000568 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	3301      	adds	r3, #1
 80007a2:	4619      	mov	r1, r3
 80007a4:	2014      	movs	r0, #20
 80007a6:	f7ff fedf 	bl	8000568 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	3301      	adds	r3, #1
 80007ae:	4619      	mov	r1, r3
 80007b0:	2015      	movs	r0, #21
 80007b2:	f7ff fed9 	bl	8000568 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	3301      	adds	r3, #1
 80007ba:	4619      	mov	r1, r3
 80007bc:	201a      	movs	r0, #26
 80007be:	f7ff fed3 	bl	8000568 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	3301      	adds	r3, #1
 80007c6:	4619      	mov	r1, r3
 80007c8:	201b      	movs	r0, #27
 80007ca:	f7ff fecd 	bl	8000568 <write_register>
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007d8:	b004      	add	sp, #16
 80007da:	4770      	bx	lr
 80007dc:	20001590 	.word	0x20001590
 80007e0:	40020c00 	.word	0x40020c00
 80007e4:	200000c0 	.word	0x200000c0

080007e8 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	switch (side)
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	2b03      	cmp	r3, #3
 80007f6:	d82b      	bhi.n	8000850 <CS43_Enable_RightLeft+0x68>
 80007f8:	a201      	add	r2, pc, #4	; (adr r2, 8000800 <CS43_Enable_RightLeft+0x18>)
 80007fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007fe:	bf00      	nop
 8000800:	08000811 	.word	0x08000811
 8000804:	08000821 	.word	0x08000821
 8000808:	08000831 	.word	0x08000831
 800080c:	08000841 	.word	0x08000841
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000810:	23c0      	movs	r3, #192	; 0xc0
 8000812:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000814:	7b7b      	ldrb	r3, [r7, #13]
 8000816:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800081a:	b2db      	uxtb	r3, r3
 800081c:	737b      	strb	r3, [r7, #13]
			break;
 800081e:	e018      	b.n	8000852 <CS43_Enable_RightLeft+0x6a>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000824:	7b7b      	ldrb	r3, [r7, #13]
 8000826:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800082a:	b2db      	uxtb	r3, r3
 800082c:	737b      	strb	r3, [r7, #13]
			break;
 800082e:	e010      	b.n	8000852 <CS43_Enable_RightLeft+0x6a>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000830:	23c0      	movs	r3, #192	; 0xc0
 8000832:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000834:	7b7b      	ldrb	r3, [r7, #13]
 8000836:	f043 0320 	orr.w	r3, r3, #32
 800083a:	b2db      	uxtb	r3, r3
 800083c:	737b      	strb	r3, [r7, #13]
			break;
 800083e:	e008      	b.n	8000852 <CS43_Enable_RightLeft+0x6a>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000840:	2380      	movs	r3, #128	; 0x80
 8000842:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000844:	7b7b      	ldrb	r3, [r7, #13]
 8000846:	f043 0320 	orr.w	r3, r3, #32
 800084a:	b2db      	uxtb	r3, r3
 800084c:	737b      	strb	r3, [r7, #13]
			break;
 800084e:	e000      	b.n	8000852 <CS43_Enable_RightLeft+0x6a>
		default:
			break;
 8000850:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000852:	7b7b      	ldrb	r3, [r7, #13]
 8000854:	f043 030c 	orr.w	r3, r3, #12
 8000858:	b2db      	uxtb	r3, r3
 800085a:	737b      	strb	r3, [r7, #13]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 800085c:	7b7b      	ldrb	r3, [r7, #13]
 800085e:	f043 0303 	orr.w	r3, r3, #3
 8000862:	b2db      	uxtb	r3, r3
 8000864:	737b      	strb	r3, [r7, #13]
	write_register(POWER_CONTROL2,&iData[1]);
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	3301      	adds	r3, #1
 800086c:	4619      	mov	r1, r3
 800086e:	2004      	movs	r0, #4
 8000870:	f7ff fe7a 	bl	8000568 <write_register>
}
 8000874:	bf00      	nop
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  /* Set the Master volume */
  iData[1] = VOLUME_MASTER(volume);
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	3319      	adds	r3, #25
 800088a:	b2db      	uxtb	r3, r3
 800088c:	737b      	strb	r3, [r7, #13]
  write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 800088e:	f107 030c 	add.w	r3, r7, #12
 8000892:	3301      	adds	r3, #1
 8000894:	4619      	mov	r1, r3
 8000896:	2020      	movs	r0, #32
 8000898:	f7ff fe66 	bl	8000568 <write_register>
  write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	3301      	adds	r3, #1
 80008a2:	4619      	mov	r1, r3
 80008a4:	2021      	movs	r0, #33	; 0x21
 80008a6:	f7ff fe5f 	bl	8000568 <write_register>
}
 80008aa:	bf00      	nop
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <CS43_SetMute>:

void CS43_SetMute(bool mute)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b084      	sub	sp, #16
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	4603      	mov	r3, r0
 80008ba:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  if(mute)
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d019      	beq.n	80008f6 <CS43_SetMute+0x44>
  {
    iData[1] = 0xFF;
 80008c2:	23ff      	movs	r3, #255	; 0xff
 80008c4:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 80008c6:	f107 030c 	add.w	r3, r7, #12
 80008ca:	3301      	adds	r3, #1
 80008cc:	4619      	mov	r1, r3
 80008ce:	2004      	movs	r0, #4
 80008d0:	f7ff fe4a 	bl	8000568 <write_register>
    iData[1] = 0x01;
 80008d4:	2301      	movs	r3, #1
 80008d6:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	3301      	adds	r3, #1
 80008de:	4619      	mov	r1, r3
 80008e0:	2022      	movs	r0, #34	; 0x22
 80008e2:	f7ff fe41 	bl	8000568 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	3301      	adds	r3, #1
 80008ec:	4619      	mov	r1, r3
 80008ee:	2023      	movs	r0, #35	; 0x23
 80008f0:	f7ff fe3a 	bl	8000568 <write_register>
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
    iData[1] = 0xAF;
    write_register(POWER_CONTROL2,&iData[1]);
  }
}
 80008f4:	e018      	b.n	8000928 <CS43_SetMute+0x76>
    iData[1] = 0x00;
 80008f6:	2300      	movs	r3, #0
 80008f8:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	3301      	adds	r3, #1
 8000900:	4619      	mov	r1, r3
 8000902:	2022      	movs	r0, #34	; 0x22
 8000904:	f7ff fe30 	bl	8000568 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	3301      	adds	r3, #1
 800090e:	4619      	mov	r1, r3
 8000910:	2023      	movs	r0, #35	; 0x23
 8000912:	f7ff fe29 	bl	8000568 <write_register>
    iData[1] = 0xAF;
 8000916:	23af      	movs	r3, #175	; 0xaf
 8000918:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	3301      	adds	r3, #1
 8000920:	4619      	mov	r1, r3
 8000922:	2004      	movs	r0, #4
 8000924:	f7ff fe20 	bl	8000568 <write_register>
}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(0);
 8000936:	2000      	movs	r0, #0
 8000938:	f7ff ffbb 	bl	80008b2 <CS43_SetMute>
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 800093c:	2399      	movs	r3, #153	; 0x99
 800093e:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	3301      	adds	r3, #1
 8000944:	4619      	mov	r1, r3
 8000946:	2000      	movs	r0, #0
 8000948:	f7ff fe0e 	bl	8000568 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_47,&iData[1]);
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	3301      	adds	r3, #1
 8000954:	4619      	mov	r1, r3
 8000956:	2047      	movs	r0, #71	; 0x47
 8000958:	f7ff fe06 	bl	8000568 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	3301      	adds	r3, #1
 8000960:	4619      	mov	r1, r3
 8000962:	2032      	movs	r0, #50	; 0x32
 8000964:	f7ff fe1a 	bl	800059c <read_register>
	iData[1] |= 0x80;
 8000968:	797b      	ldrb	r3, [r7, #5]
 800096a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800096e:	b2db      	uxtb	r3, r3
 8000970:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	3301      	adds	r3, #1
 8000976:	4619      	mov	r1, r3
 8000978:	2032      	movs	r0, #50	; 0x32
 800097a:	f7ff fdf5 	bl	8000568 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	3301      	adds	r3, #1
 8000982:	4619      	mov	r1, r3
 8000984:	2032      	movs	r0, #50	; 0x32
 8000986:	f7ff fe09 	bl	800059c <read_register>
	iData[1] &= ~(0x80);
 800098a:	797b      	ldrb	r3, [r7, #5]
 800098c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000990:	b2db      	uxtb	r3, r3
 8000992:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	3301      	adds	r3, #1
 8000998:	4619      	mov	r1, r3
 800099a:	2032      	movs	r0, #50	; 0x32
 800099c:	f7ff fde4 	bl	8000568 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 80009a0:	2300      	movs	r3, #0
 80009a2:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	3301      	adds	r3, #1
 80009a8:	4619      	mov	r1, r3
 80009aa:	2000      	movs	r0, #0
 80009ac:	f7ff fddc 	bl	8000568 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 80009b0:	239e      	movs	r3, #158	; 0x9e
 80009b2:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	3301      	adds	r3, #1
 80009b8:	4619      	mov	r1, r3
 80009ba:	2002      	movs	r0, #2
 80009bc:	f7ff fdd4 	bl	8000568 <write_register>
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <CS43_Stop>:

void CS43_Stop(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(1);
 80009ce:	2001      	movs	r0, #1
 80009d0:	f7ff ff6f 	bl	80008b2 <CS43_SetMute>
  iData[1] = 0x04;
 80009d4:	2304      	movs	r3, #4
 80009d6:	717b      	strb	r3, [r7, #5]
  write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	3301      	adds	r3, #1
 80009dc:	4619      	mov	r1, r3
 80009de:	200e      	movs	r0, #14
 80009e0:	f7ff fdc2 	bl	8000568 <write_register>
	iData[1] = 0x9F;
 80009e4:	239f      	movs	r3, #159	; 0x9f
 80009e6:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	3301      	adds	r3, #1
 80009ec:	4619      	mov	r1, r3
 80009ee:	2002      	movs	r0, #2
 80009f0:	f7ff fdba 	bl	8000568 <write_register>
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <audioI2S_pllClockConfig>:

/**
 * @brief I2S Clock Config
 */
static void audioI2S_pllClockConfig(uint32_t audioFreq)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 8000a04:	2300      	movs	r3, #0
 8000a06:	77fb      	strb	r3, [r7, #31]
 8000a08:	23ff      	movs	r3, #255	; 0xff
 8000a0a:	77bb      	strb	r3, [r7, #30]

  for(index = 0; index < 8; index++)
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	77fb      	strb	r3, [r7, #31]
 8000a10:	e00b      	b.n	8000a2a <audioI2S_pllClockConfig+0x2e>
  {
    if(I2SFreq[index] == audioFreq)
 8000a12:	7ffb      	ldrb	r3, [r7, #31]
 8000a14:	4a1c      	ldr	r2, [pc, #112]	; (8000a88 <audioI2S_pllClockConfig+0x8c>)
 8000a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d101      	bne.n	8000a24 <audioI2S_pllClockConfig+0x28>
    {
      freqindex = index;
 8000a20:	7ffb      	ldrb	r3, [r7, #31]
 8000a22:	77bb      	strb	r3, [r7, #30]
  for(index = 0; index < 8; index++)
 8000a24:	7ffb      	ldrb	r3, [r7, #31]
 8000a26:	3301      	adds	r3, #1
 8000a28:	77fb      	strb	r3, [r7, #31]
 8000a2a:	7ffb      	ldrb	r3, [r7, #31]
 8000a2c:	2b07      	cmp	r3, #7
 8000a2e:	d9f0      	bls.n	8000a12 <audioI2S_pllClockConfig+0x16>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	4618      	mov	r0, r3
 8000a36:	f007 fcf5 	bl	8008424 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8000a3a:	7fbb      	ldrb	r3, [r7, #30]
 8000a3c:	f003 0307 	and.w	r3, r3, #7
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d111      	bne.n	8000a68 <audioI2S_pllClockConfig+0x6c>
  {
    /* I2S clock config
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) × (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a44:	2301      	movs	r3, #1
 8000a46:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8000a48:	7fbb      	ldrb	r3, [r7, #30]
 8000a4a:	4a10      	ldr	r2, [pc, #64]	; (8000a8c <audioI2S_pllClockConfig+0x90>)
 8000a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a50:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8000a52:	7fbb      	ldrb	r3, [r7, #30]
 8000a54:	4a0e      	ldr	r2, [pc, #56]	; (8000a90 <audioI2S_pllClockConfig+0x94>)
 8000a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a5a:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	4618      	mov	r0, r3
 8000a62:	f007 fbfd 	bl	8008260 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 8000a66:	e00b      	b.n	8000a80 <audioI2S_pllClockConfig+0x84>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8000a6c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000a70:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8000a72:	2303      	movs	r3, #3
 8000a74:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f007 fbf0 	bl	8008260 <HAL_RCCEx_PeriphCLKConfig>
}
 8000a80:	bf00      	nop
 8000a82:	3720      	adds	r7, #32
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	08010c84 	.word	0x08010c84
 8000a8c:	08010ca4 	.word	0x08010ca4
 8000a90:	08010cc4 	.word	0x08010cc4

08000a94 <I2S3_freqUpdate>:

/**
 * @brief update I2S peripheral with selected Sampling Frequency
 */
static bool I2S3_freqUpdate(uint32_t AudioFreq)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioI2S->Instance         = SPI3;
 8000a9c:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <I2S3_freqUpdate+0x80>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a1d      	ldr	r2, [pc, #116]	; (8000b18 <I2S3_freqUpdate+0x84>)
 8000aa2:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(hAudioI2S);
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <I2S3_freqUpdate+0x80>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	69da      	ldr	r2, [r3, #28]
 8000aac:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <I2S3_freqUpdate+0x80>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ab6:	61da      	str	r2, [r3, #28]

  /* I2S3 peripheral configuration */
  hAudioI2S->Init.AudioFreq   = AudioFreq;
 8000ab8:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <I2S3_freqUpdate+0x80>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	615a      	str	r2, [r3, #20]
  hAudioI2S->Init.ClockSource = I2S_CLOCK_PLL;
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <I2S3_freqUpdate+0x80>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	61da      	str	r2, [r3, #28]
  hAudioI2S->Init.CPOL        = I2S_CPOL_LOW;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <I2S3_freqUpdate+0x80>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  hAudioI2S->Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000ad0:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <I2S3_freqUpdate+0x80>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
  hAudioI2S->Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <I2S3_freqUpdate+0x80>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ae0:	611a      	str	r2, [r3, #16]
  hAudioI2S->Init.Mode        = I2S_MODE_MASTER_TX;
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <I2S3_freqUpdate+0x80>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aea:	605a      	str	r2, [r3, #4]
  hAudioI2S->Init.Standard    = I2S_STANDARD_PHILIPS;
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <I2S3_freqUpdate+0x80>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(hAudioI2S) != HAL_OK)
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <I2S3_freqUpdate+0x80>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f005 ff65 	bl	80069c8 <HAL_I2S_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <I2S3_freqUpdate+0x74>
  {
    return false;
 8000b04:	2300      	movs	r3, #0
 8000b06:	e000      	b.n	8000b0a <I2S3_freqUpdate+0x76>
  }
  else
  {
    return true;
 8000b08:	2301      	movs	r3, #1
  }
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000114 	.word	0x20000114
 8000b18:	40003c00 	.word	0x40003c00

08000b1c <audioI2S_setHandle>:

/**
 * @brief set I2S HAL handle
 */
void audioI2S_setHandle(I2S_HandleTypeDef *pI2Shandle)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  hAudioI2S = pI2Shandle;
 8000b24:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <audioI2S_setHandle+0x1c>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6013      	str	r3, [r2, #0]
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000114 	.word	0x20000114

08000b3c <audioI2S_init>:
 * @param audioFreq - WAV file Audio sampling rate (44.1KHz, 48KHz, ...)
 * @param volume - CS43L22 Codec volume settings (0 - 100)
 * @retval state - true: Successfully, false: Failed
 */
bool audioI2S_init(uint32_t audioFreq)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  //Update PLL Clock Frequency setting
  audioI2S_pllClockConfig(audioFreq);
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff ff59 	bl	80009fc <audioI2S_pllClockConfig>
  //Update I2S peripheral sampling frequency
  I2S3_freqUpdate(audioFreq);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff ffa2 	bl	8000a94 <I2S3_freqUpdate>
  return true;
 8000b50:	2301      	movs	r3, #1
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <audioI2S_play>:

/**
 * @brief Starts Playing Audio from buffer
 */
bool audioI2S_play(uint16_t* pDataBuf, uint32_t len)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
  //Start Codec
  CS43_Start();
 8000b66:	f7ff fee3 	bl	8000930 <CS43_Start>
  //Start I2S DMA transfer
  HAL_I2S_Transmit_DMA(hAudioI2S, pDataBuf, DMA_MAX(len/AUDIODATA_SIZE));
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <audioI2S_play+0x38>)
 8000b6c:	6818      	ldr	r0, [r3, #0]
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000b74:	d203      	bcs.n	8000b7e <audioI2S_play+0x22>
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	085b      	lsrs	r3, r3, #1
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	e001      	b.n	8000b82 <audioI2S_play+0x26>
 8000b7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b82:	461a      	mov	r2, r3
 8000b84:	6879      	ldr	r1, [r7, #4]
 8000b86:	f006 f85f 	bl	8006c48 <HAL_I2S_Transmit_DMA>
  return true;
 8000b8a:	2301      	movs	r3, #1
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000114 	.word	0x20000114

08000b98 <audioI2S_stop>:

/**
 * @brief Stop audio
 */
void audioI2S_stop(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000b9c:	f7ff ff14 	bl	80009c8 <CS43_Stop>
  HAL_I2S_DMAStop(hAudioI2S);
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <audioI2S_stop+0x18>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f006 f8f7 	bl	8006d98 <HAL_I2S_DMAStop>
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000114 	.word	0x20000114

08000bb4 <HAL_I2S_TxCpltCallback>:
{

}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <HAL_I2S_TxCpltCallback+0x20>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d101      	bne.n	8000bca <HAL_I2S_TxCpltCallback+0x16>
  {
    audioI2S_fullTransfer_Callback();
 8000bc6:	f001 fc3d 	bl	8002444 <audioI2S_fullTransfer_Callback>
  }
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40003c00 	.word	0x40003c00

08000bd8 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d101      	bne.n	8000bee <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    audioI2S_halfTransfer_Callback();
 8000bea:	f001 fc1f 	bl	800242c <audioI2S_halfTransfer_Callback>
  }
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40003c00 	.word	0x40003c00

08000bfc <ClearBits>:
extern unsigned char curpos; 									// remember cursorposition


//Functie om alle vier de Bits naar het display te resetten
void ClearBits(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2108      	movs	r1, #8
 8000c04:	4809      	ldr	r0, [pc, #36]	; (8000c2c <ClearBits+0x30>)
 8000c06:	f003 f99b 	bl	8003f40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2110      	movs	r1, #16
 8000c0e:	4807      	ldr	r0, [pc, #28]	; (8000c2c <ClearBits+0x30>)
 8000c10:	f003 f996 	bl	8003f40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2120      	movs	r1, #32
 8000c18:	4804      	ldr	r0, [pc, #16]	; (8000c2c <ClearBits+0x30>)
 8000c1a:	f003 f991 	bl	8003f40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2140      	movs	r1, #64	; 0x40
 8000c22:	4802      	ldr	r0, [pc, #8]	; (8000c2c <ClearBits+0x30>)
 8000c24:	f003 f98c 	bl	8003f40 <HAL_GPIO_WritePin>
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40021000 	.word	0x40021000

08000c30 <LCD_cursor_home>:


//Functie om de cursor naar de home positie te zetten
void LCD_cursor_home(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
   LCD_writecontrol(0x02); 										// cursor home
 8000c34:	2002      	movs	r0, #2
 8000c36:	f000 f807 	bl	8000c48 <LCD_writecontrol>
   curpos=0;               										// reset position
 8000c3a:	4b02      	ldr	r3, [pc, #8]	; (8000c44 <LCD_cursor_home+0x14>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000128 	.word	0x20000128

08000c48 <LCD_writecontrol>:


// Stuurt een commando naar het display
void LCD_writecontrol(unsigned char data)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <LCD_writecontrol+0x28>)
 8000c5a:	f003 f971 	bl	8003f40 <HAL_GPIO_WritePin>
    LCD_writebyte(data);
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 f92f 	bl	8000ec4 <LCD_writebyte>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40020800 	.word	0x40020800

08000c74 <LCD_clear>:


//Functie clear screen
void LCD_clear(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
   LCD_writecontrol(0x01); 										// clearscreen
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f7ff ffe5 	bl	8000c48 <LCD_writecontrol>
   curpos=0;               										// reset position
 8000c7e:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <LCD_clear+0x20>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
   HAL_Delay(5);
 8000c84:	2005      	movs	r0, #5
 8000c86:	f001 fc55 	bl	8002534 <HAL_Delay>
   busyflag();
 8000c8a:	f000 f94b 	bl	8000f24 <busyflag>
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000128 	.word	0x20000128

08000c98 <LCD_init>:


// init LCD
// Display wordt gebruikt in 4bits modus,2 regels, 5x7 dots font.
void LCD_init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	481e      	ldr	r0, [pc, #120]	; (8000d1c <LCD_init+0x84>)
 8000ca2:	f003 f94d 	bl	8003f40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cac:	481c      	ldr	r0, [pc, #112]	; (8000d20 <LCD_init+0x88>)
 8000cae:	f003 f947 	bl	8003f40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cb8:	4819      	ldr	r0, [pc, #100]	; (8000d20 <LCD_init+0x88>)
 8000cba:	f003 f941 	bl	8003f40 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8000cbe:	2096      	movs	r0, #150	; 0x96
 8000cc0:	f001 fc38 	bl	8002534 <HAL_Delay>
    LCD_writebyte(0x30); 										// function-set boot  streepje
 8000cc4:	2030      	movs	r0, #48	; 0x30
 8000cc6:	f000 f8fd 	bl	8000ec4 <LCD_writebyte>
    HAL_Delay(150);
 8000cca:	2096      	movs	r0, #150	; 0x96
 8000ccc:	f001 fc32 	bl	8002534 <HAL_Delay>
    LCD_writebyte(0x30);
 8000cd0:	2030      	movs	r0, #48	; 0x30
 8000cd2:	f000 f8f7 	bl	8000ec4 <LCD_writebyte>
    LCD_writebyte(0x30);
 8000cd6:	2030      	movs	r0, #48	; 0x30
 8000cd8:	f000 f8f4 	bl	8000ec4 <LCD_writebyte>
    LCD_writebyte(0x02);             							// blink
 8000cdc:	2002      	movs	r0, #2
 8000cde:	f000 f8f1 	bl	8000ec4 <LCD_writebyte>
    HAL_Delay(5);
 8000ce2:	2005      	movs	r0, #5
 8000ce4:	f001 fc26 	bl	8002534 <HAL_Delay>
    LCD_writebyte(0x2C);  										// function set
 8000ce8:	202c      	movs	r0, #44	; 0x2c
 8000cea:	f000 f8eb 	bl	8000ec4 <LCD_writebyte>
    HAL_Delay(150);
 8000cee:	2096      	movs	r0, #150	; 0x96
 8000cf0:	f001 fc20 	bl	8002534 <HAL_Delay>
    LCD_writebyte(0x0E);  										// lcd aan
 8000cf4:	200e      	movs	r0, #14
 8000cf6:	f000 f8e5 	bl	8000ec4 <LCD_writebyte>
    HAL_Delay(150);
 8000cfa:	2096      	movs	r0, #150	; 0x96
 8000cfc:	f001 fc1a 	bl	8002534 <HAL_Delay>
    LCD_writebyte(0x01);  										// clear screen
 8000d00:	2001      	movs	r0, #1
 8000d02:	f000 f8df 	bl	8000ec4 <LCD_writebyte>
    HAL_Delay(150);
 8000d06:	2096      	movs	r0, #150	; 0x96
 8000d08:	f001 fc14 	bl	8002534 <HAL_Delay>
    LCD_writebyte(0x06);  										// entry mode set
 8000d0c:	2006      	movs	r0, #6
 8000d0e:	f000 f8d9 	bl	8000ec4 <LCD_writebyte>
    HAL_Delay(150);
 8000d12:	2096      	movs	r0, #150	; 0x96
 8000d14:	f001 fc0e 	bl	8002534 <HAL_Delay>
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40020c00 	.word	0x40020c00
 8000d20:	40020800 	.word	0x40020800

08000d24 <LCD_putchar>:


// Zet meegegeven karakter op het scherm
void LCD_putchar(char c)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d34:	480b      	ldr	r0, [pc, #44]	; (8000d64 <LCD_putchar+0x40>)
 8000d36:	f003 f903 	bl	8003f40 <HAL_GPIO_WritePin>
    LCD_writebyte(c);
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f000 f8c1 	bl	8000ec4 <LCD_writebyte>
    if (++curpos==32) 											// remember cursorpositie
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <LCD_putchar+0x44>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	3301      	adds	r3, #1
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <LCD_putchar+0x44>)
 8000d4c:	701a      	strb	r2, [r3, #0]
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <LCD_putchar+0x44>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b20      	cmp	r3, #32
 8000d54:	d102      	bne.n	8000d5c <LCD_putchar+0x38>
    	curpos=0;
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <LCD_putchar+0x44>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40020800 	.word	0x40020800
 8000d68:	20000128 	.word	0x20000128

08000d6c <LCD_put>:


// Zet meegegeven string op het scherm
void LCD_put(char *string)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
    unsigned char k,j;											// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    for (k=0; string[k]; k++)
 8000d74:	2300      	movs	r3, #0
 8000d76:	73fb      	strb	r3, [r7, #15]
 8000d78:	e019      	b.n	8000dae <LCD_put+0x42>
	{
	#ifdef eenregel												// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    	if(curpos==8) 											// at 8, goto next valid lcd-position
 8000d7a:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <LCD_put+0x58>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b08      	cmp	r3, #8
 8000d80:	d10b      	bne.n	8000d9a <LCD_put+0x2e>
        for (j=0; j<32; j++) LCD_cursor_right();
 8000d82:	2300      	movs	r3, #0
 8000d84:	73bb      	strb	r3, [r7, #14]
 8000d86:	e005      	b.n	8000d94 <LCD_put+0x28>
 8000d88:	2014      	movs	r0, #20
 8000d8a:	f7ff ff5d 	bl	8000c48 <LCD_writecontrol>
 8000d8e:	7bbb      	ldrb	r3, [r7, #14]
 8000d90:	3301      	adds	r3, #1
 8000d92:	73bb      	strb	r3, [r7, #14]
 8000d94:	7bbb      	ldrb	r3, [r7, #14]
 8000d96:	2b1f      	cmp	r3, #31
 8000d98:	d9f6      	bls.n	8000d88 <LCD_put+0x1c>
	#endif
        LCD_putchar(string[k]);
 8000d9a:	7bfb      	ldrb	r3, [r7, #15]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	4413      	add	r3, r2
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ffbe 	bl	8000d24 <LCD_putchar>
    for (k=0; string[k]; k++)
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	3301      	adds	r3, #1
 8000dac:	73fb      	strb	r3, [r7, #15]
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	4413      	add	r3, r2
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1df      	bne.n	8000d7a <LCD_put+0xe>
    }
}
 8000dba:	bf00      	nop
 8000dbc:	bf00      	nop
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000128 	.word	0x20000128

08000dc8 <LCD_putint>:
}


// Zet het meegegeven positief getal op het scherm
void LCD_putint(unsigned int num)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
    unsigned int rest;
    static unsigned char chars[10] = "0123456789"; 				// possible chars
    char s[17]; 												// display has 16 chars [0..15] + 1 closing null
	s[16]='\0'; 												// closing null set
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	773b      	strb	r3, [r7, #28]
    int i=15;   												// startposition at last display char
 8000dd4:	230f      	movs	r3, #15
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
    															// kinda function itoa, integer to ascii
    if(num==0)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d126      	bne.n	8000e2c <LCD_putint+0x64>
        s[i--]='0'; 											// '0' at 14
 8000dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de0:	1e5a      	subs	r2, r3, #1
 8000de2:	627a      	str	r2, [r7, #36]	; 0x24
 8000de4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000de8:	4413      	add	r3, r2
 8000dea:	2230      	movs	r2, #48	; 0x30
 8000dec:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8000df0:	e022      	b.n	8000e38 <LCD_putint+0x70>
    else
	{
        while(num>0 && i)
		{
            rest = num%10;
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <LCD_putint+0x88>)
 8000df6:	fba3 1302 	umull	r1, r3, r3, r2
 8000dfa:	08d9      	lsrs	r1, r3, #3
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	440b      	add	r3, r1
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	623b      	str	r3, [r7, #32]
            num /= 10;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a11      	ldr	r2, [pc, #68]	; (8000e50 <LCD_putint+0x88>)
 8000e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e10:	08db      	lsrs	r3, r3, #3
 8000e12:	607b      	str	r3, [r7, #4]
            s[i--]=chars[rest];
 8000e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e16:	1e5a      	subs	r2, r3, #1
 8000e18:	627a      	str	r2, [r7, #36]	; 0x24
 8000e1a:	490e      	ldr	r1, [pc, #56]	; (8000e54 <LCD_putint+0x8c>)
 8000e1c:	6a3a      	ldr	r2, [r7, #32]
 8000e1e:	440a      	add	r2, r1
 8000e20:	7812      	ldrb	r2, [r2, #0]
 8000e22:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000e26:	440b      	add	r3, r1
 8000e28:	f803 2c1c 	strb.w	r2, [r3, #-28]
        while(num>0 && i)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d002      	beq.n	8000e38 <LCD_putint+0x70>
 8000e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1dc      	bne.n	8000df2 <LCD_putint+0x2a>
        }
    }
	LCD_put(&s[i+1]); 											// first, set i to starting pos, undo one i-- too much
 8000e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	f107 020c 	add.w	r2, r7, #12
 8000e40:	4413      	add	r3, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ff92 	bl	8000d6c <LCD_put>
}
 8000e48:	bf00      	nop
 8000e4a:	3728      	adds	r7, #40	; 0x28
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	cccccccd 	.word	0xcccccccd
 8000e54:	20000000 	.word	0x20000000

08000e58 <LCD_writenibble>:


// Stuurt een 4-bits commando naar het display
void LCD_writenibble(unsigned char data)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
    ClearBits();
 8000e62:	f7ff fecb 	bl	8000bfc <ClearBits>

    if (data & 0x01)
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d004      	beq.n	8000e7a <LCD_writenibble+0x22>
    	{HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);}
 8000e70:	2201      	movs	r2, #1
 8000e72:	2140      	movs	r1, #64	; 0x40
 8000e74:	4812      	ldr	r0, [pc, #72]	; (8000ec0 <LCD_writenibble+0x68>)
 8000e76:	f003 f863 	bl	8003f40 <HAL_GPIO_WritePin>

	if (data & 0x02)
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	f003 0302 	and.w	r3, r3, #2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d004      	beq.n	8000e8e <LCD_writenibble+0x36>
		{HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);}
 8000e84:	2201      	movs	r2, #1
 8000e86:	2120      	movs	r1, #32
 8000e88:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <LCD_writenibble+0x68>)
 8000e8a:	f003 f859 	bl	8003f40 <HAL_GPIO_WritePin>

	if (data & 0x04)
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	f003 0304 	and.w	r3, r3, #4
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d004      	beq.n	8000ea2 <LCD_writenibble+0x4a>
		{HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);}
 8000e98:	2201      	movs	r2, #1
 8000e9a:	2110      	movs	r1, #16
 8000e9c:	4808      	ldr	r0, [pc, #32]	; (8000ec0 <LCD_writenibble+0x68>)
 8000e9e:	f003 f84f 	bl	8003f40 <HAL_GPIO_WritePin>

	if (data & 0x08)
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	f003 0308 	and.w	r3, r3, #8
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d004      	beq.n	8000eb6 <LCD_writenibble+0x5e>
		{HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);}
 8000eac:	2201      	movs	r2, #1
 8000eae:	2108      	movs	r1, #8
 8000eb0:	4803      	ldr	r0, [pc, #12]	; (8000ec0 <LCD_writenibble+0x68>)
 8000eb2:	f003 f845 	bl	8003f40 <HAL_GPIO_WritePin>

}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <LCD_writebyte>:

// Stuurt een 8-bits commando naar het display
void LCD_writebyte(unsigned char data)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
    /* hoogste 4 bits */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);  //EN
 8000ece:	2201      	movs	r2, #1
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	4813      	ldr	r0, [pc, #76]	; (8000f20 <LCD_writebyte+0x5c>)
 8000ed4:	f003 f834 	bl	8003f40 <HAL_GPIO_WritePin>
    LCD_writenibble((data>>4)&0x0F);
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	091b      	lsrs	r3, r3, #4
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ffba 	bl	8000e58 <LCD_writenibble>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	480d      	ldr	r0, [pc, #52]	; (8000f20 <LCD_writebyte+0x5c>)
 8000eea:	f003 f829 	bl	8003f40 <HAL_GPIO_WritePin>

    busyflag();
 8000eee:	f000 f819 	bl	8000f24 <busyflag>

    /* laagste 4 bits */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	480a      	ldr	r0, [pc, #40]	; (8000f20 <LCD_writebyte+0x5c>)
 8000ef8:	f003 f822 	bl	8003f40 <HAL_GPIO_WritePin>
    LCD_writenibble(data&0x0F);
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	f003 030f 	and.w	r3, r3, #15
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ffa7 	bl	8000e58 <LCD_writenibble>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	4804      	ldr	r0, [pc, #16]	; (8000f20 <LCD_writebyte+0x5c>)
 8000f10:	f003 f816 	bl	8003f40 <HAL_GPIO_WritePin>

    busyflag();
 8000f14:	f000 f806 	bl	8000f24 <busyflag>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40020c00 	.word	0x40020c00

08000f24 <busyflag>:


void busyflag(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08c      	sub	sp, #48	; 0x30
 8000f28:	af00      	add	r7, sp, #0
	uint8_t bitstatus = 0x00;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t bitstatus1 = Bit_SET;
 8000f30:	2301      	movs	r3, #1
 8000f32:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	while(bitstatus == bitstatus1)
 8000f36:	e039      	b.n	8000fac <busyflag+0x88>
	{
		  /*Configure GPIO pins : PE3 PE4 PE5 PE6 */
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
 8000f44:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000f46:	2378      	movs	r3, #120	; 0x78
 8000f48:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
		HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4826      	ldr	r0, [pc, #152]	; (8000ff4 <busyflag+0xd0>)
 8000f5c:	f002 fe3c 	bl	8003bd8 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);  //RS
 8000f60:	2200      	movs	r2, #0
 8000f62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f66:	4824      	ldr	r0, [pc, #144]	; (8000ff8 <busyflag+0xd4>)
 8000f68:	f002 ffea 	bl	8003f40 <HAL_GPIO_WritePin>
		//GPIO_SetBits(LCD_RW);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);    //RW
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f72:	4821      	ldr	r0, [pc, #132]	; (8000ff8 <busyflag+0xd4>)
 8000f74:	f002 ffe4 	bl	8003f40 <HAL_GPIO_WritePin>
		HAL_Delay(1); //DELAY_ms(1);
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f001 fadb 	bl	8002534 <HAL_Delay>
		//GPIO_SetBits(LCD_EN);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);    //EN
 8000f7e:	2201      	movs	r2, #1
 8000f80:	2101      	movs	r1, #1
 8000f82:	481e      	ldr	r0, [pc, #120]	; (8000ffc <busyflag+0xd8>)
 8000f84:	f002 ffdc 	bl	8003f40 <HAL_GPIO_WritePin>
		HAL_Delay(1); //DELAY_ms(1);
 8000f88:	2001      	movs	r0, #1
 8000f8a:	f001 fad3 	bl	8002534 <HAL_Delay>
		bitstatus = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6);
 8000f8e:	2140      	movs	r1, #64	; 0x40
 8000f90:	4818      	ldr	r0, [pc, #96]	; (8000ff4 <busyflag+0xd0>)
 8000f92:	f002 ffbd 	bl	8003f10 <HAL_GPIO_ReadPin>
 8000f96:	4603      	mov	r3, r0
 8000f98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		//GPIO_ResetBits(LCD_EN);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);    //EN
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	4816      	ldr	r0, [pc, #88]	; (8000ffc <busyflag+0xd8>)
 8000fa2:	f002 ffcd 	bl	8003f40 <HAL_GPIO_WritePin>
		HAL_Delay(1); //DELAY_ms(1);
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f001 fac4 	bl	8002534 <HAL_Delay>
	while(bitstatus == bitstatus1)
 8000fac:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000fb0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d0bf      	beq.n	8000f38 <busyflag+0x14>
	}
	 /*Configure GPIO pins : PE3 PE4 PE5 PE6 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0318 	add.w	r3, r7, #24
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000fc8:	2378      	movs	r3, #120	; 0x78
 8000fca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fd8:	f107 0318 	add.w	r3, r7, #24
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <busyflag+0xd0>)
 8000fe0:	f002 fdfa 	bl	8003bd8 <HAL_GPIO_Init>
	HAL_Delay(1); //DELAY_ms(1);
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f001 faa5 	bl	8002534 <HAL_Delay>
}
 8000fea:	bf00      	nop
 8000fec:	3730      	adds	r7, #48	; 0x30
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40020800 	.word	0x40020800
 8000ffc:	40020c00 	.word	0x40020c00

08001000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001000:	b590      	push	{r4, r7, lr}
 8001002:	b095      	sub	sp, #84	; 0x54
 8001004:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001006:	f001 fa53 	bl	80024b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100a:	f000 faad 	bl	8001568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100e:	f000 fc63 	bl	80018d8 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001012:	f000 fb13 	bl	800163c <MX_CAN1_Init>
  MX_DMA_Init();
 8001016:	f000 fc3f 	bl	8001898 <MX_DMA_Init>
  MX_I2C1_Init();
 800101a:	f000 fb45 	bl	80016a8 <MX_I2C1_Init>
  MX_I2S3_Init();
 800101e:	f000 fb71 	bl	8001704 <MX_I2S3_Init>
  MX_FATFS_Init();
 8001022:	f008 fec3 	bl	8009dac <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001026:	f00e fa5d 	bl	800f4e4 <MX_USB_HOST_Init>
  MX_TIM4_Init();
 800102a:	f000 fbe7 	bl	80017fc <MX_TIM4_Init>
  MX_TIM2_Init();
 800102e:	f000 fb97 	bl	8001760 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  LCD_init();
 8001032:	f7ff fe31 	bl	8000c98 <LCD_init>

  FilterConfig.FilterBank = 0;  							//MASTER
 8001036:	4ba5      	ldr	r3, [pc, #660]	; (80012cc <main+0x2cc>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
  FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800103c:	4ba3      	ldr	r3, [pc, #652]	; (80012cc <main+0x2cc>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
  FilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001042:	4ba2      	ldr	r3, [pc, #648]	; (80012cc <main+0x2cc>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  FilterConfig.FilterIdHigh = 0x245<<5;
 8001048:	4ba0      	ldr	r3, [pc, #640]	; (80012cc <main+0x2cc>)
 800104a:	f644 02a0 	movw	r2, #18592	; 0x48a0
 800104e:	601a      	str	r2, [r3, #0]
  FilterConfig.FilterIdLow = 0;
 8001050:	4b9e      	ldr	r3, [pc, #632]	; (80012cc <main+0x2cc>)
 8001052:	2200      	movs	r2, #0
 8001054:	605a      	str	r2, [r3, #4]
  FilterConfig.FilterMaskIdHigh = 0;
 8001056:	4b9d      	ldr	r3, [pc, #628]	; (80012cc <main+0x2cc>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  FilterConfig.FilterMaskIdLow = 0;
 800105c:	4b9b      	ldr	r3, [pc, #620]	; (80012cc <main+0x2cc>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  FilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8001062:	4b9a      	ldr	r3, [pc, #616]	; (80012cc <main+0x2cc>)
 8001064:	2201      	movs	r2, #1
 8001066:	61da      	str	r2, [r3, #28]
  FilterConfig.FilterActivation= ENABLE;
 8001068:	4b98      	ldr	r3, [pc, #608]	; (80012cc <main+0x2cc>)
 800106a:	2201      	movs	r2, #1
 800106c:	621a      	str	r2, [r3, #32]
  FilterConfig.SlaveStartFilterBank = 14;
 800106e:	4b97      	ldr	r3, [pc, #604]	; (80012cc <main+0x2cc>)
 8001070:	220e      	movs	r2, #14
 8001072:	625a      	str	r2, [r3, #36]	; 0x24

  TxHeader.DLC = 8;            								// grote van bericht 1 - 8 in bytes
 8001074:	4b96      	ldr	r3, [pc, #600]	; (80012d0 <main+0x2d0>)
 8001076:	2208      	movs	r2, #8
 8001078:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;   								// standaard berichten versturen geen debug mode
 800107a:	4b95      	ldr	r3, [pc, #596]	; (80012d0 <main+0x2d0>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8001080:	4b93      	ldr	r3, [pc, #588]	; (80012d0 <main+0x2d0>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x243;        							// identificatie nummer van de CAN deelnemer
 8001086:	4b92      	ldr	r3, [pc, #584]	; (80012d0 <main+0x2d0>)
 8001088:	f240 2243 	movw	r2, #579	; 0x243
 800108c:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 800108e:	4b90      	ldr	r3, [pc, #576]	; (80012d0 <main+0x2d0>)
 8001090:	2200      	movs	r2, #0
 8001092:	751a      	strb	r2, [r3, #20]

  HAL_CAN_ConfigFilter(&hcan1,&FilterConfig);
 8001094:	498d      	ldr	r1, [pc, #564]	; (80012cc <main+0x2cc>)
 8001096:	488f      	ldr	r0, [pc, #572]	; (80012d4 <main+0x2d4>)
 8001098:	f001 fb6c 	bl	8002774 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 800109c:	488d      	ldr	r0, [pc, #564]	; (80012d4 <main+0x2d4>)
 800109e:	f001 fc49 	bl	8002934 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING);
 80010a2:	2102      	movs	r1, #2
 80010a4:	488b      	ldr	r0, [pc, #556]	; (80012d4 <main+0x2d4>)
 80010a6:	f001 fe76 	bl	8002d96 <HAL_CAN_ActivateNotification>

  CS43_Init(hi2c1, MODE_I2S);
 80010aa:	4c8b      	ldr	r4, [pc, #556]	; (80012d8 <main+0x2d8>)
 80010ac:	2300      	movs	r3, #0
 80010ae:	9311      	str	r3, [sp, #68]	; 0x44
 80010b0:	4668      	mov	r0, sp
 80010b2:	f104 0310 	add.w	r3, r4, #16
 80010b6:	2244      	movs	r2, #68	; 0x44
 80010b8:	4619      	mov	r1, r3
 80010ba:	f00e fd5f 	bl	800fb7c <memcpy>
 80010be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010c2:	f7ff fa8b 	bl	80005dc <CS43_Init>
  CS43_SetVolume(180);										//volume 0-255
 80010c6:	20b4      	movs	r0, #180	; 0xb4
 80010c8:	f7ff fbd8 	bl	800087c <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 80010cc:	2003      	movs	r0, #3
 80010ce:	f7ff fb8b 	bl	80007e8 <CS43_Enable_RightLeft>
  audioI2S_setHandle(&hi2s3);
 80010d2:	4882      	ldr	r0, [pc, #520]	; (80012dc <main+0x2dc>)
 80010d4:	f7ff fd22 	bl	8000b1c <audioI2S_setHandle>
  bool isSdCardMounted=0;
 80010d8:	2300      	movs	r3, #0
 80010da:	71fb      	strb	r3, [r7, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80010dc:	f00e fa28 	bl	800f530 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if(verzonden == 1){										//Zet het verzonden bericht op het display (SN = Send Node, SS = Send Song)
 80010e0:	4b7f      	ldr	r3, [pc, #508]	; (80012e0 <main+0x2e0>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d128      	bne.n	800113a <main+0x13a>
    	LCD_cursor_home();									//Naar welke node het bericht is gezonden en welke song gespeeld moet worden
 80010e8:	f7ff fda2 	bl	8000c30 <LCD_cursor_home>
    	HAL_Delay(150);
 80010ec:	2096      	movs	r0, #150	; 0x96
 80010ee:	f001 fa21 	bl	8002534 <HAL_Delay>
    	LCD_clear();
 80010f2:	f7ff fdbf 	bl	8000c74 <LCD_clear>
    	HAL_Delay(150);
 80010f6:	2096      	movs	r0, #150	; 0x96
 80010f8:	f001 fa1c 	bl	8002534 <HAL_Delay>
    	LCD_put("SN:");
 80010fc:	4879      	ldr	r0, [pc, #484]	; (80012e4 <main+0x2e4>)
 80010fe:	f7ff fe35 	bl	8000d6c <LCD_put>
    	HAL_Delay(150);
 8001102:	2096      	movs	r0, #150	; 0x96
 8001104:	f001 fa16 	bl	8002534 <HAL_Delay>
    	LCD_putint(TxData[0]);
 8001108:	4b77      	ldr	r3, [pc, #476]	; (80012e8 <main+0x2e8>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fe5b 	bl	8000dc8 <LCD_putint>
    	HAL_Delay(150);
 8001112:	2096      	movs	r0, #150	; 0x96
 8001114:	f001 fa0e 	bl	8002534 <HAL_Delay>
    	LCD_put("    SS:");
 8001118:	4874      	ldr	r0, [pc, #464]	; (80012ec <main+0x2ec>)
 800111a:	f7ff fe27 	bl	8000d6c <LCD_put>
    	HAL_Delay(150);
 800111e:	2096      	movs	r0, #150	; 0x96
 8001120:	f001 fa08 	bl	8002534 <HAL_Delay>
    	LCD_putint(TxData[1]);
 8001124:	4b70      	ldr	r3, [pc, #448]	; (80012e8 <main+0x2e8>)
 8001126:	785b      	ldrb	r3, [r3, #1]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fe4d 	bl	8000dc8 <LCD_putint>
    	HAL_Delay(150);
 800112e:	2096      	movs	r0, #150	; 0x96
 8001130:	f001 fa00 	bl	8002534 <HAL_Delay>
    	verzonden = 0;
 8001134:	4b6a      	ldr	r3, [pc, #424]	; (80012e0 <main+0x2e0>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
    }


	if(herstart==1){
 800113a:	4b6d      	ldr	r3, [pc, #436]	; (80012f0 <main+0x2f0>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d158      	bne.n	80011f4 <main+0x1f4>
		uint8_t song = ((rand() % 5) + 1);							// RANDOM getal modulo % 4 => 0, 1, 2, 3 of 4,  +1 => 1 t/m 5 (keuze liedje)
 8001142:	f00e fddb 	bl	800fcfc <rand>
 8001146:	4602      	mov	r2, r0
 8001148:	4b6a      	ldr	r3, [pc, #424]	; (80012f4 <main+0x2f4>)
 800114a:	fb83 1302 	smull	r1, r3, r3, r2
 800114e:	1059      	asrs	r1, r3, #1
 8001150:	17d3      	asrs	r3, r2, #31
 8001152:	1ac9      	subs	r1, r1, r3
 8001154:	460b      	mov	r3, r1
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	440b      	add	r3, r1
 800115a:	1ad1      	subs	r1, r2, r3
 800115c:	b2cb      	uxtb	r3, r1
 800115e:	3301      	adds	r3, #1
 8001160:	717b      	strb	r3, [r7, #5]
		uint8_t participant = ((rand() % 3) + 1);					// RANDOM getal modulo % 4 => 0, 1 of 2,  +1 => 1 t/m 3 (keuze naar welke deelnemer het bericht toe moet)
 8001162:	f00e fdcb 	bl	800fcfc <rand>
 8001166:	4602      	mov	r2, r0
 8001168:	4b63      	ldr	r3, [pc, #396]	; (80012f8 <main+0x2f8>)
 800116a:	fb83 3102 	smull	r3, r1, r3, r2
 800116e:	17d3      	asrs	r3, r2, #31
 8001170:	1ac9      	subs	r1, r1, r3
 8001172:	460b      	mov	r3, r1
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	440b      	add	r3, r1
 8001178:	1ad1      	subs	r1, r2, r3
 800117a:	b2cb      	uxtb	r3, r1
 800117c:	3301      	adds	r3, #1
 800117e:	71bb      	strb	r3, [r7, #6]
		while (oldpart == participant){								// gedwongen wisselen van deelnemer (rand functie geeft vaak dezelfde uitkomst)
 8001180:	e00e      	b.n	80011a0 <main+0x1a0>
			participant = ((rand() % 3) + 1);
 8001182:	f00e fdbb 	bl	800fcfc <rand>
 8001186:	4602      	mov	r2, r0
 8001188:	4b5b      	ldr	r3, [pc, #364]	; (80012f8 <main+0x2f8>)
 800118a:	fb83 3102 	smull	r3, r1, r3, r2
 800118e:	17d3      	asrs	r3, r2, #31
 8001190:	1ac9      	subs	r1, r1, r3
 8001192:	460b      	mov	r3, r1
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	440b      	add	r3, r1
 8001198:	1ad1      	subs	r1, r2, r3
 800119a:	b2cb      	uxtb	r3, r1
 800119c:	3301      	adds	r3, #1
 800119e:	71bb      	strb	r3, [r7, #6]
		while (oldpart == participant){								// gedwongen wisselen van deelnemer (rand functie geeft vaak dezelfde uitkomst)
 80011a0:	4b56      	ldr	r3, [pc, #344]	; (80012fc <main+0x2fc>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	79ba      	ldrb	r2, [r7, #6]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d0eb      	beq.n	8001182 <main+0x182>
			}
		oldpart = participant;
 80011aa:	4a54      	ldr	r2, [pc, #336]	; (80012fc <main+0x2fc>)
 80011ac:	79bb      	ldrb	r3, [r7, #6]
 80011ae:	7013      	strb	r3, [r2, #0]

		if (participant == 1 ){										// Start applicatie als de song op dit bordje moet worden afgespeeld
 80011b0:	79bb      	ldrb	r3, [r7, #6]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d109      	bne.n	80011ca <main+0x1ca>

			RxData[0]=participant;
 80011b6:	4a52      	ldr	r2, [pc, #328]	; (8001300 <main+0x300>)
 80011b8:	79bb      	ldrb	r3, [r7, #6]
 80011ba:	7013      	strb	r3, [r2, #0]
			RxData[1]=song;
 80011bc:	4a50      	ldr	r2, [pc, #320]	; (8001300 <main+0x300>)
 80011be:	797b      	ldrb	r3, [r7, #5]
 80011c0:	7053      	strb	r3, [r2, #1]
			spelen = 1;
 80011c2:	4b50      	ldr	r3, [pc, #320]	; (8001304 <main+0x304>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	701a      	strb	r2, [r3, #0]
 80011c8:	e011      	b.n	80011ee <main+0x1ee>
		}else{
			TxData[0]=participant;									// Stuur bericht naar andere deelnemers met welke song er gestart moet worden
 80011ca:	4a47      	ldr	r2, [pc, #284]	; (80012e8 <main+0x2e8>)
 80011cc:	79bb      	ldrb	r3, [r7, #6]
 80011ce:	7013      	strb	r3, [r2, #0]
			TxData[1]=song;
 80011d0:	4a45      	ldr	r2, [pc, #276]	; (80012e8 <main+0x2e8>)
 80011d2:	797b      	ldrb	r3, [r7, #5]
 80011d4:	7053      	strb	r3, [r2, #1]
			HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80011d6:	4b4c      	ldr	r3, [pc, #304]	; (8001308 <main+0x308>)
 80011d8:	4a43      	ldr	r2, [pc, #268]	; (80012e8 <main+0x2e8>)
 80011da:	493d      	ldr	r1, [pc, #244]	; (80012d0 <main+0x2d0>)
 80011dc:	483d      	ldr	r0, [pc, #244]	; (80012d4 <main+0x2d4>)
 80011de:	f001 fbed 	bl	80029bc <HAL_CAN_AddTxMessage>
			verzonden = 1;
 80011e2:	4b3f      	ldr	r3, [pc, #252]	; (80012e0 <main+0x2e0>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	701a      	strb	r2, [r3, #0]

			spelen = 0;
 80011e8:	4b46      	ldr	r3, [pc, #280]	; (8001304 <main+0x304>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]

		}
		herstart = 0;
 80011ee:	4b40      	ldr	r3, [pc, #256]	; (80012f0 <main+0x2f0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
	}

	// Afspelen
    if(spelen == 1)
 80011f4:	4b43      	ldr	r3, [pc, #268]	; (8001304 <main+0x304>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	f47f af6f 	bne.w	80010dc <main+0xdc>
    {
        if(spelen == 1){										//Zet het ontvangen bericht op het display (ON = Send Node, OS = Send Song)
 80011fe:	4b41      	ldr	r3, [pc, #260]	; (8001304 <main+0x304>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d128      	bne.n	8001258 <main+0x258>
        	LCD_cursor_home();									//Naar welke node het bericht is gezonden en welke song gespeeld moet worden
 8001206:	f7ff fd13 	bl	8000c30 <LCD_cursor_home>
        	HAL_Delay(150);
 800120a:	2096      	movs	r0, #150	; 0x96
 800120c:	f001 f992 	bl	8002534 <HAL_Delay>
        	LCD_clear();
 8001210:	f7ff fd30 	bl	8000c74 <LCD_clear>
        	HAL_Delay(150);
 8001214:	2096      	movs	r0, #150	; 0x96
 8001216:	f001 f98d 	bl	8002534 <HAL_Delay>
        	LCD_put("ON:");
 800121a:	483c      	ldr	r0, [pc, #240]	; (800130c <main+0x30c>)
 800121c:	f7ff fda6 	bl	8000d6c <LCD_put>
        	HAL_Delay(150);
 8001220:	2096      	movs	r0, #150	; 0x96
 8001222:	f001 f987 	bl	8002534 <HAL_Delay>
        	LCD_putint(RxData[0]);
 8001226:	4b36      	ldr	r3, [pc, #216]	; (8001300 <main+0x300>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fdcc 	bl	8000dc8 <LCD_putint>
        	HAL_Delay(150);
 8001230:	2096      	movs	r0, #150	; 0x96
 8001232:	f001 f97f 	bl	8002534 <HAL_Delay>
        	LCD_put("    OS:");
 8001236:	4836      	ldr	r0, [pc, #216]	; (8001310 <main+0x310>)
 8001238:	f7ff fd98 	bl	8000d6c <LCD_put>
        	HAL_Delay(150);
 800123c:	2096      	movs	r0, #150	; 0x96
 800123e:	f001 f979 	bl	8002534 <HAL_Delay>
        	LCD_putint(RxData[1]);
 8001242:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <main+0x300>)
 8001244:	785b      	ldrb	r3, [r3, #1]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fdbe 	bl	8000dc8 <LCD_putint>
        	HAL_Delay(150);
 800124c:	2096      	movs	r0, #150	; 0x96
 800124e:	f001 f971 	bl	8002534 <HAL_Delay>
        	verzonden = 0;
 8001252:	4b23      	ldr	r3, [pc, #140]	; (80012e0 <main+0x2e0>)
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
        }
    	if(Appli_state == APPLICATION_START)
 8001258:	4b2e      	ldr	r3, [pc, #184]	; (8001314 <main+0x314>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d00a      	beq.n	8001276 <main+0x276>
    	        {
    				// Do nothing
    	        }
    	        else if(Appli_state == APPLICATION_DISCONNECT)
 8001260:	4b2c      	ldr	r3, [pc, #176]	; (8001314 <main+0x314>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b03      	cmp	r3, #3
 8001266:	d106      	bne.n	8001276 <main+0x276>
    	        {
    	          f_mount(NULL, (TCHAR const*)"", 0);
 8001268:	2200      	movs	r2, #0
 800126a:	492b      	ldr	r1, [pc, #172]	; (8001318 <main+0x318>)
 800126c:	2000      	movs	r0, #0
 800126e:	f00d fae9 	bl	800e844 <f_mount>
    	          isSdCardMounted = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	71fb      	strb	r3, [r7, #7]
    	        }
    	    if(Appli_state == APPLICATION_READY)
 8001276:	4b27      	ldr	r3, [pc, #156]	; (8001314 <main+0x314>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b02      	cmp	r3, #2
 800127c:	f040 80dc 	bne.w	8001438 <main+0x438>
    	        {
    	          if(!isSdCardMounted)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f083 0301 	eor.w	r3, r3, #1
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	d006      	beq.n	800129a <main+0x29a>
    	          {
    	            f_mount(&USBHFatFS, (const TCHAR*)USBHPath, 0);						//mount SD-card
 800128c:	2200      	movs	r2, #0
 800128e:	4923      	ldr	r1, [pc, #140]	; (800131c <main+0x31c>)
 8001290:	4823      	ldr	r0, [pc, #140]	; (8001320 <main+0x320>)
 8001292:	f00d fad7 	bl	800e844 <f_mount>
    	            isSdCardMounted = 1;
 8001296:	2301      	movs	r3, #1
 8001298:	71fb      	strb	r3, [r7, #7]
    	          }

    	          // Speel START geluid
    	          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);					// groene led aan (applicatie gestart)
 800129a:	2201      	movs	r2, #1
 800129c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012a0:	4820      	ldr	r0, [pc, #128]	; (8001324 <main+0x324>)
 80012a2:	f002 fe4d 	bl	8003f40 <HAL_GPIO_WritePin>
    	          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ac:	481d      	ldr	r0, [pc, #116]	; (8001324 <main+0x324>)
 80012ae:	f002 fe47 	bl	8003f40 <HAL_GPIO_WritePin>
    	          HAL_Delay(100);
 80012b2:	2064      	movs	r0, #100	; 0x64
 80012b4:	f001 f93e 	bl	8002534 <HAL_Delay>
    	          wavPlayer_fileSelect(WAV_FILE10);
 80012b8:	481b      	ldr	r0, [pc, #108]	; (8001328 <main+0x328>)
 80012ba:	f000 ffd1 	bl	8002260 <wavPlayer_fileSelect>
    	          HAL_Delay(100);
 80012be:	2064      	movs	r0, #100	; 0x64
 80012c0:	f001 f938 	bl	8002534 <HAL_Delay>
    	          wavPlayer_play();
 80012c4:	f000 fff6 	bl	80022b4 <wavPlayer_play>
    	          while(!wavPlayer_isFinished())
 80012c8:	e032      	b.n	8001330 <main+0x330>
 80012ca:	bf00      	nop
 80012cc:	200014c0 	.word	0x200014c0
 80012d0:	2000155c 	.word	0x2000155c
 80012d4:	20001534 	.word	0x20001534
 80012d8:	2000140c 	.word	0x2000140c
 80012dc:	20001590 	.word	0x20001590
 80012e0:	2000012b 	.word	0x2000012b
 80012e4:	08010bb4 	.word	0x08010bb4
 80012e8:	20000118 	.word	0x20000118
 80012ec:	08010bb8 	.word	0x08010bb8
 80012f0:	2000012c 	.word	0x2000012c
 80012f4:	66666667 	.word	0x66666667
 80012f8:	55555556 	.word	0x55555556
 80012fc:	20000010 	.word	0x20000010
 8001300:	20000120 	.word	0x20000120
 8001304:	2000012a 	.word	0x2000012a
 8001308:	200014e8 	.word	0x200014e8
 800130c:	08010bc0 	.word	0x08010bc0
 8001310:	08010bc4 	.word	0x08010bc4
 8001314:	200013b8 	.word	0x200013b8
 8001318:	08010bcc 	.word	0x08010bcc
 800131c:	20001624 	.word	0x20001624
 8001320:	20001858 	.word	0x20001858
 8001324:	40020c00 	.word	0x40020c00
 8001328:	08010bd0 	.word	0x08010bd0
    	          {
    	        	  wavPlayer_process();
 800132c:	f000 fff4 	bl	8002318 <wavPlayer_process>
    	          while(!wavPlayer_isFinished())
 8001330:	f001 f870 	bl	8002414 <wavPlayer_isFinished>
 8001334:	4603      	mov	r3, r0
 8001336:	f083 0301 	eor.w	r3, r3, #1
 800133a:	b2db      	uxtb	r3, r3
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1f5      	bne.n	800132c <main+0x32c>
    	          }
    	          wavPlayer_stop();
 8001340:	f001 f85c 	bl	80023fc <wavPlayer_stop>
    	          HAL_Delay((rand() % 50)*100);					// RANDOM wachttijd
 8001344:	f00e fcda 	bl	800fcfc <rand>
 8001348:	4602      	mov	r2, r0
 800134a:	4b75      	ldr	r3, [pc, #468]	; (8001520 <main+0x520>)
 800134c:	fb83 1302 	smull	r1, r3, r3, r2
 8001350:	1119      	asrs	r1, r3, #4
 8001352:	17d3      	asrs	r3, r2, #31
 8001354:	1acb      	subs	r3, r1, r3
 8001356:	2132      	movs	r1, #50	; 0x32
 8001358:	fb01 f303 	mul.w	r3, r1, r3
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2264      	movs	r2, #100	; 0x64
 8001360:	fb02 f303 	mul.w	r3, r2, r3
 8001364:	4618      	mov	r0, r3
 8001366:	f001 f8e5 	bl	8002534 <HAL_Delay>
    	          tellerFijn = 0;                          		//teller fijn 0 - 1000 telt tijdens proces afspelen audiodata, teller start bij afspelen
 800136a:	4b6e      	ldr	r3, [pc, #440]	; (8001524 <main+0x524>)
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
    	          tellerGrof = 0;								//teller grof x * 1000
 8001370:	4b6d      	ldr	r3, [pc, #436]	; (8001528 <main+0x528>)
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
    	          reactieSnelheid = 25000;							//Reactiesnelheid, tellerstand na start afspelen
 8001376:	4b6d      	ldr	r3, [pc, #436]	; (800152c <main+0x52c>)
 8001378:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800137c:	601a      	str	r2, [r3, #0]

    	          // Speel audiofile 1, 2, 3, 4 of 5 op verzoek van andere node (RxData bericht van ander node)
    	          if(RxData[1]==1)
 800137e:	4b6c      	ldr	r3, [pc, #432]	; (8001530 <main+0x530>)
 8001380:	785b      	ldrb	r3, [r3, #1]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d102      	bne.n	800138c <main+0x38c>
    	           	   {
    	        	  	  wavPlayer_fileSelect(WAV_FILE1);
 8001386:	486b      	ldr	r0, [pc, #428]	; (8001534 <main+0x534>)
 8001388:	f000 ff6a 	bl	8002260 <wavPlayer_fileSelect>
    	           	   }
    	          if(RxData[1]==2)
 800138c:	4b68      	ldr	r3, [pc, #416]	; (8001530 <main+0x530>)
 800138e:	785b      	ldrb	r3, [r3, #1]
 8001390:	2b02      	cmp	r3, #2
 8001392:	d102      	bne.n	800139a <main+0x39a>
    	           	   {
    	        	  	  wavPlayer_fileSelect(WAV_FILE2);
 8001394:	4868      	ldr	r0, [pc, #416]	; (8001538 <main+0x538>)
 8001396:	f000 ff63 	bl	8002260 <wavPlayer_fileSelect>
    	           	   }
    	          if(RxData[1]==3)
 800139a:	4b65      	ldr	r3, [pc, #404]	; (8001530 <main+0x530>)
 800139c:	785b      	ldrb	r3, [r3, #1]
 800139e:	2b03      	cmp	r3, #3
 80013a0:	d102      	bne.n	80013a8 <main+0x3a8>
    	           	   {
    	              	   wavPlayer_fileSelect(WAV_FILE3);
 80013a2:	4866      	ldr	r0, [pc, #408]	; (800153c <main+0x53c>)
 80013a4:	f000 ff5c 	bl	8002260 <wavPlayer_fileSelect>
    	           	   }
    	          if(RxData[1]==4)
 80013a8:	4b61      	ldr	r3, [pc, #388]	; (8001530 <main+0x530>)
 80013aa:	785b      	ldrb	r3, [r3, #1]
 80013ac:	2b04      	cmp	r3, #4
 80013ae:	d102      	bne.n	80013b6 <main+0x3b6>
    	              {
    	              	  wavPlayer_fileSelect(WAV_FILE4);
 80013b0:	4863      	ldr	r0, [pc, #396]	; (8001540 <main+0x540>)
 80013b2:	f000 ff55 	bl	8002260 <wavPlayer_fileSelect>
    	              }
    	          if(RxData[1]==5)
 80013b6:	4b5e      	ldr	r3, [pc, #376]	; (8001530 <main+0x530>)
 80013b8:	785b      	ldrb	r3, [r3, #1]
 80013ba:	2b05      	cmp	r3, #5
 80013bc:	d102      	bne.n	80013c4 <main+0x3c4>
    	              {
    	              	  wavPlayer_fileSelect(WAV_FILE5);
 80013be:	4861      	ldr	r0, [pc, #388]	; (8001544 <main+0x544>)
 80013c0:	f000 ff4e 	bl	8002260 <wavPlayer_fileSelect>
    	              }
    	          if(RxData[1]==0)
 80013c4:	4b5a      	ldr	r3, [pc, #360]	; (8001530 <main+0x530>)
 80013c6:	785b      	ldrb	r3, [r3, #1]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d102      	bne.n	80013d2 <main+0x3d2>
    	              {
    	              	  wavPlayer_fileSelect(WAV_FILE5);
 80013cc:	485d      	ldr	r0, [pc, #372]	; (8001544 <main+0x544>)
 80013ce:	f000 ff47 	bl	8002260 <wavPlayer_fileSelect>
    	              }
    	          wavPlayer_play();
 80013d2:	f000 ff6f 	bl	80022b4 <wavPlayer_play>
    	          while(!wavPlayer_isFinished())						//afspelen audiofile in loop + start teller
 80013d6:	e025      	b.n	8001424 <main+0x424>
    	            {

    	              if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15))			//drukknop geactiveerd => reactieTijd vastleggen + LED aan
 80013d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013dc:	485a      	ldr	r0, [pc, #360]	; (8001548 <main+0x548>)
 80013de:	f002 fd97 	bl	8003f10 <HAL_GPIO_ReadPin>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d009      	beq.n	80013fc <main+0x3fc>
    	              {
    	            	  reactieSnelheid=tellerGrof;
 80013e8:	4b4f      	ldr	r3, [pc, #316]	; (8001528 <main+0x528>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a4f      	ldr	r2, [pc, #316]	; (800152c <main+0x52c>)
 80013ee:	6013      	str	r3, [r2, #0]
    	            	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80013f0:	2201      	movs	r2, #1
 80013f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013f6:	4855      	ldr	r0, [pc, #340]	; (800154c <main+0x54c>)
 80013f8:	f002 fda2 	bl	8003f40 <HAL_GPIO_WritePin>

    	              }
    	              tellerFijn++;
 80013fc:	4b49      	ldr	r3, [pc, #292]	; (8001524 <main+0x524>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	3301      	adds	r3, #1
 8001402:	4a48      	ldr	r2, [pc, #288]	; (8001524 <main+0x524>)
 8001404:	6013      	str	r3, [r2, #0]
    	              if(tellerFijn>1000){
 8001406:	4b47      	ldr	r3, [pc, #284]	; (8001524 <main+0x524>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800140e:	d907      	bls.n	8001420 <main+0x420>
    	            	  tellerGrof++;
 8001410:	4b45      	ldr	r3, [pc, #276]	; (8001528 <main+0x528>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	3301      	adds	r3, #1
 8001416:	4a44      	ldr	r2, [pc, #272]	; (8001528 <main+0x528>)
 8001418:	6013      	str	r3, [r2, #0]
    	            	  tellerFijn=0;
 800141a:	4b42      	ldr	r3, [pc, #264]	; (8001524 <main+0x524>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
    	              }
    	              wavPlayer_process();								// speel audio data
 8001420:	f000 ff7a 	bl	8002318 <wavPlayer_process>
    	          while(!wavPlayer_isFinished())						//afspelen audiofile in loop + start teller
 8001424:	f000 fff6 	bl	8002414 <wavPlayer_isFinished>
 8001428:	4603      	mov	r3, r0
 800142a:	f083 0301 	eor.w	r3, r3, #1
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1d1      	bne.n	80013d8 <main+0x3d8>
    	            }
    	          wavPlayer_stop();
 8001434:	f000 ffe2 	bl	80023fc <wavPlayer_stop>
    	          }

    	        	if(reactieSnelheid<score){							//speel muziekje "goed" als de score verbeterd is
 8001438:	4b3c      	ldr	r3, [pc, #240]	; (800152c <main+0x52c>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b44      	ldr	r3, [pc, #272]	; (8001550 <main+0x550>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	429a      	cmp	r2, r3
 8001442:	d22f      	bcs.n	80014a4 <main+0x4a4>
    	        		score = reactieSnelheid;
 8001444:	4b39      	ldr	r3, [pc, #228]	; (800152c <main+0x52c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a41      	ldr	r2, [pc, #260]	; (8001550 <main+0x550>)
 800144a:	6013      	str	r3, [r2, #0]
    	        		LCD_cursor_home();									//Display score
 800144c:	f7ff fbf0 	bl	8000c30 <LCD_cursor_home>
    	        		HAL_Delay(10);
 8001450:	200a      	movs	r0, #10
 8001452:	f001 f86f 	bl	8002534 <HAL_Delay>
    	        		LCD_clear();
 8001456:	f7ff fc0d 	bl	8000c74 <LCD_clear>
    	        		HAL_Delay(10);
 800145a:	200a      	movs	r0, #10
 800145c:	f001 f86a 	bl	8002534 <HAL_Delay>
    	        		LCD_put("Score:  ");
 8001460:	483c      	ldr	r0, [pc, #240]	; (8001554 <main+0x554>)
 8001462:	f7ff fc83 	bl	8000d6c <LCD_put>
    	        		HAL_Delay(10);
 8001466:	200a      	movs	r0, #10
 8001468:	f001 f864 	bl	8002534 <HAL_Delay>
    	        		LCD_putint(score);
 800146c:	4b38      	ldr	r3, [pc, #224]	; (8001550 <main+0x550>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fca9 	bl	8000dc8 <LCD_putint>
    	        		wavPlayer_fileSelect(WAV_FILE11);
 8001476:	4838      	ldr	r0, [pc, #224]	; (8001558 <main+0x558>)
 8001478:	f000 fef2 	bl	8002260 <wavPlayer_fileSelect>
    	        		wavPlayer_play();
 800147c:	f000 ff1a 	bl	80022b4 <wavPlayer_play>
    	        		while(!wavPlayer_isFinished()){wavPlayer_process();}
 8001480:	e001      	b.n	8001486 <main+0x486>
 8001482:	f000 ff49 	bl	8002318 <wavPlayer_process>
 8001486:	f000 ffc5 	bl	8002414 <wavPlayer_isFinished>
 800148a:	4603      	mov	r3, r0
 800148c:	f083 0301 	eor.w	r3, r3, #1
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f5      	bne.n	8001482 <main+0x482>
    	        		wavPlayer_stop();
 8001496:	f000 ffb1 	bl	80023fc <wavPlayer_stop>
    	        		HAL_Delay(500);
 800149a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800149e:	f001 f849 	bl	8002534 <HAL_Delay>
 80014a2:	e026      	b.n	80014f2 <main+0x4f2>

    	        	}else{												//speel muziekje "fout" als de score niet verbeterd is
    	        		LCD_cursor_home();									//Display score
 80014a4:	f7ff fbc4 	bl	8000c30 <LCD_cursor_home>
    	        		HAL_Delay(10);
 80014a8:	200a      	movs	r0, #10
 80014aa:	f001 f843 	bl	8002534 <HAL_Delay>
    	        		LCD_clear();
 80014ae:	f7ff fbe1 	bl	8000c74 <LCD_clear>
    	        		HAL_Delay(10);
 80014b2:	200a      	movs	r0, #10
 80014b4:	f001 f83e 	bl	8002534 <HAL_Delay>
    	        		LCD_put("Score:  ");
 80014b8:	4826      	ldr	r0, [pc, #152]	; (8001554 <main+0x554>)
 80014ba:	f7ff fc57 	bl	8000d6c <LCD_put>
    	        		HAL_Delay(10);
 80014be:	200a      	movs	r0, #10
 80014c0:	f001 f838 	bl	8002534 <HAL_Delay>
    	        		LCD_putint(score);
 80014c4:	4b22      	ldr	r3, [pc, #136]	; (8001550 <main+0x550>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fc7d 	bl	8000dc8 <LCD_putint>
    	        		wavPlayer_fileSelect(WAV_FILE12);
 80014ce:	4823      	ldr	r0, [pc, #140]	; (800155c <main+0x55c>)
 80014d0:	f000 fec6 	bl	8002260 <wavPlayer_fileSelect>
    	        		wavPlayer_play();
 80014d4:	f000 feee 	bl	80022b4 <wavPlayer_play>
    	        		while(!wavPlayer_isFinished()){wavPlayer_process();}
 80014d8:	e001      	b.n	80014de <main+0x4de>
 80014da:	f000 ff1d 	bl	8002318 <wavPlayer_process>
 80014de:	f000 ff99 	bl	8002414 <wavPlayer_isFinished>
 80014e2:	4603      	mov	r3, r0
 80014e4:	f083 0301 	eor.w	r3, r3, #1
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f5      	bne.n	80014da <main+0x4da>
    	        		wavPlayer_stop();
 80014ee:	f000 ff85 	bl	80023fc <wavPlayer_stop>
    	        	}
    	        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);		//zet leds uit
 80014f2:	2200      	movs	r2, #0
 80014f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014f8:	4814      	ldr	r0, [pc, #80]	; (800154c <main+0x54c>)
 80014fa:	f002 fd21 	bl	8003f40 <HAL_GPIO_WritePin>
    	        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);												//reset start applicatie flag
 80014fe:	2200      	movs	r2, #0
 8001500:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001504:	4811      	ldr	r0, [pc, #68]	; (800154c <main+0x54c>)
 8001506:	f002 fd1b 	bl	8003f40 <HAL_GPIO_WritePin>
    	        	LCD_cursor_home();
 800150a:	f7ff fb91 	bl	8000c30 <LCD_cursor_home>
    	        	LCD_clear();
 800150e:	f7ff fbb1 	bl	8000c74 <LCD_clear>
    	        	spelen = 0;
 8001512:	4b13      	ldr	r3, [pc, #76]	; (8001560 <main+0x560>)
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
    	        	herstart = 1;
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <main+0x564>)
 800151a:	2201      	movs	r2, #1
 800151c:	701a      	strb	r2, [r3, #0]
    MX_USB_HOST_Process();
 800151e:	e5dd      	b.n	80010dc <main+0xdc>
 8001520:	51eb851f 	.word	0x51eb851f
 8001524:	20000130 	.word	0x20000130
 8001528:	20000134 	.word	0x20000134
 800152c:	20000138 	.word	0x20000138
 8001530:	20000120 	.word	0x20000120
 8001534:	08010bdc 	.word	0x08010bdc
 8001538:	08010be8 	.word	0x08010be8
 800153c:	08010bf4 	.word	0x08010bf4
 8001540:	08010c00 	.word	0x08010c00
 8001544:	08010c0c 	.word	0x08010c0c
 8001548:	40020800 	.word	0x40020800
 800154c:	40020c00 	.word	0x40020c00
 8001550:	2000000c 	.word	0x2000000c
 8001554:	08010c18 	.word	0x08010c18
 8001558:	08010c24 	.word	0x08010c24
 800155c:	08010c30 	.word	0x08010c30
 8001560:	2000012a 	.word	0x2000012a
 8001564:	2000012c 	.word	0x2000012c

08001568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b094      	sub	sp, #80	; 0x50
 800156c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156e:	f107 0320 	add.w	r3, r7, #32
 8001572:	2230      	movs	r2, #48	; 0x30
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f00e fb0e 	bl	800fb98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800158c:	2300      	movs	r3, #0
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	4b28      	ldr	r3, [pc, #160]	; (8001634 <SystemClock_Config+0xcc>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	4a27      	ldr	r2, [pc, #156]	; (8001634 <SystemClock_Config+0xcc>)
 8001596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800159a:	6413      	str	r3, [r2, #64]	; 0x40
 800159c:	4b25      	ldr	r3, [pc, #148]	; (8001634 <SystemClock_Config+0xcc>)
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015a8:	2300      	movs	r3, #0
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	4b22      	ldr	r3, [pc, #136]	; (8001638 <SystemClock_Config+0xd0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a21      	ldr	r2, [pc, #132]	; (8001638 <SystemClock_Config+0xd0>)
 80015b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	4b1f      	ldr	r3, [pc, #124]	; (8001638 <SystemClock_Config+0xd0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015c4:	2301      	movs	r3, #1
 80015c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ce:	2302      	movs	r3, #2
 80015d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015d8:	2308      	movs	r3, #8
 80015da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015e2:	2302      	movs	r3, #2
 80015e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015e6:	2307      	movs	r3, #7
 80015e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ea:	f107 0320 	add.w	r3, r7, #32
 80015ee:	4618      	mov	r0, r3
 80015f0:	f006 f990 	bl	8007914 <HAL_RCC_OscConfig>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80015fa:	f000 fa4b 	bl	8001a94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015fe:	230f      	movs	r3, #15
 8001600:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001602:	2302      	movs	r3, #2
 8001604:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800160a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800160e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001614:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001616:	f107 030c 	add.w	r3, r7, #12
 800161a:	2105      	movs	r1, #5
 800161c:	4618      	mov	r0, r3
 800161e:	f006 fbf1 	bl	8007e04 <HAL_RCC_ClockConfig>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001628:	f000 fa34 	bl	8001a94 <Error_Handler>
  }
}
 800162c:	bf00      	nop
 800162e:	3750      	adds	r7, #80	; 0x50
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40023800 	.word	0x40023800
 8001638:	40007000 	.word	0x40007000

0800163c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001640:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <MX_CAN1_Init+0x64>)
 8001642:	4a18      	ldr	r2, [pc, #96]	; (80016a4 <MX_CAN1_Init+0x68>)
 8001644:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 14;
 8001646:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <MX_CAN1_Init+0x64>)
 8001648:	220e      	movs	r2, #14
 800164a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <MX_CAN1_Init+0x64>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001652:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <MX_CAN1_Init+0x64>)
 8001654:	2200      	movs	r2, #0
 8001656:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <MX_CAN1_Init+0x64>)
 800165a:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 800165e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <MX_CAN1_Init+0x64>)
 8001662:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001666:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001668:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <MX_CAN1_Init+0x64>)
 800166a:	2200      	movs	r2, #0
 800166c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <MX_CAN1_Init+0x64>)
 8001670:	2200      	movs	r2, #0
 8001672:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <MX_CAN1_Init+0x64>)
 8001676:	2200      	movs	r2, #0
 8001678:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <MX_CAN1_Init+0x64>)
 800167c:	2200      	movs	r2, #0
 800167e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <MX_CAN1_Init+0x64>)
 8001682:	2200      	movs	r2, #0
 8001684:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <MX_CAN1_Init+0x64>)
 8001688:	2200      	movs	r2, #0
 800168a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800168c:	4804      	ldr	r0, [pc, #16]	; (80016a0 <MX_CAN1_Init+0x64>)
 800168e:	f000 ff75 	bl	800257c <HAL_CAN_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001698:	f000 f9fc 	bl	8001a94 <Error_Handler>
  /* USER CODE BEGIN CAN1_Init 2 */


  /* USER CODE END CAN1_Init 2 */

}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20001534 	.word	0x20001534
 80016a4:	40006400 	.word	0x40006400

080016a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <MX_I2C1_Init+0x50>)
 80016ae:	4a13      	ldr	r2, [pc, #76]	; (80016fc <MX_I2C1_Init+0x54>)
 80016b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <MX_I2C1_Init+0x50>)
 80016b4:	4a12      	ldr	r2, [pc, #72]	; (8001700 <MX_I2C1_Init+0x58>)
 80016b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <MX_I2C1_Init+0x50>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <MX_I2C1_Init+0x50>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <MX_I2C1_Init+0x50>)
 80016c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016cc:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <MX_I2C1_Init+0x50>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <MX_I2C1_Init+0x50>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016d8:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <MX_I2C1_Init+0x50>)
 80016da:	2200      	movs	r2, #0
 80016dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <MX_I2C1_Init+0x50>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016e4:	4804      	ldr	r0, [pc, #16]	; (80016f8 <MX_I2C1_Init+0x50>)
 80016e6:	f004 f9d9 	bl	8005a9c <HAL_I2C_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016f0:	f000 f9d0 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	2000140c 	.word	0x2000140c
 80016fc:	40005400 	.word	0x40005400
 8001700:	000186a0 	.word	0x000186a0

08001704 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001708:	4b13      	ldr	r3, [pc, #76]	; (8001758 <MX_I2S3_Init+0x54>)
 800170a:	4a14      	ldr	r2, [pc, #80]	; (800175c <MX_I2S3_Init+0x58>)
 800170c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800170e:	4b12      	ldr	r3, [pc, #72]	; (8001758 <MX_I2S3_Init+0x54>)
 8001710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001714:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <MX_I2S3_Init+0x54>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800171c:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_I2S3_Init+0x54>)
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001722:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <MX_I2S3_Init+0x54>)
 8001724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001728:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <MX_I2S3_Init+0x54>)
 800172c:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001730:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_I2S3_Init+0x54>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001738:	4b07      	ldr	r3, [pc, #28]	; (8001758 <MX_I2S3_Init+0x54>)
 800173a:	2200      	movs	r2, #0
 800173c:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_I2S3_Init+0x54>)
 8001740:	2200      	movs	r2, #0
 8001742:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001744:	4804      	ldr	r0, [pc, #16]	; (8001758 <MX_I2S3_Init+0x54>)
 8001746:	f005 f93f 	bl	80069c8 <HAL_I2S_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001750:	f000 f9a0 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20001590 	.word	0x20001590
 800175c:	40003c00 	.word	0x40003c00

08001760 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001766:	f107 0308 	add.w	r3, r7, #8
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001774:	463b      	mov	r3, r7
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800177c:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <MX_TIM2_Init+0x98>)
 800177e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001782:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001784:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <MX_TIM2_Init+0x98>)
 8001786:	2200      	movs	r2, #0
 8001788:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178a:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <MX_TIM2_Init+0x98>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <MX_TIM2_Init+0x98>)
 8001792:	f04f 32ff 	mov.w	r2, #4294967295
 8001796:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001798:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <MX_TIM2_Init+0x98>)
 800179a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800179e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a0:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <MX_TIM2_Init+0x98>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017a6:	4814      	ldr	r0, [pc, #80]	; (80017f8 <MX_TIM2_Init+0x98>)
 80017a8:	f006 fec6 	bl	8008538 <HAL_TIM_Base_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017b2:	f000 f96f 	bl	8001a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017bc:	f107 0308 	add.w	r3, r7, #8
 80017c0:	4619      	mov	r1, r3
 80017c2:	480d      	ldr	r0, [pc, #52]	; (80017f8 <MX_TIM2_Init+0x98>)
 80017c4:	f007 f880 	bl	80088c8 <HAL_TIM_ConfigClockSource>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80017ce:	f000 f961 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d2:	2300      	movs	r3, #0
 80017d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017da:	463b      	mov	r3, r7
 80017dc:	4619      	mov	r1, r3
 80017de:	4806      	ldr	r0, [pc, #24]	; (80017f8 <MX_TIM2_Init+0x98>)
 80017e0:	f007 fa9c 	bl	8008d1c <HAL_TIMEx_MasterConfigSynchronization>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80017ea:	f000 f953 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017ee:	bf00      	nop
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200014ec 	.word	0x200014ec

080017fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001802:	f107 0308 	add.w	r3, r7, #8
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001810:	463b      	mov	r3, r7
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001818:	4b1d      	ldr	r3, [pc, #116]	; (8001890 <MX_TIM4_Init+0x94>)
 800181a:	4a1e      	ldr	r2, [pc, #120]	; (8001894 <MX_TIM4_Init+0x98>)
 800181c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800181e:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <MX_TIM4_Init+0x94>)
 8001820:	2200      	movs	r2, #0
 8001822:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001824:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <MX_TIM4_Init+0x94>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800182a:	4b19      	ldr	r3, [pc, #100]	; (8001890 <MX_TIM4_Init+0x94>)
 800182c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001830:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001832:	4b17      	ldr	r3, [pc, #92]	; (8001890 <MX_TIM4_Init+0x94>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001838:	4b15      	ldr	r3, [pc, #84]	; (8001890 <MX_TIM4_Init+0x94>)
 800183a:	2200      	movs	r2, #0
 800183c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800183e:	4814      	ldr	r0, [pc, #80]	; (8001890 <MX_TIM4_Init+0x94>)
 8001840:	f006 fe7a 	bl	8008538 <HAL_TIM_Base_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800184a:	f000 f923 	bl	8001a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800184e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001852:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001854:	f107 0308 	add.w	r3, r7, #8
 8001858:	4619      	mov	r1, r3
 800185a:	480d      	ldr	r0, [pc, #52]	; (8001890 <MX_TIM4_Init+0x94>)
 800185c:	f007 f834 	bl	80088c8 <HAL_TIM_ConfigClockSource>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001866:	f000 f915 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800186a:	2300      	movs	r3, #0
 800186c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186e:	2300      	movs	r3, #0
 8001870:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001872:	463b      	mov	r3, r7
 8001874:	4619      	mov	r1, r3
 8001876:	4806      	ldr	r0, [pc, #24]	; (8001890 <MX_TIM4_Init+0x94>)
 8001878:	f007 fa50 	bl	8008d1c <HAL_TIMEx_MasterConfigSynchronization>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001882:	f000 f907 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200013c4 	.word	0x200013c4
 8001894:	40000800 	.word	0x40000800

08001898 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <MX_DMA_Init+0x3c>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a0b      	ldr	r2, [pc, #44]	; (80018d4 <MX_DMA_Init+0x3c>)
 80018a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <MX_DMA_Init+0x3c>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2100      	movs	r1, #0
 80018be:	2010      	movs	r0, #16
 80018c0:	f001 fd80 	bl	80033c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80018c4:	2010      	movs	r0, #16
 80018c6:	f001 fd99 	bl	80033fc <HAL_NVIC_EnableIRQ>

}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40023800 	.word	0x40023800

080018d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08c      	sub	sp, #48	; 0x30
 80018dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018de:	f107 031c 	add.w	r3, r7, #28
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	60da      	str	r2, [r3, #12]
 80018ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	61bb      	str	r3, [r7, #24]
 80018f2:	4b5a      	ldr	r3, [pc, #360]	; (8001a5c <MX_GPIO_Init+0x184>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a59      	ldr	r2, [pc, #356]	; (8001a5c <MX_GPIO_Init+0x184>)
 80018f8:	f043 0310 	orr.w	r3, r3, #16
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b57      	ldr	r3, [pc, #348]	; (8001a5c <MX_GPIO_Init+0x184>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0310 	and.w	r3, r3, #16
 8001906:	61bb      	str	r3, [r7, #24]
 8001908:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	4b53      	ldr	r3, [pc, #332]	; (8001a5c <MX_GPIO_Init+0x184>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a52      	ldr	r2, [pc, #328]	; (8001a5c <MX_GPIO_Init+0x184>)
 8001914:	f043 0304 	orr.w	r3, r3, #4
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b50      	ldr	r3, [pc, #320]	; (8001a5c <MX_GPIO_Init+0x184>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	4b4c      	ldr	r3, [pc, #304]	; (8001a5c <MX_GPIO_Init+0x184>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a4b      	ldr	r2, [pc, #300]	; (8001a5c <MX_GPIO_Init+0x184>)
 8001930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b49      	ldr	r3, [pc, #292]	; (8001a5c <MX_GPIO_Init+0x184>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	4b45      	ldr	r3, [pc, #276]	; (8001a5c <MX_GPIO_Init+0x184>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a44      	ldr	r2, [pc, #272]	; (8001a5c <MX_GPIO_Init+0x184>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b42      	ldr	r3, [pc, #264]	; (8001a5c <MX_GPIO_Init+0x184>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	4b3e      	ldr	r3, [pc, #248]	; (8001a5c <MX_GPIO_Init+0x184>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a3d      	ldr	r2, [pc, #244]	; (8001a5c <MX_GPIO_Init+0x184>)
 8001968:	f043 0308 	orr.w	r3, r3, #8
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b3b      	ldr	r3, [pc, #236]	; (8001a5c <MX_GPIO_Init+0x184>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	4b37      	ldr	r3, [pc, #220]	; (8001a5c <MX_GPIO_Init+0x184>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a36      	ldr	r2, [pc, #216]	; (8001a5c <MX_GPIO_Init+0x184>)
 8001984:	f043 0302 	orr.w	r3, r3, #2
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b34      	ldr	r3, [pc, #208]	; (8001a5c <MX_GPIO_Init+0x184>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	607b      	str	r3, [r7, #4]
 8001994:	687b      	ldr	r3, [r7, #4]


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001996:	2200      	movs	r2, #0
 8001998:	2178      	movs	r1, #120	; 0x78
 800199a:	4831      	ldr	r0, [pc, #196]	; (8001a60 <MX_GPIO_Init+0x188>)
 800199c:	f002 fad0 	bl	8003f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_11, GPIO_PIN_RESET);
 80019a0:	2200      	movs	r2, #0
 80019a2:	f642 0101 	movw	r1, #10241	; 0x2801
 80019a6:	482f      	ldr	r0, [pc, #188]	; (8001a64 <MX_GPIO_Init+0x18c>)
 80019a8:	f002 faca 	bl	8003f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80019ac:	2200      	movs	r2, #0
 80019ae:	f24f 0111 	movw	r1, #61457	; 0xf011
 80019b2:	482d      	ldr	r0, [pc, #180]	; (8001a68 <MX_GPIO_Init+0x190>)
 80019b4:	f002 fac4 	bl	8003f40 <HAL_GPIO_WritePin>
                          |GPIO_PIN_0|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE3 PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80019b8:	2378      	movs	r3, #120	; 0x78
 80019ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019bc:	2301      	movs	r3, #1
 80019be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c4:	2300      	movs	r3, #0
 80019c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019c8:	f107 031c 	add.w	r3, r7, #28
 80019cc:	4619      	mov	r1, r3
 80019ce:	4824      	ldr	r0, [pc, #144]	; (8001a60 <MX_GPIO_Init+0x188>)
 80019d0:	f002 f902 	bl	8003bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_11;
 80019d4:	f642 0301 	movw	r3, #10241	; 0x2801
 80019d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019da:	2301      	movs	r3, #1
 80019dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e2:	2300      	movs	r3, #0
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e6:	f107 031c 	add.w	r3, r7, #28
 80019ea:	4619      	mov	r1, r3
 80019ec:	481d      	ldr	r0, [pc, #116]	; (8001a64 <MX_GPIO_Init+0x18c>)
 80019ee:	f002 f8f3 	bl	8003bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80019f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f8:	2300      	movs	r3, #0
 80019fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a00:	f107 031c 	add.w	r3, r7, #28
 8001a04:	4619      	mov	r1, r3
 8001a06:	4817      	ldr	r0, [pc, #92]	; (8001a64 <MX_GPIO_Init+0x18c>)
 8001a08:	f002 f8e6 	bl	8003bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a10:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1a:	f107 031c 	add.w	r3, r7, #28
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4812      	ldr	r0, [pc, #72]	; (8001a6c <MX_GPIO_Init+0x194>)
 8001a22:	f002 f8d9 	bl	8003bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD0 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001a26:	f24f 0311 	movw	r3, #61457	; 0xf011
 8001a2a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_0|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2300      	movs	r3, #0
 8001a36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a38:	f107 031c 	add.w	r3, r7, #28
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	480a      	ldr	r0, [pc, #40]	; (8001a68 <MX_GPIO_Init+0x190>)
 8001a40:	f002 f8ca 	bl	8003bd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 1);
 8001a44:	2201      	movs	r2, #1
 8001a46:	2100      	movs	r1, #0
 8001a48:	2006      	movs	r0, #6
 8001a4a:	f001 fcbb 	bl	80033c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001a4e:	2006      	movs	r0, #6
 8001a50:	f001 fcd4 	bl	80033fc <HAL_NVIC_EnableIRQ>

}
 8001a54:	bf00      	nop
 8001a56:	3730      	adds	r7, #48	; 0x30
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40020800 	.word	0x40020800
 8001a68:	40020c00 	.word	0x40020c00
 8001a6c:	40020000 	.word	0x40020000

08001a70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d101      	bne.n	8001a86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a82:	f000 fd37 	bl	80024f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40010000 	.word	0x40010000

08001a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a98:	b672      	cpsid	i
}
 8001a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a9c:	e7fe      	b.n	8001a9c <Error_Handler+0x8>
	...

08001aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <HAL_MspInit+0x4c>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	4a0f      	ldr	r2, [pc, #60]	; (8001aec <HAL_MspInit+0x4c>)
 8001ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <HAL_MspInit+0x4c>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	603b      	str	r3, [r7, #0]
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <HAL_MspInit+0x4c>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	4a08      	ldr	r2, [pc, #32]	; (8001aec <HAL_MspInit+0x4c>)
 8001acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_MspInit+0x4c>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ade:	2007      	movs	r0, #7
 8001ae0:	f001 fc65 	bl	80033ae <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40023800 	.word	0x40023800

08001af0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	; 0x28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a2c      	ldr	r2, [pc, #176]	; (8001bc0 <HAL_CAN_MspInit+0xd0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d152      	bne.n	8001bb8 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	4b2b      	ldr	r3, [pc, #172]	; (8001bc4 <HAL_CAN_MspInit+0xd4>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	4a2a      	ldr	r2, [pc, #168]	; (8001bc4 <HAL_CAN_MspInit+0xd4>)
 8001b1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b20:	6413      	str	r3, [r2, #64]	; 0x40
 8001b22:	4b28      	ldr	r3, [pc, #160]	; (8001bc4 <HAL_CAN_MspInit+0xd4>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	4b24      	ldr	r3, [pc, #144]	; (8001bc4 <HAL_CAN_MspInit+0xd4>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a23      	ldr	r2, [pc, #140]	; (8001bc4 <HAL_CAN_MspInit+0xd4>)
 8001b38:	f043 0308 	orr.w	r3, r3, #8
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b21      	ldr	r3, [pc, #132]	; (8001bc4 <HAL_CAN_MspInit+0xd4>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <HAL_CAN_MspInit+0xd4>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a1c      	ldr	r2, [pc, #112]	; (8001bc4 <HAL_CAN_MspInit+0xd4>)
 8001b54:	f043 0302 	orr.w	r3, r3, #2
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5a:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <HAL_CAN_MspInit+0xd4>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	60bb      	str	r3, [r7, #8]
 8001b64:	68bb      	ldr	r3, [r7, #8]
    /**CAN1 GPIO Configuration
    PD1     ------> CAN1_TX
    PB8     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b66:	2302      	movs	r3, #2
 8001b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b72:	2303      	movs	r3, #3
 8001b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b76:	2309      	movs	r3, #9
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4811      	ldr	r0, [pc, #68]	; (8001bc8 <HAL_CAN_MspInit+0xd8>)
 8001b82:	f002 f829 	bl	8003bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b94:	2303      	movs	r3, #3
 8001b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b98:	2309      	movs	r3, #9
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	480a      	ldr	r0, [pc, #40]	; (8001bcc <HAL_CAN_MspInit+0xdc>)
 8001ba4:	f002 f818 	bl	8003bd8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 2);
 8001ba8:	2202      	movs	r2, #2
 8001baa:	2100      	movs	r1, #0
 8001bac:	2014      	movs	r0, #20
 8001bae:	f001 fc09 	bl	80033c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001bb2:	2014      	movs	r0, #20
 8001bb4:	f001 fc22 	bl	80033fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001bb8:	bf00      	nop
 8001bba:	3728      	adds	r7, #40	; 0x28
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40006400 	.word	0x40006400
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40020c00 	.word	0x40020c00
 8001bcc:	40020400 	.word	0x40020400

08001bd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a19      	ldr	r2, [pc, #100]	; (8001c54 <HAL_I2C_MspInit+0x84>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d12c      	bne.n	8001c4c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <HAL_I2C_MspInit+0x88>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a17      	ldr	r2, [pc, #92]	; (8001c58 <HAL_I2C_MspInit+0x88>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <HAL_I2C_MspInit+0x88>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001c0e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c14:	2312      	movs	r3, #18
 8001c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c20:	2304      	movs	r3, #4
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	4619      	mov	r1, r3
 8001c2a:	480c      	ldr	r0, [pc, #48]	; (8001c5c <HAL_I2C_MspInit+0x8c>)
 8001c2c:	f001 ffd4 	bl	8003bd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <HAL_I2C_MspInit+0x88>)
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	4a07      	ldr	r2, [pc, #28]	; (8001c58 <HAL_I2C_MspInit+0x88>)
 8001c3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_I2C_MspInit+0x88>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c4c:	bf00      	nop
 8001c4e:	3728      	adds	r7, #40	; 0x28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40005400 	.word	0x40005400
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40020400 	.word	0x40020400

08001c60 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08e      	sub	sp, #56	; 0x38
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a4e      	ldr	r2, [pc, #312]	; (8001dc4 <HAL_I2S_MspInit+0x164>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	f040 8095 	bne.w	8001dbc <HAL_I2S_MspInit+0x15c>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001c92:	2301      	movs	r3, #1
 8001c94:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 271;
 8001c96:	f240 130f 	movw	r3, #271	; 0x10f
 8001c9a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 8001c9c:	2306      	movs	r3, #6
 8001c9e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f006 fadb 	bl	8008260 <HAL_RCCEx_PeriphCLKConfig>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_I2S_MspInit+0x54>
    {
      Error_Handler();
 8001cb0:	f7ff fef0 	bl	8001a94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	4b43      	ldr	r3, [pc, #268]	; (8001dc8 <HAL_I2S_MspInit+0x168>)
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	4a42      	ldr	r2, [pc, #264]	; (8001dc8 <HAL_I2S_MspInit+0x168>)
 8001cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cc2:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc4:	4b40      	ldr	r3, [pc, #256]	; (8001dc8 <HAL_I2S_MspInit+0x168>)
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	4b3c      	ldr	r3, [pc, #240]	; (8001dc8 <HAL_I2S_MspInit+0x168>)
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd8:	4a3b      	ldr	r2, [pc, #236]	; (8001dc8 <HAL_I2S_MspInit+0x168>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce0:	4b39      	ldr	r3, [pc, #228]	; (8001dc8 <HAL_I2S_MspInit+0x168>)
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cec:	2300      	movs	r3, #0
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	4b35      	ldr	r3, [pc, #212]	; (8001dc8 <HAL_I2S_MspInit+0x168>)
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf4:	4a34      	ldr	r2, [pc, #208]	; (8001dc8 <HAL_I2S_MspInit+0x168>)
 8001cf6:	f043 0304 	orr.w	r3, r3, #4
 8001cfa:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfc:	4b32      	ldr	r3, [pc, #200]	; (8001dc8 <HAL_I2S_MspInit+0x168>)
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d08:	2310      	movs	r3, #16
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d14:	2300      	movs	r3, #0
 8001d16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d18:	2306      	movs	r3, #6
 8001d1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d20:	4619      	mov	r1, r3
 8001d22:	482a      	ldr	r0, [pc, #168]	; (8001dcc <HAL_I2S_MspInit+0x16c>)
 8001d24:	f001 ff58 	bl	8003bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001d28:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	2300      	movs	r3, #0
 8001d38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d3a:	2306      	movs	r3, #6
 8001d3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d42:	4619      	mov	r1, r3
 8001d44:	4822      	ldr	r0, [pc, #136]	; (8001dd0 <HAL_I2S_MspInit+0x170>)
 8001d46:	f001 ff47 	bl	8003bd8 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001d4a:	4b22      	ldr	r3, [pc, #136]	; (8001dd4 <HAL_I2S_MspInit+0x174>)
 8001d4c:	4a22      	ldr	r2, [pc, #136]	; (8001dd8 <HAL_I2S_MspInit+0x178>)
 8001d4e:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001d50:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <HAL_I2S_MspInit+0x174>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d56:	4b1f      	ldr	r3, [pc, #124]	; (8001dd4 <HAL_I2S_MspInit+0x174>)
 8001d58:	2240      	movs	r2, #64	; 0x40
 8001d5a:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d5c:	4b1d      	ldr	r3, [pc, #116]	; (8001dd4 <HAL_I2S_MspInit+0x174>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d62:	4b1c      	ldr	r3, [pc, #112]	; (8001dd4 <HAL_I2S_MspInit+0x174>)
 8001d64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d68:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d6a:	4b1a      	ldr	r3, [pc, #104]	; (8001dd4 <HAL_I2S_MspInit+0x174>)
 8001d6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d70:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d72:	4b18      	ldr	r3, [pc, #96]	; (8001dd4 <HAL_I2S_MspInit+0x174>)
 8001d74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d78:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001d7a:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <HAL_I2S_MspInit+0x174>)
 8001d7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d80:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d82:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <HAL_I2S_MspInit+0x174>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001d88:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <HAL_I2S_MspInit+0x174>)
 8001d8a:	2204      	movs	r2, #4
 8001d8c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001d8e:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <HAL_I2S_MspInit+0x174>)
 8001d90:	2203      	movs	r2, #3
 8001d92:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001d94:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <HAL_I2S_MspInit+0x174>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <HAL_I2S_MspInit+0x174>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001da0:	480c      	ldr	r0, [pc, #48]	; (8001dd4 <HAL_I2S_MspInit+0x174>)
 8001da2:	f001 fb39 	bl	8003418 <HAL_DMA_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <HAL_I2S_MspInit+0x150>
    {
      Error_Handler();
 8001dac:	f7ff fe72 	bl	8001a94 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a08      	ldr	r2, [pc, #32]	; (8001dd4 <HAL_I2S_MspInit+0x174>)
 8001db4:	639a      	str	r2, [r3, #56]	; 0x38
 8001db6:	4a07      	ldr	r2, [pc, #28]	; (8001dd4 <HAL_I2S_MspInit+0x174>)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001dbc:	bf00      	nop
 8001dbe:	3738      	adds	r7, #56	; 0x38
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40003c00 	.word	0x40003c00
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40020000 	.word	0x40020000
 8001dd0:	40020800 	.word	0x40020800
 8001dd4:	20001460 	.word	0x20001460
 8001dd8:	40026088 	.word	0x40026088

08001ddc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dec:	d10e      	bne.n	8001e0c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <HAL_TIM_Base_MspInit+0x64>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	4a12      	ldr	r2, [pc, #72]	; (8001e40 <HAL_TIM_Base_MspInit+0x64>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfe:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <HAL_TIM_Base_MspInit+0x64>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e0a:	e012      	b.n	8001e32 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a0c      	ldr	r2, [pc, #48]	; (8001e44 <HAL_TIM_Base_MspInit+0x68>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d10d      	bne.n	8001e32 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <HAL_TIM_Base_MspInit+0x64>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	4a08      	ldr	r2, [pc, #32]	; (8001e40 <HAL_TIM_Base_MspInit+0x64>)
 8001e20:	f043 0304 	orr.w	r3, r3, #4
 8001e24:	6413      	str	r3, [r2, #64]	; 0x40
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <HAL_TIM_Base_MspInit+0x64>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	68bb      	ldr	r3, [r7, #8]
}
 8001e32:	bf00      	nop
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40000800 	.word	0x40000800

08001e48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08c      	sub	sp, #48	; 0x30
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	2019      	movs	r0, #25
 8001e5e:	f001 fab1 	bl	80033c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e62:	2019      	movs	r0, #25
 8001e64:	f001 faca 	bl	80033fc <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	4b1f      	ldr	r3, [pc, #124]	; (8001eec <HAL_InitTick+0xa4>)
 8001e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e70:	4a1e      	ldr	r2, [pc, #120]	; (8001eec <HAL_InitTick+0xa4>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	6453      	str	r3, [r2, #68]	; 0x44
 8001e78:	4b1c      	ldr	r3, [pc, #112]	; (8001eec <HAL_InitTick+0xa4>)
 8001e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e84:	f107 0210 	add.w	r2, r7, #16
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	4611      	mov	r1, r2
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f006 f9b4 	bl	80081fc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001e94:	f006 f99e 	bl	80081d4 <HAL_RCC_GetPCLK2Freq>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea0:	4a13      	ldr	r2, [pc, #76]	; (8001ef0 <HAL_InitTick+0xa8>)
 8001ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea6:	0c9b      	lsrs	r3, r3, #18
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001eac:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <HAL_InitTick+0xac>)
 8001eae:	4a12      	ldr	r2, [pc, #72]	; (8001ef8 <HAL_InitTick+0xb0>)
 8001eb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001eb2:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <HAL_InitTick+0xac>)
 8001eb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001eb8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001eba:	4a0e      	ldr	r2, [pc, #56]	; (8001ef4 <HAL_InitTick+0xac>)
 8001ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ebe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <HAL_InitTick+0xac>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <HAL_InitTick+0xac>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001ecc:	4809      	ldr	r0, [pc, #36]	; (8001ef4 <HAL_InitTick+0xac>)
 8001ece:	f006 fb33 	bl	8008538 <HAL_TIM_Base_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d104      	bne.n	8001ee2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001ed8:	4806      	ldr	r0, [pc, #24]	; (8001ef4 <HAL_InitTick+0xac>)
 8001eda:	f006 fb7d 	bl	80085d8 <HAL_TIM_Base_Start_IT>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	e000      	b.n	8001ee4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3730      	adds	r7, #48	; 0x30
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	431bde83 	.word	0x431bde83
 8001ef4:	200015d8 	.word	0x200015d8
 8001ef8:	40010000 	.word	0x40010000

08001efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f00:	e7fe      	b.n	8001f00 <NMI_Handler+0x4>

08001f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f06:	e7fe      	b.n	8001f06 <HardFault_Handler+0x4>

08001f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f0c:	e7fe      	b.n	8001f0c <MemManage_Handler+0x4>

08001f0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f12:	e7fe      	b.n	8001f12 <BusFault_Handler+0x4>

08001f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f18:	e7fe      	b.n	8001f18 <UsageFault_Handler+0x4>

08001f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	for(int n=0;n<1000000;n++);
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	607b      	str	r3, [r7, #4]
 8001f5e:	e002      	b.n	8001f66 <EXTI0_IRQHandler+0x12>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3301      	adds	r3, #1
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a14      	ldr	r2, [pc, #80]	; (8001fbc <EXTI0_IRQHandler+0x68>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	ddf8      	ble.n	8001f60 <EXTI0_IRQHandler+0xc>
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))							// anti contact dender
 8001f6e:	2101      	movs	r1, #1
 8001f70:	4813      	ldr	r0, [pc, #76]	; (8001fc0 <EXTI0_IRQHandler+0x6c>)
 8001f72:	f001 ffcd 	bl	8003f10 <HAL_GPIO_ReadPin>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d018      	beq.n	8001fae <EXTI0_IRQHandler+0x5a>
	{
		uint8_t song = ((rand() % 5) + 1);							// RANDOM getal modulo % 4 => 0, 1, 2, 3 of 4,  +1 => 1 t/m 5 (keuze liedje)
 8001f7c:	f00d febe 	bl	800fcfc <rand>
 8001f80:	4602      	mov	r2, r0
 8001f82:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <EXTI0_IRQHandler+0x70>)
 8001f84:	fb83 1302 	smull	r1, r3, r3, r2
 8001f88:	1059      	asrs	r1, r3, #1
 8001f8a:	17d3      	asrs	r3, r2, #31
 8001f8c:	1ac9      	subs	r1, r1, r3
 8001f8e:	460b      	mov	r3, r1
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	1ad1      	subs	r1, r2, r3
 8001f96:	b2cb      	uxtb	r3, r1
 8001f98:	3301      	adds	r3, #1
 8001f9a:	70fb      	strb	r3, [r7, #3]
		RxData[0]=1; // bij start => als eigen deelnemer starten
 8001f9c:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <EXTI0_IRQHandler+0x74>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	701a      	strb	r2, [r3, #0]
		RxData[1]=song;
 8001fa2:	4a09      	ldr	r2, [pc, #36]	; (8001fc8 <EXTI0_IRQHandler+0x74>)
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	7053      	strb	r3, [r2, #1]
		spelen = 1;
 8001fa8:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <EXTI0_IRQHandler+0x78>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001fae:	2001      	movs	r0, #1
 8001fb0:	f001 ffe0 	bl	8003f74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	000f423f 	.word	0x000f423f
 8001fc0:	40020000 	.word	0x40020000
 8001fc4:	66666667 	.word	0x66666667
 8001fc8:	20000120 	.word	0x20000120
 8001fcc:	2000012a 	.word	0x2000012a

08001fd0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001fd4:	4802      	ldr	r0, [pc, #8]	; (8001fe0 <DMA1_Stream5_IRQHandler+0x10>)
 8001fd6:	f001 fb95 	bl	8003704 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20001460 	.word	0x20001460

08001fe4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */



  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001fea:	4817      	ldr	r0, [pc, #92]	; (8002048 <CAN1_RX0_IRQHandler+0x64>)
 8001fec:	f000 fef9 	bl	8002de2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);							//Zet led aan ter kennisgeving dat een bericht is ontvangen
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ff6:	4815      	ldr	r0, [pc, #84]	; (800204c <CAN1_RX0_IRQHandler+0x68>)
 8001ff8:	f001 ffa2 	bl	8003f40 <HAL_GPIO_WritePin>
	  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);				//Ontvang CAN bericht (interrupt gestuurd)
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <CAN1_RX0_IRQHandler+0x6c>)
 8001ffe:	4a15      	ldr	r2, [pc, #84]	; (8002054 <CAN1_RX0_IRQHandler+0x70>)
 8002000:	2100      	movs	r1, #0
 8002002:	4811      	ldr	r0, [pc, #68]	; (8002048 <CAN1_RX0_IRQHandler+0x64>)
 8002004:	f000 fdb5 	bl	8002b72 <HAL_CAN_GetRxMessage>

	  if (RxData[0] == 1)
 8002008:	4b11      	ldr	r3, [pc, #68]	; (8002050 <CAN1_RX0_IRQHandler+0x6c>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d103      	bne.n	8002018 <CAN1_RX0_IRQHandler+0x34>
			  {
		  	  	 														//Bericht voor deze node? dan start main applicatie
		  	  	  spelen = 1;
 8002010:	4b11      	ldr	r3, [pc, #68]	; (8002058 <CAN1_RX0_IRQHandler+0x74>)
 8002012:	2201      	movs	r2, #1
 8002014:	701a      	strb	r2, [r3, #0]
				  for(int n=0;n<1000000;n++);
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
			  }

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002016:	e012      	b.n	800203e <CAN1_RX0_IRQHandler+0x5a>
				  start=0;
 8002018:	4b10      	ldr	r3, [pc, #64]	; (800205c <CAN1_RX0_IRQHandler+0x78>)
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
				  for(int n=0;n<1000000;n++);
 800201e:	2300      	movs	r3, #0
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	e002      	b.n	800202a <CAN1_RX0_IRQHandler+0x46>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3301      	adds	r3, #1
 8002028:	607b      	str	r3, [r7, #4]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a0c      	ldr	r2, [pc, #48]	; (8002060 <CAN1_RX0_IRQHandler+0x7c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	ddf8      	ble.n	8002024 <CAN1_RX0_IRQHandler+0x40>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8002032:	2200      	movs	r2, #0
 8002034:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002038:	4804      	ldr	r0, [pc, #16]	; (800204c <CAN1_RX0_IRQHandler+0x68>)
 800203a:	f001 ff81 	bl	8003f40 <HAL_GPIO_WritePin>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20001534 	.word	0x20001534
 800204c:	40020c00 	.word	0x40020c00
 8002050:	20000120 	.word	0x20000120
 8002054:	20001574 	.word	0x20001574
 8002058:	2000012a 	.word	0x2000012a
 800205c:	20000129 	.word	0x20000129
 8002060:	000f423f 	.word	0x000f423f

08002064 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002068:	4802      	ldr	r0, [pc, #8]	; (8002074 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800206a:	f006 fb25 	bl	80086b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	200015d8 	.word	0x200015d8

08002078 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800207c:	4802      	ldr	r0, [pc, #8]	; (8002088 <OTG_FS_IRQHandler+0x10>)
 800207e:	f002 fa07 	bl	8004490 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20001e64 	.word	0x20001e64

0800208c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
	return 1;
 8002090:	2301      	movs	r3, #1
}
 8002092:	4618      	mov	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <_kill>:

int _kill(int pid, int sig)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020a6:	f00d fd2f 	bl	800fb08 <__errno>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2216      	movs	r2, #22
 80020ae:	601a      	str	r2, [r3, #0]
	return -1;
 80020b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <_exit>:

void _exit (int status)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020c4:	f04f 31ff 	mov.w	r1, #4294967295
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff ffe7 	bl	800209c <_kill>
	while (1) {}		/* Make sure we hang here */
 80020ce:	e7fe      	b.n	80020ce <_exit+0x12>

080020d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	e00a      	b.n	80020f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020e2:	f3af 8000 	nop.w
 80020e6:	4601      	mov	r1, r0
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	60ba      	str	r2, [r7, #8]
 80020ee:	b2ca      	uxtb	r2, r1
 80020f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	3301      	adds	r3, #1
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	dbf0      	blt.n	80020e2 <_read+0x12>
	}

return len;
 8002100:	687b      	ldr	r3, [r7, #4]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b086      	sub	sp, #24
 800210e:	af00      	add	r7, sp, #0
 8002110:	60f8      	str	r0, [r7, #12]
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	e009      	b.n	8002130 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	60ba      	str	r2, [r7, #8]
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	3301      	adds	r3, #1
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	429a      	cmp	r2, r3
 8002136:	dbf1      	blt.n	800211c <_write+0x12>
	}
	return len;
 8002138:	687b      	ldr	r3, [r7, #4]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <_close>:

int _close(int file)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
	return -1;
 800214a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800216a:	605a      	str	r2, [r3, #4]
	return 0;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <_isatty>:

int _isatty(int file)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
	return 1;
 8002182:	2301      	movs	r3, #1
}
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
	return 0;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021b4:	4a14      	ldr	r2, [pc, #80]	; (8002208 <_sbrk+0x5c>)
 80021b6:	4b15      	ldr	r3, [pc, #84]	; (800220c <_sbrk+0x60>)
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c0:	4b13      	ldr	r3, [pc, #76]	; (8002210 <_sbrk+0x64>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d102      	bne.n	80021ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <_sbrk+0x64>)
 80021ca:	4a12      	ldr	r2, [pc, #72]	; (8002214 <_sbrk+0x68>)
 80021cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ce:	4b10      	ldr	r3, [pc, #64]	; (8002210 <_sbrk+0x64>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d207      	bcs.n	80021ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021dc:	f00d fc94 	bl	800fb08 <__errno>
 80021e0:	4603      	mov	r3, r0
 80021e2:	220c      	movs	r2, #12
 80021e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ea:	e009      	b.n	8002200 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <_sbrk+0x64>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021f2:	4b07      	ldr	r3, [pc, #28]	; (8002210 <_sbrk+0x64>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	4a05      	ldr	r2, [pc, #20]	; (8002210 <_sbrk+0x64>)
 80021fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021fe:	68fb      	ldr	r3, [r7, #12]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20020000 	.word	0x20020000
 800220c:	00002000 	.word	0x00002000
 8002210:	2000013c 	.word	0x2000013c
 8002214:	20002178 	.word	0x20002178

08002218 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <SystemInit+0x20>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002222:	4a05      	ldr	r2, [pc, #20]	; (8002238 <SystemInit+0x20>)
 8002224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <wavPlayer_reset>:
  PLAYER_CONTROL_EndOfFile,
}PLAYER_CONTROL_e;
static volatile PLAYER_CONTROL_e playerControlSM = PLAYER_CONTROL_Idle;

static void wavPlayer_reset(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  audioRemainSize = 0;
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <wavPlayer_reset+0x1c>)
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
  playerReadBytes = 0;
 8002246:	4b05      	ldr	r3, [pc, #20]	; (800225c <wavPlayer_reset+0x20>)
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	20001374 	.word	0x20001374
 800225c:	2000137c 	.word	0x2000137c

08002260 <wavPlayer_fileSelect>:
/**
 * @brief Select WAV file to play
 * @retval returns true when file is found in USB Drive
 */
bool wavPlayer_fileSelect(const char* filePath)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08e      	sub	sp, #56	; 0x38
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  WAV_HeaderTypeDef wavHeader;
  UINT readBytes = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	60bb      	str	r3, [r7, #8]
  //Open WAV file
  if(f_open(&wavFile, filePath, FA_READ) != FR_OK)
 800226c:	2201      	movs	r2, #1
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	480d      	ldr	r0, [pc, #52]	; (80022a8 <wavPlayer_fileSelect+0x48>)
 8002272:	f00c fb2d 	bl	800e8d0 <f_open>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <wavPlayer_fileSelect+0x20>
  {
    return false;
 800227c:	2300      	movs	r3, #0
 800227e:	e00e      	b.n	800229e <wavPlayer_fileSelect+0x3e>
  }
  //Read WAV file Header
  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 8002280:	f107 0308 	add.w	r3, r7, #8
 8002284:	f107 010c 	add.w	r1, r7, #12
 8002288:	222c      	movs	r2, #44	; 0x2c
 800228a:	4807      	ldr	r0, [pc, #28]	; (80022a8 <wavPlayer_fileSelect+0x48>)
 800228c:	f00c fcde 	bl	800ec4c <f_read>
  //Get audio data size
  fileLength = wavHeader.FileSize;
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4a06      	ldr	r2, [pc, #24]	; (80022ac <wavPlayer_fileSelect+0x4c>)
 8002294:	6013      	str	r3, [r2, #0]
  //Play the WAV file with frequency specified in header
  samplingFreq = wavHeader.SampleRate;
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	4a05      	ldr	r2, [pc, #20]	; (80022b0 <wavPlayer_fileSelect+0x50>)
 800229a:	6013      	str	r3, [r2, #0]
  return true;
 800229c:	2301      	movs	r3, #1
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3738      	adds	r7, #56	; 0x38
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000140 	.word	0x20000140
 80022ac:	20000370 	.word	0x20000370
 80022b0:	20001378 	.word	0x20001378

080022b4 <wavPlayer_play>:

/**
 * @brief WAV File Play
 */
void wavPlayer_play(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  isFinished = false;
 80022b8:	4b10      	ldr	r3, [pc, #64]	; (80022fc <wavPlayer_play+0x48>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	701a      	strb	r2, [r3, #0]
  //Initialise I2S Audio Sampling settings
  audioI2S_init(samplingFreq);
 80022be:	4b10      	ldr	r3, [pc, #64]	; (8002300 <wavPlayer_play+0x4c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe fc3a 	bl	8000b3c <audioI2S_init>
  //Read Audio data from USB Disk
  f_lseek(&wavFile, 0);
 80022c8:	2100      	movs	r1, #0
 80022ca:	480e      	ldr	r0, [pc, #56]	; (8002304 <wavPlayer_play+0x50>)
 80022cc:	f00c fea5 	bl	800f01a <f_lseek>
  f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &playerReadBytes);
 80022d0:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <wavPlayer_play+0x54>)
 80022d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022d6:	490d      	ldr	r1, [pc, #52]	; (800230c <wavPlayer_play+0x58>)
 80022d8:	480a      	ldr	r0, [pc, #40]	; (8002304 <wavPlayer_play+0x50>)
 80022da:	f00c fcb7 	bl	800ec4c <f_read>
  audioRemainSize = fileLength - playerReadBytes;
 80022de:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <wavPlayer_play+0x5c>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <wavPlayer_play+0x54>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	4a0a      	ldr	r2, [pc, #40]	; (8002314 <wavPlayer_play+0x60>)
 80022ea:	6013      	str	r3, [r2, #0]
  //Start playing the WAV
  audioI2S_play((uint16_t *)&audioBuffer[0], AUDIO_BUFFER_SIZE);
 80022ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022f0:	4806      	ldr	r0, [pc, #24]	; (800230c <wavPlayer_play+0x58>)
 80022f2:	f7fe fc33 	bl	8000b5c <audioI2S_play>
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20001380 	.word	0x20001380
 8002300:	20001378 	.word	0x20001378
 8002304:	20000140 	.word	0x20000140
 8002308:	2000137c 	.word	0x2000137c
 800230c:	20000374 	.word	0x20000374
 8002310:	20000370 	.word	0x20000370
 8002314:	20001374 	.word	0x20001374

08002318 <wavPlayer_process>:

/**
 * @brief Process WAV
 */
void wavPlayer_process(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  switch(playerControlSM)
 800231c:	4b30      	ldr	r3, [pc, #192]	; (80023e0 <wavPlayer_process+0xc8>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b03      	cmp	r3, #3
 8002324:	d859      	bhi.n	80023da <wavPlayer_process+0xc2>
 8002326:	a201      	add	r2, pc, #4	; (adr r2, 800232c <wavPlayer_process+0x14>)
 8002328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232c:	080023d9 	.word	0x080023d9
 8002330:	0800233d 	.word	0x0800233d
 8002334:	0800237f 	.word	0x0800237f
 8002338:	080023c1 	.word	0x080023c1
  {
  case PLAYER_CONTROL_Idle:
    break;

  case PLAYER_CONTROL_HalfBuffer:
    playerReadBytes = 0;
 800233c:	4b29      	ldr	r3, [pc, #164]	; (80023e4 <wavPlayer_process+0xcc>)
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8002342:	4b27      	ldr	r3, [pc, #156]	; (80023e0 <wavPlayer_process+0xc8>)
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8002348:	4b26      	ldr	r3, [pc, #152]	; (80023e4 <wavPlayer_process+0xcc>)
 800234a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800234e:	4926      	ldr	r1, [pc, #152]	; (80023e8 <wavPlayer_process+0xd0>)
 8002350:	4826      	ldr	r0, [pc, #152]	; (80023ec <wavPlayer_process+0xd4>)
 8002352:	f00c fc7b 	bl	800ec4c <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8002356:	4b26      	ldr	r3, [pc, #152]	; (80023f0 <wavPlayer_process+0xd8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800235e:	d907      	bls.n	8002370 <wavPlayer_process+0x58>
    {
      audioRemainSize -= playerReadBytes;
 8002360:	4b23      	ldr	r3, [pc, #140]	; (80023f0 <wavPlayer_process+0xd8>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4b1f      	ldr	r3, [pc, #124]	; (80023e4 <wavPlayer_process+0xcc>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	4a21      	ldr	r2, [pc, #132]	; (80023f0 <wavPlayer_process+0xd8>)
 800236c:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 800236e:	e034      	b.n	80023da <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8002370:	4b1f      	ldr	r3, [pc, #124]	; (80023f0 <wavPlayer_process+0xd8>)
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8002376:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <wavPlayer_process+0xc8>)
 8002378:	2203      	movs	r2, #3
 800237a:	701a      	strb	r2, [r3, #0]
    break;
 800237c:	e02d      	b.n	80023da <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_FullBuffer:
    playerReadBytes = 0;
 800237e:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <wavPlayer_process+0xcc>)
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8002384:	4b16      	ldr	r3, [pc, #88]	; (80023e0 <wavPlayer_process+0xc8>)
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 800238a:	4b16      	ldr	r3, [pc, #88]	; (80023e4 <wavPlayer_process+0xcc>)
 800238c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002390:	4918      	ldr	r1, [pc, #96]	; (80023f4 <wavPlayer_process+0xdc>)
 8002392:	4816      	ldr	r0, [pc, #88]	; (80023ec <wavPlayer_process+0xd4>)
 8002394:	f00c fc5a 	bl	800ec4c <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8002398:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <wavPlayer_process+0xd8>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023a0:	d907      	bls.n	80023b2 <wavPlayer_process+0x9a>
    {
      audioRemainSize -= playerReadBytes;
 80023a2:	4b13      	ldr	r3, [pc, #76]	; (80023f0 <wavPlayer_process+0xd8>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <wavPlayer_process+0xcc>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	4a10      	ldr	r2, [pc, #64]	; (80023f0 <wavPlayer_process+0xd8>)
 80023ae:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 80023b0:	e013      	b.n	80023da <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 80023b2:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <wavPlayer_process+0xd8>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 80023b8:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <wavPlayer_process+0xc8>)
 80023ba:	2203      	movs	r2, #3
 80023bc:	701a      	strb	r2, [r3, #0]
    break;
 80023be:	e00c      	b.n	80023da <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_EndOfFile:
    f_close(&wavFile);
 80023c0:	480a      	ldr	r0, [pc, #40]	; (80023ec <wavPlayer_process+0xd4>)
 80023c2:	f00c fe00 	bl	800efc6 <f_close>
    wavPlayer_reset();
 80023c6:	f7ff ff39 	bl	800223c <wavPlayer_reset>
    isFinished = true;
 80023ca:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <wavPlayer_process+0xe0>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	701a      	strb	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 80023d0:	4b03      	ldr	r3, [pc, #12]	; (80023e0 <wavPlayer_process+0xc8>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
    break;
 80023d6:	e000      	b.n	80023da <wavPlayer_process+0xc2>
    break;
 80023d8:	bf00      	nop
  }
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20001381 	.word	0x20001381
 80023e4:	2000137c 	.word	0x2000137c
 80023e8:	20000374 	.word	0x20000374
 80023ec:	20000140 	.word	0x20000140
 80023f0:	20001374 	.word	0x20001374
 80023f4:	20000b74 	.word	0x20000b74
 80023f8:	20001380 	.word	0x20001380

080023fc <wavPlayer_stop>:

/**
 * @brief WAV stop
 */
void wavPlayer_stop(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  audioI2S_stop();
 8002400:	f7fe fbca 	bl	8000b98 <audioI2S_stop>
  isFinished = true;
 8002404:	4b02      	ldr	r3, [pc, #8]	; (8002410 <wavPlayer_stop+0x14>)
 8002406:	2201      	movs	r2, #1
 8002408:	701a      	strb	r2, [r3, #0]
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20001380 	.word	0x20001380

08002414 <wavPlayer_isFinished>:

/**
 * @brief isEndofFile reached
 */
bool wavPlayer_isFinished(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return isFinished;
 8002418:	4b03      	ldr	r3, [pc, #12]	; (8002428 <wavPlayer_isFinished+0x14>)
 800241a:	781b      	ldrb	r3, [r3, #0]
}
 800241c:	4618      	mov	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	20001380 	.word	0x20001380

0800242c <audioI2S_halfTransfer_Callback>:

/**
 * @brief Half/Full transfer Audio callback for buffer management
 */
void audioI2S_halfTransfer_Callback(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_HalfBuffer;
 8002430:	4b03      	ldr	r3, [pc, #12]	; (8002440 <audioI2S_halfTransfer_Callback+0x14>)
 8002432:	2201      	movs	r2, #1
 8002434:	701a      	strb	r2, [r3, #0]
}
 8002436:	bf00      	nop
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	20001381 	.word	0x20001381

08002444 <audioI2S_fullTransfer_Callback>:
void audioI2S_fullTransfer_Callback(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_FullBuffer;
 8002448:	4b03      	ldr	r3, [pc, #12]	; (8002458 <audioI2S_fullTransfer_Callback+0x14>)
 800244a:	2202      	movs	r2, #2
 800244c:	701a      	strb	r2, [r3, #0]
//  audioI2S_changeBuffer((uint16_t*)&audioBuffer[0], AUDIO_BUFFER_SIZE / 2);
}
 800244e:	bf00      	nop
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	20001381 	.word	0x20001381

0800245c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800245c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002494 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002460:	480d      	ldr	r0, [pc, #52]	; (8002498 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002462:	490e      	ldr	r1, [pc, #56]	; (800249c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002464:	4a0e      	ldr	r2, [pc, #56]	; (80024a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002468:	e002      	b.n	8002470 <LoopCopyDataInit>

0800246a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800246a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800246c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800246e:	3304      	adds	r3, #4

08002470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002474:	d3f9      	bcc.n	800246a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002476:	4a0b      	ldr	r2, [pc, #44]	; (80024a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002478:	4c0b      	ldr	r4, [pc, #44]	; (80024a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800247a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800247c:	e001      	b.n	8002482 <LoopFillZerobss>

0800247e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800247e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002480:	3204      	adds	r2, #4

08002482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002484:	d3fb      	bcc.n	800247e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002486:	f7ff fec7 	bl	8002218 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800248a:	f00d fb43 	bl	800fb14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800248e:	f7fe fdb7 	bl	8001000 <main>
  bx  lr    
 8002492:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002494:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800249c:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80024a0:	08010ef4 	.word	0x08010ef4
  ldr r2, =_sbss
 80024a4:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80024a8:	20002178 	.word	0x20002178

080024ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024ac:	e7fe      	b.n	80024ac <ADC_IRQHandler>
	...

080024b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024b4:	4b0e      	ldr	r3, [pc, #56]	; (80024f0 <HAL_Init+0x40>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a0d      	ldr	r2, [pc, #52]	; (80024f0 <HAL_Init+0x40>)
 80024ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <HAL_Init+0x40>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a0a      	ldr	r2, [pc, #40]	; (80024f0 <HAL_Init+0x40>)
 80024c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024cc:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <HAL_Init+0x40>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a07      	ldr	r2, [pc, #28]	; (80024f0 <HAL_Init+0x40>)
 80024d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024d8:	2003      	movs	r0, #3
 80024da:	f000 ff68 	bl	80033ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024de:	2000      	movs	r0, #0
 80024e0:	f7ff fcb2 	bl	8001e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024e4:	f7ff fadc 	bl	8001aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40023c00 	.word	0x40023c00

080024f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_IncTick+0x20>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	461a      	mov	r2, r3
 80024fe:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_IncTick+0x24>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4413      	add	r3, r2
 8002504:	4a04      	ldr	r2, [pc, #16]	; (8002518 <HAL_IncTick+0x24>)
 8002506:	6013      	str	r3, [r2, #0]
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	2000001c 	.word	0x2000001c
 8002518:	20001620 	.word	0x20001620

0800251c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  return uwTick;
 8002520:	4b03      	ldr	r3, [pc, #12]	; (8002530 <HAL_GetTick+0x14>)
 8002522:	681b      	ldr	r3, [r3, #0]
}
 8002524:	4618      	mov	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	20001620 	.word	0x20001620

08002534 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800253c:	f7ff ffee 	bl	800251c <HAL_GetTick>
 8002540:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254c:	d005      	beq.n	800255a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800254e:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <HAL_Delay+0x44>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4413      	add	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800255a:	bf00      	nop
 800255c:	f7ff ffde 	bl	800251c <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	429a      	cmp	r2, r3
 800256a:	d8f7      	bhi.n	800255c <HAL_Delay+0x28>
  {
  }
}
 800256c:	bf00      	nop
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	2000001c 	.word	0x2000001c

0800257c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e0ed      	b.n	800276a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d102      	bne.n	80025a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff faa8 	bl	8001af0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f042 0201 	orr.w	r2, r2, #1
 80025ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025b0:	f7ff ffb4 	bl	800251c <HAL_GetTick>
 80025b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025b6:	e012      	b.n	80025de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025b8:	f7ff ffb0 	bl	800251c <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b0a      	cmp	r3, #10
 80025c4:	d90b      	bls.n	80025de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2205      	movs	r2, #5
 80025d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e0c5      	b.n	800276a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0e5      	beq.n	80025b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0202 	bic.w	r2, r2, #2
 80025fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025fc:	f7ff ff8e 	bl	800251c <HAL_GetTick>
 8002600:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002602:	e012      	b.n	800262a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002604:	f7ff ff8a 	bl	800251c <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b0a      	cmp	r3, #10
 8002610:	d90b      	bls.n	800262a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2205      	movs	r2, #5
 8002622:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e09f      	b.n	800276a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1e5      	bne.n	8002604 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	7e1b      	ldrb	r3, [r3, #24]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d108      	bne.n	8002652 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	e007      	b.n	8002662 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002660:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	7e5b      	ldrb	r3, [r3, #25]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d108      	bne.n	800267c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	e007      	b.n	800268c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800268a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	7e9b      	ldrb	r3, [r3, #26]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d108      	bne.n	80026a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0220 	orr.w	r2, r2, #32
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	e007      	b.n	80026b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 0220 	bic.w	r2, r2, #32
 80026b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	7edb      	ldrb	r3, [r3, #27]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d108      	bne.n	80026d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0210 	bic.w	r2, r2, #16
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	e007      	b.n	80026e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0210 	orr.w	r2, r2, #16
 80026de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	7f1b      	ldrb	r3, [r3, #28]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d108      	bne.n	80026fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 0208 	orr.w	r2, r2, #8
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	e007      	b.n	800270a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0208 	bic.w	r2, r2, #8
 8002708:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	7f5b      	ldrb	r3, [r3, #29]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d108      	bne.n	8002724 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 0204 	orr.w	r2, r2, #4
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	e007      	b.n	8002734 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0204 	bic.w	r2, r2, #4
 8002732:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	ea42 0103 	orr.w	r1, r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	1e5a      	subs	r2, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002774:	b480      	push	{r7}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3020 	ldrb.w	r3, [r3, #32]
 800278a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800278c:	7cfb      	ldrb	r3, [r7, #19]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d003      	beq.n	800279a <HAL_CAN_ConfigFilter+0x26>
 8002792:	7cfb      	ldrb	r3, [r7, #19]
 8002794:	2b02      	cmp	r3, #2
 8002796:	f040 80be 	bne.w	8002916 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800279a:	4b65      	ldr	r3, [pc, #404]	; (8002930 <HAL_CAN_ConfigFilter+0x1bc>)
 800279c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027a4:	f043 0201 	orr.w	r2, r3, #1
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027b4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	021b      	lsls	r3, r3, #8
 80027ca:	431a      	orrs	r2, r3
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	f003 031f 	and.w	r3, r3, #31
 80027da:	2201      	movs	r2, #1
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	43db      	mvns	r3, r3
 80027ec:	401a      	ands	r2, r3
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d123      	bne.n	8002844 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	43db      	mvns	r3, r3
 8002806:	401a      	ands	r2, r3
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800281e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	3248      	adds	r2, #72	; 0x48
 8002824:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002838:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800283a:	6979      	ldr	r1, [r7, #20]
 800283c:	3348      	adds	r3, #72	; 0x48
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	440b      	add	r3, r1
 8002842:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d122      	bne.n	8002892 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	431a      	orrs	r2, r3
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800286c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	3248      	adds	r2, #72	; 0x48
 8002872:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002886:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002888:	6979      	ldr	r1, [r7, #20]
 800288a:	3348      	adds	r3, #72	; 0x48
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	440b      	add	r3, r1
 8002890:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d109      	bne.n	80028ae <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	43db      	mvns	r3, r3
 80028a4:	401a      	ands	r2, r3
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80028ac:	e007      	b.n	80028be <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	431a      	orrs	r2, r3
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d109      	bne.n	80028da <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	43db      	mvns	r3, r3
 80028d0:	401a      	ands	r2, r3
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80028d8:	e007      	b.n	80028ea <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	431a      	orrs	r2, r3
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d107      	bne.n	8002902 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	431a      	orrs	r2, r3
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002908:	f023 0201 	bic.w	r2, r3, #1
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002912:	2300      	movs	r3, #0
 8002914:	e006      	b.n	8002924 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
  }
}
 8002924:	4618      	mov	r0, r3
 8002926:	371c      	adds	r7, #28
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	40006400 	.word	0x40006400

08002934 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b01      	cmp	r3, #1
 8002946:	d12e      	bne.n	80029a6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0201 	bic.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002960:	f7ff fddc 	bl	800251c <HAL_GetTick>
 8002964:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002966:	e012      	b.n	800298e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002968:	f7ff fdd8 	bl	800251c <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b0a      	cmp	r3, #10
 8002974:	d90b      	bls.n	800298e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2205      	movs	r2, #5
 8002986:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e012      	b.n	80029b4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1e5      	bne.n	8002968 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80029a2:	2300      	movs	r3, #0
 80029a4:	e006      	b.n	80029b4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
  }
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80029bc:	b480      	push	{r7}
 80029be:	b089      	sub	sp, #36	; 0x24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
 80029c8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029d0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80029da:	7ffb      	ldrb	r3, [r7, #31]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d003      	beq.n	80029e8 <HAL_CAN_AddTxMessage+0x2c>
 80029e0:	7ffb      	ldrb	r3, [r7, #31]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	f040 80b8 	bne.w	8002b58 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10a      	bne.n	8002a08 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d105      	bne.n	8002a08 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 80a0 	beq.w	8002b48 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	0e1b      	lsrs	r3, r3, #24
 8002a0c:	f003 0303 	and.w	r3, r3, #3
 8002a10:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d907      	bls.n	8002a28 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e09e      	b.n	8002b66 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002a28:	2201      	movs	r2, #1
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	409a      	lsls	r2, r3
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10d      	bne.n	8002a56 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a44:	68f9      	ldr	r1, [r7, #12]
 8002a46:	6809      	ldr	r1, [r1, #0]
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	3318      	adds	r3, #24
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	440b      	add	r3, r1
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	e00f      	b.n	8002a76 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a60:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a66:	68f9      	ldr	r1, [r7, #12]
 8002a68:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002a6a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	3318      	adds	r3, #24
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	440b      	add	r3, r1
 8002a74:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6819      	ldr	r1, [r3, #0]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	691a      	ldr	r2, [r3, #16]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	3318      	adds	r3, #24
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	440b      	add	r3, r1
 8002a86:	3304      	adds	r3, #4
 8002a88:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	7d1b      	ldrb	r3, [r3, #20]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d111      	bne.n	8002ab6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	3318      	adds	r3, #24
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3304      	adds	r3, #4
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	6811      	ldr	r1, [r2, #0]
 8002aa6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	3318      	adds	r3, #24
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	440b      	add	r3, r1
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3307      	adds	r3, #7
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	061a      	lsls	r2, r3, #24
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	3306      	adds	r3, #6
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	041b      	lsls	r3, r3, #16
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3305      	adds	r3, #5
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	021b      	lsls	r3, r3, #8
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	3204      	adds	r2, #4
 8002ad6:	7812      	ldrb	r2, [r2, #0]
 8002ad8:	4610      	mov	r0, r2
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	6811      	ldr	r1, [r2, #0]
 8002ade:	ea43 0200 	orr.w	r2, r3, r0
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	440b      	add	r3, r1
 8002ae8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002aec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3303      	adds	r3, #3
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	061a      	lsls	r2, r3, #24
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3302      	adds	r3, #2
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	041b      	lsls	r3, r3, #16
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3301      	adds	r3, #1
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	021b      	lsls	r3, r3, #8
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	7812      	ldrb	r2, [r2, #0]
 8002b0e:	4610      	mov	r0, r2
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	6811      	ldr	r1, [r2, #0]
 8002b14:	ea43 0200 	orr.w	r2, r3, r0
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	440b      	add	r3, r1
 8002b1e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002b22:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	3318      	adds	r3, #24
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	4413      	add	r3, r2
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	6811      	ldr	r1, [r2, #0]
 8002b36:	f043 0201 	orr.w	r2, r3, #1
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	3318      	adds	r3, #24
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	440b      	add	r3, r1
 8002b42:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	e00e      	b.n	8002b66 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e006      	b.n	8002b66 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
  }
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3724      	adds	r7, #36	; 0x24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002b72:	b480      	push	{r7}
 8002b74:	b087      	sub	sp, #28
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	60f8      	str	r0, [r7, #12]
 8002b7a:	60b9      	str	r1, [r7, #8]
 8002b7c:	607a      	str	r2, [r7, #4]
 8002b7e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b86:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b88:	7dfb      	ldrb	r3, [r7, #23]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d003      	beq.n	8002b96 <HAL_CAN_GetRxMessage+0x24>
 8002b8e:	7dfb      	ldrb	r3, [r7, #23]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	f040 80f3 	bne.w	8002d7c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10e      	bne.n	8002bba <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d116      	bne.n	8002bd8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e0e7      	b.n	8002d8a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d107      	bne.n	8002bd8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e0d8      	b.n	8002d8a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	331b      	adds	r3, #27
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	4413      	add	r3, r2
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0204 	and.w	r2, r3, #4
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10c      	bne.n	8002c10 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	331b      	adds	r3, #27
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	4413      	add	r3, r2
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	0d5b      	lsrs	r3, r3, #21
 8002c06:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	e00b      	b.n	8002c28 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	331b      	adds	r3, #27
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	4413      	add	r3, r2
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	08db      	lsrs	r3, r3, #3
 8002c20:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	331b      	adds	r3, #27
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	4413      	add	r3, r2
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0202 	and.w	r2, r3, #2
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	331b      	adds	r3, #27
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	4413      	add	r3, r2
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 020f 	and.w	r2, r3, #15
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	331b      	adds	r3, #27
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	4413      	add	r3, r2
 8002c62:	3304      	adds	r3, #4
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	0a1b      	lsrs	r3, r3, #8
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	331b      	adds	r3, #27
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	4413      	add	r3, r2
 8002c7a:	3304      	adds	r3, #4
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	0c1b      	lsrs	r3, r3, #16
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	011b      	lsls	r3, r3, #4
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	0a1a      	lsrs	r2, r3, #8
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	011b      	lsls	r3, r3, #4
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	0c1a      	lsrs	r2, r3, #16
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	3302      	adds	r3, #2
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	4413      	add	r3, r2
 8002cda:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	0e1a      	lsrs	r2, r3, #24
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	3303      	adds	r3, #3
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	011b      	lsls	r3, r3, #4
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	4413      	add	r3, r2
 8002d0c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	0a1a      	lsrs	r2, r3, #8
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	3305      	adds	r3, #5
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	4413      	add	r3, r2
 8002d26:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	0c1a      	lsrs	r2, r3, #16
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	3306      	adds	r3, #6
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	0e1a      	lsrs	r2, r3, #24
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	3307      	adds	r3, #7
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d108      	bne.n	8002d68 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f042 0220 	orr.w	r2, r2, #32
 8002d64:	60da      	str	r2, [r3, #12]
 8002d66:	e007      	b.n	8002d78 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691a      	ldr	r2, [r3, #16]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0220 	orr.w	r2, r2, #32
 8002d76:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	e006      	b.n	8002d8a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
  }
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	371c      	adds	r7, #28
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b085      	sub	sp, #20
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
 8002d9e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002da6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d002      	beq.n	8002db4 <HAL_CAN_ActivateNotification+0x1e>
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d109      	bne.n	8002dc8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6959      	ldr	r1, [r3, #20]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	e006      	b.n	8002dd6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
  }
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b08a      	sub	sp, #40	; 0x28
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002dea:	2300      	movs	r3, #0
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d07c      	beq.n	8002f22 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d023      	beq.n	8002e7a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2201      	movs	r2, #1
 8002e38:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f983 	bl	8003150 <HAL_CAN_TxMailbox0CompleteCallback>
 8002e4a:	e016      	b.n	8002e7a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d004      	beq.n	8002e60 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e5e:	e00c      	b.n	8002e7a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d004      	beq.n	8002e74 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
 8002e72:	e002      	b.n	8002e7a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f989 	bl	800318c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d024      	beq.n	8002ece <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e8c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f963 	bl	8003164 <HAL_CAN_TxMailbox1CompleteCallback>
 8002e9e:	e016      	b.n	8002ece <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d004      	beq.n	8002eb4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb2:	e00c      	b.n	8002ece <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d004      	beq.n	8002ec8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec6:	e002      	b.n	8002ece <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f969 	bl	80031a0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d024      	beq.n	8002f22 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ee0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f943 	bl	8003178 <HAL_CAN_TxMailbox2CompleteCallback>
 8002ef2:	e016      	b.n	8002f22 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d004      	beq.n	8002f08 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
 8002f06:	e00c      	b.n	8002f22 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d004      	beq.n	8002f1c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1a:	e002      	b.n	8002f22 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f949 	bl	80031b4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	f003 0308 	and.w	r3, r3, #8
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00c      	beq.n	8002f46 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d007      	beq.n	8002f46 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2210      	movs	r2, #16
 8002f44:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00b      	beq.n	8002f68 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d006      	beq.n	8002f68 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2208      	movs	r2, #8
 8002f60:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f93a 	bl	80031dc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d009      	beq.n	8002f86 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0303 	and.w	r3, r3, #3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d002      	beq.n	8002f86 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f921 	bl	80031c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00c      	beq.n	8002faa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d007      	beq.n	8002faa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2210      	movs	r2, #16
 8002fa8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	f003 0320 	and.w	r3, r3, #32
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00b      	beq.n	8002fcc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	f003 0308 	and.w	r3, r3, #8
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d006      	beq.n	8002fcc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2208      	movs	r2, #8
 8002fc4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f91c 	bl	8003204 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	f003 0310 	and.w	r3, r3, #16
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d009      	beq.n	8002fea <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f903 	bl	80031f0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00b      	beq.n	800300c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f003 0310 	and.w	r3, r3, #16
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d006      	beq.n	800300c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2210      	movs	r2, #16
 8003004:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f906 	bl	8003218 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00b      	beq.n	800302e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	2b00      	cmp	r3, #0
 800301e:	d006      	beq.n	800302e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2208      	movs	r2, #8
 8003026:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f8ff 	bl	800322c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d07b      	beq.n	8003130 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	2b00      	cmp	r3, #0
 8003040:	d072      	beq.n	8003128 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003048:	2b00      	cmp	r3, #0
 800304a:	d008      	beq.n	800305e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	f043 0302 	orr.w	r3, r3, #2
 8003078:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	f043 0304 	orr.w	r3, r3, #4
 8003094:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800309c:	2b00      	cmp	r3, #0
 800309e:	d043      	beq.n	8003128 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d03e      	beq.n	8003128 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030b0:	2b60      	cmp	r3, #96	; 0x60
 80030b2:	d02b      	beq.n	800310c <HAL_CAN_IRQHandler+0x32a>
 80030b4:	2b60      	cmp	r3, #96	; 0x60
 80030b6:	d82e      	bhi.n	8003116 <HAL_CAN_IRQHandler+0x334>
 80030b8:	2b50      	cmp	r3, #80	; 0x50
 80030ba:	d022      	beq.n	8003102 <HAL_CAN_IRQHandler+0x320>
 80030bc:	2b50      	cmp	r3, #80	; 0x50
 80030be:	d82a      	bhi.n	8003116 <HAL_CAN_IRQHandler+0x334>
 80030c0:	2b40      	cmp	r3, #64	; 0x40
 80030c2:	d019      	beq.n	80030f8 <HAL_CAN_IRQHandler+0x316>
 80030c4:	2b40      	cmp	r3, #64	; 0x40
 80030c6:	d826      	bhi.n	8003116 <HAL_CAN_IRQHandler+0x334>
 80030c8:	2b30      	cmp	r3, #48	; 0x30
 80030ca:	d010      	beq.n	80030ee <HAL_CAN_IRQHandler+0x30c>
 80030cc:	2b30      	cmp	r3, #48	; 0x30
 80030ce:	d822      	bhi.n	8003116 <HAL_CAN_IRQHandler+0x334>
 80030d0:	2b10      	cmp	r3, #16
 80030d2:	d002      	beq.n	80030da <HAL_CAN_IRQHandler+0x2f8>
 80030d4:	2b20      	cmp	r3, #32
 80030d6:	d005      	beq.n	80030e4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80030d8:	e01d      	b.n	8003116 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	f043 0308 	orr.w	r3, r3, #8
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030e2:	e019      	b.n	8003118 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	f043 0310 	orr.w	r3, r3, #16
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030ec:	e014      	b.n	8003118 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	f043 0320 	orr.w	r3, r3, #32
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030f6:	e00f      	b.n	8003118 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003100:	e00a      	b.n	8003118 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800310a:	e005      	b.n	8003118 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003114:	e000      	b.n	8003118 <HAL_CAN_IRQHandler+0x336>
            break;
 8003116:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699a      	ldr	r2, [r3, #24]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003126:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2204      	movs	r2, #4
 800312e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	2b00      	cmp	r3, #0
 8003134:	d008      	beq.n	8003148 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f87c 	bl	8003240 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003148:	bf00      	nop
 800314a:	3728      	adds	r7, #40	; 0x28
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003264:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <__NVIC_SetPriorityGrouping+0x44>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003270:	4013      	ands	r3, r2
 8003272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800327c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003286:	4a04      	ldr	r2, [pc, #16]	; (8003298 <__NVIC_SetPriorityGrouping+0x44>)
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	60d3      	str	r3, [r2, #12]
}
 800328c:	bf00      	nop
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	e000ed00 	.word	0xe000ed00

0800329c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032a0:	4b04      	ldr	r3, [pc, #16]	; (80032b4 <__NVIC_GetPriorityGrouping+0x18>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	0a1b      	lsrs	r3, r3, #8
 80032a6:	f003 0307 	and.w	r3, r3, #7
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	e000ed00 	.word	0xe000ed00

080032b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	db0b      	blt.n	80032e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ca:	79fb      	ldrb	r3, [r7, #7]
 80032cc:	f003 021f 	and.w	r2, r3, #31
 80032d0:	4907      	ldr	r1, [pc, #28]	; (80032f0 <__NVIC_EnableIRQ+0x38>)
 80032d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d6:	095b      	lsrs	r3, r3, #5
 80032d8:	2001      	movs	r0, #1
 80032da:	fa00 f202 	lsl.w	r2, r0, r2
 80032de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	e000e100 	.word	0xe000e100

080032f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	6039      	str	r1, [r7, #0]
 80032fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003304:	2b00      	cmp	r3, #0
 8003306:	db0a      	blt.n	800331e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	b2da      	uxtb	r2, r3
 800330c:	490c      	ldr	r1, [pc, #48]	; (8003340 <__NVIC_SetPriority+0x4c>)
 800330e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003312:	0112      	lsls	r2, r2, #4
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	440b      	add	r3, r1
 8003318:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800331c:	e00a      	b.n	8003334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	b2da      	uxtb	r2, r3
 8003322:	4908      	ldr	r1, [pc, #32]	; (8003344 <__NVIC_SetPriority+0x50>)
 8003324:	79fb      	ldrb	r3, [r7, #7]
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	3b04      	subs	r3, #4
 800332c:	0112      	lsls	r2, r2, #4
 800332e:	b2d2      	uxtb	r2, r2
 8003330:	440b      	add	r3, r1
 8003332:	761a      	strb	r2, [r3, #24]
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	e000e100 	.word	0xe000e100
 8003344:	e000ed00 	.word	0xe000ed00

08003348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003348:	b480      	push	{r7}
 800334a:	b089      	sub	sp, #36	; 0x24
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f1c3 0307 	rsb	r3, r3, #7
 8003362:	2b04      	cmp	r3, #4
 8003364:	bf28      	it	cs
 8003366:	2304      	movcs	r3, #4
 8003368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	3304      	adds	r3, #4
 800336e:	2b06      	cmp	r3, #6
 8003370:	d902      	bls.n	8003378 <NVIC_EncodePriority+0x30>
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	3b03      	subs	r3, #3
 8003376:	e000      	b.n	800337a <NVIC_EncodePriority+0x32>
 8003378:	2300      	movs	r3, #0
 800337a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800337c:	f04f 32ff 	mov.w	r2, #4294967295
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	43da      	mvns	r2, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	401a      	ands	r2, r3
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003390:	f04f 31ff 	mov.w	r1, #4294967295
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	fa01 f303 	lsl.w	r3, r1, r3
 800339a:	43d9      	mvns	r1, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a0:	4313      	orrs	r3, r2
         );
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3724      	adds	r7, #36	; 0x24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b082      	sub	sp, #8
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff ff4c 	bl	8003254 <__NVIC_SetPriorityGrouping>
}
 80033bc:	bf00      	nop
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
 80033d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033d6:	f7ff ff61 	bl	800329c <__NVIC_GetPriorityGrouping>
 80033da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	68b9      	ldr	r1, [r7, #8]
 80033e0:	6978      	ldr	r0, [r7, #20]
 80033e2:	f7ff ffb1 	bl	8003348 <NVIC_EncodePriority>
 80033e6:	4602      	mov	r2, r0
 80033e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ec:	4611      	mov	r1, r2
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff ff80 	bl	80032f4 <__NVIC_SetPriority>
}
 80033f4:	bf00      	nop
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff ff54 	bl	80032b8 <__NVIC_EnableIRQ>
}
 8003410:	bf00      	nop
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003424:	f7ff f87a 	bl	800251c <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e099      	b.n	8003568 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0201 	bic.w	r2, r2, #1
 8003452:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003454:	e00f      	b.n	8003476 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003456:	f7ff f861 	bl	800251c <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b05      	cmp	r3, #5
 8003462:	d908      	bls.n	8003476 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2220      	movs	r2, #32
 8003468:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2203      	movs	r2, #3
 800346e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e078      	b.n	8003568 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1e8      	bne.n	8003456 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	4b38      	ldr	r3, [pc, #224]	; (8003570 <HAL_DMA_Init+0x158>)
 8003490:	4013      	ands	r3, r2
 8003492:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d107      	bne.n	80034e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d8:	4313      	orrs	r3, r2
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4313      	orrs	r3, r2
 80034de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f023 0307 	bic.w	r3, r3, #7
 80034f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	4313      	orrs	r3, r2
 8003500:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	2b04      	cmp	r3, #4
 8003508:	d117      	bne.n	800353a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	4313      	orrs	r3, r2
 8003512:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00e      	beq.n	800353a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 fadf 	bl	8003ae0 <DMA_CheckFifoParam>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d008      	beq.n	800353a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2240      	movs	r2, #64	; 0x40
 800352c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003536:	2301      	movs	r3, #1
 8003538:	e016      	b.n	8003568 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fa96 	bl	8003a74 <DMA_CalcBaseAndBitshift>
 8003548:	4603      	mov	r3, r0
 800354a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003550:	223f      	movs	r2, #63	; 0x3f
 8003552:	409a      	lsls	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	f010803f 	.word	0xf010803f

08003574 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
 8003580:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003582:	2300      	movs	r3, #0
 8003584:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <HAL_DMA_Start_IT+0x26>
 8003596:	2302      	movs	r3, #2
 8003598:	e040      	b.n	800361c <HAL_DMA_Start_IT+0xa8>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d12f      	bne.n	800360e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2202      	movs	r2, #2
 80035b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	68b9      	ldr	r1, [r7, #8]
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 fa28 	bl	8003a18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035cc:	223f      	movs	r2, #63	; 0x3f
 80035ce:	409a      	lsls	r2, r3
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0216 	orr.w	r2, r2, #22
 80035e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d007      	beq.n	80035fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0208 	orr.w	r2, r2, #8
 80035fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	e005      	b.n	800361a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003616:	2302      	movs	r3, #2
 8003618:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800361a:	7dfb      	ldrb	r3, [r7, #23]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003630:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003632:	f7fe ff73 	bl	800251c <HAL_GetTick>
 8003636:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d008      	beq.n	8003656 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2280      	movs	r2, #128	; 0x80
 8003648:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e052      	b.n	80036fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0216 	bic.w	r2, r2, #22
 8003664:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695a      	ldr	r2, [r3, #20]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003674:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	2b00      	cmp	r3, #0
 800367c:	d103      	bne.n	8003686 <HAL_DMA_Abort+0x62>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003682:	2b00      	cmp	r3, #0
 8003684:	d007      	beq.n	8003696 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0208 	bic.w	r2, r2, #8
 8003694:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0201 	bic.w	r2, r2, #1
 80036a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036a6:	e013      	b.n	80036d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036a8:	f7fe ff38 	bl	800251c <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b05      	cmp	r3, #5
 80036b4:	d90c      	bls.n	80036d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2220      	movs	r2, #32
 80036ba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2203      	movs	r2, #3
 80036c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e015      	b.n	80036fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1e4      	bne.n	80036a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e2:	223f      	movs	r2, #63	; 0x3f
 80036e4:	409a      	lsls	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003710:	4b92      	ldr	r3, [pc, #584]	; (800395c <HAL_DMA_IRQHandler+0x258>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a92      	ldr	r2, [pc, #584]	; (8003960 <HAL_DMA_IRQHandler+0x25c>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	0a9b      	lsrs	r3, r3, #10
 800371c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003722:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372e:	2208      	movs	r2, #8
 8003730:	409a      	lsls	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4013      	ands	r3, r2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d01a      	beq.n	8003770 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d013      	beq.n	8003770 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0204 	bic.w	r2, r2, #4
 8003756:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375c:	2208      	movs	r2, #8
 800375e:	409a      	lsls	r2, r3
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003768:	f043 0201 	orr.w	r2, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003774:	2201      	movs	r2, #1
 8003776:	409a      	lsls	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4013      	ands	r3, r2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d012      	beq.n	80037a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00b      	beq.n	80037a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003792:	2201      	movs	r2, #1
 8003794:	409a      	lsls	r2, r3
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379e:	f043 0202 	orr.w	r2, r3, #2
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037aa:	2204      	movs	r2, #4
 80037ac:	409a      	lsls	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4013      	ands	r3, r2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d012      	beq.n	80037dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00b      	beq.n	80037dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c8:	2204      	movs	r2, #4
 80037ca:	409a      	lsls	r2, r3
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d4:	f043 0204 	orr.w	r2, r3, #4
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e0:	2210      	movs	r2, #16
 80037e2:	409a      	lsls	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4013      	ands	r3, r2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d043      	beq.n	8003874 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0308 	and.w	r3, r3, #8
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d03c      	beq.n	8003874 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fe:	2210      	movs	r2, #16
 8003800:	409a      	lsls	r2, r3
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d018      	beq.n	8003846 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d108      	bne.n	8003834 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	2b00      	cmp	r3, #0
 8003828:	d024      	beq.n	8003874 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	4798      	blx	r3
 8003832:	e01f      	b.n	8003874 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003838:	2b00      	cmp	r3, #0
 800383a:	d01b      	beq.n	8003874 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	4798      	blx	r3
 8003844:	e016      	b.n	8003874 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003850:	2b00      	cmp	r3, #0
 8003852:	d107      	bne.n	8003864 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0208 	bic.w	r2, r2, #8
 8003862:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003878:	2220      	movs	r2, #32
 800387a:	409a      	lsls	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4013      	ands	r3, r2
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 808e 	beq.w	80039a2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0310 	and.w	r3, r3, #16
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 8086 	beq.w	80039a2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389a:	2220      	movs	r2, #32
 800389c:	409a      	lsls	r2, r3
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b05      	cmp	r3, #5
 80038ac:	d136      	bne.n	800391c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0216 	bic.w	r2, r2, #22
 80038bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695a      	ldr	r2, [r3, #20]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d103      	bne.n	80038de <HAL_DMA_IRQHandler+0x1da>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d007      	beq.n	80038ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0208 	bic.w	r2, r2, #8
 80038ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f2:	223f      	movs	r2, #63	; 0x3f
 80038f4:	409a      	lsls	r2, r3
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800390e:	2b00      	cmp	r3, #0
 8003910:	d07d      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	4798      	blx	r3
        }
        return;
 800391a:	e078      	b.n	8003a0e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d01c      	beq.n	8003964 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d108      	bne.n	800394a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393c:	2b00      	cmp	r3, #0
 800393e:	d030      	beq.n	80039a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	4798      	blx	r3
 8003948:	e02b      	b.n	80039a2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394e:	2b00      	cmp	r3, #0
 8003950:	d027      	beq.n	80039a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	4798      	blx	r3
 800395a:	e022      	b.n	80039a2 <HAL_DMA_IRQHandler+0x29e>
 800395c:	20000014 	.word	0x20000014
 8003960:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10f      	bne.n	8003992 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0210 	bic.w	r2, r2, #16
 8003980:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d032      	beq.n	8003a10 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d022      	beq.n	80039fc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2205      	movs	r2, #5
 80039ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0201 	bic.w	r2, r2, #1
 80039cc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	3301      	adds	r3, #1
 80039d2:	60bb      	str	r3, [r7, #8]
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d307      	bcc.n	80039ea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1f2      	bne.n	80039ce <HAL_DMA_IRQHandler+0x2ca>
 80039e8:	e000      	b.n	80039ec <HAL_DMA_IRQHandler+0x2e8>
          break;
 80039ea:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	4798      	blx	r3
 8003a0c:	e000      	b.n	8003a10 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003a0e:	bf00      	nop
    }
  }
}
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop

08003a18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
 8003a24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2b40      	cmp	r3, #64	; 0x40
 8003a44:	d108      	bne.n	8003a58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a56:	e007      	b.n	8003a68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	60da      	str	r2, [r3, #12]
}
 8003a68:	bf00      	nop
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	3b10      	subs	r3, #16
 8003a84:	4a14      	ldr	r2, [pc, #80]	; (8003ad8 <DMA_CalcBaseAndBitshift+0x64>)
 8003a86:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8a:	091b      	lsrs	r3, r3, #4
 8003a8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a8e:	4a13      	ldr	r2, [pc, #76]	; (8003adc <DMA_CalcBaseAndBitshift+0x68>)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4413      	add	r3, r2
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d909      	bls.n	8003ab6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003aaa:	f023 0303 	bic.w	r3, r3, #3
 8003aae:	1d1a      	adds	r2, r3, #4
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	659a      	str	r2, [r3, #88]	; 0x58
 8003ab4:	e007      	b.n	8003ac6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003abe:	f023 0303 	bic.w	r3, r3, #3
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	aaaaaaab 	.word	0xaaaaaaab
 8003adc:	08010cfc 	.word	0x08010cfc

08003ae0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d11f      	bne.n	8003b3a <DMA_CheckFifoParam+0x5a>
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	d856      	bhi.n	8003bae <DMA_CheckFifoParam+0xce>
 8003b00:	a201      	add	r2, pc, #4	; (adr r2, 8003b08 <DMA_CheckFifoParam+0x28>)
 8003b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b06:	bf00      	nop
 8003b08:	08003b19 	.word	0x08003b19
 8003b0c:	08003b2b 	.word	0x08003b2b
 8003b10:	08003b19 	.word	0x08003b19
 8003b14:	08003baf 	.word	0x08003baf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d046      	beq.n	8003bb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b28:	e043      	b.n	8003bb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b32:	d140      	bne.n	8003bb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b38:	e03d      	b.n	8003bb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b42:	d121      	bne.n	8003b88 <DMA_CheckFifoParam+0xa8>
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b03      	cmp	r3, #3
 8003b48:	d837      	bhi.n	8003bba <DMA_CheckFifoParam+0xda>
 8003b4a:	a201      	add	r2, pc, #4	; (adr r2, 8003b50 <DMA_CheckFifoParam+0x70>)
 8003b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b50:	08003b61 	.word	0x08003b61
 8003b54:	08003b67 	.word	0x08003b67
 8003b58:	08003b61 	.word	0x08003b61
 8003b5c:	08003b79 	.word	0x08003b79
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	73fb      	strb	r3, [r7, #15]
      break;
 8003b64:	e030      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d025      	beq.n	8003bbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b76:	e022      	b.n	8003bbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b80:	d11f      	bne.n	8003bc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b86:	e01c      	b.n	8003bc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d903      	bls.n	8003b96 <DMA_CheckFifoParam+0xb6>
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d003      	beq.n	8003b9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b94:	e018      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	73fb      	strb	r3, [r7, #15]
      break;
 8003b9a:	e015      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00e      	beq.n	8003bc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	73fb      	strb	r3, [r7, #15]
      break;
 8003bac:	e00b      	b.n	8003bc6 <DMA_CheckFifoParam+0xe6>
      break;
 8003bae:	bf00      	nop
 8003bb0:	e00a      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bb2:	bf00      	nop
 8003bb4:	e008      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bb6:	bf00      	nop
 8003bb8:	e006      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bba:	bf00      	nop
 8003bbc:	e004      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bbe:	bf00      	nop
 8003bc0:	e002      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003bc2:	bf00      	nop
 8003bc4:	e000      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bc6:	bf00      	nop
    }
  } 
  
  return status; 
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop

08003bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b089      	sub	sp, #36	; 0x24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61fb      	str	r3, [r7, #28]
 8003bf2:	e16b      	b.n	8003ecc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4013      	ands	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	f040 815a 	bne.w	8003ec6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d005      	beq.n	8003c2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d130      	bne.n	8003c8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	2203      	movs	r2, #3
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	43db      	mvns	r3, r3
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c60:	2201      	movs	r2, #1
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	091b      	lsrs	r3, r3, #4
 8003c76:	f003 0201 	and.w	r2, r3, #1
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f003 0303 	and.w	r3, r3, #3
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	d017      	beq.n	8003cc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	2203      	movs	r2, #3
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	4013      	ands	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d123      	bne.n	8003d1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	08da      	lsrs	r2, r3, #3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3208      	adds	r2, #8
 8003cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	220f      	movs	r2, #15
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	08da      	lsrs	r2, r3, #3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3208      	adds	r2, #8
 8003d16:	69b9      	ldr	r1, [r7, #24]
 8003d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	2203      	movs	r2, #3
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4013      	ands	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f003 0203 	and.w	r2, r3, #3
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 80b4 	beq.w	8003ec6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	4b60      	ldr	r3, [pc, #384]	; (8003ee4 <HAL_GPIO_Init+0x30c>)
 8003d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d66:	4a5f      	ldr	r2, [pc, #380]	; (8003ee4 <HAL_GPIO_Init+0x30c>)
 8003d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d6e:	4b5d      	ldr	r3, [pc, #372]	; (8003ee4 <HAL_GPIO_Init+0x30c>)
 8003d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d7a:	4a5b      	ldr	r2, [pc, #364]	; (8003ee8 <HAL_GPIO_Init+0x310>)
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	089b      	lsrs	r3, r3, #2
 8003d80:	3302      	adds	r3, #2
 8003d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	220f      	movs	r2, #15
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	43db      	mvns	r3, r3
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a52      	ldr	r2, [pc, #328]	; (8003eec <HAL_GPIO_Init+0x314>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d02b      	beq.n	8003dfe <HAL_GPIO_Init+0x226>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a51      	ldr	r2, [pc, #324]	; (8003ef0 <HAL_GPIO_Init+0x318>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d025      	beq.n	8003dfa <HAL_GPIO_Init+0x222>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a50      	ldr	r2, [pc, #320]	; (8003ef4 <HAL_GPIO_Init+0x31c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d01f      	beq.n	8003df6 <HAL_GPIO_Init+0x21e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a4f      	ldr	r2, [pc, #316]	; (8003ef8 <HAL_GPIO_Init+0x320>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d019      	beq.n	8003df2 <HAL_GPIO_Init+0x21a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a4e      	ldr	r2, [pc, #312]	; (8003efc <HAL_GPIO_Init+0x324>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d013      	beq.n	8003dee <HAL_GPIO_Init+0x216>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a4d      	ldr	r2, [pc, #308]	; (8003f00 <HAL_GPIO_Init+0x328>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d00d      	beq.n	8003dea <HAL_GPIO_Init+0x212>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a4c      	ldr	r2, [pc, #304]	; (8003f04 <HAL_GPIO_Init+0x32c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d007      	beq.n	8003de6 <HAL_GPIO_Init+0x20e>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a4b      	ldr	r2, [pc, #300]	; (8003f08 <HAL_GPIO_Init+0x330>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d101      	bne.n	8003de2 <HAL_GPIO_Init+0x20a>
 8003dde:	2307      	movs	r3, #7
 8003de0:	e00e      	b.n	8003e00 <HAL_GPIO_Init+0x228>
 8003de2:	2308      	movs	r3, #8
 8003de4:	e00c      	b.n	8003e00 <HAL_GPIO_Init+0x228>
 8003de6:	2306      	movs	r3, #6
 8003de8:	e00a      	b.n	8003e00 <HAL_GPIO_Init+0x228>
 8003dea:	2305      	movs	r3, #5
 8003dec:	e008      	b.n	8003e00 <HAL_GPIO_Init+0x228>
 8003dee:	2304      	movs	r3, #4
 8003df0:	e006      	b.n	8003e00 <HAL_GPIO_Init+0x228>
 8003df2:	2303      	movs	r3, #3
 8003df4:	e004      	b.n	8003e00 <HAL_GPIO_Init+0x228>
 8003df6:	2302      	movs	r3, #2
 8003df8:	e002      	b.n	8003e00 <HAL_GPIO_Init+0x228>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e000      	b.n	8003e00 <HAL_GPIO_Init+0x228>
 8003dfe:	2300      	movs	r3, #0
 8003e00:	69fa      	ldr	r2, [r7, #28]
 8003e02:	f002 0203 	and.w	r2, r2, #3
 8003e06:	0092      	lsls	r2, r2, #2
 8003e08:	4093      	lsls	r3, r2
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e10:	4935      	ldr	r1, [pc, #212]	; (8003ee8 <HAL_GPIO_Init+0x310>)
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	089b      	lsrs	r3, r3, #2
 8003e16:	3302      	adds	r3, #2
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e1e:	4b3b      	ldr	r3, [pc, #236]	; (8003f0c <HAL_GPIO_Init+0x334>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	43db      	mvns	r3, r3
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e42:	4a32      	ldr	r2, [pc, #200]	; (8003f0c <HAL_GPIO_Init+0x334>)
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e48:	4b30      	ldr	r3, [pc, #192]	; (8003f0c <HAL_GPIO_Init+0x334>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	43db      	mvns	r3, r3
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	4013      	ands	r3, r2
 8003e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e6c:	4a27      	ldr	r2, [pc, #156]	; (8003f0c <HAL_GPIO_Init+0x334>)
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e72:	4b26      	ldr	r3, [pc, #152]	; (8003f0c <HAL_GPIO_Init+0x334>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e96:	4a1d      	ldr	r2, [pc, #116]	; (8003f0c <HAL_GPIO_Init+0x334>)
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e9c:	4b1b      	ldr	r3, [pc, #108]	; (8003f0c <HAL_GPIO_Init+0x334>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ec0:	4a12      	ldr	r2, [pc, #72]	; (8003f0c <HAL_GPIO_Init+0x334>)
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	61fb      	str	r3, [r7, #28]
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	2b0f      	cmp	r3, #15
 8003ed0:	f67f ae90 	bls.w	8003bf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ed4:	bf00      	nop
 8003ed6:	bf00      	nop
 8003ed8:	3724      	adds	r7, #36	; 0x24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	40013800 	.word	0x40013800
 8003eec:	40020000 	.word	0x40020000
 8003ef0:	40020400 	.word	0x40020400
 8003ef4:	40020800 	.word	0x40020800
 8003ef8:	40020c00 	.word	0x40020c00
 8003efc:	40021000 	.word	0x40021000
 8003f00:	40021400 	.word	0x40021400
 8003f04:	40021800 	.word	0x40021800
 8003f08:	40021c00 	.word	0x40021c00
 8003f0c:	40013c00 	.word	0x40013c00

08003f10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	887b      	ldrh	r3, [r7, #2]
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	73fb      	strb	r3, [r7, #15]
 8003f2c:	e001      	b.n	8003f32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	807b      	strh	r3, [r7, #2]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f50:	787b      	ldrb	r3, [r7, #1]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f56:	887a      	ldrh	r2, [r7, #2]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f5c:	e003      	b.n	8003f66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f5e:	887b      	ldrh	r3, [r7, #2]
 8003f60:	041a      	lsls	r2, r3, #16
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	619a      	str	r2, [r3, #24]
}
 8003f66:	bf00      	nop
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
	...

08003f74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f7e:	4b08      	ldr	r3, [pc, #32]	; (8003fa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f80:	695a      	ldr	r2, [r3, #20]
 8003f82:	88fb      	ldrh	r3, [r7, #6]
 8003f84:	4013      	ands	r3, r2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d006      	beq.n	8003f98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f8a:	4a05      	ldr	r2, [pc, #20]	; (8003fa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f8c:	88fb      	ldrh	r3, [r7, #6]
 8003f8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f90:	88fb      	ldrh	r3, [r7, #6]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 f806 	bl	8003fa4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f98:	bf00      	nop
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40013c00 	.word	0x40013c00

08003fa4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	4603      	mov	r3, r0
 8003fac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003fba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fbc:	b08f      	sub	sp, #60	; 0x3c
 8003fbe:	af0a      	add	r7, sp, #40	; 0x28
 8003fc0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e054      	b.n	8004076 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d106      	bne.n	8003fec <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f00b fada 	bl	800f5a0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2203      	movs	r2, #3
 8003ff0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d102      	bne.n	8004006 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f004 ff88 	bl	8008f20 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	603b      	str	r3, [r7, #0]
 8004016:	687e      	ldr	r6, [r7, #4]
 8004018:	466d      	mov	r5, sp
 800401a:	f106 0410 	add.w	r4, r6, #16
 800401e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004020:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004022:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004024:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004026:	e894 0003 	ldmia.w	r4, {r0, r1}
 800402a:	e885 0003 	stmia.w	r5, {r0, r1}
 800402e:	1d33      	adds	r3, r6, #4
 8004030:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004032:	6838      	ldr	r0, [r7, #0]
 8004034:	f004 ff02 	bl	8008e3c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2101      	movs	r1, #1
 800403e:	4618      	mov	r0, r3
 8004040:	f004 ff7f 	bl	8008f42 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	603b      	str	r3, [r7, #0]
 800404a:	687e      	ldr	r6, [r7, #4]
 800404c:	466d      	mov	r5, sp
 800404e:	f106 0410 	add.w	r4, r6, #16
 8004052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800405a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800405e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004062:	1d33      	adds	r3, r6, #4
 8004064:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004066:	6838      	ldr	r0, [r7, #0]
 8004068:	f005 f8e6 	bl	8009238 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800407e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800407e:	b590      	push	{r4, r7, lr}
 8004080:	b089      	sub	sp, #36	; 0x24
 8004082:	af04      	add	r7, sp, #16
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	4608      	mov	r0, r1
 8004088:	4611      	mov	r1, r2
 800408a:	461a      	mov	r2, r3
 800408c:	4603      	mov	r3, r0
 800408e:	70fb      	strb	r3, [r7, #3]
 8004090:	460b      	mov	r3, r1
 8004092:	70bb      	strb	r3, [r7, #2]
 8004094:	4613      	mov	r3, r2
 8004096:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d101      	bne.n	80040a6 <HAL_HCD_HC_Init+0x28>
 80040a2:	2302      	movs	r3, #2
 80040a4:	e076      	b.n	8004194 <HAL_HCD_HC_Init+0x116>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80040ae:	78fb      	ldrb	r3, [r7, #3]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	212c      	movs	r1, #44	; 0x2c
 80040b4:	fb01 f303 	mul.w	r3, r1, r3
 80040b8:	4413      	add	r3, r2
 80040ba:	333d      	adds	r3, #61	; 0x3d
 80040bc:	2200      	movs	r2, #0
 80040be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80040c0:	78fb      	ldrb	r3, [r7, #3]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	212c      	movs	r1, #44	; 0x2c
 80040c6:	fb01 f303 	mul.w	r3, r1, r3
 80040ca:	4413      	add	r3, r2
 80040cc:	3338      	adds	r3, #56	; 0x38
 80040ce:	787a      	ldrb	r2, [r7, #1]
 80040d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80040d2:	78fb      	ldrb	r3, [r7, #3]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	212c      	movs	r1, #44	; 0x2c
 80040d8:	fb01 f303 	mul.w	r3, r1, r3
 80040dc:	4413      	add	r3, r2
 80040de:	3340      	adds	r3, #64	; 0x40
 80040e0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80040e2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	212c      	movs	r1, #44	; 0x2c
 80040ea:	fb01 f303 	mul.w	r3, r1, r3
 80040ee:	4413      	add	r3, r2
 80040f0:	3339      	adds	r3, #57	; 0x39
 80040f2:	78fa      	ldrb	r2, [r7, #3]
 80040f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80040f6:	78fb      	ldrb	r3, [r7, #3]
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	212c      	movs	r1, #44	; 0x2c
 80040fc:	fb01 f303 	mul.w	r3, r1, r3
 8004100:	4413      	add	r3, r2
 8004102:	333f      	adds	r3, #63	; 0x3f
 8004104:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004108:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800410a:	78fb      	ldrb	r3, [r7, #3]
 800410c:	78ba      	ldrb	r2, [r7, #2]
 800410e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004112:	b2d0      	uxtb	r0, r2
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	212c      	movs	r1, #44	; 0x2c
 8004118:	fb01 f303 	mul.w	r3, r1, r3
 800411c:	4413      	add	r3, r2
 800411e:	333a      	adds	r3, #58	; 0x3a
 8004120:	4602      	mov	r2, r0
 8004122:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004124:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004128:	2b00      	cmp	r3, #0
 800412a:	da09      	bge.n	8004140 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800412c:	78fb      	ldrb	r3, [r7, #3]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	212c      	movs	r1, #44	; 0x2c
 8004132:	fb01 f303 	mul.w	r3, r1, r3
 8004136:	4413      	add	r3, r2
 8004138:	333b      	adds	r3, #59	; 0x3b
 800413a:	2201      	movs	r2, #1
 800413c:	701a      	strb	r2, [r3, #0]
 800413e:	e008      	b.n	8004152 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004140:	78fb      	ldrb	r3, [r7, #3]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	212c      	movs	r1, #44	; 0x2c
 8004146:	fb01 f303 	mul.w	r3, r1, r3
 800414a:	4413      	add	r3, r2
 800414c:	333b      	adds	r3, #59	; 0x3b
 800414e:	2200      	movs	r2, #0
 8004150:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004152:	78fb      	ldrb	r3, [r7, #3]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	212c      	movs	r1, #44	; 0x2c
 8004158:	fb01 f303 	mul.w	r3, r1, r3
 800415c:	4413      	add	r3, r2
 800415e:	333c      	adds	r3, #60	; 0x3c
 8004160:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004164:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6818      	ldr	r0, [r3, #0]
 800416a:	787c      	ldrb	r4, [r7, #1]
 800416c:	78ba      	ldrb	r2, [r7, #2]
 800416e:	78f9      	ldrb	r1, [r7, #3]
 8004170:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004172:	9302      	str	r3, [sp, #8]
 8004174:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004178:	9301      	str	r3, [sp, #4]
 800417a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	4623      	mov	r3, r4
 8004182:	f005 f9d3 	bl	800952c <USB_HC_Init>
 8004186:	4603      	mov	r3, r0
 8004188:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004192:	7bfb      	ldrb	r3, [r7, #15]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	bd90      	pop	{r4, r7, pc}

0800419c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	460b      	mov	r3, r1
 80041a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d101      	bne.n	80041ba <HAL_HCD_HC_Halt+0x1e>
 80041b6:	2302      	movs	r3, #2
 80041b8:	e00f      	b.n	80041da <HAL_HCD_HC_Halt+0x3e>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	78fa      	ldrb	r2, [r7, #3]
 80041c8:	4611      	mov	r1, r2
 80041ca:	4618      	mov	r0, r3
 80041cc:	f005 fc0f 	bl	80099ee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	4608      	mov	r0, r1
 80041ee:	4611      	mov	r1, r2
 80041f0:	461a      	mov	r2, r3
 80041f2:	4603      	mov	r3, r0
 80041f4:	70fb      	strb	r3, [r7, #3]
 80041f6:	460b      	mov	r3, r1
 80041f8:	70bb      	strb	r3, [r7, #2]
 80041fa:	4613      	mov	r3, r2
 80041fc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80041fe:	78fb      	ldrb	r3, [r7, #3]
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	212c      	movs	r1, #44	; 0x2c
 8004204:	fb01 f303 	mul.w	r3, r1, r3
 8004208:	4413      	add	r3, r2
 800420a:	333b      	adds	r3, #59	; 0x3b
 800420c:	78ba      	ldrb	r2, [r7, #2]
 800420e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004210:	78fb      	ldrb	r3, [r7, #3]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	212c      	movs	r1, #44	; 0x2c
 8004216:	fb01 f303 	mul.w	r3, r1, r3
 800421a:	4413      	add	r3, r2
 800421c:	333f      	adds	r3, #63	; 0x3f
 800421e:	787a      	ldrb	r2, [r7, #1]
 8004220:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004222:	7c3b      	ldrb	r3, [r7, #16]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d112      	bne.n	800424e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004228:	78fb      	ldrb	r3, [r7, #3]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	212c      	movs	r1, #44	; 0x2c
 800422e:	fb01 f303 	mul.w	r3, r1, r3
 8004232:	4413      	add	r3, r2
 8004234:	3342      	adds	r3, #66	; 0x42
 8004236:	2203      	movs	r2, #3
 8004238:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800423a:	78fb      	ldrb	r3, [r7, #3]
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	212c      	movs	r1, #44	; 0x2c
 8004240:	fb01 f303 	mul.w	r3, r1, r3
 8004244:	4413      	add	r3, r2
 8004246:	333d      	adds	r3, #61	; 0x3d
 8004248:	7f3a      	ldrb	r2, [r7, #28]
 800424a:	701a      	strb	r2, [r3, #0]
 800424c:	e008      	b.n	8004260 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800424e:	78fb      	ldrb	r3, [r7, #3]
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	212c      	movs	r1, #44	; 0x2c
 8004254:	fb01 f303 	mul.w	r3, r1, r3
 8004258:	4413      	add	r3, r2
 800425a:	3342      	adds	r3, #66	; 0x42
 800425c:	2202      	movs	r2, #2
 800425e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004260:	787b      	ldrb	r3, [r7, #1]
 8004262:	2b03      	cmp	r3, #3
 8004264:	f200 80c6 	bhi.w	80043f4 <HAL_HCD_HC_SubmitRequest+0x210>
 8004268:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800426a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426e:	bf00      	nop
 8004270:	08004281 	.word	0x08004281
 8004274:	080043e1 	.word	0x080043e1
 8004278:	080042e5 	.word	0x080042e5
 800427c:	08004363 	.word	0x08004363
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004280:	7c3b      	ldrb	r3, [r7, #16]
 8004282:	2b01      	cmp	r3, #1
 8004284:	f040 80b8 	bne.w	80043f8 <HAL_HCD_HC_SubmitRequest+0x214>
 8004288:	78bb      	ldrb	r3, [r7, #2]
 800428a:	2b00      	cmp	r3, #0
 800428c:	f040 80b4 	bne.w	80043f8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004290:	8b3b      	ldrh	r3, [r7, #24]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d108      	bne.n	80042a8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004296:	78fb      	ldrb	r3, [r7, #3]
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	212c      	movs	r1, #44	; 0x2c
 800429c:	fb01 f303 	mul.w	r3, r1, r3
 80042a0:	4413      	add	r3, r2
 80042a2:	3355      	adds	r3, #85	; 0x55
 80042a4:	2201      	movs	r2, #1
 80042a6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	212c      	movs	r1, #44	; 0x2c
 80042ae:	fb01 f303 	mul.w	r3, r1, r3
 80042b2:	4413      	add	r3, r2
 80042b4:	3355      	adds	r3, #85	; 0x55
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d109      	bne.n	80042d0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	212c      	movs	r1, #44	; 0x2c
 80042c2:	fb01 f303 	mul.w	r3, r1, r3
 80042c6:	4413      	add	r3, r2
 80042c8:	3342      	adds	r3, #66	; 0x42
 80042ca:	2200      	movs	r2, #0
 80042cc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80042ce:	e093      	b.n	80043f8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	212c      	movs	r1, #44	; 0x2c
 80042d6:	fb01 f303 	mul.w	r3, r1, r3
 80042da:	4413      	add	r3, r2
 80042dc:	3342      	adds	r3, #66	; 0x42
 80042de:	2202      	movs	r2, #2
 80042e0:	701a      	strb	r2, [r3, #0]
      break;
 80042e2:	e089      	b.n	80043f8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80042e4:	78bb      	ldrb	r3, [r7, #2]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d11d      	bne.n	8004326 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80042ea:	78fb      	ldrb	r3, [r7, #3]
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	212c      	movs	r1, #44	; 0x2c
 80042f0:	fb01 f303 	mul.w	r3, r1, r3
 80042f4:	4413      	add	r3, r2
 80042f6:	3355      	adds	r3, #85	; 0x55
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d109      	bne.n	8004312 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80042fe:	78fb      	ldrb	r3, [r7, #3]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	212c      	movs	r1, #44	; 0x2c
 8004304:	fb01 f303 	mul.w	r3, r1, r3
 8004308:	4413      	add	r3, r2
 800430a:	3342      	adds	r3, #66	; 0x42
 800430c:	2200      	movs	r2, #0
 800430e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004310:	e073      	b.n	80043fa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004312:	78fb      	ldrb	r3, [r7, #3]
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	212c      	movs	r1, #44	; 0x2c
 8004318:	fb01 f303 	mul.w	r3, r1, r3
 800431c:	4413      	add	r3, r2
 800431e:	3342      	adds	r3, #66	; 0x42
 8004320:	2202      	movs	r2, #2
 8004322:	701a      	strb	r2, [r3, #0]
      break;
 8004324:	e069      	b.n	80043fa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004326:	78fb      	ldrb	r3, [r7, #3]
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	212c      	movs	r1, #44	; 0x2c
 800432c:	fb01 f303 	mul.w	r3, r1, r3
 8004330:	4413      	add	r3, r2
 8004332:	3354      	adds	r3, #84	; 0x54
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d109      	bne.n	800434e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800433a:	78fb      	ldrb	r3, [r7, #3]
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	212c      	movs	r1, #44	; 0x2c
 8004340:	fb01 f303 	mul.w	r3, r1, r3
 8004344:	4413      	add	r3, r2
 8004346:	3342      	adds	r3, #66	; 0x42
 8004348:	2200      	movs	r2, #0
 800434a:	701a      	strb	r2, [r3, #0]
      break;
 800434c:	e055      	b.n	80043fa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800434e:	78fb      	ldrb	r3, [r7, #3]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	212c      	movs	r1, #44	; 0x2c
 8004354:	fb01 f303 	mul.w	r3, r1, r3
 8004358:	4413      	add	r3, r2
 800435a:	3342      	adds	r3, #66	; 0x42
 800435c:	2202      	movs	r2, #2
 800435e:	701a      	strb	r2, [r3, #0]
      break;
 8004360:	e04b      	b.n	80043fa <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004362:	78bb      	ldrb	r3, [r7, #2]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d11d      	bne.n	80043a4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004368:	78fb      	ldrb	r3, [r7, #3]
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	212c      	movs	r1, #44	; 0x2c
 800436e:	fb01 f303 	mul.w	r3, r1, r3
 8004372:	4413      	add	r3, r2
 8004374:	3355      	adds	r3, #85	; 0x55
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d109      	bne.n	8004390 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800437c:	78fb      	ldrb	r3, [r7, #3]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	212c      	movs	r1, #44	; 0x2c
 8004382:	fb01 f303 	mul.w	r3, r1, r3
 8004386:	4413      	add	r3, r2
 8004388:	3342      	adds	r3, #66	; 0x42
 800438a:	2200      	movs	r2, #0
 800438c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800438e:	e034      	b.n	80043fa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004390:	78fb      	ldrb	r3, [r7, #3]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	212c      	movs	r1, #44	; 0x2c
 8004396:	fb01 f303 	mul.w	r3, r1, r3
 800439a:	4413      	add	r3, r2
 800439c:	3342      	adds	r3, #66	; 0x42
 800439e:	2202      	movs	r2, #2
 80043a0:	701a      	strb	r2, [r3, #0]
      break;
 80043a2:	e02a      	b.n	80043fa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80043a4:	78fb      	ldrb	r3, [r7, #3]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	212c      	movs	r1, #44	; 0x2c
 80043aa:	fb01 f303 	mul.w	r3, r1, r3
 80043ae:	4413      	add	r3, r2
 80043b0:	3354      	adds	r3, #84	; 0x54
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d109      	bne.n	80043cc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80043b8:	78fb      	ldrb	r3, [r7, #3]
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	212c      	movs	r1, #44	; 0x2c
 80043be:	fb01 f303 	mul.w	r3, r1, r3
 80043c2:	4413      	add	r3, r2
 80043c4:	3342      	adds	r3, #66	; 0x42
 80043c6:	2200      	movs	r2, #0
 80043c8:	701a      	strb	r2, [r3, #0]
      break;
 80043ca:	e016      	b.n	80043fa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80043cc:	78fb      	ldrb	r3, [r7, #3]
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	212c      	movs	r1, #44	; 0x2c
 80043d2:	fb01 f303 	mul.w	r3, r1, r3
 80043d6:	4413      	add	r3, r2
 80043d8:	3342      	adds	r3, #66	; 0x42
 80043da:	2202      	movs	r2, #2
 80043dc:	701a      	strb	r2, [r3, #0]
      break;
 80043de:	e00c      	b.n	80043fa <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80043e0:	78fb      	ldrb	r3, [r7, #3]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	212c      	movs	r1, #44	; 0x2c
 80043e6:	fb01 f303 	mul.w	r3, r1, r3
 80043ea:	4413      	add	r3, r2
 80043ec:	3342      	adds	r3, #66	; 0x42
 80043ee:	2200      	movs	r2, #0
 80043f0:	701a      	strb	r2, [r3, #0]
      break;
 80043f2:	e002      	b.n	80043fa <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80043f4:	bf00      	nop
 80043f6:	e000      	b.n	80043fa <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80043f8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80043fa:	78fb      	ldrb	r3, [r7, #3]
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	212c      	movs	r1, #44	; 0x2c
 8004400:	fb01 f303 	mul.w	r3, r1, r3
 8004404:	4413      	add	r3, r2
 8004406:	3344      	adds	r3, #68	; 0x44
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800440c:	78fb      	ldrb	r3, [r7, #3]
 800440e:	8b3a      	ldrh	r2, [r7, #24]
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	202c      	movs	r0, #44	; 0x2c
 8004414:	fb00 f303 	mul.w	r3, r0, r3
 8004418:	440b      	add	r3, r1
 800441a:	334c      	adds	r3, #76	; 0x4c
 800441c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800441e:	78fb      	ldrb	r3, [r7, #3]
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	212c      	movs	r1, #44	; 0x2c
 8004424:	fb01 f303 	mul.w	r3, r1, r3
 8004428:	4413      	add	r3, r2
 800442a:	3360      	adds	r3, #96	; 0x60
 800442c:	2200      	movs	r2, #0
 800442e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004430:	78fb      	ldrb	r3, [r7, #3]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	212c      	movs	r1, #44	; 0x2c
 8004436:	fb01 f303 	mul.w	r3, r1, r3
 800443a:	4413      	add	r3, r2
 800443c:	3350      	adds	r3, #80	; 0x50
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004442:	78fb      	ldrb	r3, [r7, #3]
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	212c      	movs	r1, #44	; 0x2c
 8004448:	fb01 f303 	mul.w	r3, r1, r3
 800444c:	4413      	add	r3, r2
 800444e:	3339      	adds	r3, #57	; 0x39
 8004450:	78fa      	ldrb	r2, [r7, #3]
 8004452:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004454:	78fb      	ldrb	r3, [r7, #3]
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	212c      	movs	r1, #44	; 0x2c
 800445a:	fb01 f303 	mul.w	r3, r1, r3
 800445e:	4413      	add	r3, r2
 8004460:	3361      	adds	r3, #97	; 0x61
 8004462:	2200      	movs	r2, #0
 8004464:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6818      	ldr	r0, [r3, #0]
 800446a:	78fb      	ldrb	r3, [r7, #3]
 800446c:	222c      	movs	r2, #44	; 0x2c
 800446e:	fb02 f303 	mul.w	r3, r2, r3
 8004472:	3338      	adds	r3, #56	; 0x38
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	18d1      	adds	r1, r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	461a      	mov	r2, r3
 8004480:	f005 f962 	bl	8009748 <USB_HC_StartXfer>
 8004484:	4603      	mov	r3, r0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop

08004490 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f004 fe85 	bl	80091b6 <USB_GetMode>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	f040 80f6 	bne.w	80046a0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f004 fe69 	bl	8009190 <USB_ReadInterrupts>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 80ec 	beq.w	800469e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f004 fe60 	bl	8009190 <USB_ReadInterrupts>
 80044d0:	4603      	mov	r3, r0
 80044d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044da:	d104      	bne.n	80044e6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80044e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f004 fe50 	bl	8009190 <USB_ReadInterrupts>
 80044f0:	4603      	mov	r3, r0
 80044f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044fa:	d104      	bne.n	8004506 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004504:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4618      	mov	r0, r3
 800450c:	f004 fe40 	bl	8009190 <USB_ReadInterrupts>
 8004510:	4603      	mov	r3, r0
 8004512:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004516:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800451a:	d104      	bne.n	8004526 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004524:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f004 fe30 	bl	8009190 <USB_ReadInterrupts>
 8004530:	4603      	mov	r3, r0
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b02      	cmp	r3, #2
 8004538:	d103      	bne.n	8004542 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2202      	movs	r2, #2
 8004540:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f004 fe22 	bl	8009190 <USB_ReadInterrupts>
 800454c:	4603      	mov	r3, r0
 800454e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004552:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004556:	d11c      	bne.n	8004592 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004560:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10f      	bne.n	8004592 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004572:	2110      	movs	r1, #16
 8004574:	6938      	ldr	r0, [r7, #16]
 8004576:	f004 fd31 	bl	8008fdc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800457a:	6938      	ldr	r0, [r7, #16]
 800457c:	f004 fd52 	bl	8009024 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2101      	movs	r1, #1
 8004586:	4618      	mov	r0, r3
 8004588:	f004 ff0a 	bl	80093a0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f00b f885 	bl	800f69c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f004 fdfa 	bl	8009190 <USB_ReadInterrupts>
 800459c:	4603      	mov	r3, r0
 800459e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045a6:	d102      	bne.n	80045ae <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f001 fa03 	bl	80059b4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f004 fdec 	bl	8009190 <USB_ReadInterrupts>
 80045b8:	4603      	mov	r3, r0
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b08      	cmp	r3, #8
 80045c0:	d106      	bne.n	80045d0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f00b f84e 	bl	800f664 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2208      	movs	r2, #8
 80045ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f004 fddb 	bl	8009190 <USB_ReadInterrupts>
 80045da:	4603      	mov	r3, r0
 80045dc:	f003 0310 	and.w	r3, r3, #16
 80045e0:	2b10      	cmp	r3, #16
 80045e2:	d101      	bne.n	80045e8 <HAL_HCD_IRQHandler+0x158>
 80045e4:	2301      	movs	r3, #1
 80045e6:	e000      	b.n	80045ea <HAL_HCD_IRQHandler+0x15a>
 80045e8:	2300      	movs	r3, #0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d012      	beq.n	8004614 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	699a      	ldr	r2, [r3, #24]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0210 	bic.w	r2, r2, #16
 80045fc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f001 f906 	bl	8005810 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	699a      	ldr	r2, [r3, #24]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0210 	orr.w	r2, r2, #16
 8004612:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f004 fdb9 	bl	8009190 <USB_ReadInterrupts>
 800461e:	4603      	mov	r3, r0
 8004620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004624:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004628:	d13a      	bne.n	80046a0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4618      	mov	r0, r3
 8004630:	f005 f9cc 	bl	80099cc <USB_HC_ReadInterrupt>
 8004634:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004636:	2300      	movs	r3, #0
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	e025      	b.n	8004688 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	fa22 f303 	lsr.w	r3, r2, r3
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	d018      	beq.n	8004682 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4413      	add	r3, r2
 8004658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004666:	d106      	bne.n	8004676 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	b2db      	uxtb	r3, r3
 800466c:	4619      	mov	r1, r3
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f8ab 	bl	80047ca <HCD_HC_IN_IRQHandler>
 8004674:	e005      	b.n	8004682 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	b2db      	uxtb	r3, r3
 800467a:	4619      	mov	r1, r3
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 fcc6 	bl	800500e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	3301      	adds	r3, #1
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	429a      	cmp	r2, r3
 8004690:	d3d4      	bcc.n	800463c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800469a:	615a      	str	r2, [r3, #20]
 800469c:	e000      	b.n	80046a0 <HAL_HCD_IRQHandler+0x210>
      return;
 800469e:	bf00      	nop
    }
  }
}
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b082      	sub	sp, #8
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <HAL_HCD_Start+0x16>
 80046b8:	2302      	movs	r3, #2
 80046ba:	e013      	b.n	80046e4 <HAL_HCD_Start+0x3e>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2101      	movs	r1, #1
 80046ca:	4618      	mov	r0, r3
 80046cc:	f004 fecc 	bl	8009468 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f004 fc12 	bl	8008efe <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d101      	bne.n	8004702 <HAL_HCD_Stop+0x16>
 80046fe:	2302      	movs	r3, #2
 8004700:	e00d      	b.n	800471e <HAL_HCD_Stop+0x32>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f005 fac6 	bl	8009ca0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b082      	sub	sp, #8
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f004 fe6e 	bl	8009414 <USB_ResetPort>
 8004738:	4603      	mov	r3, r0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	460b      	mov	r3, r1
 800474c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	212c      	movs	r1, #44	; 0x2c
 8004754:	fb01 f303 	mul.w	r3, r1, r3
 8004758:	4413      	add	r3, r2
 800475a:	3360      	adds	r3, #96	; 0x60
 800475c:	781b      	ldrb	r3, [r3, #0]
}
 800475e:	4618      	mov	r0, r3
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
 8004772:	460b      	mov	r3, r1
 8004774:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004776:	78fb      	ldrb	r3, [r7, #3]
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	212c      	movs	r1, #44	; 0x2c
 800477c:	fb01 f303 	mul.w	r3, r1, r3
 8004780:	4413      	add	r3, r2
 8004782:	3350      	adds	r3, #80	; 0x50
 8004784:	681b      	ldr	r3, [r3, #0]
}
 8004786:	4618      	mov	r0, r3
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b082      	sub	sp, #8
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f004 feb2 	bl	8009508 <USB_GetCurrentFrame>
 80047a4:	4603      	mov	r3, r0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b082      	sub	sp, #8
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f004 fe8d 	bl	80094da <USB_GetHostSpeed>
 80047c0:	4603      	mov	r3, r0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b086      	sub	sp, #24
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
 80047d2:	460b      	mov	r3, r1
 80047d4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80047e0:	78fb      	ldrb	r3, [r7, #3]
 80047e2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 0304 	and.w	r3, r3, #4
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d119      	bne.n	800482e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	4413      	add	r3, r2
 8004802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004806:	461a      	mov	r2, r3
 8004808:	2304      	movs	r3, #4
 800480a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	4413      	add	r3, r2
 8004814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	0151      	lsls	r1, r2, #5
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	440a      	add	r2, r1
 8004822:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004826:	f043 0302 	orr.w	r3, r3, #2
 800482a:	60d3      	str	r3, [r2, #12]
 800482c:	e101      	b.n	8004a32 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	4413      	add	r3, r2
 8004836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004844:	d12b      	bne.n	800489e <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	015a      	lsls	r2, r3, #5
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	4413      	add	r3, r2
 800484e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004852:	461a      	mov	r2, r3
 8004854:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004858:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	212c      	movs	r1, #44	; 0x2c
 8004860:	fb01 f303 	mul.w	r3, r1, r3
 8004864:	4413      	add	r3, r2
 8004866:	3361      	adds	r3, #97	; 0x61
 8004868:	2207      	movs	r2, #7
 800486a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	4413      	add	r3, r2
 8004874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	0151      	lsls	r1, r2, #5
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	440a      	add	r2, r1
 8004882:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004886:	f043 0302 	orr.w	r3, r3, #2
 800488a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	4611      	mov	r1, r2
 8004896:	4618      	mov	r0, r3
 8004898:	f005 f8a9 	bl	80099ee <USB_HC_Halt>
 800489c:	e0c9      	b.n	8004a32 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f003 0320 	and.w	r3, r3, #32
 80048b0:	2b20      	cmp	r3, #32
 80048b2:	d109      	bne.n	80048c8 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c0:	461a      	mov	r2, r3
 80048c2:	2320      	movs	r3, #32
 80048c4:	6093      	str	r3, [r2, #8]
 80048c6:	e0b4      	b.n	8004a32 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b08      	cmp	r3, #8
 80048dc:	d133      	bne.n	8004946 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	0151      	lsls	r1, r2, #5
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	440a      	add	r2, r1
 80048f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048f8:	f043 0302 	orr.w	r3, r3, #2
 80048fc:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	212c      	movs	r1, #44	; 0x2c
 8004904:	fb01 f303 	mul.w	r3, r1, r3
 8004908:	4413      	add	r3, r2
 800490a:	3361      	adds	r3, #97	; 0x61
 800490c:	2205      	movs	r2, #5
 800490e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	4413      	add	r3, r2
 8004918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800491c:	461a      	mov	r2, r3
 800491e:	2310      	movs	r3, #16
 8004920:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	4413      	add	r3, r2
 800492a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800492e:	461a      	mov	r2, r3
 8004930:	2308      	movs	r3, #8
 8004932:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	b2d2      	uxtb	r2, r2
 800493c:	4611      	mov	r1, r2
 800493e:	4618      	mov	r0, r3
 8004940:	f005 f855 	bl	80099ee <USB_HC_Halt>
 8004944:	e075      	b.n	8004a32 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	4413      	add	r3, r2
 800494e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800495c:	d134      	bne.n	80049c8 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	4413      	add	r3, r2
 8004966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	0151      	lsls	r1, r2, #5
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	440a      	add	r2, r1
 8004974:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004978:	f043 0302 	orr.w	r3, r3, #2
 800497c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	212c      	movs	r1, #44	; 0x2c
 8004984:	fb01 f303 	mul.w	r3, r1, r3
 8004988:	4413      	add	r3, r2
 800498a:	3361      	adds	r3, #97	; 0x61
 800498c:	2208      	movs	r2, #8
 800498e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	015a      	lsls	r2, r3, #5
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	4413      	add	r3, r2
 8004998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800499c:	461a      	mov	r2, r3
 800499e:	2310      	movs	r3, #16
 80049a0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ae:	461a      	mov	r2, r3
 80049b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049b4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	4611      	mov	r1, r2
 80049c0:	4618      	mov	r0, r3
 80049c2:	f005 f814 	bl	80099ee <USB_HC_Halt>
 80049c6:	e034      	b.n	8004a32 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049da:	2b80      	cmp	r3, #128	; 0x80
 80049dc:	d129      	bne.n	8004a32 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	0151      	lsls	r1, r2, #5
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	440a      	add	r2, r1
 80049f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049f8:	f043 0302 	orr.w	r3, r3, #2
 80049fc:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	212c      	movs	r1, #44	; 0x2c
 8004a04:	fb01 f303 	mul.w	r3, r1, r3
 8004a08:	4413      	add	r3, r2
 8004a0a:	3361      	adds	r3, #97	; 0x61
 8004a0c:	2206      	movs	r2, #6
 8004a0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	b2d2      	uxtb	r2, r2
 8004a18:	4611      	mov	r1, r2
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f004 ffe7 	bl	80099ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	015a      	lsls	r2, r3, #5
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	4413      	add	r3, r2
 8004a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	2380      	movs	r3, #128	; 0x80
 8004a30:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	015a      	lsls	r2, r3, #5
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a48:	d122      	bne.n	8004a90 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	0151      	lsls	r1, r2, #5
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	440a      	add	r2, r1
 8004a60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a64:	f043 0302 	orr.w	r3, r3, #2
 8004a68:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	4611      	mov	r1, r2
 8004a74:	4618      	mov	r0, r3
 8004a76:	f004 ffba 	bl	80099ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a86:	461a      	mov	r2, r3
 8004a88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a8c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004a8e:	e2ba      	b.n	8005006 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	f040 811b 	bne.w	8004cde <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d019      	beq.n	8004ae4 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	212c      	movs	r1, #44	; 0x2c
 8004ab6:	fb01 f303 	mul.w	r3, r1, r3
 8004aba:	4413      	add	r3, r2
 8004abc:	3348      	adds	r3, #72	; 0x48
 8004abe:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	0159      	lsls	r1, r3, #5
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	440b      	add	r3, r1
 8004ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004ad2:	1ad2      	subs	r2, r2, r3
 8004ad4:	6879      	ldr	r1, [r7, #4]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	202c      	movs	r0, #44	; 0x2c
 8004ada:	fb00 f303 	mul.w	r3, r0, r3
 8004ade:	440b      	add	r3, r1
 8004ae0:	3350      	adds	r3, #80	; 0x50
 8004ae2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	212c      	movs	r1, #44	; 0x2c
 8004aea:	fb01 f303 	mul.w	r3, r1, r3
 8004aee:	4413      	add	r3, r2
 8004af0:	3361      	adds	r3, #97	; 0x61
 8004af2:	2201      	movs	r2, #1
 8004af4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	212c      	movs	r1, #44	; 0x2c
 8004afc:	fb01 f303 	mul.w	r3, r1, r3
 8004b00:	4413      	add	r3, r2
 8004b02:	335c      	adds	r3, #92	; 0x5c
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b14:	461a      	mov	r2, r3
 8004b16:	2301      	movs	r3, #1
 8004b18:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	212c      	movs	r1, #44	; 0x2c
 8004b20:	fb01 f303 	mul.w	r3, r1, r3
 8004b24:	4413      	add	r3, r2
 8004b26:	333f      	adds	r3, #63	; 0x3f
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d009      	beq.n	8004b42 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	212c      	movs	r1, #44	; 0x2c
 8004b34:	fb01 f303 	mul.w	r3, r1, r3
 8004b38:	4413      	add	r3, r2
 8004b3a:	333f      	adds	r3, #63	; 0x3f
 8004b3c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d121      	bne.n	8004b86 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	0151      	lsls	r1, r2, #5
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	440a      	add	r2, r1
 8004b58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b5c:	f043 0302 	orr.w	r3, r3, #2
 8004b60:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	b2d2      	uxtb	r2, r2
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f004 ff3e 	bl	80099ee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b7e:	461a      	mov	r2, r3
 8004b80:	2310      	movs	r3, #16
 8004b82:	6093      	str	r3, [r2, #8]
 8004b84:	e066      	b.n	8004c54 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	212c      	movs	r1, #44	; 0x2c
 8004b8c:	fb01 f303 	mul.w	r3, r1, r3
 8004b90:	4413      	add	r3, r2
 8004b92:	333f      	adds	r3, #63	; 0x3f
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2b03      	cmp	r3, #3
 8004b98:	d127      	bne.n	8004bea <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	0151      	lsls	r1, r2, #5
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	440a      	add	r2, r1
 8004bb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bb8:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	212c      	movs	r1, #44	; 0x2c
 8004bc0:	fb01 f303 	mul.w	r3, r1, r3
 8004bc4:	4413      	add	r3, r2
 8004bc6:	3360      	adds	r3, #96	; 0x60
 8004bc8:	2201      	movs	r2, #1
 8004bca:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	b2d9      	uxtb	r1, r3
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	202c      	movs	r0, #44	; 0x2c
 8004bd6:	fb00 f303 	mul.w	r3, r0, r3
 8004bda:	4413      	add	r3, r2
 8004bdc:	3360      	adds	r3, #96	; 0x60
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	461a      	mov	r2, r3
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f00a fd68 	bl	800f6b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004be8:	e034      	b.n	8004c54 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	212c      	movs	r1, #44	; 0x2c
 8004bf0:	fb01 f303 	mul.w	r3, r1, r3
 8004bf4:	4413      	add	r3, r2
 8004bf6:	333f      	adds	r3, #63	; 0x3f
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d12a      	bne.n	8004c54 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	212c      	movs	r1, #44	; 0x2c
 8004c04:	fb01 f303 	mul.w	r3, r1, r3
 8004c08:	4413      	add	r3, r2
 8004c0a:	3360      	adds	r3, #96	; 0x60
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	212c      	movs	r1, #44	; 0x2c
 8004c16:	fb01 f303 	mul.w	r3, r1, r3
 8004c1a:	4413      	add	r3, r2
 8004c1c:	3354      	adds	r3, #84	; 0x54
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	f083 0301 	eor.w	r3, r3, #1
 8004c24:	b2d8      	uxtb	r0, r3
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	212c      	movs	r1, #44	; 0x2c
 8004c2c:	fb01 f303 	mul.w	r3, r1, r3
 8004c30:	4413      	add	r3, r2
 8004c32:	3354      	adds	r3, #84	; 0x54
 8004c34:	4602      	mov	r2, r0
 8004c36:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	b2d9      	uxtb	r1, r3
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	202c      	movs	r0, #44	; 0x2c
 8004c42:	fb00 f303 	mul.w	r3, r0, r3
 8004c46:	4413      	add	r3, r2
 8004c48:	3360      	adds	r3, #96	; 0x60
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f00a fd32 	bl	800f6b8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d12b      	bne.n	8004cb4 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	212c      	movs	r1, #44	; 0x2c
 8004c62:	fb01 f303 	mul.w	r3, r1, r3
 8004c66:	4413      	add	r3, r2
 8004c68:	3348      	adds	r3, #72	; 0x48
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	202c      	movs	r0, #44	; 0x2c
 8004c72:	fb00 f202 	mul.w	r2, r0, r2
 8004c76:	440a      	add	r2, r1
 8004c78:	3240      	adds	r2, #64	; 0x40
 8004c7a:	8812      	ldrh	r2, [r2, #0]
 8004c7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 81be 	beq.w	8005006 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	212c      	movs	r1, #44	; 0x2c
 8004c90:	fb01 f303 	mul.w	r3, r1, r3
 8004c94:	4413      	add	r3, r2
 8004c96:	3354      	adds	r3, #84	; 0x54
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	f083 0301 	eor.w	r3, r3, #1
 8004c9e:	b2d8      	uxtb	r0, r3
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	212c      	movs	r1, #44	; 0x2c
 8004ca6:	fb01 f303 	mul.w	r3, r1, r3
 8004caa:	4413      	add	r3, r2
 8004cac:	3354      	adds	r3, #84	; 0x54
 8004cae:	4602      	mov	r2, r0
 8004cb0:	701a      	strb	r2, [r3, #0]
}
 8004cb2:	e1a8      	b.n	8005006 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	212c      	movs	r1, #44	; 0x2c
 8004cba:	fb01 f303 	mul.w	r3, r1, r3
 8004cbe:	4413      	add	r3, r2
 8004cc0:	3354      	adds	r3, #84	; 0x54
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	f083 0301 	eor.w	r3, r3, #1
 8004cc8:	b2d8      	uxtb	r0, r3
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	212c      	movs	r1, #44	; 0x2c
 8004cd0:	fb01 f303 	mul.w	r3, r1, r3
 8004cd4:	4413      	add	r3, r2
 8004cd6:	3354      	adds	r3, #84	; 0x54
 8004cd8:	4602      	mov	r2, r0
 8004cda:	701a      	strb	r2, [r3, #0]
}
 8004cdc:	e193      	b.n	8005006 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	015a      	lsls	r2, r3, #5
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	f040 8106 	bne.w	8004f02 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	0151      	lsls	r1, r2, #5
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	440a      	add	r2, r1
 8004d0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d10:	f023 0302 	bic.w	r3, r3, #2
 8004d14:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	212c      	movs	r1, #44	; 0x2c
 8004d1c:	fb01 f303 	mul.w	r3, r1, r3
 8004d20:	4413      	add	r3, r2
 8004d22:	3361      	adds	r3, #97	; 0x61
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d109      	bne.n	8004d3e <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	212c      	movs	r1, #44	; 0x2c
 8004d30:	fb01 f303 	mul.w	r3, r1, r3
 8004d34:	4413      	add	r3, r2
 8004d36:	3360      	adds	r3, #96	; 0x60
 8004d38:	2201      	movs	r2, #1
 8004d3a:	701a      	strb	r2, [r3, #0]
 8004d3c:	e0c9      	b.n	8004ed2 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	212c      	movs	r1, #44	; 0x2c
 8004d44:	fb01 f303 	mul.w	r3, r1, r3
 8004d48:	4413      	add	r3, r2
 8004d4a:	3361      	adds	r3, #97	; 0x61
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	2b05      	cmp	r3, #5
 8004d50:	d109      	bne.n	8004d66 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	212c      	movs	r1, #44	; 0x2c
 8004d58:	fb01 f303 	mul.w	r3, r1, r3
 8004d5c:	4413      	add	r3, r2
 8004d5e:	3360      	adds	r3, #96	; 0x60
 8004d60:	2205      	movs	r2, #5
 8004d62:	701a      	strb	r2, [r3, #0]
 8004d64:	e0b5      	b.n	8004ed2 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	212c      	movs	r1, #44	; 0x2c
 8004d6c:	fb01 f303 	mul.w	r3, r1, r3
 8004d70:	4413      	add	r3, r2
 8004d72:	3361      	adds	r3, #97	; 0x61
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2b06      	cmp	r3, #6
 8004d78:	d009      	beq.n	8004d8e <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	212c      	movs	r1, #44	; 0x2c
 8004d80:	fb01 f303 	mul.w	r3, r1, r3
 8004d84:	4413      	add	r3, r2
 8004d86:	3361      	adds	r3, #97	; 0x61
 8004d88:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004d8a:	2b08      	cmp	r3, #8
 8004d8c:	d150      	bne.n	8004e30 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	212c      	movs	r1, #44	; 0x2c
 8004d94:	fb01 f303 	mul.w	r3, r1, r3
 8004d98:	4413      	add	r3, r2
 8004d9a:	335c      	adds	r3, #92	; 0x5c
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	1c5a      	adds	r2, r3, #1
 8004da0:	6879      	ldr	r1, [r7, #4]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	202c      	movs	r0, #44	; 0x2c
 8004da6:	fb00 f303 	mul.w	r3, r0, r3
 8004daa:	440b      	add	r3, r1
 8004dac:	335c      	adds	r3, #92	; 0x5c
 8004dae:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	212c      	movs	r1, #44	; 0x2c
 8004db6:	fb01 f303 	mul.w	r3, r1, r3
 8004dba:	4413      	add	r3, r2
 8004dbc:	335c      	adds	r3, #92	; 0x5c
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d912      	bls.n	8004dea <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	212c      	movs	r1, #44	; 0x2c
 8004dca:	fb01 f303 	mul.w	r3, r1, r3
 8004dce:	4413      	add	r3, r2
 8004dd0:	335c      	adds	r3, #92	; 0x5c
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	212c      	movs	r1, #44	; 0x2c
 8004ddc:	fb01 f303 	mul.w	r3, r1, r3
 8004de0:	4413      	add	r3, r2
 8004de2:	3360      	adds	r3, #96	; 0x60
 8004de4:	2204      	movs	r2, #4
 8004de6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004de8:	e073      	b.n	8004ed2 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	212c      	movs	r1, #44	; 0x2c
 8004df0:	fb01 f303 	mul.w	r3, r1, r3
 8004df4:	4413      	add	r3, r2
 8004df6:	3360      	adds	r3, #96	; 0x60
 8004df8:	2202      	movs	r2, #2
 8004dfa:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e12:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e1a:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e28:	461a      	mov	r2, r3
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004e2e:	e050      	b.n	8004ed2 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	212c      	movs	r1, #44	; 0x2c
 8004e36:	fb01 f303 	mul.w	r3, r1, r3
 8004e3a:	4413      	add	r3, r2
 8004e3c:	3361      	adds	r3, #97	; 0x61
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	2b03      	cmp	r3, #3
 8004e42:	d122      	bne.n	8004e8a <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	212c      	movs	r1, #44	; 0x2c
 8004e4a:	fb01 f303 	mul.w	r3, r1, r3
 8004e4e:	4413      	add	r3, r2
 8004e50:	3360      	adds	r3, #96	; 0x60
 8004e52:	2202      	movs	r2, #2
 8004e54:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e6c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e74:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e82:	461a      	mov	r2, r3
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	e023      	b.n	8004ed2 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	212c      	movs	r1, #44	; 0x2c
 8004e90:	fb01 f303 	mul.w	r3, r1, r3
 8004e94:	4413      	add	r3, r2
 8004e96:	3361      	adds	r3, #97	; 0x61
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b07      	cmp	r3, #7
 8004e9c:	d119      	bne.n	8004ed2 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	212c      	movs	r1, #44	; 0x2c
 8004ea4:	fb01 f303 	mul.w	r3, r1, r3
 8004ea8:	4413      	add	r3, r2
 8004eaa:	335c      	adds	r3, #92	; 0x5c
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	6879      	ldr	r1, [r7, #4]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	202c      	movs	r0, #44	; 0x2c
 8004eb6:	fb00 f303 	mul.w	r3, r0, r3
 8004eba:	440b      	add	r3, r1
 8004ebc:	335c      	adds	r3, #92	; 0x5c
 8004ebe:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	212c      	movs	r1, #44	; 0x2c
 8004ec6:	fb01 f303 	mul.w	r3, r1, r3
 8004eca:	4413      	add	r3, r2
 8004ecc:	3360      	adds	r3, #96	; 0x60
 8004ece:	2204      	movs	r2, #4
 8004ed0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ede:	461a      	mov	r2, r3
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	b2d9      	uxtb	r1, r3
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	202c      	movs	r0, #44	; 0x2c
 8004eee:	fb00 f303 	mul.w	r3, r0, r3
 8004ef2:	4413      	add	r3, r2
 8004ef4:	3360      	adds	r3, #96	; 0x60
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f00a fbdc 	bl	800f6b8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004f00:	e081      	b.n	8005006 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f003 0310 	and.w	r3, r3, #16
 8004f14:	2b10      	cmp	r3, #16
 8004f16:	d176      	bne.n	8005006 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	212c      	movs	r1, #44	; 0x2c
 8004f1e:	fb01 f303 	mul.w	r3, r1, r3
 8004f22:	4413      	add	r3, r2
 8004f24:	333f      	adds	r3, #63	; 0x3f
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b03      	cmp	r3, #3
 8004f2a:	d121      	bne.n	8004f70 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	212c      	movs	r1, #44	; 0x2c
 8004f32:	fb01 f303 	mul.w	r3, r1, r3
 8004f36:	4413      	add	r3, r2
 8004f38:	335c      	adds	r3, #92	; 0x5c
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	0151      	lsls	r1, r2, #5
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	440a      	add	r2, r1
 8004f54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f58:	f043 0302 	orr.w	r3, r3, #2
 8004f5c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	b2d2      	uxtb	r2, r2
 8004f66:	4611      	mov	r1, r2
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f004 fd40 	bl	80099ee <USB_HC_Halt>
 8004f6e:	e041      	b.n	8004ff4 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	212c      	movs	r1, #44	; 0x2c
 8004f76:	fb01 f303 	mul.w	r3, r1, r3
 8004f7a:	4413      	add	r3, r2
 8004f7c:	333f      	adds	r3, #63	; 0x3f
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d009      	beq.n	8004f98 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	212c      	movs	r1, #44	; 0x2c
 8004f8a:	fb01 f303 	mul.w	r3, r1, r3
 8004f8e:	4413      	add	r3, r2
 8004f90:	333f      	adds	r3, #63	; 0x3f
 8004f92:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d12d      	bne.n	8004ff4 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	212c      	movs	r1, #44	; 0x2c
 8004f9e:	fb01 f303 	mul.w	r3, r1, r3
 8004fa2:	4413      	add	r3, r2
 8004fa4:	335c      	adds	r3, #92	; 0x5c
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d120      	bne.n	8004ff4 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	212c      	movs	r1, #44	; 0x2c
 8004fb8:	fb01 f303 	mul.w	r3, r1, r3
 8004fbc:	4413      	add	r3, r2
 8004fbe:	3361      	adds	r3, #97	; 0x61
 8004fc0:	2203      	movs	r2, #3
 8004fc2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	0151      	lsls	r1, r2, #5
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	440a      	add	r2, r1
 8004fda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fde:	f043 0302 	orr.w	r3, r3, #2
 8004fe2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	b2d2      	uxtb	r2, r2
 8004fec:	4611      	mov	r1, r2
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f004 fcfd 	bl	80099ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005000:	461a      	mov	r2, r3
 8005002:	2310      	movs	r3, #16
 8005004:	6093      	str	r3, [r2, #8]
}
 8005006:	bf00      	nop
 8005008:	3718      	adds	r7, #24
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b088      	sub	sp, #32
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
 8005016:	460b      	mov	r3, r1
 8005018:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8005024:	78fb      	ldrb	r3, [r7, #3]
 8005026:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	4413      	add	r3, r2
 8005030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f003 0304 	and.w	r3, r3, #4
 800503a:	2b04      	cmp	r3, #4
 800503c:	d119      	bne.n	8005072 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	4413      	add	r3, r2
 8005046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800504a:	461a      	mov	r2, r3
 800504c:	2304      	movs	r3, #4
 800504e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	4413      	add	r3, r2
 8005058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	0151      	lsls	r1, r2, #5
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	440a      	add	r2, r1
 8005066:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800506a:	f043 0302 	orr.w	r3, r3, #2
 800506e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005070:	e3ca      	b.n	8005808 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	4413      	add	r3, r2
 800507a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f003 0320 	and.w	r3, r3, #32
 8005084:	2b20      	cmp	r3, #32
 8005086:	d13e      	bne.n	8005106 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	015a      	lsls	r2, r3, #5
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	4413      	add	r3, r2
 8005090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005094:	461a      	mov	r2, r3
 8005096:	2320      	movs	r3, #32
 8005098:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	212c      	movs	r1, #44	; 0x2c
 80050a0:	fb01 f303 	mul.w	r3, r1, r3
 80050a4:	4413      	add	r3, r2
 80050a6:	333d      	adds	r3, #61	; 0x3d
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	f040 83ac 	bne.w	8005808 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	212c      	movs	r1, #44	; 0x2c
 80050b6:	fb01 f303 	mul.w	r3, r1, r3
 80050ba:	4413      	add	r3, r2
 80050bc:	333d      	adds	r3, #61	; 0x3d
 80050be:	2200      	movs	r2, #0
 80050c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	212c      	movs	r1, #44	; 0x2c
 80050c8:	fb01 f303 	mul.w	r3, r1, r3
 80050cc:	4413      	add	r3, r2
 80050ce:	3360      	adds	r3, #96	; 0x60
 80050d0:	2202      	movs	r2, #2
 80050d2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	0151      	lsls	r1, r2, #5
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	440a      	add	r2, r1
 80050ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050ee:	f043 0302 	orr.w	r3, r3, #2
 80050f2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	4611      	mov	r1, r2
 80050fe:	4618      	mov	r0, r3
 8005100:	f004 fc75 	bl	80099ee <USB_HC_Halt>
}
 8005104:	e380      	b.n	8005808 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	4413      	add	r3, r2
 800510e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800511c:	d122      	bne.n	8005164 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	4413      	add	r3, r2
 8005126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	0151      	lsls	r1, r2, #5
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	440a      	add	r2, r1
 8005134:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005138:	f043 0302 	orr.w	r3, r3, #2
 800513c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	b2d2      	uxtb	r2, r2
 8005146:	4611      	mov	r1, r2
 8005148:	4618      	mov	r0, r3
 800514a:	f004 fc50 	bl	80099ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	4413      	add	r3, r2
 8005156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800515a:	461a      	mov	r2, r3
 800515c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005160:	6093      	str	r3, [r2, #8]
}
 8005162:	e351      	b.n	8005808 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	4413      	add	r3, r2
 800516c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b01      	cmp	r3, #1
 8005178:	d150      	bne.n	800521c <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	212c      	movs	r1, #44	; 0x2c
 8005180:	fb01 f303 	mul.w	r3, r1, r3
 8005184:	4413      	add	r3, r2
 8005186:	335c      	adds	r3, #92	; 0x5c
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	4413      	add	r3, r2
 8005194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519e:	2b40      	cmp	r3, #64	; 0x40
 80051a0:	d111      	bne.n	80051c6 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	212c      	movs	r1, #44	; 0x2c
 80051a8:	fb01 f303 	mul.w	r3, r1, r3
 80051ac:	4413      	add	r3, r2
 80051ae:	333d      	adds	r3, #61	; 0x3d
 80051b0:	2201      	movs	r2, #1
 80051b2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c0:	461a      	mov	r2, r3
 80051c2:	2340      	movs	r3, #64	; 0x40
 80051c4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	0151      	lsls	r1, r2, #5
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	440a      	add	r2, r1
 80051dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051e0:	f043 0302 	orr.w	r3, r3, #2
 80051e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	b2d2      	uxtb	r2, r2
 80051ee:	4611      	mov	r1, r2
 80051f0:	4618      	mov	r0, r3
 80051f2:	f004 fbfc 	bl	80099ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005202:	461a      	mov	r2, r3
 8005204:	2301      	movs	r3, #1
 8005206:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	212c      	movs	r1, #44	; 0x2c
 800520e:	fb01 f303 	mul.w	r3, r1, r3
 8005212:	4413      	add	r3, r2
 8005214:	3361      	adds	r3, #97	; 0x61
 8005216:	2201      	movs	r2, #1
 8005218:	701a      	strb	r2, [r3, #0]
}
 800521a:	e2f5      	b.n	8005808 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	4413      	add	r3, r2
 8005224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800522e:	2b40      	cmp	r3, #64	; 0x40
 8005230:	d13c      	bne.n	80052ac <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	212c      	movs	r1, #44	; 0x2c
 8005238:	fb01 f303 	mul.w	r3, r1, r3
 800523c:	4413      	add	r3, r2
 800523e:	3361      	adds	r3, #97	; 0x61
 8005240:	2204      	movs	r2, #4
 8005242:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	212c      	movs	r1, #44	; 0x2c
 800524a:	fb01 f303 	mul.w	r3, r1, r3
 800524e:	4413      	add	r3, r2
 8005250:	333d      	adds	r3, #61	; 0x3d
 8005252:	2201      	movs	r2, #1
 8005254:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	212c      	movs	r1, #44	; 0x2c
 800525c:	fb01 f303 	mul.w	r3, r1, r3
 8005260:	4413      	add	r3, r2
 8005262:	335c      	adds	r3, #92	; 0x5c
 8005264:	2200      	movs	r2, #0
 8005266:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	4413      	add	r3, r2
 8005270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	0151      	lsls	r1, r2, #5
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	440a      	add	r2, r1
 800527e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005282:	f043 0302 	orr.w	r3, r3, #2
 8005286:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	4611      	mov	r1, r2
 8005292:	4618      	mov	r0, r3
 8005294:	f004 fbab 	bl	80099ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a4:	461a      	mov	r2, r3
 80052a6:	2340      	movs	r3, #64	; 0x40
 80052a8:	6093      	str	r3, [r2, #8]
}
 80052aa:	e2ad      	b.n	8005808 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f003 0308 	and.w	r3, r3, #8
 80052be:	2b08      	cmp	r3, #8
 80052c0:	d12a      	bne.n	8005318 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ce:	461a      	mov	r2, r3
 80052d0:	2308      	movs	r3, #8
 80052d2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	0151      	lsls	r1, r2, #5
 80052e6:	69ba      	ldr	r2, [r7, #24]
 80052e8:	440a      	add	r2, r1
 80052ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052ee:	f043 0302 	orr.w	r3, r3, #2
 80052f2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	b2d2      	uxtb	r2, r2
 80052fc:	4611      	mov	r1, r2
 80052fe:	4618      	mov	r0, r3
 8005300:	f004 fb75 	bl	80099ee <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	212c      	movs	r1, #44	; 0x2c
 800530a:	fb01 f303 	mul.w	r3, r1, r3
 800530e:	4413      	add	r3, r2
 8005310:	3361      	adds	r3, #97	; 0x61
 8005312:	2205      	movs	r2, #5
 8005314:	701a      	strb	r2, [r3, #0]
}
 8005316:	e277      	b.n	8005808 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	015a      	lsls	r2, r3, #5
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	4413      	add	r3, r2
 8005320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f003 0310 	and.w	r3, r3, #16
 800532a:	2b10      	cmp	r3, #16
 800532c:	d150      	bne.n	80053d0 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	212c      	movs	r1, #44	; 0x2c
 8005334:	fb01 f303 	mul.w	r3, r1, r3
 8005338:	4413      	add	r3, r2
 800533a:	335c      	adds	r3, #92	; 0x5c
 800533c:	2200      	movs	r2, #0
 800533e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	212c      	movs	r1, #44	; 0x2c
 8005346:	fb01 f303 	mul.w	r3, r1, r3
 800534a:	4413      	add	r3, r2
 800534c:	3361      	adds	r3, #97	; 0x61
 800534e:	2203      	movs	r2, #3
 8005350:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	212c      	movs	r1, #44	; 0x2c
 8005358:	fb01 f303 	mul.w	r3, r1, r3
 800535c:	4413      	add	r3, r2
 800535e:	333d      	adds	r3, #61	; 0x3d
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d112      	bne.n	800538c <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	212c      	movs	r1, #44	; 0x2c
 800536c:	fb01 f303 	mul.w	r3, r1, r3
 8005370:	4413      	add	r3, r2
 8005372:	333c      	adds	r3, #60	; 0x3c
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d108      	bne.n	800538c <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	212c      	movs	r1, #44	; 0x2c
 8005380:	fb01 f303 	mul.w	r3, r1, r3
 8005384:	4413      	add	r3, r2
 8005386:	333d      	adds	r3, #61	; 0x3d
 8005388:	2201      	movs	r2, #1
 800538a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	4413      	add	r3, r2
 8005394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	0151      	lsls	r1, r2, #5
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	440a      	add	r2, r1
 80053a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053a6:	f043 0302 	orr.w	r3, r3, #2
 80053aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	b2d2      	uxtb	r2, r2
 80053b4:	4611      	mov	r1, r2
 80053b6:	4618      	mov	r0, r3
 80053b8:	f004 fb19 	bl	80099ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c8:	461a      	mov	r2, r3
 80053ca:	2310      	movs	r3, #16
 80053cc:	6093      	str	r3, [r2, #8]
}
 80053ce:	e21b      	b.n	8005808 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e2:	2b80      	cmp	r3, #128	; 0x80
 80053e4:	d174      	bne.n	80054d0 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d121      	bne.n	8005432 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	212c      	movs	r1, #44	; 0x2c
 80053f4:	fb01 f303 	mul.w	r3, r1, r3
 80053f8:	4413      	add	r3, r2
 80053fa:	3361      	adds	r3, #97	; 0x61
 80053fc:	2206      	movs	r2, #6
 80053fe:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	4413      	add	r3, r2
 8005408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	0151      	lsls	r1, r2, #5
 8005412:	69ba      	ldr	r2, [r7, #24]
 8005414:	440a      	add	r2, r1
 8005416:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800541a:	f043 0302 	orr.w	r3, r3, #2
 800541e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	4611      	mov	r1, r2
 800542a:	4618      	mov	r0, r3
 800542c:	f004 fadf 	bl	80099ee <USB_HC_Halt>
 8005430:	e044      	b.n	80054bc <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	212c      	movs	r1, #44	; 0x2c
 8005438:	fb01 f303 	mul.w	r3, r1, r3
 800543c:	4413      	add	r3, r2
 800543e:	335c      	adds	r3, #92	; 0x5c
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	1c5a      	adds	r2, r3, #1
 8005444:	6879      	ldr	r1, [r7, #4]
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	202c      	movs	r0, #44	; 0x2c
 800544a:	fb00 f303 	mul.w	r3, r0, r3
 800544e:	440b      	add	r3, r1
 8005450:	335c      	adds	r3, #92	; 0x5c
 8005452:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	212c      	movs	r1, #44	; 0x2c
 800545a:	fb01 f303 	mul.w	r3, r1, r3
 800545e:	4413      	add	r3, r2
 8005460:	335c      	adds	r3, #92	; 0x5c
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b02      	cmp	r3, #2
 8005466:	d920      	bls.n	80054aa <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	212c      	movs	r1, #44	; 0x2c
 800546e:	fb01 f303 	mul.w	r3, r1, r3
 8005472:	4413      	add	r3, r2
 8005474:	335c      	adds	r3, #92	; 0x5c
 8005476:	2200      	movs	r2, #0
 8005478:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	212c      	movs	r1, #44	; 0x2c
 8005480:	fb01 f303 	mul.w	r3, r1, r3
 8005484:	4413      	add	r3, r2
 8005486:	3360      	adds	r3, #96	; 0x60
 8005488:	2204      	movs	r2, #4
 800548a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	b2d9      	uxtb	r1, r3
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	202c      	movs	r0, #44	; 0x2c
 8005496:	fb00 f303 	mul.w	r3, r0, r3
 800549a:	4413      	add	r3, r2
 800549c:	3360      	adds	r3, #96	; 0x60
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	461a      	mov	r2, r3
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f00a f908 	bl	800f6b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80054a8:	e008      	b.n	80054bc <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	212c      	movs	r1, #44	; 0x2c
 80054b0:	fb01 f303 	mul.w	r3, r1, r3
 80054b4:	4413      	add	r3, r2
 80054b6:	3360      	adds	r3, #96	; 0x60
 80054b8:	2202      	movs	r2, #2
 80054ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c8:	461a      	mov	r2, r3
 80054ca:	2380      	movs	r3, #128	; 0x80
 80054cc:	6093      	str	r3, [r2, #8]
}
 80054ce:	e19b      	b.n	8005808 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e6:	d134      	bne.n	8005552 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	0151      	lsls	r1, r2, #5
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	440a      	add	r2, r1
 80054fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005502:	f043 0302 	orr.w	r3, r3, #2
 8005506:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	4611      	mov	r1, r2
 8005512:	4618      	mov	r0, r3
 8005514:	f004 fa6b 	bl	80099ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	4413      	add	r3, r2
 8005520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005524:	461a      	mov	r2, r3
 8005526:	2310      	movs	r3, #16
 8005528:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	4413      	add	r3, r2
 8005532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005536:	461a      	mov	r2, r3
 8005538:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800553c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	212c      	movs	r1, #44	; 0x2c
 8005544:	fb01 f303 	mul.w	r3, r1, r3
 8005548:	4413      	add	r3, r2
 800554a:	3361      	adds	r3, #97	; 0x61
 800554c:	2208      	movs	r2, #8
 800554e:	701a      	strb	r2, [r3, #0]
}
 8005550:	e15a      	b.n	8005808 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	015a      	lsls	r2, r3, #5
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	4413      	add	r3, r2
 800555a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b02      	cmp	r3, #2
 8005566:	f040 814f 	bne.w	8005808 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	015a      	lsls	r2, r3, #5
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	4413      	add	r3, r2
 8005572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	0151      	lsls	r1, r2, #5
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	440a      	add	r2, r1
 8005580:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005584:	f023 0302 	bic.w	r3, r3, #2
 8005588:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	212c      	movs	r1, #44	; 0x2c
 8005590:	fb01 f303 	mul.w	r3, r1, r3
 8005594:	4413      	add	r3, r2
 8005596:	3361      	adds	r3, #97	; 0x61
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d17d      	bne.n	800569a <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	212c      	movs	r1, #44	; 0x2c
 80055a4:	fb01 f303 	mul.w	r3, r1, r3
 80055a8:	4413      	add	r3, r2
 80055aa:	3360      	adds	r3, #96	; 0x60
 80055ac:	2201      	movs	r2, #1
 80055ae:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	212c      	movs	r1, #44	; 0x2c
 80055b6:	fb01 f303 	mul.w	r3, r1, r3
 80055ba:	4413      	add	r3, r2
 80055bc:	333f      	adds	r3, #63	; 0x3f
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d00a      	beq.n	80055da <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	212c      	movs	r1, #44	; 0x2c
 80055ca:	fb01 f303 	mul.w	r3, r1, r3
 80055ce:	4413      	add	r3, r2
 80055d0:	333f      	adds	r3, #63	; 0x3f
 80055d2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80055d4:	2b03      	cmp	r3, #3
 80055d6:	f040 8100 	bne.w	80057da <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d113      	bne.n	800560a <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	212c      	movs	r1, #44	; 0x2c
 80055e8:	fb01 f303 	mul.w	r3, r1, r3
 80055ec:	4413      	add	r3, r2
 80055ee:	3355      	adds	r3, #85	; 0x55
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	f083 0301 	eor.w	r3, r3, #1
 80055f6:	b2d8      	uxtb	r0, r3
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	212c      	movs	r1, #44	; 0x2c
 80055fe:	fb01 f303 	mul.w	r3, r1, r3
 8005602:	4413      	add	r3, r2
 8005604:	3355      	adds	r3, #85	; 0x55
 8005606:	4602      	mov	r2, r0
 8005608:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	2b01      	cmp	r3, #1
 8005610:	f040 80e3 	bne.w	80057da <HCD_HC_OUT_IRQHandler+0x7cc>
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	212c      	movs	r1, #44	; 0x2c
 800561a:	fb01 f303 	mul.w	r3, r1, r3
 800561e:	4413      	add	r3, r2
 8005620:	334c      	adds	r3, #76	; 0x4c
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 80d8 	beq.w	80057da <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	212c      	movs	r1, #44	; 0x2c
 8005630:	fb01 f303 	mul.w	r3, r1, r3
 8005634:	4413      	add	r3, r2
 8005636:	334c      	adds	r3, #76	; 0x4c
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	202c      	movs	r0, #44	; 0x2c
 8005640:	fb00 f202 	mul.w	r2, r0, r2
 8005644:	440a      	add	r2, r1
 8005646:	3240      	adds	r2, #64	; 0x40
 8005648:	8812      	ldrh	r2, [r2, #0]
 800564a:	4413      	add	r3, r2
 800564c:	3b01      	subs	r3, #1
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	202c      	movs	r0, #44	; 0x2c
 8005654:	fb00 f202 	mul.w	r2, r0, r2
 8005658:	440a      	add	r2, r1
 800565a:	3240      	adds	r2, #64	; 0x40
 800565c:	8812      	ldrh	r2, [r2, #0]
 800565e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005662:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 80b5 	beq.w	80057da <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	212c      	movs	r1, #44	; 0x2c
 8005676:	fb01 f303 	mul.w	r3, r1, r3
 800567a:	4413      	add	r3, r2
 800567c:	3355      	adds	r3, #85	; 0x55
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	f083 0301 	eor.w	r3, r3, #1
 8005684:	b2d8      	uxtb	r0, r3
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	212c      	movs	r1, #44	; 0x2c
 800568c:	fb01 f303 	mul.w	r3, r1, r3
 8005690:	4413      	add	r3, r2
 8005692:	3355      	adds	r3, #85	; 0x55
 8005694:	4602      	mov	r2, r0
 8005696:	701a      	strb	r2, [r3, #0]
 8005698:	e09f      	b.n	80057da <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	212c      	movs	r1, #44	; 0x2c
 80056a0:	fb01 f303 	mul.w	r3, r1, r3
 80056a4:	4413      	add	r3, r2
 80056a6:	3361      	adds	r3, #97	; 0x61
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	2b03      	cmp	r3, #3
 80056ac:	d109      	bne.n	80056c2 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	212c      	movs	r1, #44	; 0x2c
 80056b4:	fb01 f303 	mul.w	r3, r1, r3
 80056b8:	4413      	add	r3, r2
 80056ba:	3360      	adds	r3, #96	; 0x60
 80056bc:	2202      	movs	r2, #2
 80056be:	701a      	strb	r2, [r3, #0]
 80056c0:	e08b      	b.n	80057da <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	212c      	movs	r1, #44	; 0x2c
 80056c8:	fb01 f303 	mul.w	r3, r1, r3
 80056cc:	4413      	add	r3, r2
 80056ce:	3361      	adds	r3, #97	; 0x61
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	2b04      	cmp	r3, #4
 80056d4:	d109      	bne.n	80056ea <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	212c      	movs	r1, #44	; 0x2c
 80056dc:	fb01 f303 	mul.w	r3, r1, r3
 80056e0:	4413      	add	r3, r2
 80056e2:	3360      	adds	r3, #96	; 0x60
 80056e4:	2202      	movs	r2, #2
 80056e6:	701a      	strb	r2, [r3, #0]
 80056e8:	e077      	b.n	80057da <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	212c      	movs	r1, #44	; 0x2c
 80056f0:	fb01 f303 	mul.w	r3, r1, r3
 80056f4:	4413      	add	r3, r2
 80056f6:	3361      	adds	r3, #97	; 0x61
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	2b05      	cmp	r3, #5
 80056fc:	d109      	bne.n	8005712 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	212c      	movs	r1, #44	; 0x2c
 8005704:	fb01 f303 	mul.w	r3, r1, r3
 8005708:	4413      	add	r3, r2
 800570a:	3360      	adds	r3, #96	; 0x60
 800570c:	2205      	movs	r2, #5
 800570e:	701a      	strb	r2, [r3, #0]
 8005710:	e063      	b.n	80057da <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	212c      	movs	r1, #44	; 0x2c
 8005718:	fb01 f303 	mul.w	r3, r1, r3
 800571c:	4413      	add	r3, r2
 800571e:	3361      	adds	r3, #97	; 0x61
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	2b06      	cmp	r3, #6
 8005724:	d009      	beq.n	800573a <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	212c      	movs	r1, #44	; 0x2c
 800572c:	fb01 f303 	mul.w	r3, r1, r3
 8005730:	4413      	add	r3, r2
 8005732:	3361      	adds	r3, #97	; 0x61
 8005734:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005736:	2b08      	cmp	r3, #8
 8005738:	d14f      	bne.n	80057da <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	212c      	movs	r1, #44	; 0x2c
 8005740:	fb01 f303 	mul.w	r3, r1, r3
 8005744:	4413      	add	r3, r2
 8005746:	335c      	adds	r3, #92	; 0x5c
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	6879      	ldr	r1, [r7, #4]
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	202c      	movs	r0, #44	; 0x2c
 8005752:	fb00 f303 	mul.w	r3, r0, r3
 8005756:	440b      	add	r3, r1
 8005758:	335c      	adds	r3, #92	; 0x5c
 800575a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	212c      	movs	r1, #44	; 0x2c
 8005762:	fb01 f303 	mul.w	r3, r1, r3
 8005766:	4413      	add	r3, r2
 8005768:	335c      	adds	r3, #92	; 0x5c
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b02      	cmp	r3, #2
 800576e:	d912      	bls.n	8005796 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	212c      	movs	r1, #44	; 0x2c
 8005776:	fb01 f303 	mul.w	r3, r1, r3
 800577a:	4413      	add	r3, r2
 800577c:	335c      	adds	r3, #92	; 0x5c
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	212c      	movs	r1, #44	; 0x2c
 8005788:	fb01 f303 	mul.w	r3, r1, r3
 800578c:	4413      	add	r3, r2
 800578e:	3360      	adds	r3, #96	; 0x60
 8005790:	2204      	movs	r2, #4
 8005792:	701a      	strb	r2, [r3, #0]
 8005794:	e021      	b.n	80057da <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	212c      	movs	r1, #44	; 0x2c
 800579c:	fb01 f303 	mul.w	r3, r1, r3
 80057a0:	4413      	add	r3, r2
 80057a2:	3360      	adds	r3, #96	; 0x60
 80057a4:	2202      	movs	r2, #2
 80057a6:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057be:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057c6:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d4:	461a      	mov	r2, r3
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	015a      	lsls	r2, r3, #5
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e6:	461a      	mov	r2, r3
 80057e8:	2302      	movs	r3, #2
 80057ea:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	b2d9      	uxtb	r1, r3
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	202c      	movs	r0, #44	; 0x2c
 80057f6:	fb00 f303 	mul.w	r3, r0, r3
 80057fa:	4413      	add	r3, r2
 80057fc:	3360      	adds	r3, #96	; 0x60
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	461a      	mov	r2, r3
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f009 ff58 	bl	800f6b8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005808:	bf00      	nop
 800580a:	3720      	adds	r7, #32
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08a      	sub	sp, #40	; 0x28
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6a1b      	ldr	r3, [r3, #32]
 8005828:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	f003 030f 	and.w	r3, r3, #15
 8005830:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	0c5b      	lsrs	r3, r3, #17
 8005836:	f003 030f 	and.w	r3, r3, #15
 800583a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	091b      	lsrs	r3, r3, #4
 8005840:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005844:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2b02      	cmp	r3, #2
 800584a:	d004      	beq.n	8005856 <HCD_RXQLVL_IRQHandler+0x46>
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	2b05      	cmp	r3, #5
 8005850:	f000 80a9 	beq.w	80059a6 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005854:	e0aa      	b.n	80059ac <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 80a6 	beq.w	80059aa <HCD_RXQLVL_IRQHandler+0x19a>
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	212c      	movs	r1, #44	; 0x2c
 8005864:	fb01 f303 	mul.w	r3, r1, r3
 8005868:	4413      	add	r3, r2
 800586a:	3344      	adds	r3, #68	; 0x44
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 809b 	beq.w	80059aa <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	212c      	movs	r1, #44	; 0x2c
 800587a:	fb01 f303 	mul.w	r3, r1, r3
 800587e:	4413      	add	r3, r2
 8005880:	3350      	adds	r3, #80	; 0x50
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	441a      	add	r2, r3
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	202c      	movs	r0, #44	; 0x2c
 800588e:	fb00 f303 	mul.w	r3, r0, r3
 8005892:	440b      	add	r3, r1
 8005894:	334c      	adds	r3, #76	; 0x4c
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	429a      	cmp	r2, r3
 800589a:	d87a      	bhi.n	8005992 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6818      	ldr	r0, [r3, #0]
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	212c      	movs	r1, #44	; 0x2c
 80058a6:	fb01 f303 	mul.w	r3, r1, r3
 80058aa:	4413      	add	r3, r2
 80058ac:	3344      	adds	r3, #68	; 0x44
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	b292      	uxth	r2, r2
 80058b4:	4619      	mov	r1, r3
 80058b6:	f003 fc13 	bl	80090e0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	212c      	movs	r1, #44	; 0x2c
 80058c0:	fb01 f303 	mul.w	r3, r1, r3
 80058c4:	4413      	add	r3, r2
 80058c6:	3344      	adds	r3, #68	; 0x44
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	441a      	add	r2, r3
 80058ce:	6879      	ldr	r1, [r7, #4]
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	202c      	movs	r0, #44	; 0x2c
 80058d4:	fb00 f303 	mul.w	r3, r0, r3
 80058d8:	440b      	add	r3, r1
 80058da:	3344      	adds	r3, #68	; 0x44
 80058dc:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	212c      	movs	r1, #44	; 0x2c
 80058e4:	fb01 f303 	mul.w	r3, r1, r3
 80058e8:	4413      	add	r3, r2
 80058ea:	3350      	adds	r3, #80	; 0x50
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	441a      	add	r2, r3
 80058f2:	6879      	ldr	r1, [r7, #4]
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	202c      	movs	r0, #44	; 0x2c
 80058f8:	fb00 f303 	mul.w	r3, r0, r3
 80058fc:	440b      	add	r3, r1
 80058fe:	3350      	adds	r3, #80	; 0x50
 8005900:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	4413      	add	r3, r2
 800590a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	0cdb      	lsrs	r3, r3, #19
 8005912:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005916:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	212c      	movs	r1, #44	; 0x2c
 800591e:	fb01 f303 	mul.w	r3, r1, r3
 8005922:	4413      	add	r3, r2
 8005924:	3340      	adds	r3, #64	; 0x40
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	461a      	mov	r2, r3
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	4293      	cmp	r3, r2
 800592e:	d13c      	bne.n	80059aa <HCD_RXQLVL_IRQHandler+0x19a>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d039      	beq.n	80059aa <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	6a3b      	ldr	r3, [r7, #32]
 800593c:	4413      	add	r3, r2
 800593e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800594c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005954:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	4413      	add	r3, r2
 800595e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005962:	461a      	mov	r2, r3
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	212c      	movs	r1, #44	; 0x2c
 800596e:	fb01 f303 	mul.w	r3, r1, r3
 8005972:	4413      	add	r3, r2
 8005974:	3354      	adds	r3, #84	; 0x54
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	f083 0301 	eor.w	r3, r3, #1
 800597c:	b2d8      	uxtb	r0, r3
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	212c      	movs	r1, #44	; 0x2c
 8005984:	fb01 f303 	mul.w	r3, r1, r3
 8005988:	4413      	add	r3, r2
 800598a:	3354      	adds	r3, #84	; 0x54
 800598c:	4602      	mov	r2, r0
 800598e:	701a      	strb	r2, [r3, #0]
      break;
 8005990:	e00b      	b.n	80059aa <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	212c      	movs	r1, #44	; 0x2c
 8005998:	fb01 f303 	mul.w	r3, r1, r3
 800599c:	4413      	add	r3, r2
 800599e:	3360      	adds	r3, #96	; 0x60
 80059a0:	2204      	movs	r2, #4
 80059a2:	701a      	strb	r2, [r3, #0]
      break;
 80059a4:	e001      	b.n	80059aa <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80059a6:	bf00      	nop
 80059a8:	e000      	b.n	80059ac <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80059aa:	bf00      	nop
  }
}
 80059ac:	bf00      	nop
 80059ae:	3728      	adds	r7, #40	; 0x28
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80059e0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f003 0302 	and.w	r3, r3, #2
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d10b      	bne.n	8005a04 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d102      	bne.n	80059fc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f009 fe42 	bl	800f680 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	f043 0302 	orr.w	r3, r3, #2
 8005a02:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f003 0308 	and.w	r3, r3, #8
 8005a0a:	2b08      	cmp	r3, #8
 8005a0c:	d132      	bne.n	8005a74 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	f043 0308 	orr.w	r3, r3, #8
 8005a14:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f003 0304 	and.w	r3, r3, #4
 8005a1c:	2b04      	cmp	r3, #4
 8005a1e:	d126      	bne.n	8005a6e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d113      	bne.n	8005a50 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005a2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a32:	d106      	bne.n	8005a42 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2102      	movs	r1, #2
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f003 fcb0 	bl	80093a0 <USB_InitFSLSPClkSel>
 8005a40:	e011      	b.n	8005a66 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2101      	movs	r1, #1
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f003 fca9 	bl	80093a0 <USB_InitFSLSPClkSel>
 8005a4e:	e00a      	b.n	8005a66 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d106      	bne.n	8005a66 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a5e:	461a      	mov	r2, r3
 8005a60:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005a64:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f009 fe34 	bl	800f6d4 <HAL_HCD_PortEnabled_Callback>
 8005a6c:	e002      	b.n	8005a74 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f009 fe3e 	bl	800f6f0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f003 0320 	and.w	r3, r3, #32
 8005a7a:	2b20      	cmp	r3, #32
 8005a7c:	d103      	bne.n	8005a86 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	f043 0320 	orr.w	r3, r3, #32
 8005a84:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	6013      	str	r3, [r2, #0]
}
 8005a92:	bf00      	nop
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
	...

08005a9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e12b      	b.n	8005d06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d106      	bne.n	8005ac8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7fc f884 	bl	8001bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2224      	movs	r2, #36	; 0x24
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 0201 	bic.w	r2, r2, #1
 8005ade:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005aee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005afe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b00:	f002 fb54 	bl	80081ac <HAL_RCC_GetPCLK1Freq>
 8005b04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	4a81      	ldr	r2, [pc, #516]	; (8005d10 <HAL_I2C_Init+0x274>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d807      	bhi.n	8005b20 <HAL_I2C_Init+0x84>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4a80      	ldr	r2, [pc, #512]	; (8005d14 <HAL_I2C_Init+0x278>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	bf94      	ite	ls
 8005b18:	2301      	movls	r3, #1
 8005b1a:	2300      	movhi	r3, #0
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	e006      	b.n	8005b2e <HAL_I2C_Init+0x92>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4a7d      	ldr	r2, [pc, #500]	; (8005d18 <HAL_I2C_Init+0x27c>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	bf94      	ite	ls
 8005b28:	2301      	movls	r3, #1
 8005b2a:	2300      	movhi	r3, #0
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d001      	beq.n	8005b36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e0e7      	b.n	8005d06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4a78      	ldr	r2, [pc, #480]	; (8005d1c <HAL_I2C_Init+0x280>)
 8005b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b3e:	0c9b      	lsrs	r3, r3, #18
 8005b40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	4a6a      	ldr	r2, [pc, #424]	; (8005d10 <HAL_I2C_Init+0x274>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d802      	bhi.n	8005b70 <HAL_I2C_Init+0xd4>
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	e009      	b.n	8005b84 <HAL_I2C_Init+0xe8>
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005b76:	fb02 f303 	mul.w	r3, r2, r3
 8005b7a:	4a69      	ldr	r2, [pc, #420]	; (8005d20 <HAL_I2C_Init+0x284>)
 8005b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b80:	099b      	lsrs	r3, r3, #6
 8005b82:	3301      	adds	r3, #1
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6812      	ldr	r2, [r2, #0]
 8005b88:	430b      	orrs	r3, r1
 8005b8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005b96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	495c      	ldr	r1, [pc, #368]	; (8005d10 <HAL_I2C_Init+0x274>)
 8005ba0:	428b      	cmp	r3, r1
 8005ba2:	d819      	bhi.n	8005bd8 <HAL_I2C_Init+0x13c>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	1e59      	subs	r1, r3, #1
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	005b      	lsls	r3, r3, #1
 8005bae:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bb2:	1c59      	adds	r1, r3, #1
 8005bb4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005bb8:	400b      	ands	r3, r1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00a      	beq.n	8005bd4 <HAL_I2C_Init+0x138>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	1e59      	subs	r1, r3, #1
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	005b      	lsls	r3, r3, #1
 8005bc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bcc:	3301      	adds	r3, #1
 8005bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bd2:	e051      	b.n	8005c78 <HAL_I2C_Init+0x1dc>
 8005bd4:	2304      	movs	r3, #4
 8005bd6:	e04f      	b.n	8005c78 <HAL_I2C_Init+0x1dc>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d111      	bne.n	8005c04 <HAL_I2C_Init+0x168>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	1e58      	subs	r0, r3, #1
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6859      	ldr	r1, [r3, #4]
 8005be8:	460b      	mov	r3, r1
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	440b      	add	r3, r1
 8005bee:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	bf0c      	ite	eq
 8005bfc:	2301      	moveq	r3, #1
 8005bfe:	2300      	movne	r3, #0
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	e012      	b.n	8005c2a <HAL_I2C_Init+0x18e>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	1e58      	subs	r0, r3, #1
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6859      	ldr	r1, [r3, #4]
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	440b      	add	r3, r1
 8005c12:	0099      	lsls	r1, r3, #2
 8005c14:	440b      	add	r3, r1
 8005c16:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	bf0c      	ite	eq
 8005c24:	2301      	moveq	r3, #1
 8005c26:	2300      	movne	r3, #0
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <HAL_I2C_Init+0x196>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e022      	b.n	8005c78 <HAL_I2C_Init+0x1dc>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10e      	bne.n	8005c58 <HAL_I2C_Init+0x1bc>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	1e58      	subs	r0, r3, #1
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6859      	ldr	r1, [r3, #4]
 8005c42:	460b      	mov	r3, r1
 8005c44:	005b      	lsls	r3, r3, #1
 8005c46:	440b      	add	r3, r1
 8005c48:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c56:	e00f      	b.n	8005c78 <HAL_I2C_Init+0x1dc>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	1e58      	subs	r0, r3, #1
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6859      	ldr	r1, [r3, #4]
 8005c60:	460b      	mov	r3, r1
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	440b      	add	r3, r1
 8005c66:	0099      	lsls	r1, r3, #2
 8005c68:	440b      	add	r3, r1
 8005c6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c6e:	3301      	adds	r3, #1
 8005c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c78:	6879      	ldr	r1, [r7, #4]
 8005c7a:	6809      	ldr	r1, [r1, #0]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	69da      	ldr	r2, [r3, #28]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	431a      	orrs	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005ca6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	6911      	ldr	r1, [r2, #16]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	68d2      	ldr	r2, [r2, #12]
 8005cb2:	4311      	orrs	r1, r2
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	6812      	ldr	r2, [r2, #0]
 8005cb8:	430b      	orrs	r3, r1
 8005cba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	695a      	ldr	r2, [r3, #20]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f042 0201 	orr.w	r2, r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	000186a0 	.word	0x000186a0
 8005d14:	001e847f 	.word	0x001e847f
 8005d18:	003d08ff 	.word	0x003d08ff
 8005d1c:	431bde83 	.word	0x431bde83
 8005d20:	10624dd3 	.word	0x10624dd3

08005d24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b088      	sub	sp, #32
 8005d28:	af02      	add	r7, sp, #8
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	607a      	str	r2, [r7, #4]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	460b      	mov	r3, r1
 8005d32:	817b      	strh	r3, [r7, #10]
 8005d34:	4613      	mov	r3, r2
 8005d36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d38:	f7fc fbf0 	bl	800251c <HAL_GetTick>
 8005d3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b20      	cmp	r3, #32
 8005d48:	f040 80e0 	bne.w	8005f0c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	2319      	movs	r3, #25
 8005d52:	2201      	movs	r2, #1
 8005d54:	4970      	ldr	r1, [pc, #448]	; (8005f18 <HAL_I2C_Master_Transmit+0x1f4>)
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f000 fc58 	bl	800660c <I2C_WaitOnFlagUntilTimeout>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005d62:	2302      	movs	r3, #2
 8005d64:	e0d3      	b.n	8005f0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d101      	bne.n	8005d74 <HAL_I2C_Master_Transmit+0x50>
 8005d70:	2302      	movs	r3, #2
 8005d72:	e0cc      	b.n	8005f0e <HAL_I2C_Master_Transmit+0x1ea>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d007      	beq.n	8005d9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f042 0201 	orr.w	r2, r2, #1
 8005d98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005da8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2221      	movs	r2, #33	; 0x21
 8005dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2210      	movs	r2, #16
 8005db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	893a      	ldrh	r2, [r7, #8]
 8005dca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	4a50      	ldr	r2, [pc, #320]	; (8005f1c <HAL_I2C_Master_Transmit+0x1f8>)
 8005dda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005ddc:	8979      	ldrh	r1, [r7, #10]
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	6a3a      	ldr	r2, [r7, #32]
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 fac2 	bl	800636c <I2C_MasterRequestWrite>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e08d      	b.n	8005f0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005df2:	2300      	movs	r3, #0
 8005df4:	613b      	str	r3, [r7, #16]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	613b      	str	r3, [r7, #16]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	613b      	str	r3, [r7, #16]
 8005e06:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005e08:	e066      	b.n	8005ed8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	6a39      	ldr	r1, [r7, #32]
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f000 fcd2 	bl	80067b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00d      	beq.n	8005e36 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	2b04      	cmp	r3, #4
 8005e20:	d107      	bne.n	8005e32 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e06b      	b.n	8005f0e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3a:	781a      	ldrb	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b04      	cmp	r3, #4
 8005e72:	d11b      	bne.n	8005eac <HAL_I2C_Master_Transmit+0x188>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d017      	beq.n	8005eac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	781a      	ldrb	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8c:	1c5a      	adds	r2, r3, #1
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	6a39      	ldr	r1, [r7, #32]
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f000 fcc2 	bl	800683a <I2C_WaitOnBTFFlagUntilTimeout>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00d      	beq.n	8005ed8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec0:	2b04      	cmp	r3, #4
 8005ec2:	d107      	bne.n	8005ed4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ed2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e01a      	b.n	8005f0e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d194      	bne.n	8005e0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	e000      	b.n	8005f0e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005f0c:	2302      	movs	r3, #2
  }
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	00100002 	.word	0x00100002
 8005f1c:	ffff0000 	.word	0xffff0000

08005f20 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08c      	sub	sp, #48	; 0x30
 8005f24:	af02      	add	r7, sp, #8
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	607a      	str	r2, [r7, #4]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	817b      	strh	r3, [r7, #10]
 8005f30:	4613      	mov	r3, r2
 8005f32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f34:	f7fc faf2 	bl	800251c <HAL_GetTick>
 8005f38:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b20      	cmp	r3, #32
 8005f44:	f040 820b 	bne.w	800635e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	2319      	movs	r3, #25
 8005f4e:	2201      	movs	r2, #1
 8005f50:	497c      	ldr	r1, [pc, #496]	; (8006144 <HAL_I2C_Master_Receive+0x224>)
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f000 fb5a 	bl	800660c <I2C_WaitOnFlagUntilTimeout>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005f5e:	2302      	movs	r3, #2
 8005f60:	e1fe      	b.n	8006360 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d101      	bne.n	8005f70 <HAL_I2C_Master_Receive+0x50>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	e1f7      	b.n	8006360 <HAL_I2C_Master_Receive+0x440>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d007      	beq.n	8005f96 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f042 0201 	orr.w	r2, r2, #1
 8005f94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fa4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2222      	movs	r2, #34	; 0x22
 8005faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2210      	movs	r2, #16
 8005fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	893a      	ldrh	r2, [r7, #8]
 8005fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	4a5c      	ldr	r2, [pc, #368]	; (8006148 <HAL_I2C_Master_Receive+0x228>)
 8005fd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005fd8:	8979      	ldrh	r1, [r7, #10]
 8005fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f000 fa46 	bl	8006470 <I2C_MasterRequestRead>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e1b8      	b.n	8006360 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d113      	bne.n	800601e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	623b      	str	r3, [r7, #32]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	623b      	str	r3, [r7, #32]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	623b      	str	r3, [r7, #32]
 800600a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	e18c      	b.n	8006338 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006022:	2b01      	cmp	r3, #1
 8006024:	d11b      	bne.n	800605e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006034:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006036:	2300      	movs	r3, #0
 8006038:	61fb      	str	r3, [r7, #28]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	61fb      	str	r3, [r7, #28]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	61fb      	str	r3, [r7, #28]
 800604a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	e16c      	b.n	8006338 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006062:	2b02      	cmp	r3, #2
 8006064:	d11b      	bne.n	800609e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006074:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006084:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006086:	2300      	movs	r3, #0
 8006088:	61bb      	str	r3, [r7, #24]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	61bb      	str	r3, [r7, #24]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	61bb      	str	r3, [r7, #24]
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	e14c      	b.n	8006338 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ae:	2300      	movs	r3, #0
 80060b0:	617b      	str	r3, [r7, #20]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	617b      	str	r3, [r7, #20]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	617b      	str	r3, [r7, #20]
 80060c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80060c4:	e138      	b.n	8006338 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	f200 80f1 	bhi.w	80062b2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d123      	bne.n	8006120 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 fbed 	bl	80068bc <I2C_WaitOnRXNEFlagUntilTimeout>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e139      	b.n	8006360 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	691a      	ldr	r2, [r3, #16]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f6:	b2d2      	uxtb	r2, r2
 80060f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	1c5a      	adds	r2, r3, #1
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006108:	3b01      	subs	r3, #1
 800610a:	b29a      	uxth	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006114:	b29b      	uxth	r3, r3
 8006116:	3b01      	subs	r3, #1
 8006118:	b29a      	uxth	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800611e:	e10b      	b.n	8006338 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006124:	2b02      	cmp	r3, #2
 8006126:	d14e      	bne.n	80061c6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612e:	2200      	movs	r2, #0
 8006130:	4906      	ldr	r1, [pc, #24]	; (800614c <HAL_I2C_Master_Receive+0x22c>)
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f000 fa6a 	bl	800660c <I2C_WaitOnFlagUntilTimeout>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d008      	beq.n	8006150 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e10e      	b.n	8006360 <HAL_I2C_Master_Receive+0x440>
 8006142:	bf00      	nop
 8006144:	00100002 	.word	0x00100002
 8006148:	ffff0000 	.word	0xffff0000
 800614c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800615e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	691a      	ldr	r2, [r3, #16]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616a:	b2d2      	uxtb	r2, r2
 800616c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800617c:	3b01      	subs	r3, #1
 800617e:	b29a      	uxth	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006188:	b29b      	uxth	r3, r3
 800618a:	3b01      	subs	r3, #1
 800618c:	b29a      	uxth	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	691a      	ldr	r2, [r3, #16]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619c:	b2d2      	uxtb	r2, r2
 800619e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a4:	1c5a      	adds	r2, r3, #1
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ae:	3b01      	subs	r3, #1
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	3b01      	subs	r3, #1
 80061be:	b29a      	uxth	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061c4:	e0b8      	b.n	8006338 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061cc:	2200      	movs	r2, #0
 80061ce:	4966      	ldr	r1, [pc, #408]	; (8006368 <HAL_I2C_Master_Receive+0x448>)
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f000 fa1b 	bl	800660c <I2C_WaitOnFlagUntilTimeout>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e0bf      	b.n	8006360 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	691a      	ldr	r2, [r3, #16]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fa:	b2d2      	uxtb	r2, r2
 80061fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006202:	1c5a      	adds	r2, r3, #1
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800620c:	3b01      	subs	r3, #1
 800620e:	b29a      	uxth	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006218:	b29b      	uxth	r3, r3
 800621a:	3b01      	subs	r3, #1
 800621c:	b29a      	uxth	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006228:	2200      	movs	r2, #0
 800622a:	494f      	ldr	r1, [pc, #316]	; (8006368 <HAL_I2C_Master_Receive+0x448>)
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 f9ed 	bl	800660c <I2C_WaitOnFlagUntilTimeout>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d001      	beq.n	800623c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e091      	b.n	8006360 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800624a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	691a      	ldr	r2, [r3, #16]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006256:	b2d2      	uxtb	r2, r2
 8006258:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625e:	1c5a      	adds	r2, r3, #1
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006268:	3b01      	subs	r3, #1
 800626a:	b29a      	uxth	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006274:	b29b      	uxth	r3, r3
 8006276:	3b01      	subs	r3, #1
 8006278:	b29a      	uxth	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	691a      	ldr	r2, [r3, #16]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006288:	b2d2      	uxtb	r2, r2
 800628a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006290:	1c5a      	adds	r2, r3, #1
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800629a:	3b01      	subs	r3, #1
 800629c:	b29a      	uxth	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	3b01      	subs	r3, #1
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062b0:	e042      	b.n	8006338 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f000 fb00 	bl	80068bc <I2C_WaitOnRXNEFlagUntilTimeout>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e04c      	b.n	8006360 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	691a      	ldr	r2, [r3, #16]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d0:	b2d2      	uxtb	r2, r2
 80062d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d8:	1c5a      	adds	r2, r3, #1
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062e2:	3b01      	subs	r3, #1
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	3b01      	subs	r3, #1
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	f003 0304 	and.w	r3, r3, #4
 8006302:	2b04      	cmp	r3, #4
 8006304:	d118      	bne.n	8006338 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	691a      	ldr	r2, [r3, #16]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006310:	b2d2      	uxtb	r2, r2
 8006312:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006318:	1c5a      	adds	r2, r3, #1
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006322:	3b01      	subs	r3, #1
 8006324:	b29a      	uxth	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800632e:	b29b      	uxth	r3, r3
 8006330:	3b01      	subs	r3, #1
 8006332:	b29a      	uxth	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800633c:	2b00      	cmp	r3, #0
 800633e:	f47f aec2 	bne.w	80060c6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2220      	movs	r2, #32
 8006346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800635a:	2300      	movs	r3, #0
 800635c:	e000      	b.n	8006360 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800635e:	2302      	movs	r3, #2
  }
}
 8006360:	4618      	mov	r0, r3
 8006362:	3728      	adds	r7, #40	; 0x28
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	00010004 	.word	0x00010004

0800636c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b088      	sub	sp, #32
 8006370:	af02      	add	r7, sp, #8
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	607a      	str	r2, [r7, #4]
 8006376:	603b      	str	r3, [r7, #0]
 8006378:	460b      	mov	r3, r1
 800637a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006380:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2b08      	cmp	r3, #8
 8006386:	d006      	beq.n	8006396 <I2C_MasterRequestWrite+0x2a>
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d003      	beq.n	8006396 <I2C_MasterRequestWrite+0x2a>
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006394:	d108      	bne.n	80063a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	e00b      	b.n	80063c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ac:	2b12      	cmp	r3, #18
 80063ae:	d107      	bne.n	80063c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f000 f91d 	bl	800660c <I2C_WaitOnFlagUntilTimeout>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00d      	beq.n	80063f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063e6:	d103      	bne.n	80063f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e035      	b.n	8006460 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063fc:	d108      	bne.n	8006410 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80063fe:	897b      	ldrh	r3, [r7, #10]
 8006400:	b2db      	uxtb	r3, r3
 8006402:	461a      	mov	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800640c:	611a      	str	r2, [r3, #16]
 800640e:	e01b      	b.n	8006448 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006410:	897b      	ldrh	r3, [r7, #10]
 8006412:	11db      	asrs	r3, r3, #7
 8006414:	b2db      	uxtb	r3, r3
 8006416:	f003 0306 	and.w	r3, r3, #6
 800641a:	b2db      	uxtb	r3, r3
 800641c:	f063 030f 	orn	r3, r3, #15
 8006420:	b2da      	uxtb	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	490e      	ldr	r1, [pc, #56]	; (8006468 <I2C_MasterRequestWrite+0xfc>)
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f000 f943 	bl	80066ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d001      	beq.n	800643e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e010      	b.n	8006460 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800643e:	897b      	ldrh	r3, [r7, #10]
 8006440:	b2da      	uxtb	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	4907      	ldr	r1, [pc, #28]	; (800646c <I2C_MasterRequestWrite+0x100>)
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f000 f933 	bl	80066ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e000      	b.n	8006460 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3718      	adds	r7, #24
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	00010008 	.word	0x00010008
 800646c:	00010002 	.word	0x00010002

08006470 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b088      	sub	sp, #32
 8006474:	af02      	add	r7, sp, #8
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	607a      	str	r2, [r7, #4]
 800647a:	603b      	str	r3, [r7, #0]
 800647c:	460b      	mov	r3, r1
 800647e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006484:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006494:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	2b08      	cmp	r3, #8
 800649a:	d006      	beq.n	80064aa <I2C_MasterRequestRead+0x3a>
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d003      	beq.n	80064aa <I2C_MasterRequestRead+0x3a>
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80064a8:	d108      	bne.n	80064bc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	e00b      	b.n	80064d4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c0:	2b11      	cmp	r3, #17
 80064c2:	d107      	bne.n	80064d4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f000 f893 	bl	800660c <I2C_WaitOnFlagUntilTimeout>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00d      	beq.n	8006508 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064fa:	d103      	bne.n	8006504 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006502:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	e079      	b.n	80065fc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006510:	d108      	bne.n	8006524 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006512:	897b      	ldrh	r3, [r7, #10]
 8006514:	b2db      	uxtb	r3, r3
 8006516:	f043 0301 	orr.w	r3, r3, #1
 800651a:	b2da      	uxtb	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	611a      	str	r2, [r3, #16]
 8006522:	e05f      	b.n	80065e4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006524:	897b      	ldrh	r3, [r7, #10]
 8006526:	11db      	asrs	r3, r3, #7
 8006528:	b2db      	uxtb	r3, r3
 800652a:	f003 0306 	and.w	r3, r3, #6
 800652e:	b2db      	uxtb	r3, r3
 8006530:	f063 030f 	orn	r3, r3, #15
 8006534:	b2da      	uxtb	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	4930      	ldr	r1, [pc, #192]	; (8006604 <I2C_MasterRequestRead+0x194>)
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f000 f8b9 	bl	80066ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e054      	b.n	80065fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006552:	897b      	ldrh	r3, [r7, #10]
 8006554:	b2da      	uxtb	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	4929      	ldr	r1, [pc, #164]	; (8006608 <I2C_MasterRequestRead+0x198>)
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f000 f8a9 	bl	80066ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d001      	beq.n	8006572 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e044      	b.n	80065fc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006572:	2300      	movs	r3, #0
 8006574:	613b      	str	r3, [r7, #16]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	613b      	str	r3, [r7, #16]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	613b      	str	r3, [r7, #16]
 8006586:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006596:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 f831 	bl	800660c <I2C_WaitOnFlagUntilTimeout>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00d      	beq.n	80065cc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065be:	d103      	bne.n	80065c8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065c6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e017      	b.n	80065fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80065cc:	897b      	ldrh	r3, [r7, #10]
 80065ce:	11db      	asrs	r3, r3, #7
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	f003 0306 	and.w	r3, r3, #6
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	f063 030e 	orn	r3, r3, #14
 80065dc:	b2da      	uxtb	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	4907      	ldr	r1, [pc, #28]	; (8006608 <I2C_MasterRequestRead+0x198>)
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f000 f865 	bl	80066ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d001      	beq.n	80065fa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e000      	b.n	80065fc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3718      	adds	r7, #24
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	00010008 	.word	0x00010008
 8006608:	00010002 	.word	0x00010002

0800660c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	603b      	str	r3, [r7, #0]
 8006618:	4613      	mov	r3, r2
 800661a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800661c:	e025      	b.n	800666a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006624:	d021      	beq.n	800666a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006626:	f7fb ff79 	bl	800251c <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	429a      	cmp	r2, r3
 8006634:	d302      	bcc.n	800663c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d116      	bne.n	800666a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2220      	movs	r2, #32
 8006646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006656:	f043 0220 	orr.w	r2, r3, #32
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e023      	b.n	80066b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	0c1b      	lsrs	r3, r3, #16
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b01      	cmp	r3, #1
 8006672:	d10d      	bne.n	8006690 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	43da      	mvns	r2, r3
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	4013      	ands	r3, r2
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	bf0c      	ite	eq
 8006686:	2301      	moveq	r3, #1
 8006688:	2300      	movne	r3, #0
 800668a:	b2db      	uxtb	r3, r3
 800668c:	461a      	mov	r2, r3
 800668e:	e00c      	b.n	80066aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	43da      	mvns	r2, r3
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	4013      	ands	r3, r2
 800669c:	b29b      	uxth	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	bf0c      	ite	eq
 80066a2:	2301      	moveq	r3, #1
 80066a4:	2300      	movne	r3, #0
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	461a      	mov	r2, r3
 80066aa:	79fb      	ldrb	r3, [r7, #7]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d0b6      	beq.n	800661e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b084      	sub	sp, #16
 80066be:	af00      	add	r7, sp, #0
 80066c0:	60f8      	str	r0, [r7, #12]
 80066c2:	60b9      	str	r1, [r7, #8]
 80066c4:	607a      	str	r2, [r7, #4]
 80066c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066c8:	e051      	b.n	800676e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d8:	d123      	bne.n	8006722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2220      	movs	r2, #32
 80066fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670e:	f043 0204 	orr.w	r2, r3, #4
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e046      	b.n	80067b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006728:	d021      	beq.n	800676e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800672a:	f7fb fef7 	bl	800251c <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	429a      	cmp	r2, r3
 8006738:	d302      	bcc.n	8006740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d116      	bne.n	800676e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2220      	movs	r2, #32
 800674a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675a:	f043 0220 	orr.w	r2, r3, #32
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e020      	b.n	80067b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	0c1b      	lsrs	r3, r3, #16
 8006772:	b2db      	uxtb	r3, r3
 8006774:	2b01      	cmp	r3, #1
 8006776:	d10c      	bne.n	8006792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	43da      	mvns	r2, r3
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	4013      	ands	r3, r2
 8006784:	b29b      	uxth	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	bf14      	ite	ne
 800678a:	2301      	movne	r3, #1
 800678c:	2300      	moveq	r3, #0
 800678e:	b2db      	uxtb	r3, r3
 8006790:	e00b      	b.n	80067aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	43da      	mvns	r2, r3
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	4013      	ands	r3, r2
 800679e:	b29b      	uxth	r3, r3
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	bf14      	ite	ne
 80067a4:	2301      	movne	r3, #1
 80067a6:	2300      	moveq	r3, #0
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d18d      	bne.n	80066ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067c4:	e02d      	b.n	8006822 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 f8ce 	bl	8006968 <I2C_IsAcknowledgeFailed>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e02d      	b.n	8006832 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067dc:	d021      	beq.n	8006822 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067de:	f7fb fe9d 	bl	800251c <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d302      	bcc.n	80067f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d116      	bne.n	8006822 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2220      	movs	r2, #32
 80067fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	f043 0220 	orr.w	r2, r3, #32
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e007      	b.n	8006832 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800682c:	2b80      	cmp	r3, #128	; 0x80
 800682e:	d1ca      	bne.n	80067c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b084      	sub	sp, #16
 800683e:	af00      	add	r7, sp, #0
 8006840:	60f8      	str	r0, [r7, #12]
 8006842:	60b9      	str	r1, [r7, #8]
 8006844:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006846:	e02d      	b.n	80068a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 f88d 	bl	8006968 <I2C_IsAcknowledgeFailed>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e02d      	b.n	80068b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685e:	d021      	beq.n	80068a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006860:	f7fb fe5c 	bl	800251c <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	429a      	cmp	r2, r3
 800686e:	d302      	bcc.n	8006876 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d116      	bne.n	80068a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2220      	movs	r2, #32
 8006880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006890:	f043 0220 	orr.w	r2, r3, #32
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e007      	b.n	80068b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	f003 0304 	and.w	r3, r3, #4
 80068ae:	2b04      	cmp	r3, #4
 80068b0:	d1ca      	bne.n	8006848 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068c8:	e042      	b.n	8006950 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	f003 0310 	and.w	r3, r3, #16
 80068d4:	2b10      	cmp	r3, #16
 80068d6:	d119      	bne.n	800690c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f06f 0210 	mvn.w	r2, #16
 80068e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2220      	movs	r2, #32
 80068ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e029      	b.n	8006960 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800690c:	f7fb fe06 	bl	800251c <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	429a      	cmp	r2, r3
 800691a:	d302      	bcc.n	8006922 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d116      	bne.n	8006950 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2220      	movs	r2, #32
 800692c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693c:	f043 0220 	orr.w	r2, r3, #32
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e007      	b.n	8006960 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695a:	2b40      	cmp	r3, #64	; 0x40
 800695c:	d1b5      	bne.n	80068ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800697a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800697e:	d11b      	bne.n	80069b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006988:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2220      	movs	r2, #32
 8006994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a4:	f043 0204 	orr.w	r2, r3, #4
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e000      	b.n	80069ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
	...

080069c8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b088      	sub	sp, #32
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e128      	b.n	8006c2c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d109      	bne.n	80069fa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a90      	ldr	r2, [pc, #576]	; (8006c34 <HAL_I2S_Init+0x26c>)
 80069f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f7fb f933 	bl	8001c60 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2202      	movs	r2, #2
 80069fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	69db      	ldr	r3, [r3, #28]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	6812      	ldr	r2, [r2, #0]
 8006a0c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006a10:	f023 030f 	bic.w	r3, r3, #15
 8006a14:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d060      	beq.n	8006ae8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d102      	bne.n	8006a34 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006a2e:	2310      	movs	r3, #16
 8006a30:	617b      	str	r3, [r7, #20]
 8006a32:	e001      	b.n	8006a38 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006a34:	2320      	movs	r3, #32
 8006a36:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	2b20      	cmp	r3, #32
 8006a3e:	d802      	bhi.n	8006a46 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	005b      	lsls	r3, r3, #1
 8006a44:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006a46:	2001      	movs	r0, #1
 8006a48:	f001 fd18 	bl	800847c <HAL_RCCEx_GetPeriphCLKFreq>
 8006a4c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a56:	d125      	bne.n	8006aa4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d010      	beq.n	8006a82 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	005b      	lsls	r3, r3, #1
 8006a72:	461a      	mov	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a7c:	3305      	adds	r3, #5
 8006a7e:	613b      	str	r3, [r7, #16]
 8006a80:	e01f      	b.n	8006ac2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	00db      	lsls	r3, r3, #3
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	005b      	lsls	r3, r3, #1
 8006a94:	461a      	mov	r2, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	695b      	ldr	r3, [r3, #20]
 8006a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a9e:	3305      	adds	r3, #5
 8006aa0:	613b      	str	r3, [r7, #16]
 8006aa2:	e00e      	b.n	8006ac2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006aac:	4613      	mov	r3, r2
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4413      	add	r3, r2
 8006ab2:	005b      	lsls	r3, r3, #1
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006abe:	3305      	adds	r3, #5
 8006ac0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	4a5c      	ldr	r2, [pc, #368]	; (8006c38 <HAL_I2S_Init+0x270>)
 8006ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aca:	08db      	lsrs	r3, r3, #3
 8006acc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	f003 0301 	and.w	r3, r3, #1
 8006ad4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	085b      	lsrs	r3, r3, #1
 8006ade:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	021b      	lsls	r3, r3, #8
 8006ae4:	61bb      	str	r3, [r7, #24]
 8006ae6:	e003      	b.n	8006af0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006ae8:	2302      	movs	r3, #2
 8006aea:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006aec:	2300      	movs	r3, #0
 8006aee:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d902      	bls.n	8006afc <HAL_I2S_Init+0x134>
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	2bff      	cmp	r3, #255	; 0xff
 8006afa:	d907      	bls.n	8006b0c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b00:	f043 0210 	orr.w	r2, r3, #16
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e08f      	b.n	8006c2c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	691a      	ldr	r2, [r3, #16]
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	ea42 0103 	orr.w	r1, r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	69fa      	ldr	r2, [r7, #28]
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006b2a:	f023 030f 	bic.w	r3, r3, #15
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	6851      	ldr	r1, [r2, #4]
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	6892      	ldr	r2, [r2, #8]
 8006b36:	4311      	orrs	r1, r2
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	68d2      	ldr	r2, [r2, #12]
 8006b3c:	4311      	orrs	r1, r2
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	6992      	ldr	r2, [r2, #24]
 8006b42:	430a      	orrs	r2, r1
 8006b44:	431a      	orrs	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b4e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d161      	bne.n	8006c1c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a38      	ldr	r2, [pc, #224]	; (8006c3c <HAL_I2S_Init+0x274>)
 8006b5c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a37      	ldr	r2, [pc, #220]	; (8006c40 <HAL_I2S_Init+0x278>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d101      	bne.n	8006b6c <HAL_I2S_Init+0x1a4>
 8006b68:	4b36      	ldr	r3, [pc, #216]	; (8006c44 <HAL_I2S_Init+0x27c>)
 8006b6a:	e001      	b.n	8006b70 <HAL_I2S_Init+0x1a8>
 8006b6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	6812      	ldr	r2, [r2, #0]
 8006b76:	4932      	ldr	r1, [pc, #200]	; (8006c40 <HAL_I2S_Init+0x278>)
 8006b78:	428a      	cmp	r2, r1
 8006b7a:	d101      	bne.n	8006b80 <HAL_I2S_Init+0x1b8>
 8006b7c:	4a31      	ldr	r2, [pc, #196]	; (8006c44 <HAL_I2S_Init+0x27c>)
 8006b7e:	e001      	b.n	8006b84 <HAL_I2S_Init+0x1bc>
 8006b80:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006b84:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006b88:	f023 030f 	bic.w	r3, r3, #15
 8006b8c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a2b      	ldr	r2, [pc, #172]	; (8006c40 <HAL_I2S_Init+0x278>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d101      	bne.n	8006b9c <HAL_I2S_Init+0x1d4>
 8006b98:	4b2a      	ldr	r3, [pc, #168]	; (8006c44 <HAL_I2S_Init+0x27c>)
 8006b9a:	e001      	b.n	8006ba0 <HAL_I2S_Init+0x1d8>
 8006b9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ba0:	2202      	movs	r2, #2
 8006ba2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a25      	ldr	r2, [pc, #148]	; (8006c40 <HAL_I2S_Init+0x278>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d101      	bne.n	8006bb2 <HAL_I2S_Init+0x1ea>
 8006bae:	4b25      	ldr	r3, [pc, #148]	; (8006c44 <HAL_I2S_Init+0x27c>)
 8006bb0:	e001      	b.n	8006bb6 <HAL_I2S_Init+0x1ee>
 8006bb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bb6:	69db      	ldr	r3, [r3, #28]
 8006bb8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bc2:	d003      	beq.n	8006bcc <HAL_I2S_Init+0x204>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d103      	bne.n	8006bd4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bd0:	613b      	str	r3, [r7, #16]
 8006bd2:	e001      	b.n	8006bd8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006be2:	4313      	orrs	r3, r2
 8006be4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006bec:	4313      	orrs	r3, r2
 8006bee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	897b      	ldrh	r3, [r7, #10]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006c04:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a0d      	ldr	r2, [pc, #52]	; (8006c40 <HAL_I2S_Init+0x278>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d101      	bne.n	8006c14 <HAL_I2S_Init+0x24c>
 8006c10:	4b0c      	ldr	r3, [pc, #48]	; (8006c44 <HAL_I2S_Init+0x27c>)
 8006c12:	e001      	b.n	8006c18 <HAL_I2S_Init+0x250>
 8006c14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c18:	897a      	ldrh	r2, [r7, #10]
 8006c1a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3720      	adds	r7, #32
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	080072d9 	.word	0x080072d9
 8006c38:	cccccccd 	.word	0xcccccccd
 8006c3c:	08007461 	.word	0x08007461
 8006c40:	40003800 	.word	0x40003800
 8006c44:	40003400 	.word	0x40003400

08006c48 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	4613      	mov	r3, r2
 8006c54:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d002      	beq.n	8006c62 <HAL_I2S_Transmit_DMA+0x1a>
 8006c5c:	88fb      	ldrh	r3, [r7, #6]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d101      	bne.n	8006c66 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e08e      	b.n	8006d84 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d101      	bne.n	8006c76 <HAL_I2S_Transmit_DMA+0x2e>
 8006c72:	2302      	movs	r3, #2
 8006c74:	e086      	b.n	8006d84 <HAL_I2S_Transmit_DMA+0x13c>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d005      	beq.n	8006c96 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8006c92:	2302      	movs	r3, #2
 8006c94:	e076      	b.n	8006d84 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2203      	movs	r2, #3
 8006c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	69db      	ldr	r3, [r3, #28]
 8006cb0:	f003 0307 	and.w	r3, r3, #7
 8006cb4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	2b03      	cmp	r3, #3
 8006cba:	d002      	beq.n	8006cc2 <HAL_I2S_Transmit_DMA+0x7a>
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	2b05      	cmp	r3, #5
 8006cc0:	d10a      	bne.n	8006cd8 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8006cc2:	88fb      	ldrh	r3, [r7, #6]
 8006cc4:	005b      	lsls	r3, r3, #1
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8006ccc:	88fb      	ldrh	r3, [r7, #6]
 8006cce:	005b      	lsls	r3, r3, #1
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cd6:	e005      	b.n	8006ce4 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	88fa      	ldrh	r2, [r7, #6]
 8006cdc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	88fa      	ldrh	r2, [r7, #6]
 8006ce2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce8:	4a28      	ldr	r2, [pc, #160]	; (8006d8c <HAL_I2S_Transmit_DMA+0x144>)
 8006cea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf0:	4a27      	ldr	r2, [pc, #156]	; (8006d90 <HAL_I2S_Transmit_DMA+0x148>)
 8006cf2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf8:	4a26      	ldr	r2, [pc, #152]	; (8006d94 <HAL_I2S_Transmit_DMA+0x14c>)
 8006cfa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006d04:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006d0c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d12:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006d14:	f7fc fc2e 	bl	8003574 <HAL_DMA_Start_IT>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00f      	beq.n	8006d3e <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d22:	f043 0208 	orr.w	r2, r3, #8
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e022      	b.n	8006d84 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	69db      	ldr	r3, [r3, #28]
 8006d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d107      	bne.n	8006d5c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	69da      	ldr	r2, [r3, #28]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d5a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f003 0302 	and.w	r3, r3, #2
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d107      	bne.n	8006d7a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f042 0202 	orr.w	r2, r2, #2
 8006d78:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3718      	adds	r7, #24
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	080071b7 	.word	0x080071b7
 8006d90:	08007175 	.word	0x08007175
 8006d94:	080071d3 	.word	0x080071d3

08006d98 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b088      	sub	sp, #32
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006da0:	2300      	movs	r3, #0
 8006da2:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dac:	d004      	beq.n	8006db8 <HAL_I2S_DMAStop+0x20>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f040 80d1 	bne.w	8006f5a <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00f      	beq.n	8006de0 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fc fc2d 	bl	8003624 <HAL_DMA_Abort>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d007      	beq.n	8006de0 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd4:	f043 0208 	orr.w	r2, r3, #8
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8006de0:	2364      	movs	r3, #100	; 0x64
 8006de2:	2201      	movs	r2, #1
 8006de4:	2102      	movs	r1, #2
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fb00 	bl	80073ec <I2S_WaitFlagStateUntilTimeout>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00b      	beq.n	8006e0a <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006df6:	f043 0201 	orr.w	r2, r3, #1
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8006e0a:	2364      	movs	r3, #100	; 0x64
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	2180      	movs	r1, #128	; 0x80
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 faeb 	bl	80073ec <I2S_WaitFlagStateUntilTimeout>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00b      	beq.n	8006e34 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e20:	f043 0201 	orr.w	r2, r3, #1
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	69da      	ldr	r2, [r3, #28]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e42:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006e44:	2300      	movs	r3, #0
 8006e46:	617b      	str	r3, [r7, #20]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	617b      	str	r3, [r7, #20]
 8006e50:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f022 0202 	bic.w	r2, r2, #2
 8006e60:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b05      	cmp	r3, #5
 8006e6c:	f040 8165 	bne.w	800713a <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00f      	beq.n	8006e98 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7fc fbd1 	bl	8003624 <HAL_DMA_Abort>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d007      	beq.n	8006e98 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e8c:	f043 0208 	orr.w	r2, r3, #8
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a8a      	ldr	r2, [pc, #552]	; (80070c8 <HAL_I2S_DMAStop+0x330>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d101      	bne.n	8006ea6 <HAL_I2S_DMAStop+0x10e>
 8006ea2:	4b8a      	ldr	r3, [pc, #552]	; (80070cc <HAL_I2S_DMAStop+0x334>)
 8006ea4:	e001      	b.n	8006eaa <HAL_I2S_DMAStop+0x112>
 8006ea6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006eaa:	69da      	ldr	r2, [r3, #28]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4985      	ldr	r1, [pc, #532]	; (80070c8 <HAL_I2S_DMAStop+0x330>)
 8006eb2:	428b      	cmp	r3, r1
 8006eb4:	d101      	bne.n	8006eba <HAL_I2S_DMAStop+0x122>
 8006eb6:	4b85      	ldr	r3, [pc, #532]	; (80070cc <HAL_I2S_DMAStop+0x334>)
 8006eb8:	e001      	b.n	8006ebe <HAL_I2S_DMAStop+0x126>
 8006eba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ec2:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	613b      	str	r3, [r7, #16]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a7e      	ldr	r2, [pc, #504]	; (80070c8 <HAL_I2S_DMAStop+0x330>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d101      	bne.n	8006ed6 <HAL_I2S_DMAStop+0x13e>
 8006ed2:	4b7e      	ldr	r3, [pc, #504]	; (80070cc <HAL_I2S_DMAStop+0x334>)
 8006ed4:	e001      	b.n	8006eda <HAL_I2S_DMAStop+0x142>
 8006ed6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	613b      	str	r3, [r7, #16]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a79      	ldr	r2, [pc, #484]	; (80070c8 <HAL_I2S_DMAStop+0x330>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d101      	bne.n	8006eec <HAL_I2S_DMAStop+0x154>
 8006ee8:	4b78      	ldr	r3, [pc, #480]	; (80070cc <HAL_I2S_DMAStop+0x334>)
 8006eea:	e001      	b.n	8006ef0 <HAL_I2S_DMAStop+0x158>
 8006eec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	613b      	str	r3, [r7, #16]
 8006ef4:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a73      	ldr	r2, [pc, #460]	; (80070c8 <HAL_I2S_DMAStop+0x330>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d101      	bne.n	8006f04 <HAL_I2S_DMAStop+0x16c>
 8006f00:	4b72      	ldr	r3, [pc, #456]	; (80070cc <HAL_I2S_DMAStop+0x334>)
 8006f02:	e001      	b.n	8006f08 <HAL_I2S_DMAStop+0x170>
 8006f04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	496e      	ldr	r1, [pc, #440]	; (80070c8 <HAL_I2S_DMAStop+0x330>)
 8006f10:	428b      	cmp	r3, r1
 8006f12:	d101      	bne.n	8006f18 <HAL_I2S_DMAStop+0x180>
 8006f14:	4b6d      	ldr	r3, [pc, #436]	; (80070cc <HAL_I2S_DMAStop+0x334>)
 8006f16:	e001      	b.n	8006f1c <HAL_I2S_DMAStop+0x184>
 8006f18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f1c:	f022 0201 	bic.w	r2, r2, #1
 8006f20:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10c      	bne.n	8006f44 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006f42:	e0fa      	b.n	800713a <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a5f      	ldr	r2, [pc, #380]	; (80070c8 <HAL_I2S_DMAStop+0x330>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d101      	bne.n	8006f52 <HAL_I2S_DMAStop+0x1ba>
 8006f4e:	4b5f      	ldr	r3, [pc, #380]	; (80070cc <HAL_I2S_DMAStop+0x334>)
 8006f50:	e001      	b.n	8006f56 <HAL_I2S_DMAStop+0x1be>
 8006f52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f56:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006f58:	e0ef      	b.n	800713a <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f62:	d005      	beq.n	8006f70 <HAL_I2S_DMAStop+0x1d8>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f6c:	f040 80e5 	bne.w	800713a <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00f      	beq.n	8006f98 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7fc fb51 	bl	8003624 <HAL_DMA_Abort>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d007      	beq.n	8006f98 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f8c:	f043 0208 	orr.w	r2, r3, #8
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b05      	cmp	r3, #5
 8006fa2:	f040 809a 	bne.w	80070da <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00f      	beq.n	8006fce <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7fc fb36 	bl	8003624 <HAL_DMA_Abort>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d007      	beq.n	8006fce <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc2:	f043 0208 	orr.w	r2, r3, #8
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8006fce:	f7fb faa5 	bl	800251c <HAL_GetTick>
 8006fd2:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006fd4:	e012      	b.n	8006ffc <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8006fd6:	f7fb faa1 	bl	800251c <HAL_GetTick>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	2b64      	cmp	r3, #100	; 0x64
 8006fe2:	d90b      	bls.n	8006ffc <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe8:	f043 0201 	orr.w	r2, r3, #1
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a31      	ldr	r2, [pc, #196]	; (80070c8 <HAL_I2S_DMAStop+0x330>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d101      	bne.n	800700a <HAL_I2S_DMAStop+0x272>
 8007006:	4b31      	ldr	r3, [pc, #196]	; (80070cc <HAL_I2S_DMAStop+0x334>)
 8007008:	e001      	b.n	800700e <HAL_I2S_DMAStop+0x276>
 800700a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f003 0302 	and.w	r3, r3, #2
 8007014:	2b02      	cmp	r3, #2
 8007016:	d1de      	bne.n	8006fd6 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8007018:	e012      	b.n	8007040 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800701a:	f7fb fa7f 	bl	800251c <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	2b64      	cmp	r3, #100	; 0x64
 8007026:	d90b      	bls.n	8007040 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800702c:	f043 0201 	orr.w	r2, r3, #1
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a20      	ldr	r2, [pc, #128]	; (80070c8 <HAL_I2S_DMAStop+0x330>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d101      	bne.n	800704e <HAL_I2S_DMAStop+0x2b6>
 800704a:	4b20      	ldr	r3, [pc, #128]	; (80070cc <HAL_I2S_DMAStop+0x334>)
 800704c:	e001      	b.n	8007052 <HAL_I2S_DMAStop+0x2ba>
 800704e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007058:	2b80      	cmp	r3, #128	; 0x80
 800705a:	d0de      	beq.n	800701a <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a19      	ldr	r2, [pc, #100]	; (80070c8 <HAL_I2S_DMAStop+0x330>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d101      	bne.n	800706a <HAL_I2S_DMAStop+0x2d2>
 8007066:	4b19      	ldr	r3, [pc, #100]	; (80070cc <HAL_I2S_DMAStop+0x334>)
 8007068:	e001      	b.n	800706e <HAL_I2S_DMAStop+0x2d6>
 800706a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800706e:	69da      	ldr	r2, [r3, #28]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4914      	ldr	r1, [pc, #80]	; (80070c8 <HAL_I2S_DMAStop+0x330>)
 8007076:	428b      	cmp	r3, r1
 8007078:	d101      	bne.n	800707e <HAL_I2S_DMAStop+0x2e6>
 800707a:	4b14      	ldr	r3, [pc, #80]	; (80070cc <HAL_I2S_DMAStop+0x334>)
 800707c:	e001      	b.n	8007082 <HAL_I2S_DMAStop+0x2ea>
 800707e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007086:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8007088:	2300      	movs	r3, #0
 800708a:	60fb      	str	r3, [r7, #12]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a0d      	ldr	r2, [pc, #52]	; (80070c8 <HAL_I2S_DMAStop+0x330>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d101      	bne.n	800709a <HAL_I2S_DMAStop+0x302>
 8007096:	4b0d      	ldr	r3, [pc, #52]	; (80070cc <HAL_I2S_DMAStop+0x334>)
 8007098:	e001      	b.n	800709e <HAL_I2S_DMAStop+0x306>
 800709a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	60fb      	str	r3, [r7, #12]
 80070a2:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a07      	ldr	r2, [pc, #28]	; (80070c8 <HAL_I2S_DMAStop+0x330>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d101      	bne.n	80070b2 <HAL_I2S_DMAStop+0x31a>
 80070ae:	4b07      	ldr	r3, [pc, #28]	; (80070cc <HAL_I2S_DMAStop+0x334>)
 80070b0:	e001      	b.n	80070b6 <HAL_I2S_DMAStop+0x31e>
 80070b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80070b6:	685a      	ldr	r2, [r3, #4]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4902      	ldr	r1, [pc, #8]	; (80070c8 <HAL_I2S_DMAStop+0x330>)
 80070be:	428b      	cmp	r3, r1
 80070c0:	d106      	bne.n	80070d0 <HAL_I2S_DMAStop+0x338>
 80070c2:	4b02      	ldr	r3, [pc, #8]	; (80070cc <HAL_I2S_DMAStop+0x334>)
 80070c4:	e006      	b.n	80070d4 <HAL_I2S_DMAStop+0x33c>
 80070c6:	bf00      	nop
 80070c8:	40003800 	.word	0x40003800
 80070cc:	40003400 	.word	0x40003400
 80070d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80070d4:	f022 0202 	bic.w	r2, r2, #2
 80070d8:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	69da      	ldr	r2, [r3, #28]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070e8:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80070ea:	2300      	movs	r3, #0
 80070ec:	60bb      	str	r3, [r7, #8]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	60bb      	str	r3, [r7, #8]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	60bb      	str	r3, [r7, #8]
 80070fe:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	685a      	ldr	r2, [r3, #4]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f022 0201 	bic.w	r2, r2, #1
 800710e:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007118:	d10c      	bne.n	8007134 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800711e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	77fb      	strb	r3, [r7, #31]
 8007132:	e002      	b.n	800713a <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8007142:	7ffb      	ldrb	r3, [r7, #31]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3720      	adds	r7, #32
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8007154:	bf00      	nop
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007180:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d10e      	bne.n	80071a8 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	685a      	ldr	r2, [r3, #4]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f022 0202 	bic.w	r2, r2, #2
 8007198:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f7f9 fd03 	bl	8000bb4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80071ae:	bf00      	nop
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b084      	sub	sp, #16
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f7f9 fd07 	bl	8000bd8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80071ca:	bf00      	nop
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b084      	sub	sp, #16
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071de:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	685a      	ldr	r2, [r3, #4]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f022 0203 	bic.w	r2, r2, #3
 80071ee:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007208:	f043 0208 	orr.w	r2, r3, #8
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f7ff ffa5 	bl	8007160 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007216:	bf00      	nop
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b082      	sub	sp, #8
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722a:	881a      	ldrh	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007236:	1c9a      	adds	r2, r3, #2
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007240:	b29b      	uxth	r3, r3
 8007242:	3b01      	subs	r3, #1
 8007244:	b29a      	uxth	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800724e:	b29b      	uxth	r3, r3
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10e      	bne.n	8007272 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	685a      	ldr	r2, [r3, #4]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007262:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f7f9 fca1 	bl	8000bb4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007272:	bf00      	nop
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b082      	sub	sp, #8
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68da      	ldr	r2, [r3, #12]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728c:	b292      	uxth	r2, r2
 800728e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007294:	1c9a      	adds	r2, r3, #2
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800729e:	b29b      	uxth	r3, r3
 80072a0:	3b01      	subs	r3, #1
 80072a2:	b29a      	uxth	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10e      	bne.n	80072d0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	685a      	ldr	r2, [r3, #4]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80072c0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7ff ff3e 	bl	800714c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80072d0:	bf00      	nop
 80072d2:	3708      	adds	r7, #8
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	2b04      	cmp	r3, #4
 80072f2:	d13a      	bne.n	800736a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f003 0301 	and.w	r3, r3, #1
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d109      	bne.n	8007312 <I2S_IRQHandler+0x3a>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007308:	2b40      	cmp	r3, #64	; 0x40
 800730a:	d102      	bne.n	8007312 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f7ff ffb4 	bl	800727a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007318:	2b40      	cmp	r3, #64	; 0x40
 800731a:	d126      	bne.n	800736a <I2S_IRQHandler+0x92>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f003 0320 	and.w	r3, r3, #32
 8007326:	2b20      	cmp	r3, #32
 8007328:	d11f      	bne.n	800736a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	685a      	ldr	r2, [r3, #4]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007338:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800733a:	2300      	movs	r3, #0
 800733c:	613b      	str	r3, [r7, #16]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	613b      	str	r3, [r7, #16]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	613b      	str	r3, [r7, #16]
 800734e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800735c:	f043 0202 	orr.w	r2, r3, #2
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f7ff fefb 	bl	8007160 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b03      	cmp	r3, #3
 8007374:	d136      	bne.n	80073e4 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f003 0302 	and.w	r3, r3, #2
 800737c:	2b02      	cmp	r3, #2
 800737e:	d109      	bne.n	8007394 <I2S_IRQHandler+0xbc>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800738a:	2b80      	cmp	r3, #128	; 0x80
 800738c:	d102      	bne.n	8007394 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f7ff ff45 	bl	800721e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	f003 0308 	and.w	r3, r3, #8
 800739a:	2b08      	cmp	r3, #8
 800739c:	d122      	bne.n	80073e4 <I2S_IRQHandler+0x10c>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	f003 0320 	and.w	r3, r3, #32
 80073a8:	2b20      	cmp	r3, #32
 80073aa:	d11b      	bne.n	80073e4 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685a      	ldr	r2, [r3, #4]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80073ba:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80073bc:	2300      	movs	r3, #0
 80073be:	60fb      	str	r3, [r7, #12]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	60fb      	str	r3, [r7, #12]
 80073c8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073d6:	f043 0204 	orr.w	r2, r3, #4
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7ff febe 	bl	8007160 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80073e4:	bf00      	nop
 80073e6:	3718      	adds	r7, #24
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	603b      	str	r3, [r7, #0]
 80073f8:	4613      	mov	r3, r2
 80073fa:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80073fc:	f7fb f88e 	bl	800251c <HAL_GetTick>
 8007400:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8007402:	e018      	b.n	8007436 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800740a:	d014      	beq.n	8007436 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800740c:	f7fb f886 	bl	800251c <HAL_GetTick>
 8007410:	4602      	mov	r2, r0
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	683a      	ldr	r2, [r7, #0]
 8007418:	429a      	cmp	r2, r3
 800741a:	d902      	bls.n	8007422 <I2S_WaitFlagStateUntilTimeout+0x36>
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d109      	bne.n	8007436 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	e00f      	b.n	8007456 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	689a      	ldr	r2, [r3, #8]
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	4013      	ands	r3, r2
 8007440:	68ba      	ldr	r2, [r7, #8]
 8007442:	429a      	cmp	r2, r3
 8007444:	bf0c      	ite	eq
 8007446:	2301      	moveq	r3, #1
 8007448:	2300      	movne	r3, #0
 800744a:	b2db      	uxtb	r3, r3
 800744c:	461a      	mov	r2, r3
 800744e:	79fb      	ldrb	r3, [r7, #7]
 8007450:	429a      	cmp	r2, r3
 8007452:	d1d7      	bne.n	8007404 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3718      	adds	r7, #24
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
	...

08007460 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b088      	sub	sp, #32
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4aa2      	ldr	r2, [pc, #648]	; (8007700 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d101      	bne.n	800747e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800747a:	4ba2      	ldr	r3, [pc, #648]	; (8007704 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800747c:	e001      	b.n	8007482 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800747e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a9b      	ldr	r2, [pc, #620]	; (8007700 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d101      	bne.n	800749c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007498:	4b9a      	ldr	r3, [pc, #616]	; (8007704 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800749a:	e001      	b.n	80074a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800749c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074ac:	d004      	beq.n	80074b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f040 8099 	bne.w	80075ea <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	f003 0302 	and.w	r3, r3, #2
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d107      	bne.n	80074d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d002      	beq.n	80074d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 f925 	bl	800771c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	f003 0301 	and.w	r3, r3, #1
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d107      	bne.n	80074ec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d002      	beq.n	80074ec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f9c8 	bl	800787c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f2:	2b40      	cmp	r3, #64	; 0x40
 80074f4:	d13a      	bne.n	800756c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	f003 0320 	and.w	r3, r3, #32
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d035      	beq.n	800756c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a7e      	ldr	r2, [pc, #504]	; (8007700 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d101      	bne.n	800750e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800750a:	4b7e      	ldr	r3, [pc, #504]	; (8007704 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800750c:	e001      	b.n	8007512 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800750e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007512:	685a      	ldr	r2, [r3, #4]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4979      	ldr	r1, [pc, #484]	; (8007700 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800751a:	428b      	cmp	r3, r1
 800751c:	d101      	bne.n	8007522 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800751e:	4b79      	ldr	r3, [pc, #484]	; (8007704 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007520:	e001      	b.n	8007526 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8007522:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007526:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800752a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	685a      	ldr	r2, [r3, #4]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800753a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800753c:	2300      	movs	r3, #0
 800753e:	60fb      	str	r3, [r7, #12]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	60fb      	str	r3, [r7, #12]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	60fb      	str	r3, [r7, #12]
 8007550:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800755e:	f043 0202 	orr.w	r2, r3, #2
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7ff fdfa 	bl	8007160 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	f003 0308 	and.w	r3, r3, #8
 8007572:	2b08      	cmp	r3, #8
 8007574:	f040 80be 	bne.w	80076f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	f003 0320 	and.w	r3, r3, #32
 800757e:	2b00      	cmp	r3, #0
 8007580:	f000 80b8 	beq.w	80076f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	685a      	ldr	r2, [r3, #4]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007592:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a59      	ldr	r2, [pc, #356]	; (8007700 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d101      	bne.n	80075a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800759e:	4b59      	ldr	r3, [pc, #356]	; (8007704 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80075a0:	e001      	b.n	80075a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80075a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80075a6:	685a      	ldr	r2, [r3, #4]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4954      	ldr	r1, [pc, #336]	; (8007700 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80075ae:	428b      	cmp	r3, r1
 80075b0:	d101      	bne.n	80075b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80075b2:	4b54      	ldr	r3, [pc, #336]	; (8007704 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80075b4:	e001      	b.n	80075ba <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80075b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80075ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80075be:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80075c0:	2300      	movs	r3, #0
 80075c2:	60bb      	str	r3, [r7, #8]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	60bb      	str	r3, [r7, #8]
 80075cc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075da:	f043 0204 	orr.w	r2, r3, #4
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f7ff fdbc 	bl	8007160 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80075e8:	e084      	b.n	80076f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	f003 0302 	and.w	r3, r3, #2
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d107      	bne.n	8007604 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d002      	beq.n	8007604 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f8be 	bl	8007780 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	2b01      	cmp	r3, #1
 800760c:	d107      	bne.n	800761e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007614:	2b00      	cmp	r3, #0
 8007616:	d002      	beq.n	800761e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 f8fd 	bl	8007818 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007624:	2b40      	cmp	r3, #64	; 0x40
 8007626:	d12f      	bne.n	8007688 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	f003 0320 	and.w	r3, r3, #32
 800762e:	2b00      	cmp	r3, #0
 8007630:	d02a      	beq.n	8007688 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	685a      	ldr	r2, [r3, #4]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007640:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a2e      	ldr	r2, [pc, #184]	; (8007700 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d101      	bne.n	8007650 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800764c:	4b2d      	ldr	r3, [pc, #180]	; (8007704 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800764e:	e001      	b.n	8007654 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8007650:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007654:	685a      	ldr	r2, [r3, #4]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4929      	ldr	r1, [pc, #164]	; (8007700 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800765c:	428b      	cmp	r3, r1
 800765e:	d101      	bne.n	8007664 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007660:	4b28      	ldr	r3, [pc, #160]	; (8007704 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007662:	e001      	b.n	8007668 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007664:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007668:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800766c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800767a:	f043 0202 	orr.w	r2, r3, #2
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f7ff fd6c 	bl	8007160 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	f003 0308 	and.w	r3, r3, #8
 800768e:	2b08      	cmp	r3, #8
 8007690:	d131      	bne.n	80076f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	f003 0320 	and.w	r3, r3, #32
 8007698:	2b00      	cmp	r3, #0
 800769a:	d02c      	beq.n	80076f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a17      	ldr	r2, [pc, #92]	; (8007700 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d101      	bne.n	80076aa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80076a6:	4b17      	ldr	r3, [pc, #92]	; (8007704 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80076a8:	e001      	b.n	80076ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80076aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4912      	ldr	r1, [pc, #72]	; (8007700 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80076b6:	428b      	cmp	r3, r1
 80076b8:	d101      	bne.n	80076be <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80076ba:	4b12      	ldr	r3, [pc, #72]	; (8007704 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80076bc:	e001      	b.n	80076c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80076be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80076c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80076c6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80076d6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076e4:	f043 0204 	orr.w	r2, r3, #4
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f7ff fd37 	bl	8007160 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80076f2:	e000      	b.n	80076f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80076f4:	bf00      	nop
}
 80076f6:	bf00      	nop
 80076f8:	3720      	adds	r7, #32
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	40003800 	.word	0x40003800
 8007704:	40003400 	.word	0x40003400

08007708 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007728:	1c99      	adds	r1, r3, #2
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	6251      	str	r1, [r2, #36]	; 0x24
 800772e:	881a      	ldrh	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800773a:	b29b      	uxth	r3, r3
 800773c:	3b01      	subs	r3, #1
 800773e:	b29a      	uxth	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007748:	b29b      	uxth	r3, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	d113      	bne.n	8007776 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	685a      	ldr	r2, [r3, #4]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800775c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007762:	b29b      	uxth	r3, r3
 8007764:	2b00      	cmp	r3, #0
 8007766:	d106      	bne.n	8007776 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7ff ffc9 	bl	8007708 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007776:	bf00      	nop
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
	...

08007780 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778c:	1c99      	adds	r1, r3, #2
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	6251      	str	r1, [r2, #36]	; 0x24
 8007792:	8819      	ldrh	r1, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a1d      	ldr	r2, [pc, #116]	; (8007810 <I2SEx_TxISR_I2SExt+0x90>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d101      	bne.n	80077a2 <I2SEx_TxISR_I2SExt+0x22>
 800779e:	4b1d      	ldr	r3, [pc, #116]	; (8007814 <I2SEx_TxISR_I2SExt+0x94>)
 80077a0:	e001      	b.n	80077a6 <I2SEx_TxISR_I2SExt+0x26>
 80077a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80077a6:	460a      	mov	r2, r1
 80077a8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	3b01      	subs	r3, #1
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077bc:	b29b      	uxth	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d121      	bne.n	8007806 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a12      	ldr	r2, [pc, #72]	; (8007810 <I2SEx_TxISR_I2SExt+0x90>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d101      	bne.n	80077d0 <I2SEx_TxISR_I2SExt+0x50>
 80077cc:	4b11      	ldr	r3, [pc, #68]	; (8007814 <I2SEx_TxISR_I2SExt+0x94>)
 80077ce:	e001      	b.n	80077d4 <I2SEx_TxISR_I2SExt+0x54>
 80077d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80077d4:	685a      	ldr	r2, [r3, #4]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	490d      	ldr	r1, [pc, #52]	; (8007810 <I2SEx_TxISR_I2SExt+0x90>)
 80077dc:	428b      	cmp	r3, r1
 80077de:	d101      	bne.n	80077e4 <I2SEx_TxISR_I2SExt+0x64>
 80077e0:	4b0c      	ldr	r3, [pc, #48]	; (8007814 <I2SEx_TxISR_I2SExt+0x94>)
 80077e2:	e001      	b.n	80077e8 <I2SEx_TxISR_I2SExt+0x68>
 80077e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80077e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80077ec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d106      	bne.n	8007806 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7ff ff81 	bl	8007708 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007806:	bf00      	nop
 8007808:	3708      	adds	r7, #8
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	40003800 	.word	0x40003800
 8007814:	40003400 	.word	0x40003400

08007818 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68d8      	ldr	r0, [r3, #12]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782a:	1c99      	adds	r1, r3, #2
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007830:	b282      	uxth	r2, r0
 8007832:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007838:	b29b      	uxth	r3, r3
 800783a:	3b01      	subs	r3, #1
 800783c:	b29a      	uxth	r2, r3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007846:	b29b      	uxth	r3, r3
 8007848:	2b00      	cmp	r3, #0
 800784a:	d113      	bne.n	8007874 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	685a      	ldr	r2, [r3, #4]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800785a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007860:	b29b      	uxth	r3, r3
 8007862:	2b00      	cmp	r3, #0
 8007864:	d106      	bne.n	8007874 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2201      	movs	r2, #1
 800786a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f7ff ff4a 	bl	8007708 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007874:	bf00      	nop
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a20      	ldr	r2, [pc, #128]	; (800790c <I2SEx_RxISR_I2SExt+0x90>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d101      	bne.n	8007892 <I2SEx_RxISR_I2SExt+0x16>
 800788e:	4b20      	ldr	r3, [pc, #128]	; (8007910 <I2SEx_RxISR_I2SExt+0x94>)
 8007890:	e001      	b.n	8007896 <I2SEx_RxISR_I2SExt+0x1a>
 8007892:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007896:	68d8      	ldr	r0, [r3, #12]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789c:	1c99      	adds	r1, r3, #2
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80078a2:	b282      	uxth	r2, r0
 80078a4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	3b01      	subs	r3, #1
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d121      	bne.n	8007902 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a12      	ldr	r2, [pc, #72]	; (800790c <I2SEx_RxISR_I2SExt+0x90>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d101      	bne.n	80078cc <I2SEx_RxISR_I2SExt+0x50>
 80078c8:	4b11      	ldr	r3, [pc, #68]	; (8007910 <I2SEx_RxISR_I2SExt+0x94>)
 80078ca:	e001      	b.n	80078d0 <I2SEx_RxISR_I2SExt+0x54>
 80078cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	490d      	ldr	r1, [pc, #52]	; (800790c <I2SEx_RxISR_I2SExt+0x90>)
 80078d8:	428b      	cmp	r3, r1
 80078da:	d101      	bne.n	80078e0 <I2SEx_RxISR_I2SExt+0x64>
 80078dc:	4b0c      	ldr	r3, [pc, #48]	; (8007910 <I2SEx_RxISR_I2SExt+0x94>)
 80078de:	e001      	b.n	80078e4 <I2SEx_RxISR_I2SExt+0x68>
 80078e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80078e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80078e8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d106      	bne.n	8007902 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f7ff ff03 	bl	8007708 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007902:	bf00      	nop
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	40003800 	.word	0x40003800
 8007910:	40003400 	.word	0x40003400

08007914 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b086      	sub	sp, #24
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d101      	bne.n	8007926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e264      	b.n	8007df0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	2b00      	cmp	r3, #0
 8007930:	d075      	beq.n	8007a1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007932:	4ba3      	ldr	r3, [pc, #652]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	f003 030c 	and.w	r3, r3, #12
 800793a:	2b04      	cmp	r3, #4
 800793c:	d00c      	beq.n	8007958 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800793e:	4ba0      	ldr	r3, [pc, #640]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007946:	2b08      	cmp	r3, #8
 8007948:	d112      	bne.n	8007970 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800794a:	4b9d      	ldr	r3, [pc, #628]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007952:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007956:	d10b      	bne.n	8007970 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007958:	4b99      	ldr	r3, [pc, #612]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007960:	2b00      	cmp	r3, #0
 8007962:	d05b      	beq.n	8007a1c <HAL_RCC_OscConfig+0x108>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d157      	bne.n	8007a1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e23f      	b.n	8007df0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007978:	d106      	bne.n	8007988 <HAL_RCC_OscConfig+0x74>
 800797a:	4b91      	ldr	r3, [pc, #580]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a90      	ldr	r2, [pc, #576]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 8007980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007984:	6013      	str	r3, [r2, #0]
 8007986:	e01d      	b.n	80079c4 <HAL_RCC_OscConfig+0xb0>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007990:	d10c      	bne.n	80079ac <HAL_RCC_OscConfig+0x98>
 8007992:	4b8b      	ldr	r3, [pc, #556]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a8a      	ldr	r2, [pc, #552]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 8007998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800799c:	6013      	str	r3, [r2, #0]
 800799e:	4b88      	ldr	r3, [pc, #544]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a87      	ldr	r2, [pc, #540]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 80079a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079a8:	6013      	str	r3, [r2, #0]
 80079aa:	e00b      	b.n	80079c4 <HAL_RCC_OscConfig+0xb0>
 80079ac:	4b84      	ldr	r3, [pc, #528]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a83      	ldr	r2, [pc, #524]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 80079b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079b6:	6013      	str	r3, [r2, #0]
 80079b8:	4b81      	ldr	r3, [pc, #516]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a80      	ldr	r2, [pc, #512]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 80079be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d013      	beq.n	80079f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079cc:	f7fa fda6 	bl	800251c <HAL_GetTick>
 80079d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079d2:	e008      	b.n	80079e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079d4:	f7fa fda2 	bl	800251c <HAL_GetTick>
 80079d8:	4602      	mov	r2, r0
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	2b64      	cmp	r3, #100	; 0x64
 80079e0:	d901      	bls.n	80079e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e204      	b.n	8007df0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079e6:	4b76      	ldr	r3, [pc, #472]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d0f0      	beq.n	80079d4 <HAL_RCC_OscConfig+0xc0>
 80079f2:	e014      	b.n	8007a1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079f4:	f7fa fd92 	bl	800251c <HAL_GetTick>
 80079f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079fa:	e008      	b.n	8007a0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079fc:	f7fa fd8e 	bl	800251c <HAL_GetTick>
 8007a00:	4602      	mov	r2, r0
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	2b64      	cmp	r3, #100	; 0x64
 8007a08:	d901      	bls.n	8007a0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e1f0      	b.n	8007df0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a0e:	4b6c      	ldr	r3, [pc, #432]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1f0      	bne.n	80079fc <HAL_RCC_OscConfig+0xe8>
 8007a1a:	e000      	b.n	8007a1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 0302 	and.w	r3, r3, #2
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d063      	beq.n	8007af2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007a2a:	4b65      	ldr	r3, [pc, #404]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	f003 030c 	and.w	r3, r3, #12
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00b      	beq.n	8007a4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a36:	4b62      	ldr	r3, [pc, #392]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007a3e:	2b08      	cmp	r3, #8
 8007a40:	d11c      	bne.n	8007a7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a42:	4b5f      	ldr	r3, [pc, #380]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d116      	bne.n	8007a7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a4e:	4b5c      	ldr	r3, [pc, #368]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 0302 	and.w	r3, r3, #2
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d005      	beq.n	8007a66 <HAL_RCC_OscConfig+0x152>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d001      	beq.n	8007a66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e1c4      	b.n	8007df0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a66:	4b56      	ldr	r3, [pc, #344]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	00db      	lsls	r3, r3, #3
 8007a74:	4952      	ldr	r1, [pc, #328]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 8007a76:	4313      	orrs	r3, r2
 8007a78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a7a:	e03a      	b.n	8007af2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d020      	beq.n	8007ac6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a84:	4b4f      	ldr	r3, [pc, #316]	; (8007bc4 <HAL_RCC_OscConfig+0x2b0>)
 8007a86:	2201      	movs	r2, #1
 8007a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a8a:	f7fa fd47 	bl	800251c <HAL_GetTick>
 8007a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a90:	e008      	b.n	8007aa4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a92:	f7fa fd43 	bl	800251c <HAL_GetTick>
 8007a96:	4602      	mov	r2, r0
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d901      	bls.n	8007aa4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e1a5      	b.n	8007df0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007aa4:	4b46      	ldr	r3, [pc, #280]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 0302 	and.w	r3, r3, #2
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d0f0      	beq.n	8007a92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ab0:	4b43      	ldr	r3, [pc, #268]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	00db      	lsls	r3, r3, #3
 8007abe:	4940      	ldr	r1, [pc, #256]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	600b      	str	r3, [r1, #0]
 8007ac4:	e015      	b.n	8007af2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ac6:	4b3f      	ldr	r3, [pc, #252]	; (8007bc4 <HAL_RCC_OscConfig+0x2b0>)
 8007ac8:	2200      	movs	r2, #0
 8007aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007acc:	f7fa fd26 	bl	800251c <HAL_GetTick>
 8007ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ad2:	e008      	b.n	8007ae6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ad4:	f7fa fd22 	bl	800251c <HAL_GetTick>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	1ad3      	subs	r3, r2, r3
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d901      	bls.n	8007ae6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	e184      	b.n	8007df0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ae6:	4b36      	ldr	r3, [pc, #216]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 0302 	and.w	r3, r3, #2
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1f0      	bne.n	8007ad4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0308 	and.w	r3, r3, #8
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d030      	beq.n	8007b60 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d016      	beq.n	8007b34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b06:	4b30      	ldr	r3, [pc, #192]	; (8007bc8 <HAL_RCC_OscConfig+0x2b4>)
 8007b08:	2201      	movs	r2, #1
 8007b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b0c:	f7fa fd06 	bl	800251c <HAL_GetTick>
 8007b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b12:	e008      	b.n	8007b26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b14:	f7fa fd02 	bl	800251c <HAL_GetTick>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d901      	bls.n	8007b26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e164      	b.n	8007df0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b26:	4b26      	ldr	r3, [pc, #152]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 8007b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b2a:	f003 0302 	and.w	r3, r3, #2
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d0f0      	beq.n	8007b14 <HAL_RCC_OscConfig+0x200>
 8007b32:	e015      	b.n	8007b60 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b34:	4b24      	ldr	r3, [pc, #144]	; (8007bc8 <HAL_RCC_OscConfig+0x2b4>)
 8007b36:	2200      	movs	r2, #0
 8007b38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b3a:	f7fa fcef 	bl	800251c <HAL_GetTick>
 8007b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b40:	e008      	b.n	8007b54 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b42:	f7fa fceb 	bl	800251c <HAL_GetTick>
 8007b46:	4602      	mov	r2, r0
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d901      	bls.n	8007b54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e14d      	b.n	8007df0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b54:	4b1a      	ldr	r3, [pc, #104]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 8007b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b58:	f003 0302 	and.w	r3, r3, #2
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1f0      	bne.n	8007b42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0304 	and.w	r3, r3, #4
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 80a0 	beq.w	8007cae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b72:	4b13      	ldr	r3, [pc, #76]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 8007b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10f      	bne.n	8007b9e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b7e:	2300      	movs	r3, #0
 8007b80:	60bb      	str	r3, [r7, #8]
 8007b82:	4b0f      	ldr	r3, [pc, #60]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 8007b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b86:	4a0e      	ldr	r2, [pc, #56]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 8007b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8007b8e:	4b0c      	ldr	r3, [pc, #48]	; (8007bc0 <HAL_RCC_OscConfig+0x2ac>)
 8007b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b96:	60bb      	str	r3, [r7, #8]
 8007b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b9e:	4b0b      	ldr	r3, [pc, #44]	; (8007bcc <HAL_RCC_OscConfig+0x2b8>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d121      	bne.n	8007bee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007baa:	4b08      	ldr	r3, [pc, #32]	; (8007bcc <HAL_RCC_OscConfig+0x2b8>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a07      	ldr	r2, [pc, #28]	; (8007bcc <HAL_RCC_OscConfig+0x2b8>)
 8007bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007bb6:	f7fa fcb1 	bl	800251c <HAL_GetTick>
 8007bba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bbc:	e011      	b.n	8007be2 <HAL_RCC_OscConfig+0x2ce>
 8007bbe:	bf00      	nop
 8007bc0:	40023800 	.word	0x40023800
 8007bc4:	42470000 	.word	0x42470000
 8007bc8:	42470e80 	.word	0x42470e80
 8007bcc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bd0:	f7fa fca4 	bl	800251c <HAL_GetTick>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d901      	bls.n	8007be2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e106      	b.n	8007df0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007be2:	4b85      	ldr	r3, [pc, #532]	; (8007df8 <HAL_RCC_OscConfig+0x4e4>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d0f0      	beq.n	8007bd0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d106      	bne.n	8007c04 <HAL_RCC_OscConfig+0x2f0>
 8007bf6:	4b81      	ldr	r3, [pc, #516]	; (8007dfc <HAL_RCC_OscConfig+0x4e8>)
 8007bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bfa:	4a80      	ldr	r2, [pc, #512]	; (8007dfc <HAL_RCC_OscConfig+0x4e8>)
 8007bfc:	f043 0301 	orr.w	r3, r3, #1
 8007c00:	6713      	str	r3, [r2, #112]	; 0x70
 8007c02:	e01c      	b.n	8007c3e <HAL_RCC_OscConfig+0x32a>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	2b05      	cmp	r3, #5
 8007c0a:	d10c      	bne.n	8007c26 <HAL_RCC_OscConfig+0x312>
 8007c0c:	4b7b      	ldr	r3, [pc, #492]	; (8007dfc <HAL_RCC_OscConfig+0x4e8>)
 8007c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c10:	4a7a      	ldr	r2, [pc, #488]	; (8007dfc <HAL_RCC_OscConfig+0x4e8>)
 8007c12:	f043 0304 	orr.w	r3, r3, #4
 8007c16:	6713      	str	r3, [r2, #112]	; 0x70
 8007c18:	4b78      	ldr	r3, [pc, #480]	; (8007dfc <HAL_RCC_OscConfig+0x4e8>)
 8007c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c1c:	4a77      	ldr	r2, [pc, #476]	; (8007dfc <HAL_RCC_OscConfig+0x4e8>)
 8007c1e:	f043 0301 	orr.w	r3, r3, #1
 8007c22:	6713      	str	r3, [r2, #112]	; 0x70
 8007c24:	e00b      	b.n	8007c3e <HAL_RCC_OscConfig+0x32a>
 8007c26:	4b75      	ldr	r3, [pc, #468]	; (8007dfc <HAL_RCC_OscConfig+0x4e8>)
 8007c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c2a:	4a74      	ldr	r2, [pc, #464]	; (8007dfc <HAL_RCC_OscConfig+0x4e8>)
 8007c2c:	f023 0301 	bic.w	r3, r3, #1
 8007c30:	6713      	str	r3, [r2, #112]	; 0x70
 8007c32:	4b72      	ldr	r3, [pc, #456]	; (8007dfc <HAL_RCC_OscConfig+0x4e8>)
 8007c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c36:	4a71      	ldr	r2, [pc, #452]	; (8007dfc <HAL_RCC_OscConfig+0x4e8>)
 8007c38:	f023 0304 	bic.w	r3, r3, #4
 8007c3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d015      	beq.n	8007c72 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c46:	f7fa fc69 	bl	800251c <HAL_GetTick>
 8007c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c4c:	e00a      	b.n	8007c64 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c4e:	f7fa fc65 	bl	800251c <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d901      	bls.n	8007c64 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007c60:	2303      	movs	r3, #3
 8007c62:	e0c5      	b.n	8007df0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c64:	4b65      	ldr	r3, [pc, #404]	; (8007dfc <HAL_RCC_OscConfig+0x4e8>)
 8007c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c68:	f003 0302 	and.w	r3, r3, #2
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d0ee      	beq.n	8007c4e <HAL_RCC_OscConfig+0x33a>
 8007c70:	e014      	b.n	8007c9c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c72:	f7fa fc53 	bl	800251c <HAL_GetTick>
 8007c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c78:	e00a      	b.n	8007c90 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c7a:	f7fa fc4f 	bl	800251c <HAL_GetTick>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d901      	bls.n	8007c90 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	e0af      	b.n	8007df0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c90:	4b5a      	ldr	r3, [pc, #360]	; (8007dfc <HAL_RCC_OscConfig+0x4e8>)
 8007c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c94:	f003 0302 	and.w	r3, r3, #2
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1ee      	bne.n	8007c7a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c9c:	7dfb      	ldrb	r3, [r7, #23]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d105      	bne.n	8007cae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ca2:	4b56      	ldr	r3, [pc, #344]	; (8007dfc <HAL_RCC_OscConfig+0x4e8>)
 8007ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca6:	4a55      	ldr	r2, [pc, #340]	; (8007dfc <HAL_RCC_OscConfig+0x4e8>)
 8007ca8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	f000 809b 	beq.w	8007dee <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007cb8:	4b50      	ldr	r3, [pc, #320]	; (8007dfc <HAL_RCC_OscConfig+0x4e8>)
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	f003 030c 	and.w	r3, r3, #12
 8007cc0:	2b08      	cmp	r3, #8
 8007cc2:	d05c      	beq.n	8007d7e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d141      	bne.n	8007d50 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ccc:	4b4c      	ldr	r3, [pc, #304]	; (8007e00 <HAL_RCC_OscConfig+0x4ec>)
 8007cce:	2200      	movs	r2, #0
 8007cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cd2:	f7fa fc23 	bl	800251c <HAL_GetTick>
 8007cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cd8:	e008      	b.n	8007cec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007cda:	f7fa fc1f 	bl	800251c <HAL_GetTick>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	1ad3      	subs	r3, r2, r3
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	d901      	bls.n	8007cec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007ce8:	2303      	movs	r3, #3
 8007cea:	e081      	b.n	8007df0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cec:	4b43      	ldr	r3, [pc, #268]	; (8007dfc <HAL_RCC_OscConfig+0x4e8>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1f0      	bne.n	8007cda <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	69da      	ldr	r2, [r3, #28]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a1b      	ldr	r3, [r3, #32]
 8007d00:	431a      	orrs	r2, r3
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d06:	019b      	lsls	r3, r3, #6
 8007d08:	431a      	orrs	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0e:	085b      	lsrs	r3, r3, #1
 8007d10:	3b01      	subs	r3, #1
 8007d12:	041b      	lsls	r3, r3, #16
 8007d14:	431a      	orrs	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1a:	061b      	lsls	r3, r3, #24
 8007d1c:	4937      	ldr	r1, [pc, #220]	; (8007dfc <HAL_RCC_OscConfig+0x4e8>)
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d22:	4b37      	ldr	r3, [pc, #220]	; (8007e00 <HAL_RCC_OscConfig+0x4ec>)
 8007d24:	2201      	movs	r2, #1
 8007d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d28:	f7fa fbf8 	bl	800251c <HAL_GetTick>
 8007d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d2e:	e008      	b.n	8007d42 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d30:	f7fa fbf4 	bl	800251c <HAL_GetTick>
 8007d34:	4602      	mov	r2, r0
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d901      	bls.n	8007d42 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	e056      	b.n	8007df0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d42:	4b2e      	ldr	r3, [pc, #184]	; (8007dfc <HAL_RCC_OscConfig+0x4e8>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d0f0      	beq.n	8007d30 <HAL_RCC_OscConfig+0x41c>
 8007d4e:	e04e      	b.n	8007dee <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d50:	4b2b      	ldr	r3, [pc, #172]	; (8007e00 <HAL_RCC_OscConfig+0x4ec>)
 8007d52:	2200      	movs	r2, #0
 8007d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d56:	f7fa fbe1 	bl	800251c <HAL_GetTick>
 8007d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d5c:	e008      	b.n	8007d70 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d5e:	f7fa fbdd 	bl	800251c <HAL_GetTick>
 8007d62:	4602      	mov	r2, r0
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d901      	bls.n	8007d70 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e03f      	b.n	8007df0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d70:	4b22      	ldr	r3, [pc, #136]	; (8007dfc <HAL_RCC_OscConfig+0x4e8>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1f0      	bne.n	8007d5e <HAL_RCC_OscConfig+0x44a>
 8007d7c:	e037      	b.n	8007dee <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d101      	bne.n	8007d8a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e032      	b.n	8007df0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007d8a:	4b1c      	ldr	r3, [pc, #112]	; (8007dfc <HAL_RCC_OscConfig+0x4e8>)
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d028      	beq.n	8007dea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d121      	bne.n	8007dea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d11a      	bne.n	8007dea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007dba:	4013      	ands	r3, r2
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007dc0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d111      	bne.n	8007dea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd0:	085b      	lsrs	r3, r3, #1
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d107      	bne.n	8007dea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d001      	beq.n	8007dee <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e000      	b.n	8007df0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3718      	adds	r7, #24
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	40007000 	.word	0x40007000
 8007dfc:	40023800 	.word	0x40023800
 8007e00:	42470060 	.word	0x42470060

08007e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d101      	bne.n	8007e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e0cc      	b.n	8007fb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007e18:	4b68      	ldr	r3, [pc, #416]	; (8007fbc <HAL_RCC_ClockConfig+0x1b8>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 0307 	and.w	r3, r3, #7
 8007e20:	683a      	ldr	r2, [r7, #0]
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d90c      	bls.n	8007e40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e26:	4b65      	ldr	r3, [pc, #404]	; (8007fbc <HAL_RCC_ClockConfig+0x1b8>)
 8007e28:	683a      	ldr	r2, [r7, #0]
 8007e2a:	b2d2      	uxtb	r2, r2
 8007e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e2e:	4b63      	ldr	r3, [pc, #396]	; (8007fbc <HAL_RCC_ClockConfig+0x1b8>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 0307 	and.w	r3, r3, #7
 8007e36:	683a      	ldr	r2, [r7, #0]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d001      	beq.n	8007e40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e0b8      	b.n	8007fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 0302 	and.w	r3, r3, #2
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d020      	beq.n	8007e8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 0304 	and.w	r3, r3, #4
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d005      	beq.n	8007e64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e58:	4b59      	ldr	r3, [pc, #356]	; (8007fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	4a58      	ldr	r2, [pc, #352]	; (8007fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8007e5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007e62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 0308 	and.w	r3, r3, #8
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d005      	beq.n	8007e7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e70:	4b53      	ldr	r3, [pc, #332]	; (8007fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	4a52      	ldr	r2, [pc, #328]	; (8007fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8007e76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007e7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e7c:	4b50      	ldr	r3, [pc, #320]	; (8007fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	494d      	ldr	r1, [pc, #308]	; (8007fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d044      	beq.n	8007f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d107      	bne.n	8007eb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ea2:	4b47      	ldr	r3, [pc, #284]	; (8007fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d119      	bne.n	8007ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e07f      	b.n	8007fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	d003      	beq.n	8007ec2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ebe:	2b03      	cmp	r3, #3
 8007ec0:	d107      	bne.n	8007ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ec2:	4b3f      	ldr	r3, [pc, #252]	; (8007fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d109      	bne.n	8007ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e06f      	b.n	8007fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ed2:	4b3b      	ldr	r3, [pc, #236]	; (8007fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d101      	bne.n	8007ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e067      	b.n	8007fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ee2:	4b37      	ldr	r3, [pc, #220]	; (8007fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	f023 0203 	bic.w	r2, r3, #3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	4934      	ldr	r1, [pc, #208]	; (8007fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ef4:	f7fa fb12 	bl	800251c <HAL_GetTick>
 8007ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007efa:	e00a      	b.n	8007f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007efc:	f7fa fb0e 	bl	800251c <HAL_GetTick>
 8007f00:	4602      	mov	r2, r0
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	1ad3      	subs	r3, r2, r3
 8007f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d901      	bls.n	8007f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	e04f      	b.n	8007fb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f12:	4b2b      	ldr	r3, [pc, #172]	; (8007fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	f003 020c 	and.w	r2, r3, #12
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d1eb      	bne.n	8007efc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007f24:	4b25      	ldr	r3, [pc, #148]	; (8007fbc <HAL_RCC_ClockConfig+0x1b8>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 0307 	and.w	r3, r3, #7
 8007f2c:	683a      	ldr	r2, [r7, #0]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d20c      	bcs.n	8007f4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f32:	4b22      	ldr	r3, [pc, #136]	; (8007fbc <HAL_RCC_ClockConfig+0x1b8>)
 8007f34:	683a      	ldr	r2, [r7, #0]
 8007f36:	b2d2      	uxtb	r2, r2
 8007f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f3a:	4b20      	ldr	r3, [pc, #128]	; (8007fbc <HAL_RCC_ClockConfig+0x1b8>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0307 	and.w	r3, r3, #7
 8007f42:	683a      	ldr	r2, [r7, #0]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d001      	beq.n	8007f4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e032      	b.n	8007fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0304 	and.w	r3, r3, #4
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d008      	beq.n	8007f6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f58:	4b19      	ldr	r3, [pc, #100]	; (8007fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	4916      	ldr	r1, [pc, #88]	; (8007fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8007f66:	4313      	orrs	r3, r2
 8007f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 0308 	and.w	r3, r3, #8
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d009      	beq.n	8007f8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f76:	4b12      	ldr	r3, [pc, #72]	; (8007fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	00db      	lsls	r3, r3, #3
 8007f84:	490e      	ldr	r1, [pc, #56]	; (8007fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8007f86:	4313      	orrs	r3, r2
 8007f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007f8a:	f000 f821 	bl	8007fd0 <HAL_RCC_GetSysClockFreq>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	4b0b      	ldr	r3, [pc, #44]	; (8007fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	091b      	lsrs	r3, r3, #4
 8007f96:	f003 030f 	and.w	r3, r3, #15
 8007f9a:	490a      	ldr	r1, [pc, #40]	; (8007fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8007f9c:	5ccb      	ldrb	r3, [r1, r3]
 8007f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8007fa2:	4a09      	ldr	r2, [pc, #36]	; (8007fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8007fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007fa6:	4b09      	ldr	r3, [pc, #36]	; (8007fcc <HAL_RCC_ClockConfig+0x1c8>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7f9 ff4c 	bl	8001e48 <HAL_InitTick>

  return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	40023c00 	.word	0x40023c00
 8007fc0:	40023800 	.word	0x40023800
 8007fc4:	08010ce4 	.word	0x08010ce4
 8007fc8:	20000014 	.word	0x20000014
 8007fcc:	20000018 	.word	0x20000018

08007fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007fd4:	b084      	sub	sp, #16
 8007fd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	607b      	str	r3, [r7, #4]
 8007fdc:	2300      	movs	r3, #0
 8007fde:	60fb      	str	r3, [r7, #12]
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007fe8:	4b67      	ldr	r3, [pc, #412]	; (8008188 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	f003 030c 	and.w	r3, r3, #12
 8007ff0:	2b08      	cmp	r3, #8
 8007ff2:	d00d      	beq.n	8008010 <HAL_RCC_GetSysClockFreq+0x40>
 8007ff4:	2b08      	cmp	r3, #8
 8007ff6:	f200 80bd 	bhi.w	8008174 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d002      	beq.n	8008004 <HAL_RCC_GetSysClockFreq+0x34>
 8007ffe:	2b04      	cmp	r3, #4
 8008000:	d003      	beq.n	800800a <HAL_RCC_GetSysClockFreq+0x3a>
 8008002:	e0b7      	b.n	8008174 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008004:	4b61      	ldr	r3, [pc, #388]	; (800818c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008006:	60bb      	str	r3, [r7, #8]
       break;
 8008008:	e0b7      	b.n	800817a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800800a:	4b61      	ldr	r3, [pc, #388]	; (8008190 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800800c:	60bb      	str	r3, [r7, #8]
      break;
 800800e:	e0b4      	b.n	800817a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008010:	4b5d      	ldr	r3, [pc, #372]	; (8008188 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008018:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800801a:	4b5b      	ldr	r3, [pc, #364]	; (8008188 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d04d      	beq.n	80080c2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008026:	4b58      	ldr	r3, [pc, #352]	; (8008188 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	099b      	lsrs	r3, r3, #6
 800802c:	461a      	mov	r2, r3
 800802e:	f04f 0300 	mov.w	r3, #0
 8008032:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008036:	f04f 0100 	mov.w	r1, #0
 800803a:	ea02 0800 	and.w	r8, r2, r0
 800803e:	ea03 0901 	and.w	r9, r3, r1
 8008042:	4640      	mov	r0, r8
 8008044:	4649      	mov	r1, r9
 8008046:	f04f 0200 	mov.w	r2, #0
 800804a:	f04f 0300 	mov.w	r3, #0
 800804e:	014b      	lsls	r3, r1, #5
 8008050:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008054:	0142      	lsls	r2, r0, #5
 8008056:	4610      	mov	r0, r2
 8008058:	4619      	mov	r1, r3
 800805a:	ebb0 0008 	subs.w	r0, r0, r8
 800805e:	eb61 0109 	sbc.w	r1, r1, r9
 8008062:	f04f 0200 	mov.w	r2, #0
 8008066:	f04f 0300 	mov.w	r3, #0
 800806a:	018b      	lsls	r3, r1, #6
 800806c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008070:	0182      	lsls	r2, r0, #6
 8008072:	1a12      	subs	r2, r2, r0
 8008074:	eb63 0301 	sbc.w	r3, r3, r1
 8008078:	f04f 0000 	mov.w	r0, #0
 800807c:	f04f 0100 	mov.w	r1, #0
 8008080:	00d9      	lsls	r1, r3, #3
 8008082:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008086:	00d0      	lsls	r0, r2, #3
 8008088:	4602      	mov	r2, r0
 800808a:	460b      	mov	r3, r1
 800808c:	eb12 0208 	adds.w	r2, r2, r8
 8008090:	eb43 0309 	adc.w	r3, r3, r9
 8008094:	f04f 0000 	mov.w	r0, #0
 8008098:	f04f 0100 	mov.w	r1, #0
 800809c:	0259      	lsls	r1, r3, #9
 800809e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80080a2:	0250      	lsls	r0, r2, #9
 80080a4:	4602      	mov	r2, r0
 80080a6:	460b      	mov	r3, r1
 80080a8:	4610      	mov	r0, r2
 80080aa:	4619      	mov	r1, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	461a      	mov	r2, r3
 80080b0:	f04f 0300 	mov.w	r3, #0
 80080b4:	f7f8 f8dc 	bl	8000270 <__aeabi_uldivmod>
 80080b8:	4602      	mov	r2, r0
 80080ba:	460b      	mov	r3, r1
 80080bc:	4613      	mov	r3, r2
 80080be:	60fb      	str	r3, [r7, #12]
 80080c0:	e04a      	b.n	8008158 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080c2:	4b31      	ldr	r3, [pc, #196]	; (8008188 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	099b      	lsrs	r3, r3, #6
 80080c8:	461a      	mov	r2, r3
 80080ca:	f04f 0300 	mov.w	r3, #0
 80080ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80080d2:	f04f 0100 	mov.w	r1, #0
 80080d6:	ea02 0400 	and.w	r4, r2, r0
 80080da:	ea03 0501 	and.w	r5, r3, r1
 80080de:	4620      	mov	r0, r4
 80080e0:	4629      	mov	r1, r5
 80080e2:	f04f 0200 	mov.w	r2, #0
 80080e6:	f04f 0300 	mov.w	r3, #0
 80080ea:	014b      	lsls	r3, r1, #5
 80080ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80080f0:	0142      	lsls	r2, r0, #5
 80080f2:	4610      	mov	r0, r2
 80080f4:	4619      	mov	r1, r3
 80080f6:	1b00      	subs	r0, r0, r4
 80080f8:	eb61 0105 	sbc.w	r1, r1, r5
 80080fc:	f04f 0200 	mov.w	r2, #0
 8008100:	f04f 0300 	mov.w	r3, #0
 8008104:	018b      	lsls	r3, r1, #6
 8008106:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800810a:	0182      	lsls	r2, r0, #6
 800810c:	1a12      	subs	r2, r2, r0
 800810e:	eb63 0301 	sbc.w	r3, r3, r1
 8008112:	f04f 0000 	mov.w	r0, #0
 8008116:	f04f 0100 	mov.w	r1, #0
 800811a:	00d9      	lsls	r1, r3, #3
 800811c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008120:	00d0      	lsls	r0, r2, #3
 8008122:	4602      	mov	r2, r0
 8008124:	460b      	mov	r3, r1
 8008126:	1912      	adds	r2, r2, r4
 8008128:	eb45 0303 	adc.w	r3, r5, r3
 800812c:	f04f 0000 	mov.w	r0, #0
 8008130:	f04f 0100 	mov.w	r1, #0
 8008134:	0299      	lsls	r1, r3, #10
 8008136:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800813a:	0290      	lsls	r0, r2, #10
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	4610      	mov	r0, r2
 8008142:	4619      	mov	r1, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	461a      	mov	r2, r3
 8008148:	f04f 0300 	mov.w	r3, #0
 800814c:	f7f8 f890 	bl	8000270 <__aeabi_uldivmod>
 8008150:	4602      	mov	r2, r0
 8008152:	460b      	mov	r3, r1
 8008154:	4613      	mov	r3, r2
 8008156:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008158:	4b0b      	ldr	r3, [pc, #44]	; (8008188 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	0c1b      	lsrs	r3, r3, #16
 800815e:	f003 0303 	and.w	r3, r3, #3
 8008162:	3301      	adds	r3, #1
 8008164:	005b      	lsls	r3, r3, #1
 8008166:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008170:	60bb      	str	r3, [r7, #8]
      break;
 8008172:	e002      	b.n	800817a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008174:	4b05      	ldr	r3, [pc, #20]	; (800818c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008176:	60bb      	str	r3, [r7, #8]
      break;
 8008178:	bf00      	nop
    }
  }
  return sysclockfreq;
 800817a:	68bb      	ldr	r3, [r7, #8]
}
 800817c:	4618      	mov	r0, r3
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008186:	bf00      	nop
 8008188:	40023800 	.word	0x40023800
 800818c:	00f42400 	.word	0x00f42400
 8008190:	007a1200 	.word	0x007a1200

08008194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008194:	b480      	push	{r7}
 8008196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008198:	4b03      	ldr	r3, [pc, #12]	; (80081a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800819a:	681b      	ldr	r3, [r3, #0]
}
 800819c:	4618      	mov	r0, r3
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	20000014 	.word	0x20000014

080081ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80081b0:	f7ff fff0 	bl	8008194 <HAL_RCC_GetHCLKFreq>
 80081b4:	4602      	mov	r2, r0
 80081b6:	4b05      	ldr	r3, [pc, #20]	; (80081cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	0a9b      	lsrs	r3, r3, #10
 80081bc:	f003 0307 	and.w	r3, r3, #7
 80081c0:	4903      	ldr	r1, [pc, #12]	; (80081d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80081c2:	5ccb      	ldrb	r3, [r1, r3]
 80081c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	40023800 	.word	0x40023800
 80081d0:	08010cf4 	.word	0x08010cf4

080081d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80081d8:	f7ff ffdc 	bl	8008194 <HAL_RCC_GetHCLKFreq>
 80081dc:	4602      	mov	r2, r0
 80081de:	4b05      	ldr	r3, [pc, #20]	; (80081f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	0b5b      	lsrs	r3, r3, #13
 80081e4:	f003 0307 	and.w	r3, r3, #7
 80081e8:	4903      	ldr	r1, [pc, #12]	; (80081f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80081ea:	5ccb      	ldrb	r3, [r1, r3]
 80081ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	40023800 	.word	0x40023800
 80081f8:	08010cf4 	.word	0x08010cf4

080081fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	220f      	movs	r2, #15
 800820a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800820c:	4b12      	ldr	r3, [pc, #72]	; (8008258 <HAL_RCC_GetClockConfig+0x5c>)
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	f003 0203 	and.w	r2, r3, #3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008218:	4b0f      	ldr	r3, [pc, #60]	; (8008258 <HAL_RCC_GetClockConfig+0x5c>)
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008224:	4b0c      	ldr	r3, [pc, #48]	; (8008258 <HAL_RCC_GetClockConfig+0x5c>)
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008230:	4b09      	ldr	r3, [pc, #36]	; (8008258 <HAL_RCC_GetClockConfig+0x5c>)
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	08db      	lsrs	r3, r3, #3
 8008236:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800823e:	4b07      	ldr	r3, [pc, #28]	; (800825c <HAL_RCC_GetClockConfig+0x60>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 0207 	and.w	r2, r3, #7
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	601a      	str	r2, [r3, #0]
}
 800824a:	bf00      	nop
 800824c:	370c      	adds	r7, #12
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	40023800 	.word	0x40023800
 800825c:	40023c00 	.word	0x40023c00

08008260 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008268:	2300      	movs	r3, #0
 800826a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800826c:	2300      	movs	r3, #0
 800826e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 0301 	and.w	r3, r3, #1
 8008278:	2b00      	cmp	r3, #0
 800827a:	d105      	bne.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008284:	2b00      	cmp	r3, #0
 8008286:	d035      	beq.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008288:	4b62      	ldr	r3, [pc, #392]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800828a:	2200      	movs	r2, #0
 800828c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800828e:	f7fa f945 	bl	800251c <HAL_GetTick>
 8008292:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008294:	e008      	b.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008296:	f7fa f941 	bl	800251c <HAL_GetTick>
 800829a:	4602      	mov	r2, r0
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	1ad3      	subs	r3, r2, r3
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d901      	bls.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082a4:	2303      	movs	r3, #3
 80082a6:	e0b0      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80082a8:	4b5b      	ldr	r3, [pc, #364]	; (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1f0      	bne.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	019a      	lsls	r2, r3, #6
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	071b      	lsls	r3, r3, #28
 80082c0:	4955      	ldr	r1, [pc, #340]	; (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80082c2:	4313      	orrs	r3, r2
 80082c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80082c8:	4b52      	ldr	r3, [pc, #328]	; (8008414 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80082ca:	2201      	movs	r2, #1
 80082cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80082ce:	f7fa f925 	bl	800251c <HAL_GetTick>
 80082d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80082d4:	e008      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80082d6:	f7fa f921 	bl	800251c <HAL_GetTick>
 80082da:	4602      	mov	r2, r0
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d901      	bls.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082e4:	2303      	movs	r3, #3
 80082e6:	e090      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80082e8:	4b4b      	ldr	r3, [pc, #300]	; (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d0f0      	beq.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 0302 	and.w	r3, r3, #2
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f000 8083 	beq.w	8008408 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008302:	2300      	movs	r3, #0
 8008304:	60fb      	str	r3, [r7, #12]
 8008306:	4b44      	ldr	r3, [pc, #272]	; (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830a:	4a43      	ldr	r2, [pc, #268]	; (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800830c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008310:	6413      	str	r3, [r2, #64]	; 0x40
 8008312:	4b41      	ldr	r3, [pc, #260]	; (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800831a:	60fb      	str	r3, [r7, #12]
 800831c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800831e:	4b3f      	ldr	r3, [pc, #252]	; (800841c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a3e      	ldr	r2, [pc, #248]	; (800841c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008328:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800832a:	f7fa f8f7 	bl	800251c <HAL_GetTick>
 800832e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008330:	e008      	b.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008332:	f7fa f8f3 	bl	800251c <HAL_GetTick>
 8008336:	4602      	mov	r2, r0
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	2b02      	cmp	r3, #2
 800833e:	d901      	bls.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008340:	2303      	movs	r3, #3
 8008342:	e062      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008344:	4b35      	ldr	r3, [pc, #212]	; (800841c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800834c:	2b00      	cmp	r3, #0
 800834e:	d0f0      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008350:	4b31      	ldr	r3, [pc, #196]	; (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008354:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008358:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d02f      	beq.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008368:	693a      	ldr	r2, [r7, #16]
 800836a:	429a      	cmp	r2, r3
 800836c:	d028      	beq.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800836e:	4b2a      	ldr	r3, [pc, #168]	; (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008376:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008378:	4b29      	ldr	r3, [pc, #164]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800837a:	2201      	movs	r2, #1
 800837c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800837e:	4b28      	ldr	r3, [pc, #160]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008380:	2200      	movs	r2, #0
 8008382:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008384:	4a24      	ldr	r2, [pc, #144]	; (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800838a:	4b23      	ldr	r3, [pc, #140]	; (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800838c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	2b01      	cmp	r3, #1
 8008394:	d114      	bne.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008396:	f7fa f8c1 	bl	800251c <HAL_GetTick>
 800839a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800839c:	e00a      	b.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800839e:	f7fa f8bd 	bl	800251c <HAL_GetTick>
 80083a2:	4602      	mov	r2, r0
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d901      	bls.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80083b0:	2303      	movs	r3, #3
 80083b2:	e02a      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083b4:	4b18      	ldr	r3, [pc, #96]	; (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80083b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b8:	f003 0302 	and.w	r3, r3, #2
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d0ee      	beq.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083cc:	d10d      	bne.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80083ce:	4b12      	ldr	r3, [pc, #72]	; (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80083de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083e2:	490d      	ldr	r1, [pc, #52]	; (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80083e4:	4313      	orrs	r3, r2
 80083e6:	608b      	str	r3, [r1, #8]
 80083e8:	e005      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80083ea:	4b0b      	ldr	r3, [pc, #44]	; (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	4a0a      	ldr	r2, [pc, #40]	; (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80083f0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80083f4:	6093      	str	r3, [r2, #8]
 80083f6:	4b08      	ldr	r3, [pc, #32]	; (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80083f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008402:	4905      	ldr	r1, [pc, #20]	; (8008418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008404:	4313      	orrs	r3, r2
 8008406:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3718      	adds	r7, #24
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	42470068 	.word	0x42470068
 8008418:	40023800 	.word	0x40023800
 800841c:	40007000 	.word	0x40007000
 8008420:	42470e40 	.word	0x42470e40

08008424 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2203      	movs	r2, #3
 8008430:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8008432:	4b11      	ldr	r3, [pc, #68]	; (8008478 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8008434:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008438:	099b      	lsrs	r3, r3, #6
 800843a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008442:	4b0d      	ldr	r3, [pc, #52]	; (8008478 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8008444:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008448:	0f1b      	lsrs	r3, r3, #28
 800844a:	f003 0207 	and.w	r2, r3, #7
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8008452:	4b09      	ldr	r3, [pc, #36]	; (8008478 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800845a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800845c:	4b06      	ldr	r3, [pc, #24]	; (8008478 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 800845e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008460:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	431a      	orrs	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 800846c:	bf00      	nop
 800846e:	3714      	adds	r7, #20
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr
 8008478:	40023800 	.word	0x40023800

0800847c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800847c:	b480      	push	{r7}
 800847e:	b087      	sub	sp, #28
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008484:	2300      	movs	r3, #0
 8008486:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8008488:	2300      	movs	r3, #0
 800848a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800848c:	2300      	movs	r3, #0
 800848e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8008490:	2300      	movs	r3, #0
 8008492:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2b01      	cmp	r3, #1
 8008498:	d13e      	bne.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800849a:	4b23      	ldr	r3, [pc, #140]	; (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084a2:	60fb      	str	r3, [r7, #12]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d005      	beq.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d12f      	bne.n	8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80084b0:	4b1e      	ldr	r3, [pc, #120]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80084b2:	617b      	str	r3, [r7, #20]
          break;
 80084b4:	e02f      	b.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80084b6:	4b1c      	ldr	r3, [pc, #112]	; (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084c2:	d108      	bne.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80084c4:	4b18      	ldr	r3, [pc, #96]	; (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084cc:	4a18      	ldr	r2, [pc, #96]	; (8008530 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80084ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80084d2:	613b      	str	r3, [r7, #16]
 80084d4:	e007      	b.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80084d6:	4b14      	ldr	r3, [pc, #80]	; (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084de:	4a15      	ldr	r2, [pc, #84]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80084e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80084e4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80084e6:	4b10      	ldr	r3, [pc, #64]	; (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80084e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084ec:	099b      	lsrs	r3, r3, #6
 80084ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	fb02 f303 	mul.w	r3, r2, r3
 80084f8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80084fa:	4b0b      	ldr	r3, [pc, #44]	; (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80084fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008500:	0f1b      	lsrs	r3, r3, #28
 8008502:	f003 0307 	and.w	r3, r3, #7
 8008506:	68ba      	ldr	r2, [r7, #8]
 8008508:	fbb2 f3f3 	udiv	r3, r2, r3
 800850c:	617b      	str	r3, [r7, #20]
          break;
 800850e:	e002      	b.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008510:	2300      	movs	r3, #0
 8008512:	617b      	str	r3, [r7, #20]
          break;
 8008514:	bf00      	nop
        }
      }
      break;
 8008516:	bf00      	nop
    }
  }
  return frequency;
 8008518:	697b      	ldr	r3, [r7, #20]
}
 800851a:	4618      	mov	r0, r3
 800851c:	371c      	adds	r7, #28
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	40023800 	.word	0x40023800
 800852c:	00bb8000 	.word	0x00bb8000
 8008530:	007a1200 	.word	0x007a1200
 8008534:	00f42400 	.word	0x00f42400

08008538 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d101      	bne.n	800854a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e041      	b.n	80085ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008550:	b2db      	uxtb	r3, r3
 8008552:	2b00      	cmp	r3, #0
 8008554:	d106      	bne.n	8008564 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f7f9 fc3c 	bl	8001ddc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2202      	movs	r2, #2
 8008568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	3304      	adds	r3, #4
 8008574:	4619      	mov	r1, r3
 8008576:	4610      	mov	r0, r2
 8008578:	f000 fa96 	bl	8008aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2201      	movs	r2, #1
 8008580:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3708      	adds	r7, #8
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
	...

080085d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80085d8:	b480      	push	{r7}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d001      	beq.n	80085f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e04e      	b.n	800868e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2202      	movs	r2, #2
 80085f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68da      	ldr	r2, [r3, #12]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f042 0201 	orr.w	r2, r2, #1
 8008606:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a23      	ldr	r2, [pc, #140]	; (800869c <HAL_TIM_Base_Start_IT+0xc4>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d022      	beq.n	8008658 <HAL_TIM_Base_Start_IT+0x80>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800861a:	d01d      	beq.n	8008658 <HAL_TIM_Base_Start_IT+0x80>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a1f      	ldr	r2, [pc, #124]	; (80086a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d018      	beq.n	8008658 <HAL_TIM_Base_Start_IT+0x80>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a1e      	ldr	r2, [pc, #120]	; (80086a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d013      	beq.n	8008658 <HAL_TIM_Base_Start_IT+0x80>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a1c      	ldr	r2, [pc, #112]	; (80086a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d00e      	beq.n	8008658 <HAL_TIM_Base_Start_IT+0x80>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a1b      	ldr	r2, [pc, #108]	; (80086ac <HAL_TIM_Base_Start_IT+0xd4>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d009      	beq.n	8008658 <HAL_TIM_Base_Start_IT+0x80>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a19      	ldr	r2, [pc, #100]	; (80086b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d004      	beq.n	8008658 <HAL_TIM_Base_Start_IT+0x80>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a18      	ldr	r2, [pc, #96]	; (80086b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d111      	bne.n	800867c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f003 0307 	and.w	r3, r3, #7
 8008662:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2b06      	cmp	r3, #6
 8008668:	d010      	beq.n	800868c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f042 0201 	orr.w	r2, r2, #1
 8008678:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800867a:	e007      	b.n	800868c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f042 0201 	orr.w	r2, r2, #1
 800868a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3714      	adds	r7, #20
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	40010000 	.word	0x40010000
 80086a0:	40000400 	.word	0x40000400
 80086a4:	40000800 	.word	0x40000800
 80086a8:	40000c00 	.word	0x40000c00
 80086ac:	40010400 	.word	0x40010400
 80086b0:	40014000 	.word	0x40014000
 80086b4:	40001800 	.word	0x40001800

080086b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	f003 0302 	and.w	r3, r3, #2
 80086ca:	2b02      	cmp	r3, #2
 80086cc:	d122      	bne.n	8008714 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	f003 0302 	and.w	r3, r3, #2
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d11b      	bne.n	8008714 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f06f 0202 	mvn.w	r2, #2
 80086e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2201      	movs	r2, #1
 80086ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	699b      	ldr	r3, [r3, #24]
 80086f2:	f003 0303 	and.w	r3, r3, #3
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d003      	beq.n	8008702 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f9b5 	bl	8008a6a <HAL_TIM_IC_CaptureCallback>
 8008700:	e005      	b.n	800870e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f9a7 	bl	8008a56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 f9b8 	bl	8008a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	691b      	ldr	r3, [r3, #16]
 800871a:	f003 0304 	and.w	r3, r3, #4
 800871e:	2b04      	cmp	r3, #4
 8008720:	d122      	bne.n	8008768 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	f003 0304 	and.w	r3, r3, #4
 800872c:	2b04      	cmp	r3, #4
 800872e:	d11b      	bne.n	8008768 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f06f 0204 	mvn.w	r2, #4
 8008738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2202      	movs	r2, #2
 800873e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	699b      	ldr	r3, [r3, #24]
 8008746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800874a:	2b00      	cmp	r3, #0
 800874c:	d003      	beq.n	8008756 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f98b 	bl	8008a6a <HAL_TIM_IC_CaptureCallback>
 8008754:	e005      	b.n	8008762 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f97d 	bl	8008a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 f98e 	bl	8008a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	f003 0308 	and.w	r3, r3, #8
 8008772:	2b08      	cmp	r3, #8
 8008774:	d122      	bne.n	80087bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	f003 0308 	and.w	r3, r3, #8
 8008780:	2b08      	cmp	r3, #8
 8008782:	d11b      	bne.n	80087bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f06f 0208 	mvn.w	r2, #8
 800878c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2204      	movs	r2, #4
 8008792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	69db      	ldr	r3, [r3, #28]
 800879a:	f003 0303 	and.w	r3, r3, #3
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d003      	beq.n	80087aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f961 	bl	8008a6a <HAL_TIM_IC_CaptureCallback>
 80087a8:	e005      	b.n	80087b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 f953 	bl	8008a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 f964 	bl	8008a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	691b      	ldr	r3, [r3, #16]
 80087c2:	f003 0310 	and.w	r3, r3, #16
 80087c6:	2b10      	cmp	r3, #16
 80087c8:	d122      	bne.n	8008810 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	f003 0310 	and.w	r3, r3, #16
 80087d4:	2b10      	cmp	r3, #16
 80087d6:	d11b      	bne.n	8008810 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f06f 0210 	mvn.w	r2, #16
 80087e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2208      	movs	r2, #8
 80087e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	69db      	ldr	r3, [r3, #28]
 80087ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d003      	beq.n	80087fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 f937 	bl	8008a6a <HAL_TIM_IC_CaptureCallback>
 80087fc:	e005      	b.n	800880a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 f929 	bl	8008a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 f93a 	bl	8008a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	f003 0301 	and.w	r3, r3, #1
 800881a:	2b01      	cmp	r3, #1
 800881c:	d10e      	bne.n	800883c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	f003 0301 	and.w	r3, r3, #1
 8008828:	2b01      	cmp	r3, #1
 800882a:	d107      	bne.n	800883c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f06f 0201 	mvn.w	r2, #1
 8008834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f7f9 f91a 	bl	8001a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008846:	2b80      	cmp	r3, #128	; 0x80
 8008848:	d10e      	bne.n	8008868 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008854:	2b80      	cmp	r3, #128	; 0x80
 8008856:	d107      	bne.n	8008868 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fae0 	bl	8008e28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008872:	2b40      	cmp	r3, #64	; 0x40
 8008874:	d10e      	bne.n	8008894 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008880:	2b40      	cmp	r3, #64	; 0x40
 8008882:	d107      	bne.n	8008894 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800888c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f8ff 	bl	8008a92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	f003 0320 	and.w	r3, r3, #32
 800889e:	2b20      	cmp	r3, #32
 80088a0:	d10e      	bne.n	80088c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	f003 0320 	and.w	r3, r3, #32
 80088ac:	2b20      	cmp	r3, #32
 80088ae:	d107      	bne.n	80088c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f06f 0220 	mvn.w	r2, #32
 80088b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 faaa 	bl	8008e14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088c0:	bf00      	nop
 80088c2:	3708      	adds	r7, #8
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088d2:	2300      	movs	r3, #0
 80088d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d101      	bne.n	80088e4 <HAL_TIM_ConfigClockSource+0x1c>
 80088e0:	2302      	movs	r3, #2
 80088e2:	e0b4      	b.n	8008a4e <HAL_TIM_ConfigClockSource+0x186>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2202      	movs	r2, #2
 80088f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008902:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800890a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68ba      	ldr	r2, [r7, #8]
 8008912:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800891c:	d03e      	beq.n	800899c <HAL_TIM_ConfigClockSource+0xd4>
 800891e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008922:	f200 8087 	bhi.w	8008a34 <HAL_TIM_ConfigClockSource+0x16c>
 8008926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800892a:	f000 8086 	beq.w	8008a3a <HAL_TIM_ConfigClockSource+0x172>
 800892e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008932:	d87f      	bhi.n	8008a34 <HAL_TIM_ConfigClockSource+0x16c>
 8008934:	2b70      	cmp	r3, #112	; 0x70
 8008936:	d01a      	beq.n	800896e <HAL_TIM_ConfigClockSource+0xa6>
 8008938:	2b70      	cmp	r3, #112	; 0x70
 800893a:	d87b      	bhi.n	8008a34 <HAL_TIM_ConfigClockSource+0x16c>
 800893c:	2b60      	cmp	r3, #96	; 0x60
 800893e:	d050      	beq.n	80089e2 <HAL_TIM_ConfigClockSource+0x11a>
 8008940:	2b60      	cmp	r3, #96	; 0x60
 8008942:	d877      	bhi.n	8008a34 <HAL_TIM_ConfigClockSource+0x16c>
 8008944:	2b50      	cmp	r3, #80	; 0x50
 8008946:	d03c      	beq.n	80089c2 <HAL_TIM_ConfigClockSource+0xfa>
 8008948:	2b50      	cmp	r3, #80	; 0x50
 800894a:	d873      	bhi.n	8008a34 <HAL_TIM_ConfigClockSource+0x16c>
 800894c:	2b40      	cmp	r3, #64	; 0x40
 800894e:	d058      	beq.n	8008a02 <HAL_TIM_ConfigClockSource+0x13a>
 8008950:	2b40      	cmp	r3, #64	; 0x40
 8008952:	d86f      	bhi.n	8008a34 <HAL_TIM_ConfigClockSource+0x16c>
 8008954:	2b30      	cmp	r3, #48	; 0x30
 8008956:	d064      	beq.n	8008a22 <HAL_TIM_ConfigClockSource+0x15a>
 8008958:	2b30      	cmp	r3, #48	; 0x30
 800895a:	d86b      	bhi.n	8008a34 <HAL_TIM_ConfigClockSource+0x16c>
 800895c:	2b20      	cmp	r3, #32
 800895e:	d060      	beq.n	8008a22 <HAL_TIM_ConfigClockSource+0x15a>
 8008960:	2b20      	cmp	r3, #32
 8008962:	d867      	bhi.n	8008a34 <HAL_TIM_ConfigClockSource+0x16c>
 8008964:	2b00      	cmp	r3, #0
 8008966:	d05c      	beq.n	8008a22 <HAL_TIM_ConfigClockSource+0x15a>
 8008968:	2b10      	cmp	r3, #16
 800896a:	d05a      	beq.n	8008a22 <HAL_TIM_ConfigClockSource+0x15a>
 800896c:	e062      	b.n	8008a34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6818      	ldr	r0, [r3, #0]
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	6899      	ldr	r1, [r3, #8]
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	685a      	ldr	r2, [r3, #4]
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	f000 f9ad 	bl	8008cdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008990:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	68ba      	ldr	r2, [r7, #8]
 8008998:	609a      	str	r2, [r3, #8]
      break;
 800899a:	e04f      	b.n	8008a3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6818      	ldr	r0, [r3, #0]
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	6899      	ldr	r1, [r3, #8]
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	685a      	ldr	r2, [r3, #4]
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	f000 f996 	bl	8008cdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	689a      	ldr	r2, [r3, #8]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80089be:	609a      	str	r2, [r3, #8]
      break;
 80089c0:	e03c      	b.n	8008a3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6818      	ldr	r0, [r3, #0]
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	6859      	ldr	r1, [r3, #4]
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	461a      	mov	r2, r3
 80089d0:	f000 f90a 	bl	8008be8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2150      	movs	r1, #80	; 0x50
 80089da:	4618      	mov	r0, r3
 80089dc:	f000 f963 	bl	8008ca6 <TIM_ITRx_SetConfig>
      break;
 80089e0:	e02c      	b.n	8008a3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6818      	ldr	r0, [r3, #0]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	6859      	ldr	r1, [r3, #4]
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	461a      	mov	r2, r3
 80089f0:	f000 f929 	bl	8008c46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2160      	movs	r1, #96	; 0x60
 80089fa:	4618      	mov	r0, r3
 80089fc:	f000 f953 	bl	8008ca6 <TIM_ITRx_SetConfig>
      break;
 8008a00:	e01c      	b.n	8008a3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6818      	ldr	r0, [r3, #0]
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	6859      	ldr	r1, [r3, #4]
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	461a      	mov	r2, r3
 8008a10:	f000 f8ea 	bl	8008be8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	2140      	movs	r1, #64	; 0x40
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f000 f943 	bl	8008ca6 <TIM_ITRx_SetConfig>
      break;
 8008a20:	e00c      	b.n	8008a3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	4610      	mov	r0, r2
 8008a2e:	f000 f93a 	bl	8008ca6 <TIM_ITRx_SetConfig>
      break;
 8008a32:	e003      	b.n	8008a3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008a34:	2301      	movs	r3, #1
 8008a36:	73fb      	strb	r3, [r7, #15]
      break;
 8008a38:	e000      	b.n	8008a3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008a3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a56:	b480      	push	{r7}
 8008a58:	b083      	sub	sp, #12
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a5e:	bf00      	nop
 8008a60:	370c      	adds	r7, #12
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr

08008a6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a6a:	b480      	push	{r7}
 8008a6c:	b083      	sub	sp, #12
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a72:	bf00      	nop
 8008a74:	370c      	adds	r7, #12
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr

08008a7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a7e:	b480      	push	{r7}
 8008a80:	b083      	sub	sp, #12
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a86:	bf00      	nop
 8008a88:	370c      	adds	r7, #12
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr

08008a92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a92:	b480      	push	{r7}
 8008a94:	b083      	sub	sp, #12
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a9a:	bf00      	nop
 8008a9c:	370c      	adds	r7, #12
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr
	...

08008aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4a40      	ldr	r2, [pc, #256]	; (8008bbc <TIM_Base_SetConfig+0x114>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d013      	beq.n	8008ae8 <TIM_Base_SetConfig+0x40>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ac6:	d00f      	beq.n	8008ae8 <TIM_Base_SetConfig+0x40>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a3d      	ldr	r2, [pc, #244]	; (8008bc0 <TIM_Base_SetConfig+0x118>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d00b      	beq.n	8008ae8 <TIM_Base_SetConfig+0x40>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a3c      	ldr	r2, [pc, #240]	; (8008bc4 <TIM_Base_SetConfig+0x11c>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d007      	beq.n	8008ae8 <TIM_Base_SetConfig+0x40>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a3b      	ldr	r2, [pc, #236]	; (8008bc8 <TIM_Base_SetConfig+0x120>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d003      	beq.n	8008ae8 <TIM_Base_SetConfig+0x40>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4a3a      	ldr	r2, [pc, #232]	; (8008bcc <TIM_Base_SetConfig+0x124>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d108      	bne.n	8008afa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4a2f      	ldr	r2, [pc, #188]	; (8008bbc <TIM_Base_SetConfig+0x114>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d02b      	beq.n	8008b5a <TIM_Base_SetConfig+0xb2>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b08:	d027      	beq.n	8008b5a <TIM_Base_SetConfig+0xb2>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a2c      	ldr	r2, [pc, #176]	; (8008bc0 <TIM_Base_SetConfig+0x118>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d023      	beq.n	8008b5a <TIM_Base_SetConfig+0xb2>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a2b      	ldr	r2, [pc, #172]	; (8008bc4 <TIM_Base_SetConfig+0x11c>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d01f      	beq.n	8008b5a <TIM_Base_SetConfig+0xb2>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a2a      	ldr	r2, [pc, #168]	; (8008bc8 <TIM_Base_SetConfig+0x120>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d01b      	beq.n	8008b5a <TIM_Base_SetConfig+0xb2>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4a29      	ldr	r2, [pc, #164]	; (8008bcc <TIM_Base_SetConfig+0x124>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d017      	beq.n	8008b5a <TIM_Base_SetConfig+0xb2>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a28      	ldr	r2, [pc, #160]	; (8008bd0 <TIM_Base_SetConfig+0x128>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d013      	beq.n	8008b5a <TIM_Base_SetConfig+0xb2>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4a27      	ldr	r2, [pc, #156]	; (8008bd4 <TIM_Base_SetConfig+0x12c>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d00f      	beq.n	8008b5a <TIM_Base_SetConfig+0xb2>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4a26      	ldr	r2, [pc, #152]	; (8008bd8 <TIM_Base_SetConfig+0x130>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d00b      	beq.n	8008b5a <TIM_Base_SetConfig+0xb2>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a25      	ldr	r2, [pc, #148]	; (8008bdc <TIM_Base_SetConfig+0x134>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d007      	beq.n	8008b5a <TIM_Base_SetConfig+0xb2>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a24      	ldr	r2, [pc, #144]	; (8008be0 <TIM_Base_SetConfig+0x138>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d003      	beq.n	8008b5a <TIM_Base_SetConfig+0xb2>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a23      	ldr	r2, [pc, #140]	; (8008be4 <TIM_Base_SetConfig+0x13c>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d108      	bne.n	8008b6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	695b      	ldr	r3, [r3, #20]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	689a      	ldr	r2, [r3, #8]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a0a      	ldr	r2, [pc, #40]	; (8008bbc <TIM_Base_SetConfig+0x114>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d003      	beq.n	8008ba0 <TIM_Base_SetConfig+0xf8>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a0c      	ldr	r2, [pc, #48]	; (8008bcc <TIM_Base_SetConfig+0x124>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d103      	bne.n	8008ba8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	691a      	ldr	r2, [r3, #16]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	615a      	str	r2, [r3, #20]
}
 8008bae:	bf00      	nop
 8008bb0:	3714      	adds	r7, #20
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	40010000 	.word	0x40010000
 8008bc0:	40000400 	.word	0x40000400
 8008bc4:	40000800 	.word	0x40000800
 8008bc8:	40000c00 	.word	0x40000c00
 8008bcc:	40010400 	.word	0x40010400
 8008bd0:	40014000 	.word	0x40014000
 8008bd4:	40014400 	.word	0x40014400
 8008bd8:	40014800 	.word	0x40014800
 8008bdc:	40001800 	.word	0x40001800
 8008be0:	40001c00 	.word	0x40001c00
 8008be4:	40002000 	.word	0x40002000

08008be8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b087      	sub	sp, #28
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6a1b      	ldr	r3, [r3, #32]
 8008bf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	6a1b      	ldr	r3, [r3, #32]
 8008bfe:	f023 0201 	bic.w	r2, r3, #1
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	699b      	ldr	r3, [r3, #24]
 8008c0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	011b      	lsls	r3, r3, #4
 8008c18:	693a      	ldr	r2, [r7, #16]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	f023 030a 	bic.w	r3, r3, #10
 8008c24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c26:	697a      	ldr	r2, [r7, #20]
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	693a      	ldr	r2, [r7, #16]
 8008c32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	697a      	ldr	r2, [r7, #20]
 8008c38:	621a      	str	r2, [r3, #32]
}
 8008c3a:	bf00      	nop
 8008c3c:	371c      	adds	r7, #28
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c46:	b480      	push	{r7}
 8008c48:	b087      	sub	sp, #28
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	60f8      	str	r0, [r7, #12]
 8008c4e:	60b9      	str	r1, [r7, #8]
 8008c50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	6a1b      	ldr	r3, [r3, #32]
 8008c56:	f023 0210 	bic.w	r2, r3, #16
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	699b      	ldr	r3, [r3, #24]
 8008c62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6a1b      	ldr	r3, [r3, #32]
 8008c68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	031b      	lsls	r3, r3, #12
 8008c76:	697a      	ldr	r2, [r7, #20]
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	011b      	lsls	r3, r3, #4
 8008c88:	693a      	ldr	r2, [r7, #16]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	697a      	ldr	r2, [r7, #20]
 8008c92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	693a      	ldr	r2, [r7, #16]
 8008c98:	621a      	str	r2, [r3, #32]
}
 8008c9a:	bf00      	nop
 8008c9c:	371c      	adds	r7, #28
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr

08008ca6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ca6:	b480      	push	{r7}
 8008ca8:	b085      	sub	sp, #20
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008cbe:	683a      	ldr	r2, [r7, #0]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	f043 0307 	orr.w	r3, r3, #7
 8008cc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	609a      	str	r2, [r3, #8]
}
 8008cd0:	bf00      	nop
 8008cd2:	3714      	adds	r7, #20
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b087      	sub	sp, #28
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	607a      	str	r2, [r7, #4]
 8008ce8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	021a      	lsls	r2, r3, #8
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	431a      	orrs	r2, r3
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	697a      	ldr	r2, [r7, #20]
 8008d06:	4313      	orrs	r3, r2
 8008d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	697a      	ldr	r2, [r7, #20]
 8008d0e:	609a      	str	r2, [r3, #8]
}
 8008d10:	bf00      	nop
 8008d12:	371c      	adds	r7, #28
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d101      	bne.n	8008d34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d30:	2302      	movs	r3, #2
 8008d32:	e05a      	b.n	8008dea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2202      	movs	r2, #2
 8008d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a21      	ldr	r2, [pc, #132]	; (8008df8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d022      	beq.n	8008dbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d80:	d01d      	beq.n	8008dbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a1d      	ldr	r2, [pc, #116]	; (8008dfc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d018      	beq.n	8008dbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a1b      	ldr	r2, [pc, #108]	; (8008e00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d013      	beq.n	8008dbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a1a      	ldr	r2, [pc, #104]	; (8008e04 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d00e      	beq.n	8008dbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a18      	ldr	r2, [pc, #96]	; (8008e08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d009      	beq.n	8008dbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a17      	ldr	r2, [pc, #92]	; (8008e0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d004      	beq.n	8008dbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a15      	ldr	r2, [pc, #84]	; (8008e10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d10c      	bne.n	8008dd8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008dc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	68ba      	ldr	r2, [r7, #8]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68ba      	ldr	r2, [r7, #8]
 8008dd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008de8:	2300      	movs	r3, #0
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3714      	adds	r7, #20
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	40010000 	.word	0x40010000
 8008dfc:	40000400 	.word	0x40000400
 8008e00:	40000800 	.word	0x40000800
 8008e04:	40000c00 	.word	0x40000c00
 8008e08:	40010400 	.word	0x40010400
 8008e0c:	40014000 	.word	0x40014000
 8008e10:	40001800 	.word	0x40001800

08008e14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e1c:	bf00      	nop
 8008e1e:	370c      	adds	r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e30:	bf00      	nop
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e3c:	b084      	sub	sp, #16
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b084      	sub	sp, #16
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
 8008e46:	f107 001c 	add.w	r0, r7, #28
 8008e4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d122      	bne.n	8008e9a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008e68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d105      	bne.n	8008e8e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f9a0 	bl	80091d4 <USB_CoreReset>
 8008e94:	4603      	mov	r3, r0
 8008e96:	73fb      	strb	r3, [r7, #15]
 8008e98:	e01a      	b.n	8008ed0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 f994 	bl	80091d4 <USB_CoreReset>
 8008eac:	4603      	mov	r3, r0
 8008eae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d106      	bne.n	8008ec4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	639a      	str	r2, [r3, #56]	; 0x38
 8008ec2:	e005      	b.n	8008ed0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d10b      	bne.n	8008eee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	f043 0206 	orr.w	r2, r3, #6
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	f043 0220 	orr.w	r2, r3, #32
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3710      	adds	r7, #16
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008efa:	b004      	add	sp, #16
 8008efc:	4770      	bx	lr

08008efe <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008efe:	b480      	push	{r7}
 8008f00:	b083      	sub	sp, #12
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	f043 0201 	orr.w	r2, r3, #1
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	f023 0201 	bic.w	r2, r3, #1
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	370c      	adds	r7, #12
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b084      	sub	sp, #16
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008f5e:	78fb      	ldrb	r3, [r7, #3]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d115      	bne.n	8008f90 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008f70:	2001      	movs	r0, #1
 8008f72:	f7f9 fadf 	bl	8002534 <HAL_Delay>
      ms++;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 f91a 	bl	80091b6 <USB_GetMode>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d01e      	beq.n	8008fc6 <USB_SetCurrentMode+0x84>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2b31      	cmp	r3, #49	; 0x31
 8008f8c:	d9f0      	bls.n	8008f70 <USB_SetCurrentMode+0x2e>
 8008f8e:	e01a      	b.n	8008fc6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008f90:	78fb      	ldrb	r3, [r7, #3]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d115      	bne.n	8008fc2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008fa2:	2001      	movs	r0, #1
 8008fa4:	f7f9 fac6 	bl	8002534 <HAL_Delay>
      ms++;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	3301      	adds	r3, #1
 8008fac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f901 	bl	80091b6 <USB_GetMode>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d005      	beq.n	8008fc6 <USB_SetCurrentMode+0x84>
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2b31      	cmp	r3, #49	; 0x31
 8008fbe:	d9f0      	bls.n	8008fa2 <USB_SetCurrentMode+0x60>
 8008fc0:	e001      	b.n	8008fc6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e005      	b.n	8008fd2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2b32      	cmp	r3, #50	; 0x32
 8008fca:	d101      	bne.n	8008fd0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e000      	b.n	8008fd2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
	...

08008fdc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	019b      	lsls	r3, r3, #6
 8008fee:	f043 0220 	orr.w	r2, r3, #32
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	60fb      	str	r3, [r7, #12]
 8008ffc:	4a08      	ldr	r2, [pc, #32]	; (8009020 <USB_FlushTxFifo+0x44>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d901      	bls.n	8009006 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8009002:	2303      	movs	r3, #3
 8009004:	e006      	b.n	8009014 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	f003 0320 	and.w	r3, r3, #32
 800900e:	2b20      	cmp	r3, #32
 8009010:	d0f1      	beq.n	8008ff6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	3714      	adds	r7, #20
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr
 8009020:	00030d40 	.word	0x00030d40

08009024 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009024:	b480      	push	{r7}
 8009026:	b085      	sub	sp, #20
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800902c:	2300      	movs	r3, #0
 800902e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2210      	movs	r2, #16
 8009034:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	3301      	adds	r3, #1
 800903a:	60fb      	str	r3, [r7, #12]
 800903c:	4a08      	ldr	r2, [pc, #32]	; (8009060 <USB_FlushRxFifo+0x3c>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d901      	bls.n	8009046 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8009042:	2303      	movs	r3, #3
 8009044:	e006      	b.n	8009054 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	f003 0310 	and.w	r3, r3, #16
 800904e:	2b10      	cmp	r3, #16
 8009050:	d0f1      	beq.n	8009036 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009052:	2300      	movs	r3, #0
}
 8009054:	4618      	mov	r0, r3
 8009056:	3714      	adds	r7, #20
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr
 8009060:	00030d40 	.word	0x00030d40

08009064 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009064:	b480      	push	{r7}
 8009066:	b089      	sub	sp, #36	; 0x24
 8009068:	af00      	add	r7, sp, #0
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	4611      	mov	r1, r2
 8009070:	461a      	mov	r2, r3
 8009072:	460b      	mov	r3, r1
 8009074:	71fb      	strb	r3, [r7, #7]
 8009076:	4613      	mov	r3, r2
 8009078:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009082:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009086:	2b00      	cmp	r3, #0
 8009088:	d123      	bne.n	80090d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800908a:	88bb      	ldrh	r3, [r7, #4]
 800908c:	3303      	adds	r3, #3
 800908e:	089b      	lsrs	r3, r3, #2
 8009090:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009092:	2300      	movs	r3, #0
 8009094:	61bb      	str	r3, [r7, #24]
 8009096:	e018      	b.n	80090ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009098:	79fb      	ldrb	r3, [r7, #7]
 800909a:	031a      	lsls	r2, r3, #12
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	4413      	add	r3, r2
 80090a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090a4:	461a      	mov	r2, r3
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	3301      	adds	r3, #1
 80090b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	3301      	adds	r3, #1
 80090b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	3301      	adds	r3, #1
 80090bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	3301      	adds	r3, #1
 80090c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80090c4:	69bb      	ldr	r3, [r7, #24]
 80090c6:	3301      	adds	r3, #1
 80090c8:	61bb      	str	r3, [r7, #24]
 80090ca:	69ba      	ldr	r2, [r7, #24]
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d3e2      	bcc.n	8009098 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80090d2:	2300      	movs	r3, #0
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3724      	adds	r7, #36	; 0x24
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b08b      	sub	sp, #44	; 0x2c
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	4613      	mov	r3, r2
 80090ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80090f6:	88fb      	ldrh	r3, [r7, #6]
 80090f8:	089b      	lsrs	r3, r3, #2
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80090fe:	88fb      	ldrh	r3, [r7, #6]
 8009100:	f003 0303 	and.w	r3, r3, #3
 8009104:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009106:	2300      	movs	r3, #0
 8009108:	623b      	str	r3, [r7, #32]
 800910a:	e014      	b.n	8009136 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800910c:	69bb      	ldr	r3, [r7, #24]
 800910e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009116:	601a      	str	r2, [r3, #0]
    pDest++;
 8009118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911a:	3301      	adds	r3, #1
 800911c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800911e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009120:	3301      	adds	r3, #1
 8009122:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009126:	3301      	adds	r3, #1
 8009128:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800912a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912c:	3301      	adds	r3, #1
 800912e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009130:	6a3b      	ldr	r3, [r7, #32]
 8009132:	3301      	adds	r3, #1
 8009134:	623b      	str	r3, [r7, #32]
 8009136:	6a3a      	ldr	r2, [r7, #32]
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	429a      	cmp	r2, r3
 800913c:	d3e6      	bcc.n	800910c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800913e:	8bfb      	ldrh	r3, [r7, #30]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d01e      	beq.n	8009182 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009144:	2300      	movs	r3, #0
 8009146:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800914e:	461a      	mov	r2, r3
 8009150:	f107 0310 	add.w	r3, r7, #16
 8009154:	6812      	ldr	r2, [r2, #0]
 8009156:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009158:	693a      	ldr	r2, [r7, #16]
 800915a:	6a3b      	ldr	r3, [r7, #32]
 800915c:	b2db      	uxtb	r3, r3
 800915e:	00db      	lsls	r3, r3, #3
 8009160:	fa22 f303 	lsr.w	r3, r2, r3
 8009164:	b2da      	uxtb	r2, r3
 8009166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009168:	701a      	strb	r2, [r3, #0]
      i++;
 800916a:	6a3b      	ldr	r3, [r7, #32]
 800916c:	3301      	adds	r3, #1
 800916e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009172:	3301      	adds	r3, #1
 8009174:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009176:	8bfb      	ldrh	r3, [r7, #30]
 8009178:	3b01      	subs	r3, #1
 800917a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800917c:	8bfb      	ldrh	r3, [r7, #30]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1ea      	bne.n	8009158 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009184:	4618      	mov	r0, r3
 8009186:	372c      	adds	r7, #44	; 0x2c
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009190:	b480      	push	{r7}
 8009192:	b085      	sub	sp, #20
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	695b      	ldr	r3, [r3, #20]
 800919c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	699b      	ldr	r3, [r3, #24]
 80091a2:	68fa      	ldr	r2, [r7, #12]
 80091a4:	4013      	ands	r3, r2
 80091a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80091a8:	68fb      	ldr	r3, [r7, #12]
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3714      	adds	r7, #20
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr

080091b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80091b6:	b480      	push	{r7}
 80091b8:	b083      	sub	sp, #12
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	695b      	ldr	r3, [r3, #20]
 80091c2:	f003 0301 	and.w	r3, r3, #1
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	370c      	adds	r7, #12
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr
	...

080091d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091dc:	2300      	movs	r3, #0
 80091de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	3301      	adds	r3, #1
 80091e4:	60fb      	str	r3, [r7, #12]
 80091e6:	4a13      	ldr	r2, [pc, #76]	; (8009234 <USB_CoreReset+0x60>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d901      	bls.n	80091f0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80091ec:	2303      	movs	r3, #3
 80091ee:	e01a      	b.n	8009226 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	691b      	ldr	r3, [r3, #16]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	daf3      	bge.n	80091e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80091f8:	2300      	movs	r3, #0
 80091fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	f043 0201 	orr.w	r2, r3, #1
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	3301      	adds	r3, #1
 800920c:	60fb      	str	r3, [r7, #12]
 800920e:	4a09      	ldr	r2, [pc, #36]	; (8009234 <USB_CoreReset+0x60>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d901      	bls.n	8009218 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8009214:	2303      	movs	r3, #3
 8009216:	e006      	b.n	8009226 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	691b      	ldr	r3, [r3, #16]
 800921c:	f003 0301 	and.w	r3, r3, #1
 8009220:	2b01      	cmp	r3, #1
 8009222:	d0f1      	beq.n	8009208 <USB_CoreReset+0x34>

  return HAL_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3714      	adds	r7, #20
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	00030d40 	.word	0x00030d40

08009238 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009238:	b084      	sub	sp, #16
 800923a:	b580      	push	{r7, lr}
 800923c:	b084      	sub	sp, #16
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
 8009242:	f107 001c 	add.w	r0, r7, #28
 8009246:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009254:	461a      	mov	r2, r3
 8009256:	2300      	movs	r3, #0
 8009258:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800925e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800926a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009276:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009286:	2b00      	cmp	r3, #0
 8009288:	d018      	beq.n	80092bc <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800928a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928c:	2b01      	cmp	r3, #1
 800928e:	d10a      	bne.n	80092a6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	68ba      	ldr	r2, [r7, #8]
 800929a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800929e:	f043 0304 	orr.w	r3, r3, #4
 80092a2:	6013      	str	r3, [r2, #0]
 80092a4:	e014      	b.n	80092d0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	68ba      	ldr	r2, [r7, #8]
 80092b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80092b4:	f023 0304 	bic.w	r3, r3, #4
 80092b8:	6013      	str	r3, [r2, #0]
 80092ba:	e009      	b.n	80092d0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	68ba      	ldr	r2, [r7, #8]
 80092c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80092ca:	f023 0304 	bic.w	r3, r3, #4
 80092ce:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80092d0:	2110      	movs	r1, #16
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f7ff fe82 	bl	8008fdc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f7ff fea3 	bl	8009024 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80092de:	2300      	movs	r3, #0
 80092e0:	60fb      	str	r3, [r7, #12]
 80092e2:	e015      	b.n	8009310 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	015a      	lsls	r2, r3, #5
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	4413      	add	r3, r2
 80092ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092f0:	461a      	mov	r2, r3
 80092f2:	f04f 33ff 	mov.w	r3, #4294967295
 80092f6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	015a      	lsls	r2, r3, #5
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	4413      	add	r3, r2
 8009300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009304:	461a      	mov	r2, r3
 8009306:	2300      	movs	r3, #0
 8009308:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	3301      	adds	r3, #1
 800930e:	60fb      	str	r3, [r7, #12]
 8009310:	6a3b      	ldr	r3, [r7, #32]
 8009312:	68fa      	ldr	r2, [r7, #12]
 8009314:	429a      	cmp	r2, r3
 8009316:	d3e5      	bcc.n	80092e4 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f04f 32ff 	mov.w	r2, #4294967295
 8009324:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800932a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00b      	beq.n	800934a <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009338:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	4a13      	ldr	r2, [pc, #76]	; (800938c <USB_HostInit+0x154>)
 800933e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4a13      	ldr	r2, [pc, #76]	; (8009390 <USB_HostInit+0x158>)
 8009344:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009348:	e009      	b.n	800935e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2280      	movs	r2, #128	; 0x80
 800934e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a10      	ldr	r2, [pc, #64]	; (8009394 <USB_HostInit+0x15c>)
 8009354:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	4a0f      	ldr	r2, [pc, #60]	; (8009398 <USB_HostInit+0x160>)
 800935a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800935e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009360:	2b00      	cmp	r3, #0
 8009362:	d105      	bne.n	8009370 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	699b      	ldr	r3, [r3, #24]
 8009368:	f043 0210 	orr.w	r2, r3, #16
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	699a      	ldr	r2, [r3, #24]
 8009374:	4b09      	ldr	r3, [pc, #36]	; (800939c <USB_HostInit+0x164>)
 8009376:	4313      	orrs	r3, r2
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800937c:	2300      	movs	r3, #0
}
 800937e:	4618      	mov	r0, r3
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009388:	b004      	add	sp, #16
 800938a:	4770      	bx	lr
 800938c:	01000200 	.word	0x01000200
 8009390:	00e00300 	.word	0x00e00300
 8009394:	00600080 	.word	0x00600080
 8009398:	004000e0 	.word	0x004000e0
 800939c:	a3200008 	.word	0xa3200008

080093a0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b085      	sub	sp, #20
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	460b      	mov	r3, r1
 80093aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80093be:	f023 0303 	bic.w	r3, r3, #3
 80093c2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	78fb      	ldrb	r3, [r7, #3]
 80093ce:	f003 0303 	and.w	r3, r3, #3
 80093d2:	68f9      	ldr	r1, [r7, #12]
 80093d4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80093d8:	4313      	orrs	r3, r2
 80093da:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80093dc:	78fb      	ldrb	r3, [r7, #3]
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d107      	bne.n	80093f2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093e8:	461a      	mov	r2, r3
 80093ea:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80093ee:	6053      	str	r3, [r2, #4]
 80093f0:	e009      	b.n	8009406 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80093f2:	78fb      	ldrb	r3, [r7, #3]
 80093f4:	2b02      	cmp	r3, #2
 80093f6:	d106      	bne.n	8009406 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093fe:	461a      	mov	r2, r3
 8009400:	f241 7370 	movw	r3, #6000	; 0x1770
 8009404:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3714      	adds	r7, #20
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009420:	2300      	movs	r3, #0
 8009422:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009434:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	68fa      	ldr	r2, [r7, #12]
 800943a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800943e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009442:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009444:	2064      	movs	r0, #100	; 0x64
 8009446:	f7f9 f875 	bl	8002534 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	68fa      	ldr	r2, [r7, #12]
 800944e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009452:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009456:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009458:	200a      	movs	r0, #10
 800945a:	f7f9 f86b 	bl	8002534 <HAL_Delay>

  return HAL_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3710      	adds	r7, #16
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	460b      	mov	r3, r1
 8009472:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009478:	2300      	movs	r3, #0
 800947a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800948c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009494:	2b00      	cmp	r3, #0
 8009496:	d109      	bne.n	80094ac <USB_DriveVbus+0x44>
 8009498:	78fb      	ldrb	r3, [r7, #3]
 800949a:	2b01      	cmp	r3, #1
 800949c:	d106      	bne.n	80094ac <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	68fa      	ldr	r2, [r7, #12]
 80094a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80094a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80094aa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80094b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094b6:	d109      	bne.n	80094cc <USB_DriveVbus+0x64>
 80094b8:	78fb      	ldrb	r3, [r7, #3]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d106      	bne.n	80094cc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80094c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094ca:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3714      	adds	r7, #20
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr

080094da <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80094da:	b480      	push	{r7}
 80094dc:	b085      	sub	sp, #20
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80094e6:	2300      	movs	r3, #0
 80094e8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	0c5b      	lsrs	r3, r3, #17
 80094f8:	f003 0303 	and.w	r3, r3, #3
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3714      	adds	r7, #20
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009508:	b480      	push	{r7}
 800950a:	b085      	sub	sp, #20
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	b29b      	uxth	r3, r3
}
 800951e:	4618      	mov	r0, r3
 8009520:	3714      	adds	r7, #20
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr
	...

0800952c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b088      	sub	sp, #32
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	4608      	mov	r0, r1
 8009536:	4611      	mov	r1, r2
 8009538:	461a      	mov	r2, r3
 800953a:	4603      	mov	r3, r0
 800953c:	70fb      	strb	r3, [r7, #3]
 800953e:	460b      	mov	r3, r1
 8009540:	70bb      	strb	r3, [r7, #2]
 8009542:	4613      	mov	r3, r2
 8009544:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009546:	2300      	movs	r3, #0
 8009548:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800954e:	78fb      	ldrb	r3, [r7, #3]
 8009550:	015a      	lsls	r2, r3, #5
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	4413      	add	r3, r2
 8009556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800955a:	461a      	mov	r2, r3
 800955c:	f04f 33ff 	mov.w	r3, #4294967295
 8009560:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009562:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009566:	2b03      	cmp	r3, #3
 8009568:	d87e      	bhi.n	8009668 <USB_HC_Init+0x13c>
 800956a:	a201      	add	r2, pc, #4	; (adr r2, 8009570 <USB_HC_Init+0x44>)
 800956c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009570:	08009581 	.word	0x08009581
 8009574:	0800962b 	.word	0x0800962b
 8009578:	08009581 	.word	0x08009581
 800957c:	080095ed 	.word	0x080095ed
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009580:	78fb      	ldrb	r3, [r7, #3]
 8009582:	015a      	lsls	r2, r3, #5
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	4413      	add	r3, r2
 8009588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800958c:	461a      	mov	r2, r3
 800958e:	f240 439d 	movw	r3, #1181	; 0x49d
 8009592:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009594:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009598:	2b00      	cmp	r3, #0
 800959a:	da10      	bge.n	80095be <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800959c:	78fb      	ldrb	r3, [r7, #3]
 800959e:	015a      	lsls	r2, r3, #5
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	4413      	add	r3, r2
 80095a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	78fa      	ldrb	r2, [r7, #3]
 80095ac:	0151      	lsls	r1, r2, #5
 80095ae:	693a      	ldr	r2, [r7, #16]
 80095b0:	440a      	add	r2, r1
 80095b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095ba:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80095bc:	e057      	b.n	800966e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d051      	beq.n	800966e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80095ca:	78fb      	ldrb	r3, [r7, #3]
 80095cc:	015a      	lsls	r2, r3, #5
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	4413      	add	r3, r2
 80095d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	78fa      	ldrb	r2, [r7, #3]
 80095da:	0151      	lsls	r1, r2, #5
 80095dc:	693a      	ldr	r2, [r7, #16]
 80095de:	440a      	add	r2, r1
 80095e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80095e8:	60d3      	str	r3, [r2, #12]
      break;
 80095ea:	e040      	b.n	800966e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80095ec:	78fb      	ldrb	r3, [r7, #3]
 80095ee:	015a      	lsls	r2, r3, #5
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	4413      	add	r3, r2
 80095f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095f8:	461a      	mov	r2, r3
 80095fa:	f240 639d 	movw	r3, #1693	; 0x69d
 80095fe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009600:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009604:	2b00      	cmp	r3, #0
 8009606:	da34      	bge.n	8009672 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009608:	78fb      	ldrb	r3, [r7, #3]
 800960a:	015a      	lsls	r2, r3, #5
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	4413      	add	r3, r2
 8009610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	78fa      	ldrb	r2, [r7, #3]
 8009618:	0151      	lsls	r1, r2, #5
 800961a:	693a      	ldr	r2, [r7, #16]
 800961c:	440a      	add	r2, r1
 800961e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009626:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009628:	e023      	b.n	8009672 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800962a:	78fb      	ldrb	r3, [r7, #3]
 800962c:	015a      	lsls	r2, r3, #5
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	4413      	add	r3, r2
 8009632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009636:	461a      	mov	r2, r3
 8009638:	f240 2325 	movw	r3, #549	; 0x225
 800963c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800963e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009642:	2b00      	cmp	r3, #0
 8009644:	da17      	bge.n	8009676 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009646:	78fb      	ldrb	r3, [r7, #3]
 8009648:	015a      	lsls	r2, r3, #5
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	4413      	add	r3, r2
 800964e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	78fa      	ldrb	r2, [r7, #3]
 8009656:	0151      	lsls	r1, r2, #5
 8009658:	693a      	ldr	r2, [r7, #16]
 800965a:	440a      	add	r2, r1
 800965c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009660:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009664:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009666:	e006      	b.n	8009676 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	77fb      	strb	r3, [r7, #31]
      break;
 800966c:	e004      	b.n	8009678 <USB_HC_Init+0x14c>
      break;
 800966e:	bf00      	nop
 8009670:	e002      	b.n	8009678 <USB_HC_Init+0x14c>
      break;
 8009672:	bf00      	nop
 8009674:	e000      	b.n	8009678 <USB_HC_Init+0x14c>
      break;
 8009676:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800967e:	699a      	ldr	r2, [r3, #24]
 8009680:	78fb      	ldrb	r3, [r7, #3]
 8009682:	f003 030f 	and.w	r3, r3, #15
 8009686:	2101      	movs	r1, #1
 8009688:	fa01 f303 	lsl.w	r3, r1, r3
 800968c:	6939      	ldr	r1, [r7, #16]
 800968e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009692:	4313      	orrs	r3, r2
 8009694:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	699b      	ldr	r3, [r3, #24]
 800969a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80096a2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	da03      	bge.n	80096b2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80096aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096ae:	61bb      	str	r3, [r7, #24]
 80096b0:	e001      	b.n	80096b6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80096b2:	2300      	movs	r3, #0
 80096b4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f7ff ff0f 	bl	80094da <USB_GetHostSpeed>
 80096bc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80096be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80096c2:	2b02      	cmp	r3, #2
 80096c4:	d106      	bne.n	80096d4 <USB_HC_Init+0x1a8>
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	d003      	beq.n	80096d4 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80096cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80096d0:	617b      	str	r3, [r7, #20]
 80096d2:	e001      	b.n	80096d8 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80096d4:	2300      	movs	r3, #0
 80096d6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80096d8:	787b      	ldrb	r3, [r7, #1]
 80096da:	059b      	lsls	r3, r3, #22
 80096dc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80096e0:	78bb      	ldrb	r3, [r7, #2]
 80096e2:	02db      	lsls	r3, r3, #11
 80096e4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80096e8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80096ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80096ee:	049b      	lsls	r3, r3, #18
 80096f0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80096f4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80096f6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80096f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80096fc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009702:	78fb      	ldrb	r3, [r7, #3]
 8009704:	0159      	lsls	r1, r3, #5
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	440b      	add	r3, r1
 800970a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800970e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009714:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8009716:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800971a:	2b03      	cmp	r3, #3
 800971c:	d10f      	bne.n	800973e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800971e:	78fb      	ldrb	r3, [r7, #3]
 8009720:	015a      	lsls	r2, r3, #5
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	4413      	add	r3, r2
 8009726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	78fa      	ldrb	r2, [r7, #3]
 800972e:	0151      	lsls	r1, r2, #5
 8009730:	693a      	ldr	r2, [r7, #16]
 8009732:	440a      	add	r2, r1
 8009734:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009738:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800973c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800973e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3720      	adds	r7, #32
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b08c      	sub	sp, #48	; 0x30
 800974c:	af02      	add	r7, sp, #8
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	60b9      	str	r1, [r7, #8]
 8009752:	4613      	mov	r3, r2
 8009754:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	785b      	ldrb	r3, [r3, #1]
 800975e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009760:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009764:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800976a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800976e:	2b00      	cmp	r3, #0
 8009770:	d02d      	beq.n	80097ce <USB_HC_StartXfer+0x86>
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	791b      	ldrb	r3, [r3, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d129      	bne.n	80097ce <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800977a:	79fb      	ldrb	r3, [r7, #7]
 800977c:	2b01      	cmp	r3, #1
 800977e:	d117      	bne.n	80097b0 <USB_HC_StartXfer+0x68>
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	79db      	ldrb	r3, [r3, #7]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d003      	beq.n	8009790 <USB_HC_StartXfer+0x48>
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	79db      	ldrb	r3, [r3, #7]
 800978c:	2b02      	cmp	r3, #2
 800978e:	d10f      	bne.n	80097b0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	015a      	lsls	r2, r3, #5
 8009794:	6a3b      	ldr	r3, [r7, #32]
 8009796:	4413      	add	r3, r2
 8009798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	69fa      	ldr	r2, [r7, #28]
 80097a0:	0151      	lsls	r1, r2, #5
 80097a2:	6a3a      	ldr	r2, [r7, #32]
 80097a4:	440a      	add	r2, r1
 80097a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097ae:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80097b0:	79fb      	ldrb	r3, [r7, #7]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d10b      	bne.n	80097ce <USB_HC_StartXfer+0x86>
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	795b      	ldrb	r3, [r3, #5]
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d107      	bne.n	80097ce <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	785b      	ldrb	r3, [r3, #1]
 80097c2:	4619      	mov	r1, r3
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f000 fa2f 	bl	8009c28 <USB_DoPing>
      return HAL_OK;
 80097ca:	2300      	movs	r3, #0
 80097cc:	e0f8      	b.n	80099c0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	695b      	ldr	r3, [r3, #20]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d018      	beq.n	8009808 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	695b      	ldr	r3, [r3, #20]
 80097da:	68ba      	ldr	r2, [r7, #8]
 80097dc:	8912      	ldrh	r2, [r2, #8]
 80097de:	4413      	add	r3, r2
 80097e0:	3b01      	subs	r3, #1
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	8912      	ldrh	r2, [r2, #8]
 80097e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80097ea:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80097ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80097ee:	8b7b      	ldrh	r3, [r7, #26]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d90b      	bls.n	800980c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80097f4:	8b7b      	ldrh	r3, [r7, #26]
 80097f6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80097f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80097fa:	68ba      	ldr	r2, [r7, #8]
 80097fc:	8912      	ldrh	r2, [r2, #8]
 80097fe:	fb02 f203 	mul.w	r2, r2, r3
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	611a      	str	r2, [r3, #16]
 8009806:	e001      	b.n	800980c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009808:	2301      	movs	r3, #1
 800980a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	78db      	ldrb	r3, [r3, #3]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d007      	beq.n	8009824 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009814:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009816:	68ba      	ldr	r2, [r7, #8]
 8009818:	8912      	ldrh	r2, [r2, #8]
 800981a:	fb02 f203 	mul.w	r2, r2, r3
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	611a      	str	r2, [r3, #16]
 8009822:	e003      	b.n	800982c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	695a      	ldr	r2, [r3, #20]
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	691b      	ldr	r3, [r3, #16]
 8009830:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009834:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009836:	04d9      	lsls	r1, r3, #19
 8009838:	4b63      	ldr	r3, [pc, #396]	; (80099c8 <USB_HC_StartXfer+0x280>)
 800983a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800983c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	7a9b      	ldrb	r3, [r3, #10]
 8009842:	075b      	lsls	r3, r3, #29
 8009844:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009848:	69f9      	ldr	r1, [r7, #28]
 800984a:	0148      	lsls	r0, r1, #5
 800984c:	6a39      	ldr	r1, [r7, #32]
 800984e:	4401      	add	r1, r0
 8009850:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009854:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009856:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009858:	79fb      	ldrb	r3, [r7, #7]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d009      	beq.n	8009872 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	68d9      	ldr	r1, [r3, #12]
 8009862:	69fb      	ldr	r3, [r7, #28]
 8009864:	015a      	lsls	r2, r3, #5
 8009866:	6a3b      	ldr	r3, [r7, #32]
 8009868:	4413      	add	r3, r2
 800986a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800986e:	460a      	mov	r2, r1
 8009870:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009872:	6a3b      	ldr	r3, [r7, #32]
 8009874:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	f003 0301 	and.w	r3, r3, #1
 800987e:	2b00      	cmp	r3, #0
 8009880:	bf0c      	ite	eq
 8009882:	2301      	moveq	r3, #1
 8009884:	2300      	movne	r3, #0
 8009886:	b2db      	uxtb	r3, r3
 8009888:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	015a      	lsls	r2, r3, #5
 800988e:	6a3b      	ldr	r3, [r7, #32]
 8009890:	4413      	add	r3, r2
 8009892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	69fa      	ldr	r2, [r7, #28]
 800989a:	0151      	lsls	r1, r2, #5
 800989c:	6a3a      	ldr	r2, [r7, #32]
 800989e:	440a      	add	r2, r1
 80098a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80098a8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	015a      	lsls	r2, r3, #5
 80098ae:	6a3b      	ldr	r3, [r7, #32]
 80098b0:	4413      	add	r3, r2
 80098b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	7e7b      	ldrb	r3, [r7, #25]
 80098ba:	075b      	lsls	r3, r3, #29
 80098bc:	69f9      	ldr	r1, [r7, #28]
 80098be:	0148      	lsls	r0, r1, #5
 80098c0:	6a39      	ldr	r1, [r7, #32]
 80098c2:	4401      	add	r1, r0
 80098c4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80098c8:	4313      	orrs	r3, r2
 80098ca:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	015a      	lsls	r2, r3, #5
 80098d0:	6a3b      	ldr	r3, [r7, #32]
 80098d2:	4413      	add	r3, r2
 80098d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80098e2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	78db      	ldrb	r3, [r3, #3]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d004      	beq.n	80098f6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098f2:	613b      	str	r3, [r7, #16]
 80098f4:	e003      	b.n	80098fe <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80098fc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009904:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	015a      	lsls	r2, r3, #5
 800990a:	6a3b      	ldr	r3, [r7, #32]
 800990c:	4413      	add	r3, r2
 800990e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009912:	461a      	mov	r2, r3
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009918:	79fb      	ldrb	r3, [r7, #7]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d001      	beq.n	8009922 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800991e:	2300      	movs	r3, #0
 8009920:	e04e      	b.n	80099c0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	78db      	ldrb	r3, [r3, #3]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d149      	bne.n	80099be <USB_HC_StartXfer+0x276>
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	695b      	ldr	r3, [r3, #20]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d045      	beq.n	80099be <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	79db      	ldrb	r3, [r3, #7]
 8009936:	2b03      	cmp	r3, #3
 8009938:	d830      	bhi.n	800999c <USB_HC_StartXfer+0x254>
 800993a:	a201      	add	r2, pc, #4	; (adr r2, 8009940 <USB_HC_StartXfer+0x1f8>)
 800993c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009940:	08009951 	.word	0x08009951
 8009944:	08009975 	.word	0x08009975
 8009948:	08009951 	.word	0x08009951
 800994c:	08009975 	.word	0x08009975
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	695b      	ldr	r3, [r3, #20]
 8009954:	3303      	adds	r3, #3
 8009956:	089b      	lsrs	r3, r3, #2
 8009958:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800995a:	8afa      	ldrh	r2, [r7, #22]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009960:	b29b      	uxth	r3, r3
 8009962:	429a      	cmp	r2, r3
 8009964:	d91c      	bls.n	80099a0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	699b      	ldr	r3, [r3, #24]
 800996a:	f043 0220 	orr.w	r2, r3, #32
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	619a      	str	r2, [r3, #24]
        }
        break;
 8009972:	e015      	b.n	80099a0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	695b      	ldr	r3, [r3, #20]
 8009978:	3303      	adds	r3, #3
 800997a:	089b      	lsrs	r3, r3, #2
 800997c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800997e:	8afa      	ldrh	r2, [r7, #22]
 8009980:	6a3b      	ldr	r3, [r7, #32]
 8009982:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009986:	691b      	ldr	r3, [r3, #16]
 8009988:	b29b      	uxth	r3, r3
 800998a:	429a      	cmp	r2, r3
 800998c:	d90a      	bls.n	80099a4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	699b      	ldr	r3, [r3, #24]
 8009992:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	619a      	str	r2, [r3, #24]
        }
        break;
 800999a:	e003      	b.n	80099a4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800999c:	bf00      	nop
 800999e:	e002      	b.n	80099a6 <USB_HC_StartXfer+0x25e>
        break;
 80099a0:	bf00      	nop
 80099a2:	e000      	b.n	80099a6 <USB_HC_StartXfer+0x25e>
        break;
 80099a4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	68d9      	ldr	r1, [r3, #12]
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	785a      	ldrb	r2, [r3, #1]
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	695b      	ldr	r3, [r3, #20]
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	2000      	movs	r0, #0
 80099b6:	9000      	str	r0, [sp, #0]
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	f7ff fb53 	bl	8009064 <USB_WritePacket>
  }

  return HAL_OK;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3728      	adds	r7, #40	; 0x28
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	1ff80000 	.word	0x1ff80000

080099cc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b085      	sub	sp, #20
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099de:	695b      	ldr	r3, [r3, #20]
 80099e0:	b29b      	uxth	r3, r3
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3714      	adds	r7, #20
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr

080099ee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80099ee:	b480      	push	{r7}
 80099f0:	b089      	sub	sp, #36	; 0x24
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
 80099f6:	460b      	mov	r3, r1
 80099f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80099fe:	78fb      	ldrb	r3, [r7, #3]
 8009a00:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8009a02:	2300      	movs	r3, #0
 8009a04:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	015a      	lsls	r2, r3, #5
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	0c9b      	lsrs	r3, r3, #18
 8009a16:	f003 0303 	and.w	r3, r3, #3
 8009a1a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	015a      	lsls	r2, r3, #5
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	4413      	add	r3, r2
 8009a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	0fdb      	lsrs	r3, r3, #31
 8009a2c:	f003 0301 	and.w	r3, r3, #1
 8009a30:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	689b      	ldr	r3, [r3, #8]
 8009a36:	f003 0320 	and.w	r3, r3, #32
 8009a3a:	2b20      	cmp	r3, #32
 8009a3c:	d104      	bne.n	8009a48 <USB_HC_Halt+0x5a>
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d101      	bne.n	8009a48 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009a44:	2300      	movs	r3, #0
 8009a46:	e0e8      	b.n	8009c1a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d002      	beq.n	8009a54 <USB_HC_Halt+0x66>
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	2b02      	cmp	r3, #2
 8009a52:	d173      	bne.n	8009b3c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	015a      	lsls	r2, r3, #5
 8009a58:	69bb      	ldr	r3, [r7, #24]
 8009a5a:	4413      	add	r3, r2
 8009a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	697a      	ldr	r2, [r7, #20]
 8009a64:	0151      	lsls	r1, r2, #5
 8009a66:	69ba      	ldr	r2, [r7, #24]
 8009a68:	440a      	add	r2, r1
 8009a6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a72:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	f003 0320 	and.w	r3, r3, #32
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f040 80cb 	bne.w	8009c18 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a86:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d143      	bne.n	8009b16 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	015a      	lsls	r2, r3, #5
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	4413      	add	r3, r2
 8009a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	697a      	ldr	r2, [r7, #20]
 8009a9e:	0151      	lsls	r1, r2, #5
 8009aa0:	69ba      	ldr	r2, [r7, #24]
 8009aa2:	440a      	add	r2, r1
 8009aa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009aa8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009aac:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	015a      	lsls	r2, r3, #5
 8009ab2:	69bb      	ldr	r3, [r7, #24]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	697a      	ldr	r2, [r7, #20]
 8009abe:	0151      	lsls	r1, r2, #5
 8009ac0:	69ba      	ldr	r2, [r7, #24]
 8009ac2:	440a      	add	r2, r1
 8009ac4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ac8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009acc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	015a      	lsls	r2, r3, #5
 8009ad2:	69bb      	ldr	r3, [r7, #24]
 8009ad4:	4413      	add	r3, r2
 8009ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	697a      	ldr	r2, [r7, #20]
 8009ade:	0151      	lsls	r1, r2, #5
 8009ae0:	69ba      	ldr	r2, [r7, #24]
 8009ae2:	440a      	add	r2, r1
 8009ae4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ae8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009aec:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8009aee:	69fb      	ldr	r3, [r7, #28]
 8009af0:	3301      	adds	r3, #1
 8009af2:	61fb      	str	r3, [r7, #28]
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009afa:	d81d      	bhi.n	8009b38 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	015a      	lsls	r2, r3, #5
 8009b00:	69bb      	ldr	r3, [r7, #24]
 8009b02:	4413      	add	r3, r2
 8009b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b12:	d0ec      	beq.n	8009aee <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009b14:	e080      	b.n	8009c18 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	015a      	lsls	r2, r3, #5
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	4413      	add	r3, r2
 8009b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	697a      	ldr	r2, [r7, #20]
 8009b26:	0151      	lsls	r1, r2, #5
 8009b28:	69ba      	ldr	r2, [r7, #24]
 8009b2a:	440a      	add	r2, r1
 8009b2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b34:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009b36:	e06f      	b.n	8009c18 <USB_HC_Halt+0x22a>
            break;
 8009b38:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009b3a:	e06d      	b.n	8009c18 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	015a      	lsls	r2, r3, #5
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	4413      	add	r3, r2
 8009b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	697a      	ldr	r2, [r7, #20]
 8009b4c:	0151      	lsls	r1, r2, #5
 8009b4e:	69ba      	ldr	r2, [r7, #24]
 8009b50:	440a      	add	r2, r1
 8009b52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b5a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009b5c:	69bb      	ldr	r3, [r7, #24]
 8009b5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d143      	bne.n	8009bf4 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	015a      	lsls	r2, r3, #5
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	4413      	add	r3, r2
 8009b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	697a      	ldr	r2, [r7, #20]
 8009b7c:	0151      	lsls	r1, r2, #5
 8009b7e:	69ba      	ldr	r2, [r7, #24]
 8009b80:	440a      	add	r2, r1
 8009b82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b8a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	015a      	lsls	r2, r3, #5
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	4413      	add	r3, r2
 8009b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	697a      	ldr	r2, [r7, #20]
 8009b9c:	0151      	lsls	r1, r2, #5
 8009b9e:	69ba      	ldr	r2, [r7, #24]
 8009ba0:	440a      	add	r2, r1
 8009ba2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009baa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	015a      	lsls	r2, r3, #5
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	4413      	add	r3, r2
 8009bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	697a      	ldr	r2, [r7, #20]
 8009bbc:	0151      	lsls	r1, r2, #5
 8009bbe:	69ba      	ldr	r2, [r7, #24]
 8009bc0:	440a      	add	r2, r1
 8009bc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009bc6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009bca:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009bcc:	69fb      	ldr	r3, [r7, #28]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	61fb      	str	r3, [r7, #28]
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009bd8:	d81d      	bhi.n	8009c16 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	015a      	lsls	r2, r3, #5
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	4413      	add	r3, r2
 8009be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bf0:	d0ec      	beq.n	8009bcc <USB_HC_Halt+0x1de>
 8009bf2:	e011      	b.n	8009c18 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	015a      	lsls	r2, r3, #5
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	697a      	ldr	r2, [r7, #20]
 8009c04:	0151      	lsls	r1, r2, #5
 8009c06:	69ba      	ldr	r2, [r7, #24]
 8009c08:	440a      	add	r2, r1
 8009c0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c12:	6013      	str	r3, [r2, #0]
 8009c14:	e000      	b.n	8009c18 <USB_HC_Halt+0x22a>
          break;
 8009c16:	bf00      	nop
    }
  }

  return HAL_OK;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3724      	adds	r7, #36	; 0x24
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr
	...

08009c28 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b087      	sub	sp, #28
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	460b      	mov	r3, r1
 8009c32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009c38:	78fb      	ldrb	r3, [r7, #3]
 8009c3a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	04da      	lsls	r2, r3, #19
 8009c44:	4b15      	ldr	r3, [pc, #84]	; (8009c9c <USB_DoPing+0x74>)
 8009c46:	4013      	ands	r3, r2
 8009c48:	693a      	ldr	r2, [r7, #16]
 8009c4a:	0151      	lsls	r1, r2, #5
 8009c4c:	697a      	ldr	r2, [r7, #20]
 8009c4e:	440a      	add	r2, r1
 8009c50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c58:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	015a      	lsls	r2, r3, #5
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	4413      	add	r3, r2
 8009c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009c70:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c78:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	015a      	lsls	r2, r3, #5
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	4413      	add	r3, r2
 8009c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c86:	461a      	mov	r2, r3
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009c8c:	2300      	movs	r3, #0
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	371c      	adds	r7, #28
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr
 8009c9a:	bf00      	nop
 8009c9c:	1ff80000 	.word	0x1ff80000

08009ca0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b086      	sub	sp, #24
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009cac:	2300      	movs	r3, #0
 8009cae:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f7ff f935 	bl	8008f20 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8009cb6:	2110      	movs	r1, #16
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f7ff f98f 	bl	8008fdc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f7ff f9b0 	bl	8009024 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	613b      	str	r3, [r7, #16]
 8009cc8:	e01f      	b.n	8009d0a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	015a      	lsls	r2, r3, #5
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ce0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ce8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009cf0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	015a      	lsls	r2, r3, #5
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cfe:	461a      	mov	r2, r3
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	3301      	adds	r3, #1
 8009d08:	613b      	str	r3, [r7, #16]
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	2b0f      	cmp	r3, #15
 8009d0e:	d9dc      	bls.n	8009cca <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009d10:	2300      	movs	r3, #0
 8009d12:	613b      	str	r3, [r7, #16]
 8009d14:	e034      	b.n	8009d80 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	015a      	lsls	r2, r3, #5
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d2c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009d34:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009d3c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	015a      	lsls	r2, r3, #5
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	4413      	add	r3, r2
 8009d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	3301      	adds	r3, #1
 8009d54:	617b      	str	r3, [r7, #20]
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d5c:	d80c      	bhi.n	8009d78 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	015a      	lsls	r2, r3, #5
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	4413      	add	r3, r2
 8009d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d74:	d0ec      	beq.n	8009d50 <USB_StopHost+0xb0>
 8009d76:	e000      	b.n	8009d7a <USB_StopHost+0xda>
        break;
 8009d78:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	613b      	str	r3, [r7, #16]
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	2b0f      	cmp	r3, #15
 8009d84:	d9c7      	bls.n	8009d16 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d92:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f04f 32ff 	mov.w	r2, #4294967295
 8009d9a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f7ff f8ae 	bl	8008efe <USB_EnableGlobalInt>

  return HAL_OK;
 8009da2:	2300      	movs	r3, #0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3718      	adds	r7, #24
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8009db0:	4904      	ldr	r1, [pc, #16]	; (8009dc4 <MX_FATFS_Init+0x18>)
 8009db2:	4805      	ldr	r0, [pc, #20]	; (8009dc8 <MX_FATFS_Init+0x1c>)
 8009db4:	f005 fb86 	bl	800f4c4 <FATFS_LinkDriver>
 8009db8:	4603      	mov	r3, r0
 8009dba:	461a      	mov	r2, r3
 8009dbc:	4b03      	ldr	r3, [pc, #12]	; (8009dcc <MX_FATFS_Init+0x20>)
 8009dbe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009dc0:	bf00      	nop
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	20001624 	.word	0x20001624
 8009dc8:	08010d04 	.word	0x08010d04
 8009dcc:	20001a88 	.word	0x20001a88

08009dd0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009dd4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b083      	sub	sp, #12
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	4603      	mov	r3, r0
 8009de8:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8009dea:	2300      	movs	r3, #0
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	370c      	adds	r7, #12
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	4603      	mov	r3, r0
 8009e00:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8009e06:	79fb      	ldrb	r3, [r7, #7]
 8009e08:	4619      	mov	r1, r3
 8009e0a:	4808      	ldr	r0, [pc, #32]	; (8009e2c <USBH_status+0x34>)
 8009e0c:	f000 fe1a 	bl	800aa44 <USBH_MSC_UnitIsReady>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d002      	beq.n	8009e1c <USBH_status+0x24>
  {
    res = RES_OK;
 8009e16:	2300      	movs	r3, #0
 8009e18:	73fb      	strb	r3, [r7, #15]
 8009e1a:	e001      	b.n	8009e20 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	20001a8c 	.word	0x20001a8c

08009e30 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b094      	sub	sp, #80	; 0x50
 8009e34:	af02      	add	r7, sp, #8
 8009e36:	60b9      	str	r1, [r7, #8]
 8009e38:	607a      	str	r2, [r7, #4]
 8009e3a:	603b      	str	r3, [r7, #0]
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009e40:	2301      	movs	r3, #1
 8009e42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8009e46:	7bf9      	ldrb	r1, [r7, #15]
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	9300      	str	r3, [sp, #0]
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	4813      	ldr	r0, [pc, #76]	; (8009ea0 <USBH_read+0x70>)
 8009e52:	f000 fe41 	bl	800aad8 <USBH_MSC_Read>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d103      	bne.n	8009e64 <USBH_read+0x34>
  {
    res = RES_OK;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009e62:	e017      	b.n	8009e94 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009e64:	f107 0210 	add.w	r2, r7, #16
 8009e68:	7bfb      	ldrb	r3, [r7, #15]
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	480c      	ldr	r0, [pc, #48]	; (8009ea0 <USBH_read+0x70>)
 8009e6e:	f000 fe0f 	bl	800aa90 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8009e72:	7f7b      	ldrb	r3, [r7, #29]
 8009e74:	2b3a      	cmp	r3, #58	; 0x3a
 8009e76:	d005      	beq.n	8009e84 <USBH_read+0x54>
 8009e78:	2b3a      	cmp	r3, #58	; 0x3a
 8009e7a:	dc07      	bgt.n	8009e8c <USBH_read+0x5c>
 8009e7c:	2b04      	cmp	r3, #4
 8009e7e:	d001      	beq.n	8009e84 <USBH_read+0x54>
 8009e80:	2b28      	cmp	r3, #40	; 0x28
 8009e82:	d103      	bne.n	8009e8c <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009e84:	2303      	movs	r3, #3
 8009e86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009e8a:	e003      	b.n	8009e94 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009e92:	bf00      	nop
    }
  }

  return res;
 8009e94:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3748      	adds	r7, #72	; 0x48
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	20001a8c 	.word	0x20001a8c

08009ea4 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b094      	sub	sp, #80	; 0x50
 8009ea8:	af02      	add	r7, sp, #8
 8009eaa:	60b9      	str	r1, [r7, #8]
 8009eac:	607a      	str	r2, [r7, #4]
 8009eae:	603b      	str	r3, [r7, #0]
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8009eba:	7bf9      	ldrb	r1, [r7, #15]
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	9300      	str	r3, [sp, #0]
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	4817      	ldr	r0, [pc, #92]	; (8009f24 <USBH_write+0x80>)
 8009ec6:	f000 fe70 	bl	800abaa <USBH_MSC_Write>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d103      	bne.n	8009ed8 <USBH_write+0x34>
  {
    res = RES_OK;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009ed6:	e01f      	b.n	8009f18 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009ed8:	f107 0210 	add.w	r2, r7, #16
 8009edc:	7bfb      	ldrb	r3, [r7, #15]
 8009ede:	4619      	mov	r1, r3
 8009ee0:	4810      	ldr	r0, [pc, #64]	; (8009f24 <USBH_write+0x80>)
 8009ee2:	f000 fdd5 	bl	800aa90 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8009ee6:	7f7b      	ldrb	r3, [r7, #29]
 8009ee8:	2b3a      	cmp	r3, #58	; 0x3a
 8009eea:	d00d      	beq.n	8009f08 <USBH_write+0x64>
 8009eec:	2b3a      	cmp	r3, #58	; 0x3a
 8009eee:	dc0f      	bgt.n	8009f10 <USBH_write+0x6c>
 8009ef0:	2b28      	cmp	r3, #40	; 0x28
 8009ef2:	d009      	beq.n	8009f08 <USBH_write+0x64>
 8009ef4:	2b28      	cmp	r3, #40	; 0x28
 8009ef6:	dc0b      	bgt.n	8009f10 <USBH_write+0x6c>
 8009ef8:	2b04      	cmp	r3, #4
 8009efa:	d005      	beq.n	8009f08 <USBH_write+0x64>
 8009efc:	2b27      	cmp	r3, #39	; 0x27
 8009efe:	d107      	bne.n	8009f10 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8009f00:	2302      	movs	r3, #2
 8009f02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009f06:	e007      	b.n	8009f18 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009f08:	2303      	movs	r3, #3
 8009f0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009f0e:	e003      	b.n	8009f18 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8009f10:	2301      	movs	r3, #1
 8009f12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009f16:	bf00      	nop
    }
  }

  return res;
 8009f18:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3748      	adds	r7, #72	; 0x48
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	20001a8c 	.word	0x20001a8c

08009f28 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b090      	sub	sp, #64	; 0x40
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	4603      	mov	r3, r0
 8009f30:	603a      	str	r2, [r7, #0]
 8009f32:	71fb      	strb	r3, [r7, #7]
 8009f34:	460b      	mov	r3, r1
 8009f36:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8009f3e:	79bb      	ldrb	r3, [r7, #6]
 8009f40:	2b03      	cmp	r3, #3
 8009f42:	d852      	bhi.n	8009fea <USBH_ioctl+0xc2>
 8009f44:	a201      	add	r2, pc, #4	; (adr r2, 8009f4c <USBH_ioctl+0x24>)
 8009f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f4a:	bf00      	nop
 8009f4c:	08009f5d 	.word	0x08009f5d
 8009f50:	08009f65 	.word	0x08009f65
 8009f54:	08009f8f 	.word	0x08009f8f
 8009f58:	08009fbb 	.word	0x08009fbb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009f62:	e045      	b.n	8009ff0 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009f64:	f107 0208 	add.w	r2, r7, #8
 8009f68:	79fb      	ldrb	r3, [r7, #7]
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	4823      	ldr	r0, [pc, #140]	; (8009ffc <USBH_ioctl+0xd4>)
 8009f6e:	f000 fd8f 	bl	800aa90 <USBH_MSC_GetLUNInfo>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d106      	bne.n	8009f86 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009f84:	e034      	b.n	8009ff0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009f8c:	e030      	b.n	8009ff0 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009f8e:	f107 0208 	add.w	r2, r7, #8
 8009f92:	79fb      	ldrb	r3, [r7, #7]
 8009f94:	4619      	mov	r1, r3
 8009f96:	4819      	ldr	r0, [pc, #100]	; (8009ffc <USBH_ioctl+0xd4>)
 8009f98:	f000 fd7a 	bl	800aa90 <USBH_MSC_GetLUNInfo>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d107      	bne.n	8009fb2 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8009fa2:	8a3b      	ldrh	r3, [r7, #16]
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009faa:	2300      	movs	r3, #0
 8009fac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009fb0:	e01e      	b.n	8009ff0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009fb8:	e01a      	b.n	8009ff0 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009fba:	f107 0208 	add.w	r2, r7, #8
 8009fbe:	79fb      	ldrb	r3, [r7, #7]
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	480e      	ldr	r0, [pc, #56]	; (8009ffc <USBH_ioctl+0xd4>)
 8009fc4:	f000 fd64 	bl	800aa90 <USBH_MSC_GetLUNInfo>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d109      	bne.n	8009fe2 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8009fce:	8a3b      	ldrh	r3, [r7, #16]
 8009fd0:	0a5b      	lsrs	r3, r3, #9
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009fe0:	e006      	b.n	8009ff0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009fe8:	e002      	b.n	8009ff0 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8009fea:	2304      	movs	r3, #4
 8009fec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8009ff0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3740      	adds	r7, #64	; 0x40
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	20001a8c 	.word	0x20001a8c

0800a000 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a000:	b590      	push	{r4, r7, lr}
 800a002:	b089      	sub	sp, #36	; 0x24
 800a004:	af04      	add	r7, sp, #16
 800a006:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a00e:	7919      	ldrb	r1, [r3, #4]
 800a010:	2350      	movs	r3, #80	; 0x50
 800a012:	2206      	movs	r2, #6
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f001 fc53 	bl	800b8c0 <USBH_FindInterface>
 800a01a:	4603      	mov	r3, r0
 800a01c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800a01e:	7bfb      	ldrb	r3, [r7, #15]
 800a020:	2bff      	cmp	r3, #255	; 0xff
 800a022:	d002      	beq.n	800a02a <USBH_MSC_InterfaceInit+0x2a>
 800a024:	7bfb      	ldrb	r3, [r7, #15]
 800a026:	2b01      	cmp	r3, #1
 800a028:	d901      	bls.n	800a02e <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a02a:	2302      	movs	r3, #2
 800a02c:	e0ef      	b.n	800a20e <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800a02e:	7bfb      	ldrb	r3, [r7, #15]
 800a030:	4619      	mov	r1, r3
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f001 fc28 	bl	800b888 <USBH_SelectInterface>
 800a038:	4603      	mov	r3, r0
 800a03a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a03c:	7bbb      	ldrb	r3, [r7, #14]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d001      	beq.n	800a046 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800a042:	2302      	movs	r3, #2
 800a044:	e0e3      	b.n	800a20e <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a04c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a050:	f005 fd84 	bl	800fb5c <malloc>
 800a054:	4603      	mov	r3, r0
 800a056:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a05e:	69db      	ldr	r3, [r3, #28]
 800a060:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d101      	bne.n	800a06c <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800a068:	2302      	movs	r3, #2
 800a06a:	e0d0      	b.n	800a20e <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800a06c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a070:	2100      	movs	r1, #0
 800a072:	68b8      	ldr	r0, [r7, #8]
 800a074:	f005 fd90 	bl	800fb98 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a078:	7bfb      	ldrb	r3, [r7, #15]
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	211a      	movs	r1, #26
 800a07e:	fb01 f303 	mul.w	r3, r1, r3
 800a082:	4413      	add	r3, r2
 800a084:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	b25b      	sxtb	r3, r3
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	da16      	bge.n	800a0be <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800a090:	7bfb      	ldrb	r3, [r7, #15]
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	211a      	movs	r1, #26
 800a096:	fb01 f303 	mul.w	r3, r1, r3
 800a09a:	4413      	add	r3, r2
 800a09c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a0a0:	781a      	ldrb	r2, [r3, #0]
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a0a6:	7bfb      	ldrb	r3, [r7, #15]
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	211a      	movs	r1, #26
 800a0ac:	fb01 f303 	mul.w	r3, r1, r3
 800a0b0:	4413      	add	r3, r2
 800a0b2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a0b6:	881a      	ldrh	r2, [r3, #0]
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	815a      	strh	r2, [r3, #10]
 800a0bc:	e015      	b.n	800a0ea <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800a0be:	7bfb      	ldrb	r3, [r7, #15]
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	211a      	movs	r1, #26
 800a0c4:	fb01 f303 	mul.w	r3, r1, r3
 800a0c8:	4413      	add	r3, r2
 800a0ca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a0ce:	781a      	ldrb	r2, [r3, #0]
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a0d4:	7bfb      	ldrb	r3, [r7, #15]
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	211a      	movs	r1, #26
 800a0da:	fb01 f303 	mul.w	r3, r1, r3
 800a0de:	4413      	add	r3, r2
 800a0e0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a0e4:	881a      	ldrh	r2, [r3, #0]
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800a0ea:	7bfb      	ldrb	r3, [r7, #15]
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	211a      	movs	r1, #26
 800a0f0:	fb01 f303 	mul.w	r3, r1, r3
 800a0f4:	4413      	add	r3, r2
 800a0f6:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	b25b      	sxtb	r3, r3
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	da16      	bge.n	800a130 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800a102:	7bfb      	ldrb	r3, [r7, #15]
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	211a      	movs	r1, #26
 800a108:	fb01 f303 	mul.w	r3, r1, r3
 800a10c:	4413      	add	r3, r2
 800a10e:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a112:	781a      	ldrb	r2, [r3, #0]
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a118:	7bfb      	ldrb	r3, [r7, #15]
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	211a      	movs	r1, #26
 800a11e:	fb01 f303 	mul.w	r3, r1, r3
 800a122:	4413      	add	r3, r2
 800a124:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a128:	881a      	ldrh	r2, [r3, #0]
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	815a      	strh	r2, [r3, #10]
 800a12e:	e015      	b.n	800a15c <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800a130:	7bfb      	ldrb	r3, [r7, #15]
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	211a      	movs	r1, #26
 800a136:	fb01 f303 	mul.w	r3, r1, r3
 800a13a:	4413      	add	r3, r2
 800a13c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a140:	781a      	ldrb	r2, [r3, #0]
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a146:	7bfb      	ldrb	r3, [r7, #15]
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	211a      	movs	r1, #26
 800a14c:	fb01 f303 	mul.w	r3, r1, r3
 800a150:	4413      	add	r3, r2
 800a152:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a156:	881a      	ldrh	r2, [r3, #0]
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	2200      	movs	r2, #0
 800a160:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	2200      	movs	r2, #0
 800a166:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	2200      	movs	r2, #0
 800a16c:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	799b      	ldrb	r3, [r3, #6]
 800a172:	4619      	mov	r1, r3
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f002 fdc4 	bl	800cd02 <USBH_AllocPipe>
 800a17a:	4603      	mov	r3, r0
 800a17c:	461a      	mov	r2, r3
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	79db      	ldrb	r3, [r3, #7]
 800a186:	4619      	mov	r1, r3
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f002 fdba 	bl	800cd02 <USBH_AllocPipe>
 800a18e:	4603      	mov	r3, r0
 800a190:	461a      	mov	r2, r3
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 fdac 	bl	800acf4 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	7959      	ldrb	r1, [r3, #5]
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	7998      	ldrb	r0, [r3, #6]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a1b0:	68ba      	ldr	r2, [r7, #8]
 800a1b2:	8912      	ldrh	r2, [r2, #8]
 800a1b4:	9202      	str	r2, [sp, #8]
 800a1b6:	2202      	movs	r2, #2
 800a1b8:	9201      	str	r2, [sp, #4]
 800a1ba:	9300      	str	r3, [sp, #0]
 800a1bc:	4623      	mov	r3, r4
 800a1be:	4602      	mov	r2, r0
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f002 fd6f 	bl	800cca4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	7919      	ldrb	r1, [r3, #4]
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	79d8      	ldrb	r0, [r3, #7]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a1da:	68ba      	ldr	r2, [r7, #8]
 800a1dc:	8952      	ldrh	r2, [r2, #10]
 800a1de:	9202      	str	r2, [sp, #8]
 800a1e0:	2202      	movs	r2, #2
 800a1e2:	9201      	str	r2, [sp, #4]
 800a1e4:	9300      	str	r3, [sp, #0]
 800a1e6:	4623      	mov	r3, r4
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f002 fd5a 	bl	800cca4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	791b      	ldrb	r3, [r3, #4]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f005 fbee 	bl	800f9da <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	795b      	ldrb	r3, [r3, #5]
 800a202:	2200      	movs	r2, #0
 800a204:	4619      	mov	r1, r3
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f005 fbe7 	bl	800f9da <USBH_LL_SetToggle>

  return USBH_OK;
 800a20c:	2300      	movs	r3, #0
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3714      	adds	r7, #20
 800a212:	46bd      	mov	sp, r7
 800a214:	bd90      	pop	{r4, r7, pc}

0800a216 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a216:	b580      	push	{r7, lr}
 800a218:	b084      	sub	sp, #16
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a224:	69db      	ldr	r3, [r3, #28]
 800a226:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	795b      	ldrb	r3, [r3, #5]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d00e      	beq.n	800a24e <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	795b      	ldrb	r3, [r3, #5]
 800a234:	4619      	mov	r1, r3
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f002 fd53 	bl	800cce2 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	795b      	ldrb	r3, [r3, #5]
 800a240:	4619      	mov	r1, r3
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f002 fd7e 	bl	800cd44 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2200      	movs	r2, #0
 800a24c:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	791b      	ldrb	r3, [r3, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d00e      	beq.n	800a274 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	791b      	ldrb	r3, [r3, #4]
 800a25a:	4619      	mov	r1, r3
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f002 fd40 	bl	800cce2 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	791b      	ldrb	r3, [r3, #4]
 800a266:	4619      	mov	r1, r3
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f002 fd6b 	bl	800cd44 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2200      	movs	r2, #0
 800a272:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a27a:	69db      	ldr	r3, [r3, #28]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d00b      	beq.n	800a298 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a286:	69db      	ldr	r3, [r3, #28]
 800a288:	4618      	mov	r0, r3
 800a28a:	f005 fc6f 	bl	800fb6c <free>
    phost->pActiveClass->pData = 0U;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a294:	2200      	movs	r2, #0
 800a296:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b084      	sub	sp, #16
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2b0:	69db      	ldr	r3, [r3, #28]
 800a2b2:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	7b9b      	ldrb	r3, [r3, #14]
 800a2bc:	2b03      	cmp	r3, #3
 800a2be:	d041      	beq.n	800a344 <USBH_MSC_ClassRequest+0xa2>
 800a2c0:	2b03      	cmp	r3, #3
 800a2c2:	dc4b      	bgt.n	800a35c <USBH_MSC_ClassRequest+0xba>
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d001      	beq.n	800a2cc <USBH_MSC_ClassRequest+0x2a>
 800a2c8:	2b02      	cmp	r3, #2
 800a2ca:	d147      	bne.n	800a35c <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f000 fcf0 	bl	800acb6 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800a2da:	7bfb      	ldrb	r3, [r7, #15]
 800a2dc:	2b03      	cmp	r3, #3
 800a2de:	d104      	bne.n	800a2ea <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800a2ea:	7bfb      	ldrb	r3, [r7, #15]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d137      	bne.n	800a360 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d804      	bhi.n	800a302 <USBH_MSC_ClassRequest+0x60>
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	b2da      	uxtb	r2, r3
 800a300:	e000      	b.n	800a304 <USBH_MSC_ClassRequest+0x62>
 800a302:	2202      	movs	r2, #2
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800a308:	2300      	movs	r3, #0
 800a30a:	73bb      	strb	r3, [r7, #14]
 800a30c:	e014      	b.n	800a338 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800a30e:	7bbb      	ldrb	r3, [r7, #14]
 800a310:	68ba      	ldr	r2, [r7, #8]
 800a312:	2134      	movs	r1, #52	; 0x34
 800a314:	fb01 f303 	mul.w	r3, r1, r3
 800a318:	4413      	add	r3, r2
 800a31a:	3392      	adds	r3, #146	; 0x92
 800a31c:	2202      	movs	r2, #2
 800a31e:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800a320:	7bbb      	ldrb	r3, [r7, #14]
 800a322:	68ba      	ldr	r2, [r7, #8]
 800a324:	2134      	movs	r1, #52	; 0x34
 800a326:	fb01 f303 	mul.w	r3, r1, r3
 800a32a:	4413      	add	r3, r2
 800a32c:	33c1      	adds	r3, #193	; 0xc1
 800a32e:	2200      	movs	r2, #0
 800a330:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800a332:	7bbb      	ldrb	r3, [r7, #14]
 800a334:	3301      	adds	r3, #1
 800a336:	73bb      	strb	r3, [r7, #14]
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	7bba      	ldrb	r2, [r7, #14]
 800a33e:	429a      	cmp	r2, r3
 800a340:	d3e5      	bcc.n	800a30e <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800a342:	e00d      	b.n	800a360 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800a344:	2100      	movs	r1, #0
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f002 f87b 	bl	800c442 <USBH_ClrFeature>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d108      	bne.n	800a364 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	7bda      	ldrb	r2, [r3, #15]
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	739a      	strb	r2, [r3, #14]
      }
      break;
 800a35a:	e003      	b.n	800a364 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800a35c:	bf00      	nop
 800a35e:	e002      	b.n	800a366 <USBH_MSC_ClassRequest+0xc4>
      break;
 800a360:	bf00      	nop
 800a362:	e000      	b.n	800a366 <USBH_MSC_ClassRequest+0xc4>
      break;
 800a364:	bf00      	nop
  }

  return status;
 800a366:	7bfb      	ldrb	r3, [r7, #15]
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b086      	sub	sp, #24
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a37e:	69db      	ldr	r3, [r3, #28]
 800a380:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800a382:	2301      	movs	r3, #1
 800a384:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800a386:	2301      	movs	r3, #1
 800a388:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800a38a:	2301      	movs	r3, #1
 800a38c:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	7b1b      	ldrb	r3, [r3, #12]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d003      	beq.n	800a39e <USBH_MSC_Process+0x2e>
 800a396:	2b01      	cmp	r3, #1
 800a398:	f000 8271 	beq.w	800a87e <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800a39c:	e272      	b.n	800a884 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	f080 824f 	bcs.w	800a84e <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	693a      	ldr	r2, [r7, #16]
 800a3ba:	2334      	movs	r3, #52	; 0x34
 800a3bc:	fb03 f301 	mul.w	r3, r3, r1
 800a3c0:	4413      	add	r3, r2
 800a3c2:	3391      	adds	r3, #145	; 0x91
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	693a      	ldr	r2, [r7, #16]
 800a3d2:	2334      	movs	r3, #52	; 0x34
 800a3d4:	fb03 f301 	mul.w	r3, r3, r1
 800a3d8:	4413      	add	r3, r2
 800a3da:	3390      	adds	r3, #144	; 0x90
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	2b08      	cmp	r3, #8
 800a3e0:	f200 8243 	bhi.w	800a86a <USBH_MSC_Process+0x4fa>
 800a3e4:	a201      	add	r2, pc, #4	; (adr r2, 800a3ec <USBH_MSC_Process+0x7c>)
 800a3e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ea:	bf00      	nop
 800a3ec:	0800a411 	.word	0x0800a411
 800a3f0:	0800a86b 	.word	0x0800a86b
 800a3f4:	0800a4d9 	.word	0x0800a4d9
 800a3f8:	0800a65d 	.word	0x0800a65d
 800a3fc:	0800a437 	.word	0x0800a437
 800a400:	0800a729 	.word	0x0800a729
 800a404:	0800a86b 	.word	0x0800a86b
 800a408:	0800a86b 	.word	0x0800a86b
 800a40c:	0800a83d 	.word	0x0800a83d
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a416:	4619      	mov	r1, r3
 800a418:	693a      	ldr	r2, [r7, #16]
 800a41a:	2334      	movs	r3, #52	; 0x34
 800a41c:	fb03 f301 	mul.w	r3, r3, r1
 800a420:	4413      	add	r3, r2
 800a422:	3390      	adds	r3, #144	; 0x90
 800a424:	2204      	movs	r2, #4
 800a426:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800a434:	e222      	b.n	800a87c <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a43c:	b2d9      	uxtb	r1, r3
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a444:	461a      	mov	r2, r3
 800a446:	2334      	movs	r3, #52	; 0x34
 800a448:	fb03 f302 	mul.w	r3, r3, r2
 800a44c:	3398      	adds	r3, #152	; 0x98
 800a44e:	693a      	ldr	r2, [r7, #16]
 800a450:	4413      	add	r3, r2
 800a452:	3307      	adds	r3, #7
 800a454:	461a      	mov	r2, r3
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 ff6a 	bl	800b330 <USBH_MSC_SCSI_Inquiry>
 800a45c:	4603      	mov	r3, r0
 800a45e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a460:	7bfb      	ldrb	r3, [r7, #15]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d10b      	bne.n	800a47e <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a46c:	4619      	mov	r1, r3
 800a46e:	693a      	ldr	r2, [r7, #16]
 800a470:	2334      	movs	r3, #52	; 0x34
 800a472:	fb03 f301 	mul.w	r3, r3, r1
 800a476:	4413      	add	r3, r2
 800a478:	3390      	adds	r3, #144	; 0x90
 800a47a:	2202      	movs	r2, #2
 800a47c:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800a47e:	7bfb      	ldrb	r3, [r7, #15]
 800a480:	2b02      	cmp	r3, #2
 800a482:	d10c      	bne.n	800a49e <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a48a:	4619      	mov	r1, r3
 800a48c:	693a      	ldr	r2, [r7, #16]
 800a48e:	2334      	movs	r3, #52	; 0x34
 800a490:	fb03 f301 	mul.w	r3, r3, r1
 800a494:	4413      	add	r3, r2
 800a496:	3390      	adds	r3, #144	; 0x90
 800a498:	2205      	movs	r2, #5
 800a49a:	701a      	strb	r2, [r3, #0]
            break;
 800a49c:	e1e7      	b.n	800a86e <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a49e:	7bfb      	ldrb	r3, [r7, #15]
 800a4a0:	2b04      	cmp	r3, #4
 800a4a2:	f040 81e4 	bne.w	800a86e <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	693a      	ldr	r2, [r7, #16]
 800a4b0:	2334      	movs	r3, #52	; 0x34
 800a4b2:	fb03 f301 	mul.w	r3, r3, r1
 800a4b6:	4413      	add	r3, r2
 800a4b8:	3390      	adds	r3, #144	; 0x90
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	693a      	ldr	r2, [r7, #16]
 800a4c8:	2334      	movs	r3, #52	; 0x34
 800a4ca:	fb03 f301 	mul.w	r3, r3, r1
 800a4ce:	4413      	add	r3, r2
 800a4d0:	3391      	adds	r3, #145	; 0x91
 800a4d2:	2202      	movs	r2, #2
 800a4d4:	701a      	strb	r2, [r3, #0]
            break;
 800a4d6:	e1ca      	b.n	800a86e <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 fe66 	bl	800b1b4 <USBH_MSC_SCSI_TestUnitReady>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800a4ec:	7bbb      	ldrb	r3, [r7, #14]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d149      	bne.n	800a586 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	693a      	ldr	r2, [r7, #16]
 800a4fc:	2334      	movs	r3, #52	; 0x34
 800a4fe:	fb03 f301 	mul.w	r3, r3, r1
 800a502:	4413      	add	r3, r2
 800a504:	3392      	adds	r3, #146	; 0x92
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00c      	beq.n	800a526 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a512:	4619      	mov	r1, r3
 800a514:	693a      	ldr	r2, [r7, #16]
 800a516:	2334      	movs	r3, #52	; 0x34
 800a518:	fb03 f301 	mul.w	r3, r3, r1
 800a51c:	4413      	add	r3, r2
 800a51e:	33c1      	adds	r3, #193	; 0xc1
 800a520:	2201      	movs	r2, #1
 800a522:	701a      	strb	r2, [r3, #0]
 800a524:	e00b      	b.n	800a53e <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a52c:	4619      	mov	r1, r3
 800a52e:	693a      	ldr	r2, [r7, #16]
 800a530:	2334      	movs	r3, #52	; 0x34
 800a532:	fb03 f301 	mul.w	r3, r3, r1
 800a536:	4413      	add	r3, r2
 800a538:	33c1      	adds	r3, #193	; 0xc1
 800a53a:	2200      	movs	r2, #0
 800a53c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a544:	4619      	mov	r1, r3
 800a546:	693a      	ldr	r2, [r7, #16]
 800a548:	2334      	movs	r3, #52	; 0x34
 800a54a:	fb03 f301 	mul.w	r3, r3, r1
 800a54e:	4413      	add	r3, r2
 800a550:	3390      	adds	r3, #144	; 0x90
 800a552:	2203      	movs	r2, #3
 800a554:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a55c:	4619      	mov	r1, r3
 800a55e:	693a      	ldr	r2, [r7, #16]
 800a560:	2334      	movs	r3, #52	; 0x34
 800a562:	fb03 f301 	mul.w	r3, r3, r1
 800a566:	4413      	add	r3, r2
 800a568:	3391      	adds	r3, #145	; 0x91
 800a56a:	2200      	movs	r2, #0
 800a56c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a574:	4619      	mov	r1, r3
 800a576:	693a      	ldr	r2, [r7, #16]
 800a578:	2334      	movs	r3, #52	; 0x34
 800a57a:	fb03 f301 	mul.w	r3, r3, r1
 800a57e:	4413      	add	r3, r2
 800a580:	3392      	adds	r3, #146	; 0x92
 800a582:	2200      	movs	r2, #0
 800a584:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800a586:	7bbb      	ldrb	r3, [r7, #14]
 800a588:	2b02      	cmp	r3, #2
 800a58a:	d14a      	bne.n	800a622 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a592:	4619      	mov	r1, r3
 800a594:	693a      	ldr	r2, [r7, #16]
 800a596:	2334      	movs	r3, #52	; 0x34
 800a598:	fb03 f301 	mul.w	r3, r3, r1
 800a59c:	4413      	add	r3, r2
 800a59e:	3392      	adds	r3, #146	; 0x92
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	2b02      	cmp	r3, #2
 800a5a4:	d00c      	beq.n	800a5c0 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	693a      	ldr	r2, [r7, #16]
 800a5b0:	2334      	movs	r3, #52	; 0x34
 800a5b2:	fb03 f301 	mul.w	r3, r3, r1
 800a5b6:	4413      	add	r3, r2
 800a5b8:	33c1      	adds	r3, #193	; 0xc1
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	701a      	strb	r2, [r3, #0]
 800a5be:	e00b      	b.n	800a5d8 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	693a      	ldr	r2, [r7, #16]
 800a5ca:	2334      	movs	r3, #52	; 0x34
 800a5cc:	fb03 f301 	mul.w	r3, r3, r1
 800a5d0:	4413      	add	r3, r2
 800a5d2:	33c1      	adds	r3, #193	; 0xc1
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a5de:	4619      	mov	r1, r3
 800a5e0:	693a      	ldr	r2, [r7, #16]
 800a5e2:	2334      	movs	r3, #52	; 0x34
 800a5e4:	fb03 f301 	mul.w	r3, r3, r1
 800a5e8:	4413      	add	r3, r2
 800a5ea:	3390      	adds	r3, #144	; 0x90
 800a5ec:	2205      	movs	r2, #5
 800a5ee:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	693a      	ldr	r2, [r7, #16]
 800a5fa:	2334      	movs	r3, #52	; 0x34
 800a5fc:	fb03 f301 	mul.w	r3, r3, r1
 800a600:	4413      	add	r3, r2
 800a602:	3391      	adds	r3, #145	; 0x91
 800a604:	2201      	movs	r2, #1
 800a606:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a60e:	4619      	mov	r1, r3
 800a610:	693a      	ldr	r2, [r7, #16]
 800a612:	2334      	movs	r3, #52	; 0x34
 800a614:	fb03 f301 	mul.w	r3, r3, r1
 800a618:	4413      	add	r3, r2
 800a61a:	3392      	adds	r3, #146	; 0x92
 800a61c:	2202      	movs	r2, #2
 800a61e:	701a      	strb	r2, [r3, #0]
            break;
 800a620:	e127      	b.n	800a872 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800a622:	7bbb      	ldrb	r3, [r7, #14]
 800a624:	2b04      	cmp	r3, #4
 800a626:	f040 8124 	bne.w	800a872 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a630:	4619      	mov	r1, r3
 800a632:	693a      	ldr	r2, [r7, #16]
 800a634:	2334      	movs	r3, #52	; 0x34
 800a636:	fb03 f301 	mul.w	r3, r3, r1
 800a63a:	4413      	add	r3, r2
 800a63c:	3390      	adds	r3, #144	; 0x90
 800a63e:	2201      	movs	r2, #1
 800a640:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a648:	4619      	mov	r1, r3
 800a64a:	693a      	ldr	r2, [r7, #16]
 800a64c:	2334      	movs	r3, #52	; 0x34
 800a64e:	fb03 f301 	mul.w	r3, r3, r1
 800a652:	4413      	add	r3, r2
 800a654:	3391      	adds	r3, #145	; 0x91
 800a656:	2202      	movs	r2, #2
 800a658:	701a      	strb	r2, [r3, #0]
            break;
 800a65a:	e10a      	b.n	800a872 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a662:	b2d9      	uxtb	r1, r3
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a66a:	461a      	mov	r2, r3
 800a66c:	2334      	movs	r3, #52	; 0x34
 800a66e:	fb03 f302 	mul.w	r3, r3, r2
 800a672:	3390      	adds	r3, #144	; 0x90
 800a674:	693a      	ldr	r2, [r7, #16]
 800a676:	4413      	add	r3, r2
 800a678:	3304      	adds	r3, #4
 800a67a:	461a      	mov	r2, r3
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 fddc 	bl	800b23a <USBH_MSC_SCSI_ReadCapacity>
 800a682:	4603      	mov	r3, r0
 800a684:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a686:	7bfb      	ldrb	r3, [r7, #15]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d120      	bne.n	800a6ce <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a692:	4619      	mov	r1, r3
 800a694:	693a      	ldr	r2, [r7, #16]
 800a696:	2334      	movs	r3, #52	; 0x34
 800a698:	fb03 f301 	mul.w	r3, r3, r1
 800a69c:	4413      	add	r3, r2
 800a69e:	3390      	adds	r3, #144	; 0x90
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	693a      	ldr	r2, [r7, #16]
 800a6ae:	2334      	movs	r3, #52	; 0x34
 800a6b0:	fb03 f301 	mul.w	r3, r3, r1
 800a6b4:	4413      	add	r3, r2
 800a6b6:	3391      	adds	r3, #145	; 0x91
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	b29a      	uxth	r2, r3
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a6cc:	e0d3      	b.n	800a876 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800a6ce:	7bfb      	ldrb	r3, [r7, #15]
 800a6d0:	2b02      	cmp	r3, #2
 800a6d2:	d10c      	bne.n	800a6ee <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a6da:	4619      	mov	r1, r3
 800a6dc:	693a      	ldr	r2, [r7, #16]
 800a6de:	2334      	movs	r3, #52	; 0x34
 800a6e0:	fb03 f301 	mul.w	r3, r3, r1
 800a6e4:	4413      	add	r3, r2
 800a6e6:	3390      	adds	r3, #144	; 0x90
 800a6e8:	2205      	movs	r2, #5
 800a6ea:	701a      	strb	r2, [r3, #0]
            break;
 800a6ec:	e0c3      	b.n	800a876 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a6ee:	7bfb      	ldrb	r3, [r7, #15]
 800a6f0:	2b04      	cmp	r3, #4
 800a6f2:	f040 80c0 	bne.w	800a876 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	693a      	ldr	r2, [r7, #16]
 800a700:	2334      	movs	r3, #52	; 0x34
 800a702:	fb03 f301 	mul.w	r3, r3, r1
 800a706:	4413      	add	r3, r2
 800a708:	3390      	adds	r3, #144	; 0x90
 800a70a:	2201      	movs	r2, #1
 800a70c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a714:	4619      	mov	r1, r3
 800a716:	693a      	ldr	r2, [r7, #16]
 800a718:	2334      	movs	r3, #52	; 0x34
 800a71a:	fb03 f301 	mul.w	r3, r3, r1
 800a71e:	4413      	add	r3, r2
 800a720:	3391      	adds	r3, #145	; 0x91
 800a722:	2202      	movs	r2, #2
 800a724:	701a      	strb	r2, [r3, #0]
            break;
 800a726:	e0a6      	b.n	800a876 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a72e:	b2d9      	uxtb	r1, r3
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a736:	461a      	mov	r2, r3
 800a738:	2334      	movs	r3, #52	; 0x34
 800a73a:	fb03 f302 	mul.w	r3, r3, r2
 800a73e:	3398      	adds	r3, #152	; 0x98
 800a740:	693a      	ldr	r2, [r7, #16]
 800a742:	4413      	add	r3, r2
 800a744:	3304      	adds	r3, #4
 800a746:	461a      	mov	r2, r3
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 fe96 	bl	800b47a <USBH_MSC_SCSI_RequestSense>
 800a74e:	4603      	mov	r3, r0
 800a750:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a752:	7bfb      	ldrb	r3, [r7, #15]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d145      	bne.n	800a7e4 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a75e:	4619      	mov	r1, r3
 800a760:	693a      	ldr	r2, [r7, #16]
 800a762:	2334      	movs	r3, #52	; 0x34
 800a764:	fb03 f301 	mul.w	r3, r3, r1
 800a768:	4413      	add	r3, r2
 800a76a:	339c      	adds	r3, #156	; 0x9c
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	2b06      	cmp	r3, #6
 800a770:	d00c      	beq.n	800a78c <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a778:	4619      	mov	r1, r3
 800a77a:	693a      	ldr	r2, [r7, #16]
 800a77c:	2334      	movs	r3, #52	; 0x34
 800a77e:	fb03 f301 	mul.w	r3, r3, r1
 800a782:	4413      	add	r3, r2
 800a784:	339c      	adds	r3, #156	; 0x9c
 800a786:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a788:	2b02      	cmp	r3, #2
 800a78a:	d117      	bne.n	800a7bc <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800a798:	1ad3      	subs	r3, r2, r3
 800a79a:	f242 720f 	movw	r2, #9999	; 0x270f
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d80c      	bhi.n	800a7bc <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	693a      	ldr	r2, [r7, #16]
 800a7ac:	2334      	movs	r3, #52	; 0x34
 800a7ae:	fb03 f301 	mul.w	r3, r3, r1
 800a7b2:	4413      	add	r3, r2
 800a7b4:	3390      	adds	r3, #144	; 0x90
 800a7b6:	2202      	movs	r2, #2
 800a7b8:	701a      	strb	r2, [r3, #0]
                  break;
 800a7ba:	e05f      	b.n	800a87c <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	693a      	ldr	r2, [r7, #16]
 800a7c6:	2334      	movs	r3, #52	; 0x34
 800a7c8:	fb03 f301 	mul.w	r3, r3, r1
 800a7cc:	4413      	add	r3, r2
 800a7ce:	3390      	adds	r3, #144	; 0x90
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a7da:	3301      	adds	r3, #1
 800a7dc:	b29a      	uxth	r2, r3
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800a7e4:	7bfb      	ldrb	r3, [r7, #15]
 800a7e6:	2b02      	cmp	r3, #2
 800a7e8:	d10c      	bne.n	800a804 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	693a      	ldr	r2, [r7, #16]
 800a7f4:	2334      	movs	r3, #52	; 0x34
 800a7f6:	fb03 f301 	mul.w	r3, r3, r1
 800a7fa:	4413      	add	r3, r2
 800a7fc:	3390      	adds	r3, #144	; 0x90
 800a7fe:	2208      	movs	r2, #8
 800a800:	701a      	strb	r2, [r3, #0]
            break;
 800a802:	e03a      	b.n	800a87a <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a804:	7bfb      	ldrb	r3, [r7, #15]
 800a806:	2b04      	cmp	r3, #4
 800a808:	d137      	bne.n	800a87a <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a810:	4619      	mov	r1, r3
 800a812:	693a      	ldr	r2, [r7, #16]
 800a814:	2334      	movs	r3, #52	; 0x34
 800a816:	fb03 f301 	mul.w	r3, r3, r1
 800a81a:	4413      	add	r3, r2
 800a81c:	3390      	adds	r3, #144	; 0x90
 800a81e:	2201      	movs	r2, #1
 800a820:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a828:	4619      	mov	r1, r3
 800a82a:	693a      	ldr	r2, [r7, #16]
 800a82c:	2334      	movs	r3, #52	; 0x34
 800a82e:	fb03 f301 	mul.w	r3, r3, r1
 800a832:	4413      	add	r3, r2
 800a834:	3391      	adds	r3, #145	; 0x91
 800a836:	2202      	movs	r2, #2
 800a838:	701a      	strb	r2, [r3, #0]
            break;
 800a83a:	e01e      	b.n	800a87a <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a842:	3301      	adds	r3, #1
 800a844:	b29a      	uxth	r2, r3
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a84c:	e016      	b.n	800a87c <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	2200      	movs	r2, #0
 800a852:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	2201      	movs	r2, #1
 800a85a:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a862:	2102      	movs	r1, #2
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	4798      	blx	r3
      break;
 800a868:	e00c      	b.n	800a884 <USBH_MSC_Process+0x514>
            break;
 800a86a:	bf00      	nop
 800a86c:	e00a      	b.n	800a884 <USBH_MSC_Process+0x514>
            break;
 800a86e:	bf00      	nop
 800a870:	e008      	b.n	800a884 <USBH_MSC_Process+0x514>
            break;
 800a872:	bf00      	nop
 800a874:	e006      	b.n	800a884 <USBH_MSC_Process+0x514>
            break;
 800a876:	bf00      	nop
 800a878:	e004      	b.n	800a884 <USBH_MSC_Process+0x514>
            break;
 800a87a:	bf00      	nop
      break;
 800a87c:	e002      	b.n	800a884 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800a87e:	2300      	movs	r3, #0
 800a880:	75fb      	strb	r3, [r7, #23]
      break;
 800a882:	bf00      	nop
  }
  return error;
 800a884:	7dfb      	ldrb	r3, [r7, #23]
}
 800a886:	4618      	mov	r0, r3
 800a888:	3718      	adds	r7, #24
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop

0800a890 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a890:	b480      	push	{r7}
 800a892:	b083      	sub	sp, #12
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a898:	2300      	movs	r3, #0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	370c      	adds	r7, #12
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr

0800a8a6 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b088      	sub	sp, #32
 800a8aa:	af02      	add	r7, sp, #8
 800a8ac:	6078      	str	r0, [r7, #4]
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8b8:	69db      	ldr	r3, [r3, #28]
 800a8ba:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800a8c4:	78fb      	ldrb	r3, [r7, #3]
 800a8c6:	693a      	ldr	r2, [r7, #16]
 800a8c8:	2134      	movs	r1, #52	; 0x34
 800a8ca:	fb01 f303 	mul.w	r3, r1, r3
 800a8ce:	4413      	add	r3, r2
 800a8d0:	3390      	adds	r3, #144	; 0x90
 800a8d2:	781b      	ldrb	r3, [r3, #0]
 800a8d4:	2b07      	cmp	r3, #7
 800a8d6:	d03c      	beq.n	800a952 <USBH_MSC_RdWrProcess+0xac>
 800a8d8:	2b07      	cmp	r3, #7
 800a8da:	f300 80a7 	bgt.w	800aa2c <USBH_MSC_RdWrProcess+0x186>
 800a8de:	2b05      	cmp	r3, #5
 800a8e0:	d06c      	beq.n	800a9bc <USBH_MSC_RdWrProcess+0x116>
 800a8e2:	2b06      	cmp	r3, #6
 800a8e4:	f040 80a2 	bne.w	800aa2c <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800a8e8:	78f9      	ldrb	r1, [r7, #3]
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	9300      	str	r3, [sp, #0]
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 fea5 	bl	800b642 <USBH_MSC_SCSI_Read>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a8fc:	7bfb      	ldrb	r3, [r7, #15]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d10b      	bne.n	800a91a <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a902:	78fb      	ldrb	r3, [r7, #3]
 800a904:	693a      	ldr	r2, [r7, #16]
 800a906:	2134      	movs	r1, #52	; 0x34
 800a908:	fb01 f303 	mul.w	r3, r1, r3
 800a90c:	4413      	add	r3, r2
 800a90e:	3390      	adds	r3, #144	; 0x90
 800a910:	2201      	movs	r2, #1
 800a912:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a914:	2300      	movs	r3, #0
 800a916:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a918:	e08a      	b.n	800aa30 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800a91a:	7bfb      	ldrb	r3, [r7, #15]
 800a91c:	2b02      	cmp	r3, #2
 800a91e:	d109      	bne.n	800a934 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a920:	78fb      	ldrb	r3, [r7, #3]
 800a922:	693a      	ldr	r2, [r7, #16]
 800a924:	2134      	movs	r1, #52	; 0x34
 800a926:	fb01 f303 	mul.w	r3, r1, r3
 800a92a:	4413      	add	r3, r2
 800a92c:	3390      	adds	r3, #144	; 0x90
 800a92e:	2205      	movs	r2, #5
 800a930:	701a      	strb	r2, [r3, #0]
      break;
 800a932:	e07d      	b.n	800aa30 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a934:	7bfb      	ldrb	r3, [r7, #15]
 800a936:	2b04      	cmp	r3, #4
 800a938:	d17a      	bne.n	800aa30 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a93a:	78fb      	ldrb	r3, [r7, #3]
 800a93c:	693a      	ldr	r2, [r7, #16]
 800a93e:	2134      	movs	r1, #52	; 0x34
 800a940:	fb01 f303 	mul.w	r3, r1, r3
 800a944:	4413      	add	r3, r2
 800a946:	3390      	adds	r3, #144	; 0x90
 800a948:	2208      	movs	r2, #8
 800a94a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a94c:	2302      	movs	r3, #2
 800a94e:	75fb      	strb	r3, [r7, #23]
      break;
 800a950:	e06e      	b.n	800aa30 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800a952:	78f9      	ldrb	r1, [r7, #3]
 800a954:	2300      	movs	r3, #0
 800a956:	9300      	str	r3, [sp, #0]
 800a958:	2300      	movs	r3, #0
 800a95a:	2200      	movs	r2, #0
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 fe05 	bl	800b56c <USBH_MSC_SCSI_Write>
 800a962:	4603      	mov	r3, r0
 800a964:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a966:	7bfb      	ldrb	r3, [r7, #15]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d10b      	bne.n	800a984 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a96c:	78fb      	ldrb	r3, [r7, #3]
 800a96e:	693a      	ldr	r2, [r7, #16]
 800a970:	2134      	movs	r1, #52	; 0x34
 800a972:	fb01 f303 	mul.w	r3, r1, r3
 800a976:	4413      	add	r3, r2
 800a978:	3390      	adds	r3, #144	; 0x90
 800a97a:	2201      	movs	r2, #1
 800a97c:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a97e:	2300      	movs	r3, #0
 800a980:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a982:	e057      	b.n	800aa34 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800a984:	7bfb      	ldrb	r3, [r7, #15]
 800a986:	2b02      	cmp	r3, #2
 800a988:	d109      	bne.n	800a99e <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a98a:	78fb      	ldrb	r3, [r7, #3]
 800a98c:	693a      	ldr	r2, [r7, #16]
 800a98e:	2134      	movs	r1, #52	; 0x34
 800a990:	fb01 f303 	mul.w	r3, r1, r3
 800a994:	4413      	add	r3, r2
 800a996:	3390      	adds	r3, #144	; 0x90
 800a998:	2205      	movs	r2, #5
 800a99a:	701a      	strb	r2, [r3, #0]
      break;
 800a99c:	e04a      	b.n	800aa34 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a99e:	7bfb      	ldrb	r3, [r7, #15]
 800a9a0:	2b04      	cmp	r3, #4
 800a9a2:	d147      	bne.n	800aa34 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a9a4:	78fb      	ldrb	r3, [r7, #3]
 800a9a6:	693a      	ldr	r2, [r7, #16]
 800a9a8:	2134      	movs	r1, #52	; 0x34
 800a9aa:	fb01 f303 	mul.w	r3, r1, r3
 800a9ae:	4413      	add	r3, r2
 800a9b0:	3390      	adds	r3, #144	; 0x90
 800a9b2:	2208      	movs	r2, #8
 800a9b4:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a9b6:	2302      	movs	r3, #2
 800a9b8:	75fb      	strb	r3, [r7, #23]
      break;
 800a9ba:	e03b      	b.n	800aa34 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800a9bc:	78fb      	ldrb	r3, [r7, #3]
 800a9be:	2234      	movs	r2, #52	; 0x34
 800a9c0:	fb02 f303 	mul.w	r3, r2, r3
 800a9c4:	3398      	adds	r3, #152	; 0x98
 800a9c6:	693a      	ldr	r2, [r7, #16]
 800a9c8:	4413      	add	r3, r2
 800a9ca:	1d1a      	adds	r2, r3, #4
 800a9cc:	78fb      	ldrb	r3, [r7, #3]
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 fd52 	bl	800b47a <USBH_MSC_SCSI_RequestSense>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a9da:	7bfb      	ldrb	r3, [r7, #15]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d113      	bne.n	800aa08 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a9e0:	78fb      	ldrb	r3, [r7, #3]
 800a9e2:	693a      	ldr	r2, [r7, #16]
 800a9e4:	2134      	movs	r1, #52	; 0x34
 800a9e6:	fb01 f303 	mul.w	r3, r1, r3
 800a9ea:	4413      	add	r3, r2
 800a9ec:	3390      	adds	r3, #144	; 0x90
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800a9f2:	78fb      	ldrb	r3, [r7, #3]
 800a9f4:	693a      	ldr	r2, [r7, #16]
 800a9f6:	2134      	movs	r1, #52	; 0x34
 800a9f8:	fb01 f303 	mul.w	r3, r1, r3
 800a9fc:	4413      	add	r3, r2
 800a9fe:	3391      	adds	r3, #145	; 0x91
 800aa00:	2202      	movs	r2, #2
 800aa02:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800aa04:	2302      	movs	r3, #2
 800aa06:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800aa08:	7bfb      	ldrb	r3, [r7, #15]
 800aa0a:	2b02      	cmp	r3, #2
 800aa0c:	d014      	beq.n	800aa38 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800aa0e:	7bfb      	ldrb	r3, [r7, #15]
 800aa10:	2b04      	cmp	r3, #4
 800aa12:	d111      	bne.n	800aa38 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800aa14:	78fb      	ldrb	r3, [r7, #3]
 800aa16:	693a      	ldr	r2, [r7, #16]
 800aa18:	2134      	movs	r1, #52	; 0x34
 800aa1a:	fb01 f303 	mul.w	r3, r1, r3
 800aa1e:	4413      	add	r3, r2
 800aa20:	3390      	adds	r3, #144	; 0x90
 800aa22:	2208      	movs	r2, #8
 800aa24:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800aa26:	2302      	movs	r3, #2
 800aa28:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aa2a:	e005      	b.n	800aa38 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800aa2c:	bf00      	nop
 800aa2e:	e004      	b.n	800aa3a <USBH_MSC_RdWrProcess+0x194>
      break;
 800aa30:	bf00      	nop
 800aa32:	e002      	b.n	800aa3a <USBH_MSC_RdWrProcess+0x194>
      break;
 800aa34:	bf00      	nop
 800aa36:	e000      	b.n	800aa3a <USBH_MSC_RdWrProcess+0x194>
      break;
 800aa38:	bf00      	nop

  }
  return error;
 800aa3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3718      	adds	r7, #24
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b085      	sub	sp, #20
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa56:	69db      	ldr	r3, [r3, #28]
 800aa58:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	2b0b      	cmp	r3, #11
 800aa62:	d10c      	bne.n	800aa7e <USBH_MSC_UnitIsReady+0x3a>
 800aa64:	78fb      	ldrb	r3, [r7, #3]
 800aa66:	68ba      	ldr	r2, [r7, #8]
 800aa68:	2134      	movs	r1, #52	; 0x34
 800aa6a:	fb01 f303 	mul.w	r3, r1, r3
 800aa6e:	4413      	add	r3, r2
 800aa70:	3391      	adds	r3, #145	; 0x91
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d102      	bne.n	800aa7e <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800aa78:	2301      	movs	r3, #1
 800aa7a:	73fb      	strb	r3, [r7, #15]
 800aa7c:	e001      	b.n	800aa82 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800aa82:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3714      	adds	r7, #20
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b086      	sub	sp, #24
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	460b      	mov	r3, r1
 800aa9a:	607a      	str	r2, [r7, #4]
 800aa9c:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aaa4:	69db      	ldr	r3, [r3, #28]
 800aaa6:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	2b0b      	cmp	r3, #11
 800aab0:	d10d      	bne.n	800aace <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800aab2:	7afb      	ldrb	r3, [r7, #11]
 800aab4:	2234      	movs	r2, #52	; 0x34
 800aab6:	fb02 f303 	mul.w	r3, r2, r3
 800aaba:	3390      	adds	r3, #144	; 0x90
 800aabc:	697a      	ldr	r2, [r7, #20]
 800aabe:	4413      	add	r3, r2
 800aac0:	2234      	movs	r2, #52	; 0x34
 800aac2:	4619      	mov	r1, r3
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f005 f859 	bl	800fb7c <memcpy>
    return USBH_OK;
 800aaca:	2300      	movs	r3, #0
 800aacc:	e000      	b.n	800aad0 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800aace:	2302      	movs	r3, #2
  }
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3718      	adds	r7, #24
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b088      	sub	sp, #32
 800aadc:	af02      	add	r7, sp, #8
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	607a      	str	r2, [r7, #4]
 800aae2:	603b      	str	r3, [r7, #0]
 800aae4:	460b      	mov	r3, r1
 800aae6:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aaee:	69db      	ldr	r3, [r3, #28]
 800aaf0:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d00e      	beq.n	800ab1c <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800ab04:	2b0b      	cmp	r3, #11
 800ab06:	d109      	bne.n	800ab1c <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800ab08:	7afb      	ldrb	r3, [r7, #11]
 800ab0a:	697a      	ldr	r2, [r7, #20]
 800ab0c:	2134      	movs	r1, #52	; 0x34
 800ab0e:	fb01 f303 	mul.w	r3, r1, r3
 800ab12:	4413      	add	r3, r2
 800ab14:	3390      	adds	r3, #144	; 0x90
 800ab16:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d001      	beq.n	800ab20 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800ab1c:	2302      	movs	r3, #2
 800ab1e:	e040      	b.n	800aba2 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	2206      	movs	r2, #6
 800ab24:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800ab26:	7afb      	ldrb	r3, [r7, #11]
 800ab28:	697a      	ldr	r2, [r7, #20]
 800ab2a:	2134      	movs	r1, #52	; 0x34
 800ab2c:	fb01 f303 	mul.w	r3, r1, r3
 800ab30:	4413      	add	r3, r2
 800ab32:	3390      	adds	r3, #144	; 0x90
 800ab34:	2206      	movs	r2, #6
 800ab36:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800ab38:	7afb      	ldrb	r3, [r7, #11]
 800ab3a:	b29a      	uxth	r2, r3
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800ab42:	7af9      	ldrb	r1, [r7, #11]
 800ab44:	6a3b      	ldr	r3, [r7, #32]
 800ab46:	9300      	str	r3, [sp, #0]
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	687a      	ldr	r2, [r7, #4]
 800ab4c:	68f8      	ldr	r0, [r7, #12]
 800ab4e:	f000 fd78 	bl	800b642 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ab58:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800ab5a:	e016      	b.n	800ab8a <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	1ad2      	subs	r2, r2, r3
 800ab66:	6a3b      	ldr	r3, [r7, #32]
 800ab68:	f242 7110 	movw	r1, #10000	; 0x2710
 800ab6c:	fb01 f303 	mul.w	r3, r1, r3
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d805      	bhi.n	800ab80 <USBH_MSC_Read+0xa8>
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d104      	bne.n	800ab8a <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	2201      	movs	r2, #1
 800ab84:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800ab86:	2302      	movs	r3, #2
 800ab88:	e00b      	b.n	800aba2 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800ab8a:	7afb      	ldrb	r3, [r7, #11]
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	68f8      	ldr	r0, [r7, #12]
 800ab90:	f7ff fe89 	bl	800a8a6 <USBH_MSC_RdWrProcess>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d0e0      	beq.n	800ab5c <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800aba0:	2300      	movs	r3, #0
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3718      	adds	r7, #24
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}

0800abaa <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800abaa:	b580      	push	{r7, lr}
 800abac:	b088      	sub	sp, #32
 800abae:	af02      	add	r7, sp, #8
 800abb0:	60f8      	str	r0, [r7, #12]
 800abb2:	607a      	str	r2, [r7, #4]
 800abb4:	603b      	str	r3, [r7, #0]
 800abb6:	460b      	mov	r3, r1
 800abb8:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abc0:	69db      	ldr	r3, [r3, #28]
 800abc2:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d00e      	beq.n	800abee <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800abd6:	2b0b      	cmp	r3, #11
 800abd8:	d109      	bne.n	800abee <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800abda:	7afb      	ldrb	r3, [r7, #11]
 800abdc:	697a      	ldr	r2, [r7, #20]
 800abde:	2134      	movs	r1, #52	; 0x34
 800abe0:	fb01 f303 	mul.w	r3, r1, r3
 800abe4:	4413      	add	r3, r2
 800abe6:	3390      	adds	r3, #144	; 0x90
 800abe8:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800abea:	2b01      	cmp	r3, #1
 800abec:	d001      	beq.n	800abf2 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800abee:	2302      	movs	r3, #2
 800abf0:	e040      	b.n	800ac74 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	2207      	movs	r2, #7
 800abf6:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800abf8:	7afb      	ldrb	r3, [r7, #11]
 800abfa:	697a      	ldr	r2, [r7, #20]
 800abfc:	2134      	movs	r1, #52	; 0x34
 800abfe:	fb01 f303 	mul.w	r3, r1, r3
 800ac02:	4413      	add	r3, r2
 800ac04:	3390      	adds	r3, #144	; 0x90
 800ac06:	2207      	movs	r2, #7
 800ac08:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800ac0a:	7afb      	ldrb	r3, [r7, #11]
 800ac0c:	b29a      	uxth	r2, r3
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800ac14:	7af9      	ldrb	r1, [r7, #11]
 800ac16:	6a3b      	ldr	r3, [r7, #32]
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	68f8      	ldr	r0, [r7, #12]
 800ac20:	f000 fca4 	bl	800b56c <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ac2a:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800ac2c:	e016      	b.n	800ac5c <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	1ad2      	subs	r2, r2, r3
 800ac38:	6a3b      	ldr	r3, [r7, #32]
 800ac3a:	f242 7110 	movw	r1, #10000	; 0x2710
 800ac3e:	fb01 f303 	mul.w	r3, r1, r3
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d805      	bhi.n	800ac52 <USBH_MSC_Write+0xa8>
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ac4c:	b2db      	uxtb	r3, r3
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d104      	bne.n	800ac5c <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	2201      	movs	r2, #1
 800ac56:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800ac58:	2302      	movs	r3, #2
 800ac5a:	e00b      	b.n	800ac74 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800ac5c:	7afb      	ldrb	r3, [r7, #11]
 800ac5e:	4619      	mov	r1, r3
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	f7ff fe20 	bl	800a8a6 <USBH_MSC_RdWrProcess>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d0e0      	beq.n	800ac2e <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	2201      	movs	r2, #1
 800ac70:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800ac72:	2300      	movs	r3, #0
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3718      	adds	r7, #24
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2221      	movs	r2, #33	; 0x21
 800ac88:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	22ff      	movs	r2, #255	; 0xff
 800ac8e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2200      	movs	r2, #0
 800ac94:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800aca2:	2200      	movs	r2, #0
 800aca4:	2100      	movs	r1, #0
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f001 fdab 	bl	800c802 <USBH_CtlReq>
 800acac:	4603      	mov	r3, r0
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3708      	adds	r7, #8
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b082      	sub	sp, #8
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
 800acbe:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	22a1      	movs	r2, #161	; 0xa1
 800acc4:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	22fe      	movs	r2, #254	; 0xfe
 800acca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2200      	movs	r2, #0
 800acd6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2201      	movs	r2, #1
 800acdc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800acde:	2201      	movs	r2, #1
 800ace0:	6839      	ldr	r1, [r7, #0]
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f001 fd8d 	bl	800c802 <USBH_CtlReq>
 800ace8:	4603      	mov	r3, r0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3708      	adds	r7, #8
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
	...

0800acf4 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b085      	sub	sp, #20
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad02:	69db      	ldr	r3, [r3, #28]
 800ad04:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	4a09      	ldr	r2, [pc, #36]	; (800ad30 <USBH_MSC_BOT_Init+0x3c>)
 800ad0a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	4a09      	ldr	r2, [pc, #36]	; (800ad34 <USBH_MSC_BOT_Init+0x40>)
 800ad10:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2201      	movs	r2, #1
 800ad16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800ad22:	2300      	movs	r3, #0
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3714      	adds	r7, #20
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr
 800ad30:	43425355 	.word	0x43425355
 800ad34:	20304050 	.word	0x20304050

0800ad38 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b088      	sub	sp, #32
 800ad3c:	af02      	add	r7, sp, #8
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	460b      	mov	r3, r1
 800ad42:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800ad44:	2301      	movs	r3, #1
 800ad46:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ad50:	2300      	movs	r3, #0
 800ad52:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad5a:	69db      	ldr	r3, [r3, #28]
 800ad5c:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ad68:	3b01      	subs	r3, #1
 800ad6a:	2b0a      	cmp	r3, #10
 800ad6c:	f200 819e 	bhi.w	800b0ac <USBH_MSC_BOT_Process+0x374>
 800ad70:	a201      	add	r2, pc, #4	; (adr r2, 800ad78 <USBH_MSC_BOT_Process+0x40>)
 800ad72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad76:	bf00      	nop
 800ad78:	0800ada5 	.word	0x0800ada5
 800ad7c:	0800adcd 	.word	0x0800adcd
 800ad80:	0800ae37 	.word	0x0800ae37
 800ad84:	0800ae55 	.word	0x0800ae55
 800ad88:	0800aed9 	.word	0x0800aed9
 800ad8c:	0800aefb 	.word	0x0800aefb
 800ad90:	0800af93 	.word	0x0800af93
 800ad94:	0800afaf 	.word	0x0800afaf
 800ad98:	0800b001 	.word	0x0800b001
 800ad9c:	0800b031 	.word	0x0800b031
 800ada0:	0800b093 	.word	0x0800b093
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	78fa      	ldrb	r2, [r7, #3]
 800ada8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	2202      	movs	r2, #2
 800adb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	795b      	ldrb	r3, [r3, #5]
 800adbe:	2201      	movs	r2, #1
 800adc0:	9200      	str	r2, [sp, #0]
 800adc2:	221f      	movs	r2, #31
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f001 ff2a 	bl	800cc1e <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800adca:	e17e      	b.n	800b0ca <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	795b      	ldrb	r3, [r3, #5]
 800add0:	4619      	mov	r1, r3
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f004 fde0 	bl	800f998 <USBH_LL_GetURBState>
 800add8:	4603      	mov	r3, r0
 800adda:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800addc:	7d3b      	ldrb	r3, [r7, #20]
 800adde:	2b01      	cmp	r3, #1
 800ade0:	d118      	bne.n	800ae14 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d00f      	beq.n	800ae0a <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800adf0:	b25b      	sxtb	r3, r3
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	da04      	bge.n	800ae00 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	2203      	movs	r2, #3
 800adfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800adfe:	e157      	b.n	800b0b0 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	2205      	movs	r2, #5
 800ae04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ae08:	e152      	b.n	800b0b0 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	2207      	movs	r2, #7
 800ae0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ae12:	e14d      	b.n	800b0b0 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ae14:	7d3b      	ldrb	r3, [r7, #20]
 800ae16:	2b02      	cmp	r3, #2
 800ae18:	d104      	bne.n	800ae24 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ae22:	e145      	b.n	800b0b0 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800ae24:	7d3b      	ldrb	r3, [r7, #20]
 800ae26:	2b05      	cmp	r3, #5
 800ae28:	f040 8142 	bne.w	800b0b0 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	220a      	movs	r2, #10
 800ae30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ae34:	e13c      	b.n	800b0b0 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	895a      	ldrh	r2, [r3, #10]
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	791b      	ldrb	r3, [r3, #4]
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f001 ff0f 	bl	800cc68 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	2204      	movs	r2, #4
 800ae4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800ae52:	e13a      	b.n	800b0ca <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	791b      	ldrb	r3, [r3, #4]
 800ae58:	4619      	mov	r1, r3
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f004 fd9c 	bl	800f998 <USBH_LL_GetURBState>
 800ae60:	4603      	mov	r3, r0
 800ae62:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800ae64:	7d3b      	ldrb	r3, [r7, #20]
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d12d      	bne.n	800aec6 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae6e:	693a      	ldr	r2, [r7, #16]
 800ae70:	8952      	ldrh	r2, [r2, #10]
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d910      	bls.n	800ae98 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae7c:	693a      	ldr	r2, [r7, #16]
 800ae7e:	8952      	ldrh	r2, [r2, #10]
 800ae80:	441a      	add	r2, r3
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae8c:	693a      	ldr	r2, [r7, #16]
 800ae8e:	8952      	ldrh	r2, [r2, #10]
 800ae90:	1a9a      	subs	r2, r3, r2
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	65da      	str	r2, [r3, #92]	; 0x5c
 800ae96:	e002      	b.n	800ae9e <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d00a      	beq.n	800aebc <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	895a      	ldrh	r2, [r3, #10]
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	791b      	ldrb	r3, [r3, #4]
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f001 fed7 	bl	800cc68 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800aeba:	e0fb      	b.n	800b0b4 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	2207      	movs	r2, #7
 800aec0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aec4:	e0f6      	b.n	800b0b4 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800aec6:	7d3b      	ldrb	r3, [r7, #20]
 800aec8:	2b05      	cmp	r3, #5
 800aeca:	f040 80f3 	bne.w	800b0b4 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	2209      	movs	r2, #9
 800aed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aed6:	e0ed      	b.n	800b0b4 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	891a      	ldrh	r2, [r3, #8]
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	795b      	ldrb	r3, [r3, #5]
 800aee6:	2001      	movs	r0, #1
 800aee8:	9000      	str	r0, [sp, #0]
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f001 fe97 	bl	800cc1e <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	2206      	movs	r2, #6
 800aef4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aef8:	e0e7      	b.n	800b0ca <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	795b      	ldrb	r3, [r3, #5]
 800aefe:	4619      	mov	r1, r3
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f004 fd49 	bl	800f998 <USBH_LL_GetURBState>
 800af06:	4603      	mov	r3, r0
 800af08:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800af0a:	7d3b      	ldrb	r3, [r7, #20]
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d12f      	bne.n	800af70 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af14:	693a      	ldr	r2, [r7, #16]
 800af16:	8912      	ldrh	r2, [r2, #8]
 800af18:	4293      	cmp	r3, r2
 800af1a:	d910      	bls.n	800af3e <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af22:	693a      	ldr	r2, [r7, #16]
 800af24:	8912      	ldrh	r2, [r2, #8]
 800af26:	441a      	add	r2, r3
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af32:	693a      	ldr	r2, [r7, #16]
 800af34:	8912      	ldrh	r2, [r2, #8]
 800af36:	1a9a      	subs	r2, r3, r2
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	65da      	str	r2, [r3, #92]	; 0x5c
 800af3c:	e002      	b.n	800af44 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	2200      	movs	r2, #0
 800af42:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d00c      	beq.n	800af66 <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	891a      	ldrh	r2, [r3, #8]
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	795b      	ldrb	r3, [r3, #5]
 800af5a:	2001      	movs	r0, #1
 800af5c:	9000      	str	r0, [sp, #0]
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f001 fe5d 	bl	800cc1e <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800af64:	e0a8      	b.n	800b0b8 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	2207      	movs	r2, #7
 800af6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800af6e:	e0a3      	b.n	800b0b8 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800af70:	7d3b      	ldrb	r3, [r7, #20]
 800af72:	2b02      	cmp	r3, #2
 800af74:	d104      	bne.n	800af80 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	2205      	movs	r2, #5
 800af7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800af7e:	e09b      	b.n	800b0b8 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800af80:	7d3b      	ldrb	r3, [r7, #20]
 800af82:	2b05      	cmp	r3, #5
 800af84:	f040 8098 	bne.w	800b0b8 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	220a      	movs	r2, #10
 800af8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800af90:	e092      	b.n	800b0b8 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	791b      	ldrb	r3, [r3, #4]
 800af9c:	220d      	movs	r2, #13
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f001 fe62 	bl	800cc68 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	2208      	movs	r2, #8
 800afa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800afac:	e08d      	b.n	800b0ca <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	791b      	ldrb	r3, [r3, #4]
 800afb2:	4619      	mov	r1, r3
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f004 fcef 	bl	800f998 <USBH_LL_GetURBState>
 800afba:	4603      	mov	r3, r0
 800afbc:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800afbe:	7d3b      	ldrb	r3, [r7, #20]
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d115      	bne.n	800aff0 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	2201      	movs	r2, #1
 800afc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	2201      	movs	r2, #1
 800afd0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f000 f8a9 	bl	800b12c <USBH_MSC_DecodeCSW>
 800afda:	4603      	mov	r3, r0
 800afdc:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800afde:	7d7b      	ldrb	r3, [r7, #21]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d102      	bne.n	800afea <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800afe4:	2300      	movs	r3, #0
 800afe6:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800afe8:	e068      	b.n	800b0bc <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800afea:	2302      	movs	r3, #2
 800afec:	75fb      	strb	r3, [r7, #23]
      break;
 800afee:	e065      	b.n	800b0bc <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800aff0:	7d3b      	ldrb	r3, [r7, #20]
 800aff2:	2b05      	cmp	r3, #5
 800aff4:	d162      	bne.n	800b0bc <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	2209      	movs	r2, #9
 800affa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800affe:	e05d      	b.n	800b0bc <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800b000:	78fb      	ldrb	r3, [r7, #3]
 800b002:	2200      	movs	r2, #0
 800b004:	4619      	mov	r1, r3
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 f864 	bl	800b0d4 <USBH_MSC_BOT_Abort>
 800b00c:	4603      	mov	r3, r0
 800b00e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800b010:	7dbb      	ldrb	r3, [r7, #22]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d104      	bne.n	800b020 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	2207      	movs	r2, #7
 800b01a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800b01e:	e04f      	b.n	800b0c0 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800b020:	7dbb      	ldrb	r3, [r7, #22]
 800b022:	2b04      	cmp	r3, #4
 800b024:	d14c      	bne.n	800b0c0 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	220b      	movs	r2, #11
 800b02a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b02e:	e047      	b.n	800b0c0 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800b030:	78fb      	ldrb	r3, [r7, #3]
 800b032:	2201      	movs	r2, #1
 800b034:	4619      	mov	r1, r3
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 f84c 	bl	800b0d4 <USBH_MSC_BOT_Abort>
 800b03c:	4603      	mov	r3, r0
 800b03e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800b040:	7dbb      	ldrb	r3, [r7, #22]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d11d      	bne.n	800b082 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	795b      	ldrb	r3, [r3, #5]
 800b04a:	4619      	mov	r1, r3
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f004 fcf4 	bl	800fa3a <USBH_LL_GetToggle>
 800b052:	4603      	mov	r3, r0
 800b054:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	7959      	ldrb	r1, [r3, #5]
 800b05a:	7bfb      	ldrb	r3, [r7, #15]
 800b05c:	f1c3 0301 	rsb	r3, r3, #1
 800b060:	b2db      	uxtb	r3, r3
 800b062:	461a      	mov	r2, r3
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f004 fcb8 	bl	800f9da <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	791b      	ldrb	r3, [r3, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	4619      	mov	r1, r3
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f004 fcb1 	bl	800f9da <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	2209      	movs	r2, #9
 800b07c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800b080:	e020      	b.n	800b0c4 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800b082:	7dbb      	ldrb	r3, [r7, #22]
 800b084:	2b04      	cmp	r3, #4
 800b086:	d11d      	bne.n	800b0c4 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	220b      	movs	r2, #11
 800b08c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b090:	e018      	b.n	800b0c4 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f7ff fdf2 	bl	800ac7c <USBH_MSC_BOT_REQ_Reset>
 800b098:	4603      	mov	r3, r0
 800b09a:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800b09c:	7dfb      	ldrb	r3, [r7, #23]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d112      	bne.n	800b0c8 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800b0aa:	e00d      	b.n	800b0c8 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800b0ac:	bf00      	nop
 800b0ae:	e00c      	b.n	800b0ca <USBH_MSC_BOT_Process+0x392>
      break;
 800b0b0:	bf00      	nop
 800b0b2:	e00a      	b.n	800b0ca <USBH_MSC_BOT_Process+0x392>
      break;
 800b0b4:	bf00      	nop
 800b0b6:	e008      	b.n	800b0ca <USBH_MSC_BOT_Process+0x392>
      break;
 800b0b8:	bf00      	nop
 800b0ba:	e006      	b.n	800b0ca <USBH_MSC_BOT_Process+0x392>
      break;
 800b0bc:	bf00      	nop
 800b0be:	e004      	b.n	800b0ca <USBH_MSC_BOT_Process+0x392>
      break;
 800b0c0:	bf00      	nop
 800b0c2:	e002      	b.n	800b0ca <USBH_MSC_BOT_Process+0x392>
      break;
 800b0c4:	bf00      	nop
 800b0c6:	e000      	b.n	800b0ca <USBH_MSC_BOT_Process+0x392>
      break;
 800b0c8:	bf00      	nop
  }
  return status;
 800b0ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3718      	adds	r7, #24
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	460b      	mov	r3, r1
 800b0de:	70fb      	strb	r3, [r7, #3]
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800b0e4:	2302      	movs	r3, #2
 800b0e6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b0ee:	69db      	ldr	r3, [r3, #28]
 800b0f0:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800b0f2:	78bb      	ldrb	r3, [r7, #2]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d002      	beq.n	800b0fe <USBH_MSC_BOT_Abort+0x2a>
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d009      	beq.n	800b110 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800b0fc:	e011      	b.n	800b122 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	79db      	ldrb	r3, [r3, #7]
 800b102:	4619      	mov	r1, r3
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f001 f99c 	bl	800c442 <USBH_ClrFeature>
 800b10a:	4603      	mov	r3, r0
 800b10c:	73fb      	strb	r3, [r7, #15]
      break;
 800b10e:	e008      	b.n	800b122 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	799b      	ldrb	r3, [r3, #6]
 800b114:	4619      	mov	r1, r3
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f001 f993 	bl	800c442 <USBH_ClrFeature>
 800b11c:	4603      	mov	r3, r0
 800b11e:	73fb      	strb	r3, [r7, #15]
      break;
 800b120:	bf00      	nop
  }
  return status;
 800b122:	7bfb      	ldrb	r3, [r7, #15]
}
 800b124:	4618      	mov	r0, r3
 800b126:	3710      	adds	r7, #16
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b13a:	69db      	ldr	r3, [r3, #28]
 800b13c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800b13e:	2301      	movs	r3, #1
 800b140:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	791b      	ldrb	r3, [r3, #4]
 800b146:	4619      	mov	r1, r3
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f004 fb93 	bl	800f874 <USBH_LL_GetLastXferSize>
 800b14e:	4603      	mov	r3, r0
 800b150:	2b0d      	cmp	r3, #13
 800b152:	d002      	beq.n	800b15a <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800b154:	2302      	movs	r3, #2
 800b156:	73fb      	strb	r3, [r7, #15]
 800b158:	e024      	b.n	800b1a4 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b15e:	4a14      	ldr	r2, [pc, #80]	; (800b1b0 <USBH_MSC_DecodeCSW+0x84>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d11d      	bne.n	800b1a0 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d119      	bne.n	800b1a4 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b176:	2b00      	cmp	r3, #0
 800b178:	d102      	bne.n	800b180 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800b17a:	2300      	movs	r3, #0
 800b17c:	73fb      	strb	r3, [r7, #15]
 800b17e:	e011      	b.n	800b1a4 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b186:	2b01      	cmp	r3, #1
 800b188:	d102      	bne.n	800b190 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800b18a:	2301      	movs	r3, #1
 800b18c:	73fb      	strb	r3, [r7, #15]
 800b18e:	e009      	b.n	800b1a4 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b196:	2b02      	cmp	r3, #2
 800b198:	d104      	bne.n	800b1a4 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800b19a:	2302      	movs	r3, #2
 800b19c:	73fb      	strb	r3, [r7, #15]
 800b19e:	e001      	b.n	800b1a4 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800b1a0:	2302      	movs	r3, #2
 800b1a2:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800b1a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3710      	adds	r7, #16
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	53425355 	.word	0x53425355

0800b1b4 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	460b      	mov	r3, r1
 800b1be:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b1c0:	2302      	movs	r3, #2
 800b1c2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1ca:	69db      	ldr	r3, [r3, #28]
 800b1cc:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d002      	beq.n	800b1de <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800b1d8:	2b02      	cmp	r3, #2
 800b1da:	d021      	beq.n	800b220 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b1dc:	e028      	b.n	800b230 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	220a      	movs	r2, #10
 800b1f0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	3363      	adds	r3, #99	; 0x63
 800b1f8:	2210      	movs	r2, #16
 800b1fa:	2100      	movs	r1, #0
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f004 fccb 	bl	800fb98 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	2200      	movs	r2, #0
 800b206:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	2201      	movs	r2, #1
 800b20e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	2202      	movs	r2, #2
 800b216:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800b21a:	2301      	movs	r3, #1
 800b21c:	73fb      	strb	r3, [r7, #15]
      break;
 800b21e:	e007      	b.n	800b230 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b220:	78fb      	ldrb	r3, [r7, #3]
 800b222:	4619      	mov	r1, r3
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f7ff fd87 	bl	800ad38 <USBH_MSC_BOT_Process>
 800b22a:	4603      	mov	r3, r0
 800b22c:	73fb      	strb	r3, [r7, #15]
      break;
 800b22e:	bf00      	nop
  }

  return error;
 800b230:	7bfb      	ldrb	r3, [r7, #15]
}
 800b232:	4618      	mov	r0, r3
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}

0800b23a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800b23a:	b580      	push	{r7, lr}
 800b23c:	b086      	sub	sp, #24
 800b23e:	af00      	add	r7, sp, #0
 800b240:	60f8      	str	r0, [r7, #12]
 800b242:	460b      	mov	r3, r1
 800b244:	607a      	str	r2, [r7, #4]
 800b246:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800b248:	2301      	movs	r3, #1
 800b24a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b252:	69db      	ldr	r3, [r3, #28]
 800b254:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d002      	beq.n	800b266 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800b260:	2b02      	cmp	r3, #2
 800b262:	d027      	beq.n	800b2b4 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800b264:	e05f      	b.n	800b326 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	2208      	movs	r2, #8
 800b26a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	2280      	movs	r2, #128	; 0x80
 800b270:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	220a      	movs	r2, #10
 800b278:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	3363      	adds	r3, #99	; 0x63
 800b280:	2210      	movs	r2, #16
 800b282:	2100      	movs	r1, #0
 800b284:	4618      	mov	r0, r3
 800b286:	f004 fc87 	bl	800fb98 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	2225      	movs	r2, #37	; 0x25
 800b28e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	2201      	movs	r2, #1
 800b296:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	2202      	movs	r2, #2
 800b29e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	f103 0210 	add.w	r2, r3, #16
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	75fb      	strb	r3, [r7, #23]
      break;
 800b2b2:	e038      	b.n	800b326 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b2b4:	7afb      	ldrb	r3, [r7, #11]
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	68f8      	ldr	r0, [r7, #12]
 800b2ba:	f7ff fd3d 	bl	800ad38 <USBH_MSC_BOT_Process>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b2c2:	7dfb      	ldrb	r3, [r7, #23]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d12d      	bne.n	800b324 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2ce:	3303      	adds	r3, #3
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2da:	3302      	adds	r3, #2
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	021b      	lsls	r3, r3, #8
 800b2e0:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b2ee:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	061b      	lsls	r3, r3, #24
 800b2fa:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b306:	3307      	adds	r3, #7
 800b308:	781b      	ldrb	r3, [r3, #0]
 800b30a:	b29a      	uxth	r2, r3
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b312:	3306      	adds	r3, #6
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	b29b      	uxth	r3, r3
 800b318:	021b      	lsls	r3, r3, #8
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	4313      	orrs	r3, r2
 800b31e:	b29a      	uxth	r2, r3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	809a      	strh	r2, [r3, #4]
      break;
 800b324:	bf00      	nop
  }

  return error;
 800b326:	7dfb      	ldrb	r3, [r7, #23]
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3718      	adds	r7, #24
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b086      	sub	sp, #24
 800b334:	af00      	add	r7, sp, #0
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	460b      	mov	r3, r1
 800b33a:	607a      	str	r2, [r7, #4]
 800b33c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800b33e:	2302      	movs	r3, #2
 800b340:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b348:	69db      	ldr	r3, [r3, #28]
 800b34a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b352:	2b01      	cmp	r3, #1
 800b354:	d002      	beq.n	800b35c <USBH_MSC_SCSI_Inquiry+0x2c>
 800b356:	2b02      	cmp	r3, #2
 800b358:	d03d      	beq.n	800b3d6 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800b35a:	e089      	b.n	800b470 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	2224      	movs	r2, #36	; 0x24
 800b360:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	2280      	movs	r2, #128	; 0x80
 800b366:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	220a      	movs	r2, #10
 800b36e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	3363      	adds	r3, #99	; 0x63
 800b376:	220a      	movs	r2, #10
 800b378:	2100      	movs	r1, #0
 800b37a:	4618      	mov	r0, r3
 800b37c:	f004 fc0c 	bl	800fb98 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	2212      	movs	r2, #18
 800b384:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800b388:	7afb      	ldrb	r3, [r7, #11]
 800b38a:	015b      	lsls	r3, r3, #5
 800b38c:	b2da      	uxtb	r2, r3
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	2200      	movs	r2, #0
 800b398:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	2224      	movs	r2, #36	; 0x24
 800b3a8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	2202      	movs	r2, #2
 800b3c0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	f103 0210 	add.w	r2, r3, #16
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	75fb      	strb	r3, [r7, #23]
      break;
 800b3d4:	e04c      	b.n	800b470 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b3d6:	7afb      	ldrb	r3, [r7, #11]
 800b3d8:	4619      	mov	r1, r3
 800b3da:	68f8      	ldr	r0, [r7, #12]
 800b3dc:	f7ff fcac 	bl	800ad38 <USBH_MSC_BOT_Process>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b3e4:	7dfb      	ldrb	r3, [r7, #23]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d141      	bne.n	800b46e <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800b3ea:	2222      	movs	r2, #34	; 0x22
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f004 fbd2 	bl	800fb98 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	f003 031f 	and.w	r3, r3, #31
 800b400:	b2da      	uxtb	r2, r3
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	095b      	lsrs	r3, r3, #5
 800b410:	b2da      	uxtb	r2, r3
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b41c:	3301      	adds	r3, #1
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	b25b      	sxtb	r3, r3
 800b422:	2b00      	cmp	r3, #0
 800b424:	da03      	bge.n	800b42e <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2201      	movs	r2, #1
 800b42a:	709a      	strb	r2, [r3, #2]
 800b42c:	e002      	b.n	800b434 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2200      	movs	r2, #0
 800b432:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	1cd8      	adds	r0, r3, #3
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b43e:	3308      	adds	r3, #8
 800b440:	2208      	movs	r2, #8
 800b442:	4619      	mov	r1, r3
 800b444:	f004 fb9a 	bl	800fb7c <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f103 000c 	add.w	r0, r3, #12
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b454:	3310      	adds	r3, #16
 800b456:	2210      	movs	r2, #16
 800b458:	4619      	mov	r1, r3
 800b45a:	f004 fb8f 	bl	800fb7c <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	331d      	adds	r3, #29
 800b462:	693a      	ldr	r2, [r7, #16]
 800b464:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800b468:	3220      	adds	r2, #32
 800b46a:	6812      	ldr	r2, [r2, #0]
 800b46c:	601a      	str	r2, [r3, #0]
      break;
 800b46e:	bf00      	nop
  }

  return error;
 800b470:	7dfb      	ldrb	r3, [r7, #23]
}
 800b472:	4618      	mov	r0, r3
 800b474:	3718      	adds	r7, #24
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}

0800b47a <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800b47a:	b580      	push	{r7, lr}
 800b47c:	b086      	sub	sp, #24
 800b47e:	af00      	add	r7, sp, #0
 800b480:	60f8      	str	r0, [r7, #12]
 800b482:	460b      	mov	r3, r1
 800b484:	607a      	str	r2, [r7, #4]
 800b486:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b488:	2302      	movs	r3, #2
 800b48a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b492:	69db      	ldr	r3, [r3, #28]
 800b494:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d002      	beq.n	800b4a6 <USBH_MSC_SCSI_RequestSense+0x2c>
 800b4a0:	2b02      	cmp	r3, #2
 800b4a2:	d03d      	beq.n	800b520 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800b4a4:	e05d      	b.n	800b562 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	220e      	movs	r2, #14
 800b4aa:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	2280      	movs	r2, #128	; 0x80
 800b4b0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	220a      	movs	r2, #10
 800b4b8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	3363      	adds	r3, #99	; 0x63
 800b4c0:	2210      	movs	r2, #16
 800b4c2:	2100      	movs	r1, #0
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f004 fb67 	bl	800fb98 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	2203      	movs	r2, #3
 800b4ce:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800b4d2:	7afb      	ldrb	r3, [r7, #11]
 800b4d4:	015b      	lsls	r3, r3, #5
 800b4d6:	b2da      	uxtb	r2, r3
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	220e      	movs	r2, #14
 800b4f2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	2201      	movs	r2, #1
 800b502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	2202      	movs	r2, #2
 800b50a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	f103 0210 	add.w	r2, r3, #16
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b51a:	2301      	movs	r3, #1
 800b51c:	75fb      	strb	r3, [r7, #23]
      break;
 800b51e:	e020      	b.n	800b562 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b520:	7afb      	ldrb	r3, [r7, #11]
 800b522:	4619      	mov	r1, r3
 800b524:	68f8      	ldr	r0, [r7, #12]
 800b526:	f7ff fc07 	bl	800ad38 <USBH_MSC_BOT_Process>
 800b52a:	4603      	mov	r3, r0
 800b52c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b52e:	7dfb      	ldrb	r3, [r7, #23]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d115      	bne.n	800b560 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b53a:	3302      	adds	r3, #2
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	f003 030f 	and.w	r3, r3, #15
 800b542:	b2da      	uxtb	r2, r3
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b54e:	7b1a      	ldrb	r2, [r3, #12]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b55a:	7b5a      	ldrb	r2, [r3, #13]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	709a      	strb	r2, [r3, #2]
      break;
 800b560:	bf00      	nop
  }

  return error;
 800b562:	7dfb      	ldrb	r3, [r7, #23]
}
 800b564:	4618      	mov	r0, r3
 800b566:	3718      	adds	r7, #24
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}

0800b56c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b086      	sub	sp, #24
 800b570:	af00      	add	r7, sp, #0
 800b572:	60f8      	str	r0, [r7, #12]
 800b574:	607a      	str	r2, [r7, #4]
 800b576:	603b      	str	r3, [r7, #0]
 800b578:	460b      	mov	r3, r1
 800b57a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b57c:	2302      	movs	r3, #2
 800b57e:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b586:	69db      	ldr	r3, [r3, #28]
 800b588:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b590:	2b01      	cmp	r3, #1
 800b592:	d002      	beq.n	800b59a <USBH_MSC_SCSI_Write+0x2e>
 800b594:	2b02      	cmp	r3, #2
 800b596:	d047      	beq.n	800b628 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b598:	e04e      	b.n	800b638 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800b5a0:	461a      	mov	r2, r3
 800b5a2:	6a3b      	ldr	r3, [r7, #32]
 800b5a4:	fb03 f202 	mul.w	r2, r3, r2
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	220a      	movs	r2, #10
 800b5b8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	3363      	adds	r3, #99	; 0x63
 800b5c0:	2210      	movs	r2, #16
 800b5c2:	2100      	movs	r1, #0
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f004 fae7 	bl	800fb98 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	222a      	movs	r2, #42	; 0x2a
 800b5ce:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b5d2:	79fa      	ldrb	r2, [r7, #7]
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b5da:	79ba      	ldrb	r2, [r7, #6]
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b5e2:	797a      	ldrb	r2, [r7, #5]
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b5ea:	1d3b      	adds	r3, r7, #4
 800b5ec:	781a      	ldrb	r2, [r3, #0]
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800b5f4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800b5fe:	f107 0320 	add.w	r3, r7, #32
 800b602:	781a      	ldrb	r2, [r3, #0]
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	2201      	movs	r2, #1
 800b60e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	2202      	movs	r2, #2
 800b616:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	683a      	ldr	r2, [r7, #0]
 800b61e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b622:	2301      	movs	r3, #1
 800b624:	75fb      	strb	r3, [r7, #23]
      break;
 800b626:	e007      	b.n	800b638 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b628:	7afb      	ldrb	r3, [r7, #11]
 800b62a:	4619      	mov	r1, r3
 800b62c:	68f8      	ldr	r0, [r7, #12]
 800b62e:	f7ff fb83 	bl	800ad38 <USBH_MSC_BOT_Process>
 800b632:	4603      	mov	r3, r0
 800b634:	75fb      	strb	r3, [r7, #23]
      break;
 800b636:	bf00      	nop
  }

  return error;
 800b638:	7dfb      	ldrb	r3, [r7, #23]
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3718      	adds	r7, #24
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}

0800b642 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800b642:	b580      	push	{r7, lr}
 800b644:	b086      	sub	sp, #24
 800b646:	af00      	add	r7, sp, #0
 800b648:	60f8      	str	r0, [r7, #12]
 800b64a:	607a      	str	r2, [r7, #4]
 800b64c:	603b      	str	r3, [r7, #0]
 800b64e:	460b      	mov	r3, r1
 800b650:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b652:	2302      	movs	r3, #2
 800b654:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b65c:	69db      	ldr	r3, [r3, #28]
 800b65e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b666:	2b01      	cmp	r3, #1
 800b668:	d002      	beq.n	800b670 <USBH_MSC_SCSI_Read+0x2e>
 800b66a:	2b02      	cmp	r3, #2
 800b66c:	d047      	beq.n	800b6fe <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b66e:	e04e      	b.n	800b70e <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800b676:	461a      	mov	r2, r3
 800b678:	6a3b      	ldr	r3, [r7, #32]
 800b67a:	fb03 f202 	mul.w	r2, r3, r2
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	2280      	movs	r2, #128	; 0x80
 800b686:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	220a      	movs	r2, #10
 800b68e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	3363      	adds	r3, #99	; 0x63
 800b696:	2210      	movs	r2, #16
 800b698:	2100      	movs	r1, #0
 800b69a:	4618      	mov	r0, r3
 800b69c:	f004 fa7c 	bl	800fb98 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	2228      	movs	r2, #40	; 0x28
 800b6a4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b6a8:	79fa      	ldrb	r2, [r7, #7]
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b6b0:	79ba      	ldrb	r2, [r7, #6]
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b6b8:	797a      	ldrb	r2, [r7, #5]
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b6c0:	1d3b      	adds	r3, r7, #4
 800b6c2:	781a      	ldrb	r2, [r3, #0]
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800b6ca:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800b6d4:	f107 0320 	add.w	r3, r7, #32
 800b6d8:	781a      	ldrb	r2, [r3, #0]
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	2202      	movs	r2, #2
 800b6ec:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	683a      	ldr	r2, [r7, #0]
 800b6f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	75fb      	strb	r3, [r7, #23]
      break;
 800b6fc:	e007      	b.n	800b70e <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b6fe:	7afb      	ldrb	r3, [r7, #11]
 800b700:	4619      	mov	r1, r3
 800b702:	68f8      	ldr	r0, [r7, #12]
 800b704:	f7ff fb18 	bl	800ad38 <USBH_MSC_BOT_Process>
 800b708:	4603      	mov	r3, r0
 800b70a:	75fb      	strb	r3, [r7, #23]
      break;
 800b70c:	bf00      	nop
  }

  return error;
 800b70e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b710:	4618      	mov	r0, r3
 800b712:	3718      	adds	r7, #24
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	60b9      	str	r1, [r7, #8]
 800b722:	4613      	mov	r3, r2
 800b724:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d101      	bne.n	800b730 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b72c:	2302      	movs	r3, #2
 800b72e:	e029      	b.n	800b784 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	79fa      	ldrb	r2, [r7, #7]
 800b734:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2200      	movs	r2, #0
 800b73c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2200      	movs	r2, #0
 800b744:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800b748:	68f8      	ldr	r0, [r7, #12]
 800b74a:	f000 f81f 	bl	800b78c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	2200      	movs	r2, #0
 800b752:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2200      	movs	r2, #0
 800b75a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2200      	movs	r2, #0
 800b762:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2200      	movs	r2, #0
 800b76a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d003      	beq.n	800b77c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	68ba      	ldr	r2, [r7, #8]
 800b778:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800b77c:	68f8      	ldr	r0, [r7, #12]
 800b77e:	f003 ffc5 	bl	800f70c <USBH_LL_Init>

  return USBH_OK;
 800b782:	2300      	movs	r3, #0
}
 800b784:	4618      	mov	r0, r3
 800b786:	3710      	adds	r7, #16
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b085      	sub	sp, #20
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b794:	2300      	movs	r3, #0
 800b796:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b798:	2300      	movs	r3, #0
 800b79a:	60fb      	str	r3, [r7, #12]
 800b79c:	e009      	b.n	800b7b2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b79e:	687a      	ldr	r2, [r7, #4]
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	33e0      	adds	r3, #224	; 0xe0
 800b7a4:	009b      	lsls	r3, r3, #2
 800b7a6:	4413      	add	r3, r2
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	60fb      	str	r3, [r7, #12]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2b0e      	cmp	r3, #14
 800b7b6:	d9f2      	bls.n	800b79e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	60fb      	str	r3, [r7, #12]
 800b7bc:	e009      	b.n	800b7d2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	4413      	add	r3, r2
 800b7c4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	60fb      	str	r3, [r7, #12]
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7d8:	d3f1      	bcc.n	800b7be <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2240      	movs	r2, #64	; 0x40
 800b7fe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2200      	movs	r2, #0
 800b804:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2200      	movs	r2, #0
 800b80a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2201      	movs	r2, #1
 800b812:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2200      	movs	r2, #0
 800b81a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2200      	movs	r2, #0
 800b822:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b826:	2300      	movs	r3, #0
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3714      	adds	r7, #20
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr

0800b834 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b834:	b480      	push	{r7}
 800b836:	b085      	sub	sp, #20
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b83e:	2300      	movs	r3, #0
 800b840:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d016      	beq.n	800b876 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d10e      	bne.n	800b870 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b858:	1c59      	adds	r1, r3, #1
 800b85a:	687a      	ldr	r2, [r7, #4]
 800b85c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	33de      	adds	r3, #222	; 0xde
 800b864:	6839      	ldr	r1, [r7, #0]
 800b866:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b86a:	2300      	movs	r3, #0
 800b86c:	73fb      	strb	r3, [r7, #15]
 800b86e:	e004      	b.n	800b87a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b870:	2302      	movs	r3, #2
 800b872:	73fb      	strb	r3, [r7, #15]
 800b874:	e001      	b.n	800b87a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b876:	2302      	movs	r3, #2
 800b878:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b87a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3714      	adds	r7, #20
 800b880:	46bd      	mov	sp, r7
 800b882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b886:	4770      	bx	lr

0800b888 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b888:	b480      	push	{r7}
 800b88a:	b085      	sub	sp, #20
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
 800b890:	460b      	mov	r3, r1
 800b892:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b894:	2300      	movs	r3, #0
 800b896:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b89e:	78fa      	ldrb	r2, [r7, #3]
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d204      	bcs.n	800b8ae <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	78fa      	ldrb	r2, [r7, #3]
 800b8a8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b8ac:	e001      	b.n	800b8b2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b8ae:	2302      	movs	r3, #2
 800b8b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b8b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3714      	adds	r7, #20
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr

0800b8c0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b087      	sub	sp, #28
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	4608      	mov	r0, r1
 800b8ca:	4611      	mov	r1, r2
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	70fb      	strb	r3, [r7, #3]
 800b8d2:	460b      	mov	r3, r1
 800b8d4:	70bb      	strb	r3, [r7, #2]
 800b8d6:	4613      	mov	r3, r2
 800b8d8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b8e8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b8ea:	e025      	b.n	800b938 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b8ec:	7dfb      	ldrb	r3, [r7, #23]
 800b8ee:	221a      	movs	r2, #26
 800b8f0:	fb02 f303 	mul.w	r3, r2, r3
 800b8f4:	3308      	adds	r3, #8
 800b8f6:	68fa      	ldr	r2, [r7, #12]
 800b8f8:	4413      	add	r3, r2
 800b8fa:	3302      	adds	r3, #2
 800b8fc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	795b      	ldrb	r3, [r3, #5]
 800b902:	78fa      	ldrb	r2, [r7, #3]
 800b904:	429a      	cmp	r2, r3
 800b906:	d002      	beq.n	800b90e <USBH_FindInterface+0x4e>
 800b908:	78fb      	ldrb	r3, [r7, #3]
 800b90a:	2bff      	cmp	r3, #255	; 0xff
 800b90c:	d111      	bne.n	800b932 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b912:	78ba      	ldrb	r2, [r7, #2]
 800b914:	429a      	cmp	r2, r3
 800b916:	d002      	beq.n	800b91e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b918:	78bb      	ldrb	r3, [r7, #2]
 800b91a:	2bff      	cmp	r3, #255	; 0xff
 800b91c:	d109      	bne.n	800b932 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b922:	787a      	ldrb	r2, [r7, #1]
 800b924:	429a      	cmp	r2, r3
 800b926:	d002      	beq.n	800b92e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b928:	787b      	ldrb	r3, [r7, #1]
 800b92a:	2bff      	cmp	r3, #255	; 0xff
 800b92c:	d101      	bne.n	800b932 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b92e:	7dfb      	ldrb	r3, [r7, #23]
 800b930:	e006      	b.n	800b940 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b932:	7dfb      	ldrb	r3, [r7, #23]
 800b934:	3301      	adds	r3, #1
 800b936:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b938:	7dfb      	ldrb	r3, [r7, #23]
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d9d6      	bls.n	800b8ec <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b93e:	23ff      	movs	r3, #255	; 0xff
}
 800b940:	4618      	mov	r0, r3
 800b942:	371c      	adds	r7, #28
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr

0800b94c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f003 ff15 	bl	800f784 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800b95a:	2101      	movs	r1, #1
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f004 f82e 	bl	800f9be <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b962:	2300      	movs	r3, #0
}
 800b964:	4618      	mov	r0, r3
 800b966:	3708      	adds	r7, #8
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}

0800b96c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b088      	sub	sp, #32
 800b970:	af04      	add	r7, sp, #16
 800b972:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b974:	2302      	movs	r3, #2
 800b976:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b978:	2300      	movs	r3, #0
 800b97a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b982:	b2db      	uxtb	r3, r3
 800b984:	2b01      	cmp	r3, #1
 800b986:	d102      	bne.n	800b98e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2203      	movs	r2, #3
 800b98c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	b2db      	uxtb	r3, r3
 800b994:	2b0b      	cmp	r3, #11
 800b996:	f200 81b3 	bhi.w	800bd00 <USBH_Process+0x394>
 800b99a:	a201      	add	r2, pc, #4	; (adr r2, 800b9a0 <USBH_Process+0x34>)
 800b99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9a0:	0800b9d1 	.word	0x0800b9d1
 800b9a4:	0800ba03 	.word	0x0800ba03
 800b9a8:	0800ba6b 	.word	0x0800ba6b
 800b9ac:	0800bc9b 	.word	0x0800bc9b
 800b9b0:	0800bd01 	.word	0x0800bd01
 800b9b4:	0800bb0f 	.word	0x0800bb0f
 800b9b8:	0800bc41 	.word	0x0800bc41
 800b9bc:	0800bb45 	.word	0x0800bb45
 800b9c0:	0800bb65 	.word	0x0800bb65
 800b9c4:	0800bb85 	.word	0x0800bb85
 800b9c8:	0800bbb3 	.word	0x0800bbb3
 800b9cc:	0800bc83 	.word	0x0800bc83
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	f000 8193 	beq.w	800bd04 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2201      	movs	r2, #1
 800b9e2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b9e4:	20c8      	movs	r0, #200	; 0xc8
 800b9e6:	f004 f858 	bl	800fa9a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f003 ff27 	bl	800f83e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ba00:	e180      	b.n	800bd04 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d107      	bne.n	800ba1c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2202      	movs	r2, #2
 800ba18:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ba1a:	e182      	b.n	800bd22 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ba22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ba26:	d914      	bls.n	800ba52 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ba2e:	3301      	adds	r3, #1
 800ba30:	b2da      	uxtb	r2, r3
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ba3e:	2b03      	cmp	r3, #3
 800ba40:	d903      	bls.n	800ba4a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	220d      	movs	r2, #13
 800ba46:	701a      	strb	r2, [r3, #0]
      break;
 800ba48:	e16b      	b.n	800bd22 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	701a      	strb	r2, [r3, #0]
      break;
 800ba50:	e167      	b.n	800bd22 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ba58:	f103 020a 	add.w	r2, r3, #10
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ba62:	200a      	movs	r0, #10
 800ba64:	f004 f819 	bl	800fa9a <USBH_Delay>
      break;
 800ba68:	e15b      	b.n	800bd22 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d005      	beq.n	800ba80 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba7a:	2104      	movs	r1, #4
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ba80:	2064      	movs	r0, #100	; 0x64
 800ba82:	f004 f80a 	bl	800fa9a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f003 feb2 	bl	800f7f0 <USBH_LL_GetSpeed>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	461a      	mov	r2, r3
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2205      	movs	r2, #5
 800ba9a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ba9c:	2100      	movs	r1, #0
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f001 f92f 	bl	800cd02 <USBH_AllocPipe>
 800baa4:	4603      	mov	r3, r0
 800baa6:	461a      	mov	r2, r3
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800baac:	2180      	movs	r1, #128	; 0x80
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f001 f927 	bl	800cd02 <USBH_AllocPipe>
 800bab4:	4603      	mov	r3, r0
 800bab6:	461a      	mov	r2, r3
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	7919      	ldrb	r1, [r3, #4]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bad0:	b292      	uxth	r2, r2
 800bad2:	9202      	str	r2, [sp, #8]
 800bad4:	2200      	movs	r2, #0
 800bad6:	9201      	str	r2, [sp, #4]
 800bad8:	9300      	str	r3, [sp, #0]
 800bada:	4603      	mov	r3, r0
 800badc:	2280      	movs	r2, #128	; 0x80
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f001 f8e0 	bl	800cca4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	7959      	ldrb	r1, [r3, #5]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800baf4:	687a      	ldr	r2, [r7, #4]
 800baf6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800baf8:	b292      	uxth	r2, r2
 800bafa:	9202      	str	r2, [sp, #8]
 800bafc:	2200      	movs	r2, #0
 800bafe:	9201      	str	r2, [sp, #4]
 800bb00:	9300      	str	r3, [sp, #0]
 800bb02:	4603      	mov	r3, r0
 800bb04:	2200      	movs	r2, #0
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f001 f8cc 	bl	800cca4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bb0c:	e109      	b.n	800bd22 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 f90c 	bl	800bd2c <USBH_HandleEnum>
 800bb14:	4603      	mov	r3, r0
 800bb16:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800bb18:	7bbb      	ldrb	r3, [r7, #14]
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	f040 80f3 	bne.w	800bd08 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2200      	movs	r2, #0
 800bb26:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	d103      	bne.n	800bb3c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2208      	movs	r2, #8
 800bb38:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800bb3a:	e0e5      	b.n	800bd08 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2207      	movs	r2, #7
 800bb40:	701a      	strb	r2, [r3, #0]
      break;
 800bb42:	e0e1      	b.n	800bd08 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	f000 80de 	beq.w	800bd0c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bb56:	2101      	movs	r1, #1
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2208      	movs	r2, #8
 800bb60:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800bb62:	e0d3      	b.n	800bd0c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800bb6a:	b29b      	uxth	r3, r3
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f000 fc20 	bl	800c3b4 <USBH_SetCfg>
 800bb74:	4603      	mov	r3, r0
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	f040 80ca 	bne.w	800bd10 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2209      	movs	r2, #9
 800bb80:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bb82:	e0c5      	b.n	800bd10 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800bb8a:	f003 0320 	and.w	r3, r3, #32
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00b      	beq.n	800bbaa <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800bb92:	2101      	movs	r1, #1
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f000 fc30 	bl	800c3fa <USBH_SetFeature>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	f040 80b9 	bne.w	800bd14 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	220a      	movs	r2, #10
 800bba6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bba8:	e0b4      	b.n	800bd14 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	220a      	movs	r2, #10
 800bbae:	701a      	strb	r2, [r3, #0]
      break;
 800bbb0:	e0b0      	b.n	800bd14 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	f000 80ad 	beq.w	800bd18 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	73fb      	strb	r3, [r7, #15]
 800bbca:	e016      	b.n	800bbfa <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800bbcc:	7bfa      	ldrb	r2, [r7, #15]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	32de      	adds	r2, #222	; 0xde
 800bbd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbd6:	791a      	ldrb	r2, [r3, #4]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800bbde:	429a      	cmp	r2, r3
 800bbe0:	d108      	bne.n	800bbf4 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800bbe2:	7bfa      	ldrb	r2, [r7, #15]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	32de      	adds	r2, #222	; 0xde
 800bbe8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800bbf2:	e005      	b.n	800bc00 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bbf4:	7bfb      	ldrb	r3, [r7, #15]
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	73fb      	strb	r3, [r7, #15]
 800bbfa:	7bfb      	ldrb	r3, [r7, #15]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d0e5      	beq.n	800bbcc <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d016      	beq.n	800bc38 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc10:	689b      	ldr	r3, [r3, #8]
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	4798      	blx	r3
 800bc16:	4603      	mov	r3, r0
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d109      	bne.n	800bc30 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2206      	movs	r2, #6
 800bc20:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bc28:	2103      	movs	r1, #3
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bc2e:	e073      	b.n	800bd18 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	220d      	movs	r2, #13
 800bc34:	701a      	strb	r2, [r3, #0]
      break;
 800bc36:	e06f      	b.n	800bd18 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	220d      	movs	r2, #13
 800bc3c:	701a      	strb	r2, [r3, #0]
      break;
 800bc3e:	e06b      	b.n	800bd18 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d017      	beq.n	800bc7a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc50:	691b      	ldr	r3, [r3, #16]
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	4798      	blx	r3
 800bc56:	4603      	mov	r3, r0
 800bc58:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800bc5a:	7bbb      	ldrb	r3, [r7, #14]
 800bc5c:	b2db      	uxtb	r3, r3
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d103      	bne.n	800bc6a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	220b      	movs	r2, #11
 800bc66:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bc68:	e058      	b.n	800bd1c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800bc6a:	7bbb      	ldrb	r3, [r7, #14]
 800bc6c:	b2db      	uxtb	r3, r3
 800bc6e:	2b02      	cmp	r3, #2
 800bc70:	d154      	bne.n	800bd1c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	220d      	movs	r2, #13
 800bc76:	701a      	strb	r2, [r3, #0]
      break;
 800bc78:	e050      	b.n	800bd1c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	220d      	movs	r2, #13
 800bc7e:	701a      	strb	r2, [r3, #0]
      break;
 800bc80:	e04c      	b.n	800bd1c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d049      	beq.n	800bd20 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc92:	695b      	ldr	r3, [r3, #20]
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	4798      	blx	r3
      }
      break;
 800bc98:	e042      	b.n	800bd20 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f7ff fd72 	bl	800b78c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d009      	beq.n	800bcc6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bcb8:	68db      	ldr	r3, [r3, #12]
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d005      	beq.n	800bcdc <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bcd6:	2105      	movs	r1, #5
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800bce2:	b2db      	uxtb	r3, r3
 800bce4:	2b01      	cmp	r3, #1
 800bce6:	d107      	bne.n	800bcf8 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2200      	movs	r2, #0
 800bcec:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f7ff fe2b 	bl	800b94c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bcf6:	e014      	b.n	800bd22 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f003 fd43 	bl	800f784 <USBH_LL_Start>
      break;
 800bcfe:	e010      	b.n	800bd22 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800bd00:	bf00      	nop
 800bd02:	e00e      	b.n	800bd22 <USBH_Process+0x3b6>
      break;
 800bd04:	bf00      	nop
 800bd06:	e00c      	b.n	800bd22 <USBH_Process+0x3b6>
      break;
 800bd08:	bf00      	nop
 800bd0a:	e00a      	b.n	800bd22 <USBH_Process+0x3b6>
    break;
 800bd0c:	bf00      	nop
 800bd0e:	e008      	b.n	800bd22 <USBH_Process+0x3b6>
      break;
 800bd10:	bf00      	nop
 800bd12:	e006      	b.n	800bd22 <USBH_Process+0x3b6>
      break;
 800bd14:	bf00      	nop
 800bd16:	e004      	b.n	800bd22 <USBH_Process+0x3b6>
      break;
 800bd18:	bf00      	nop
 800bd1a:	e002      	b.n	800bd22 <USBH_Process+0x3b6>
      break;
 800bd1c:	bf00      	nop
 800bd1e:	e000      	b.n	800bd22 <USBH_Process+0x3b6>
      break;
 800bd20:	bf00      	nop
  }
  return USBH_OK;
 800bd22:	2300      	movs	r3, #0
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3710      	adds	r7, #16
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b088      	sub	sp, #32
 800bd30:	af04      	add	r7, sp, #16
 800bd32:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800bd34:	2301      	movs	r3, #1
 800bd36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800bd38:	2301      	movs	r3, #1
 800bd3a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	785b      	ldrb	r3, [r3, #1]
 800bd40:	2b07      	cmp	r3, #7
 800bd42:	f200 81c1 	bhi.w	800c0c8 <USBH_HandleEnum+0x39c>
 800bd46:	a201      	add	r2, pc, #4	; (adr r2, 800bd4c <USBH_HandleEnum+0x20>)
 800bd48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd4c:	0800bd6d 	.word	0x0800bd6d
 800bd50:	0800be2b 	.word	0x0800be2b
 800bd54:	0800be95 	.word	0x0800be95
 800bd58:	0800bf23 	.word	0x0800bf23
 800bd5c:	0800bf8d 	.word	0x0800bf8d
 800bd60:	0800bffd 	.word	0x0800bffd
 800bd64:	0800c043 	.word	0x0800c043
 800bd68:	0800c089 	.word	0x0800c089
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800bd6c:	2108      	movs	r1, #8
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 fa50 	bl	800c214 <USBH_Get_DevDesc>
 800bd74:	4603      	mov	r3, r0
 800bd76:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bd78:	7bbb      	ldrb	r3, [r7, #14]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d130      	bne.n	800bde0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	7919      	ldrb	r1, [r3, #4]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800bda2:	b292      	uxth	r2, r2
 800bda4:	9202      	str	r2, [sp, #8]
 800bda6:	2200      	movs	r2, #0
 800bda8:	9201      	str	r2, [sp, #4]
 800bdaa:	9300      	str	r3, [sp, #0]
 800bdac:	4603      	mov	r3, r0
 800bdae:	2280      	movs	r2, #128	; 0x80
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f000 ff77 	bl	800cca4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	7959      	ldrb	r1, [r3, #5]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800bdc6:	687a      	ldr	r2, [r7, #4]
 800bdc8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bdca:	b292      	uxth	r2, r2
 800bdcc:	9202      	str	r2, [sp, #8]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	9201      	str	r2, [sp, #4]
 800bdd2:	9300      	str	r3, [sp, #0]
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f000 ff63 	bl	800cca4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bdde:	e175      	b.n	800c0cc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bde0:	7bbb      	ldrb	r3, [r7, #14]
 800bde2:	2b03      	cmp	r3, #3
 800bde4:	f040 8172 	bne.w	800c0cc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bdee:	3301      	adds	r3, #1
 800bdf0:	b2da      	uxtb	r2, r3
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bdfe:	2b03      	cmp	r3, #3
 800be00:	d903      	bls.n	800be0a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	220d      	movs	r2, #13
 800be06:	701a      	strb	r2, [r3, #0]
      break;
 800be08:	e160      	b.n	800c0cc <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	795b      	ldrb	r3, [r3, #5]
 800be0e:	4619      	mov	r1, r3
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f000 ff97 	bl	800cd44 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	791b      	ldrb	r3, [r3, #4]
 800be1a:	4619      	mov	r1, r3
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f000 ff91 	bl	800cd44 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2200      	movs	r2, #0
 800be26:	701a      	strb	r2, [r3, #0]
      break;
 800be28:	e150      	b.n	800c0cc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800be2a:	2112      	movs	r1, #18
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 f9f1 	bl	800c214 <USBH_Get_DevDesc>
 800be32:	4603      	mov	r3, r0
 800be34:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800be36:	7bbb      	ldrb	r3, [r7, #14]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d103      	bne.n	800be44 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2202      	movs	r2, #2
 800be40:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800be42:	e145      	b.n	800c0d0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800be44:	7bbb      	ldrb	r3, [r7, #14]
 800be46:	2b03      	cmp	r3, #3
 800be48:	f040 8142 	bne.w	800c0d0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800be52:	3301      	adds	r3, #1
 800be54:	b2da      	uxtb	r2, r3
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800be62:	2b03      	cmp	r3, #3
 800be64:	d903      	bls.n	800be6e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	220d      	movs	r2, #13
 800be6a:	701a      	strb	r2, [r3, #0]
      break;
 800be6c:	e130      	b.n	800c0d0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	795b      	ldrb	r3, [r3, #5]
 800be72:	4619      	mov	r1, r3
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f000 ff65 	bl	800cd44 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	791b      	ldrb	r3, [r3, #4]
 800be7e:	4619      	mov	r1, r3
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f000 ff5f 	bl	800cd44 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2200      	movs	r2, #0
 800be8a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2200      	movs	r2, #0
 800be90:	701a      	strb	r2, [r3, #0]
      break;
 800be92:	e11d      	b.n	800c0d0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800be94:	2101      	movs	r1, #1
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 fa68 	bl	800c36c <USBH_SetAddress>
 800be9c:	4603      	mov	r3, r0
 800be9e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bea0:	7bbb      	ldrb	r3, [r7, #14]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d132      	bne.n	800bf0c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800bea6:	2002      	movs	r0, #2
 800bea8:	f003 fdf7 	bl	800fa9a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2201      	movs	r2, #1
 800beb0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2203      	movs	r2, #3
 800beb8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	7919      	ldrb	r1, [r3, #4]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800beca:	687a      	ldr	r2, [r7, #4]
 800becc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bece:	b292      	uxth	r2, r2
 800bed0:	9202      	str	r2, [sp, #8]
 800bed2:	2200      	movs	r2, #0
 800bed4:	9201      	str	r2, [sp, #4]
 800bed6:	9300      	str	r3, [sp, #0]
 800bed8:	4603      	mov	r3, r0
 800beda:	2280      	movs	r2, #128	; 0x80
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f000 fee1 	bl	800cca4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	7959      	ldrb	r1, [r3, #5]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800bef2:	687a      	ldr	r2, [r7, #4]
 800bef4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bef6:	b292      	uxth	r2, r2
 800bef8:	9202      	str	r2, [sp, #8]
 800befa:	2200      	movs	r2, #0
 800befc:	9201      	str	r2, [sp, #4]
 800befe:	9300      	str	r3, [sp, #0]
 800bf00:	4603      	mov	r3, r0
 800bf02:	2200      	movs	r2, #0
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f000 fecd 	bl	800cca4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bf0a:	e0e3      	b.n	800c0d4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bf0c:	7bbb      	ldrb	r3, [r7, #14]
 800bf0e:	2b03      	cmp	r3, #3
 800bf10:	f040 80e0 	bne.w	800c0d4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	220d      	movs	r2, #13
 800bf18:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	705a      	strb	r2, [r3, #1]
      break;
 800bf20:	e0d8      	b.n	800c0d4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800bf22:	2109      	movs	r1, #9
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f000 f99d 	bl	800c264 <USBH_Get_CfgDesc>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bf2e:	7bbb      	ldrb	r3, [r7, #14]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d103      	bne.n	800bf3c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2204      	movs	r2, #4
 800bf38:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bf3a:	e0cd      	b.n	800c0d8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bf3c:	7bbb      	ldrb	r3, [r7, #14]
 800bf3e:	2b03      	cmp	r3, #3
 800bf40:	f040 80ca 	bne.w	800c0d8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	b2da      	uxtb	r2, r3
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bf5a:	2b03      	cmp	r3, #3
 800bf5c:	d903      	bls.n	800bf66 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	220d      	movs	r2, #13
 800bf62:	701a      	strb	r2, [r3, #0]
      break;
 800bf64:	e0b8      	b.n	800c0d8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	795b      	ldrb	r3, [r3, #5]
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 fee9 	bl	800cd44 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	791b      	ldrb	r3, [r3, #4]
 800bf76:	4619      	mov	r1, r3
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 fee3 	bl	800cd44 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2200      	movs	r2, #0
 800bf82:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2200      	movs	r2, #0
 800bf88:	701a      	strb	r2, [r3, #0]
      break;
 800bf8a:	e0a5      	b.n	800c0d8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800bf92:	4619      	mov	r1, r3
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f000 f965 	bl	800c264 <USBH_Get_CfgDesc>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bf9e:	7bbb      	ldrb	r3, [r7, #14]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d103      	bne.n	800bfac <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2205      	movs	r2, #5
 800bfa8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bfaa:	e097      	b.n	800c0dc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bfac:	7bbb      	ldrb	r3, [r7, #14]
 800bfae:	2b03      	cmp	r3, #3
 800bfb0:	f040 8094 	bne.w	800c0dc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bfba:	3301      	adds	r3, #1
 800bfbc:	b2da      	uxtb	r2, r3
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bfca:	2b03      	cmp	r3, #3
 800bfcc:	d903      	bls.n	800bfd6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	220d      	movs	r2, #13
 800bfd2:	701a      	strb	r2, [r3, #0]
      break;
 800bfd4:	e082      	b.n	800c0dc <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	795b      	ldrb	r3, [r3, #5]
 800bfda:	4619      	mov	r1, r3
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f000 feb1 	bl	800cd44 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	791b      	ldrb	r3, [r3, #4]
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f000 feab 	bl	800cd44 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2200      	movs	r2, #0
 800bff2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2200      	movs	r2, #0
 800bff8:	701a      	strb	r2, [r3, #0]
      break;
 800bffa:	e06f      	b.n	800c0dc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800c002:	2b00      	cmp	r3, #0
 800c004:	d019      	beq.n	800c03a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c012:	23ff      	movs	r3, #255	; 0xff
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 f949 	bl	800c2ac <USBH_Get_StringDesc>
 800c01a:	4603      	mov	r3, r0
 800c01c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c01e:	7bbb      	ldrb	r3, [r7, #14]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d103      	bne.n	800c02c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2206      	movs	r2, #6
 800c028:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c02a:	e059      	b.n	800c0e0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c02c:	7bbb      	ldrb	r3, [r7, #14]
 800c02e:	2b03      	cmp	r3, #3
 800c030:	d156      	bne.n	800c0e0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2206      	movs	r2, #6
 800c036:	705a      	strb	r2, [r3, #1]
      break;
 800c038:	e052      	b.n	800c0e0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2206      	movs	r2, #6
 800c03e:	705a      	strb	r2, [r3, #1]
      break;
 800c040:	e04e      	b.n	800c0e0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d019      	beq.n	800c080 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c058:	23ff      	movs	r3, #255	; 0xff
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f000 f926 	bl	800c2ac <USBH_Get_StringDesc>
 800c060:	4603      	mov	r3, r0
 800c062:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c064:	7bbb      	ldrb	r3, [r7, #14]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d103      	bne.n	800c072 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2207      	movs	r2, #7
 800c06e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c070:	e038      	b.n	800c0e4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c072:	7bbb      	ldrb	r3, [r7, #14]
 800c074:	2b03      	cmp	r3, #3
 800c076:	d135      	bne.n	800c0e4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2207      	movs	r2, #7
 800c07c:	705a      	strb	r2, [r3, #1]
      break;
 800c07e:	e031      	b.n	800c0e4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2207      	movs	r2, #7
 800c084:	705a      	strb	r2, [r3, #1]
      break;
 800c086:	e02d      	b.n	800c0e4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d017      	beq.n	800c0c2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c09e:	23ff      	movs	r3, #255	; 0xff
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f000 f903 	bl	800c2ac <USBH_Get_StringDesc>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c0aa:	7bbb      	ldrb	r3, [r7, #14]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d102      	bne.n	800c0b6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c0b4:	e018      	b.n	800c0e8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c0b6:	7bbb      	ldrb	r3, [r7, #14]
 800c0b8:	2b03      	cmp	r3, #3
 800c0ba:	d115      	bne.n	800c0e8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	73fb      	strb	r3, [r7, #15]
      break;
 800c0c0:	e012      	b.n	800c0e8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	73fb      	strb	r3, [r7, #15]
      break;
 800c0c6:	e00f      	b.n	800c0e8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800c0c8:	bf00      	nop
 800c0ca:	e00e      	b.n	800c0ea <USBH_HandleEnum+0x3be>
      break;
 800c0cc:	bf00      	nop
 800c0ce:	e00c      	b.n	800c0ea <USBH_HandleEnum+0x3be>
      break;
 800c0d0:	bf00      	nop
 800c0d2:	e00a      	b.n	800c0ea <USBH_HandleEnum+0x3be>
      break;
 800c0d4:	bf00      	nop
 800c0d6:	e008      	b.n	800c0ea <USBH_HandleEnum+0x3be>
      break;
 800c0d8:	bf00      	nop
 800c0da:	e006      	b.n	800c0ea <USBH_HandleEnum+0x3be>
      break;
 800c0dc:	bf00      	nop
 800c0de:	e004      	b.n	800c0ea <USBH_HandleEnum+0x3be>
      break;
 800c0e0:	bf00      	nop
 800c0e2:	e002      	b.n	800c0ea <USBH_HandleEnum+0x3be>
      break;
 800c0e4:	bf00      	nop
 800c0e6:	e000      	b.n	800c0ea <USBH_HandleEnum+0x3be>
      break;
 800c0e8:	bf00      	nop
  }
  return Status;
 800c0ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3710      	adds	r7, #16
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b083      	sub	sp, #12
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	683a      	ldr	r2, [r7, #0]
 800c102:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800c106:	bf00      	nop
 800c108:	370c      	adds	r7, #12
 800c10a:	46bd      	mov	sp, r7
 800c10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c110:	4770      	bx	lr

0800c112 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c112:	b580      	push	{r7, lr}
 800c114:	b082      	sub	sp, #8
 800c116:	af00      	add	r7, sp, #0
 800c118:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c120:	1c5a      	adds	r2, r3, #1
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f000 f804 	bl	800c136 <USBH_HandleSof>
}
 800c12e:	bf00      	nop
 800c130:	3708      	adds	r7, #8
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}

0800c136 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c136:	b580      	push	{r7, lr}
 800c138:	b082      	sub	sp, #8
 800c13a:	af00      	add	r7, sp, #0
 800c13c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	b2db      	uxtb	r3, r3
 800c144:	2b0b      	cmp	r3, #11
 800c146:	d10a      	bne.n	800c15e <USBH_HandleSof+0x28>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d005      	beq.n	800c15e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c158:	699b      	ldr	r3, [r3, #24]
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	4798      	blx	r3
  }
}
 800c15e:	bf00      	nop
 800c160:	3708      	adds	r7, #8
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}

0800c166 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c166:	b480      	push	{r7}
 800c168:	b083      	sub	sp, #12
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2201      	movs	r2, #1
 800c172:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800c176:	bf00      	nop
}
 800c178:	370c      	adds	r7, #12
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr

0800c182 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c182:	b480      	push	{r7}
 800c184:	b083      	sub	sp, #12
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2200      	movs	r2, #0
 800c18e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c192:	bf00      	nop
}
 800c194:	370c      	adds	r7, #12
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr

0800c19e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c19e:	b480      	push	{r7}
 800c1a0:	b083      	sub	sp, #12
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c1be:	2300      	movs	r3, #0
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	370c      	adds	r7, #12
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ca:	4770      	bx	lr

0800c1cc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f003 fae4 	bl	800f7ba <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	791b      	ldrb	r3, [r3, #4]
 800c1f6:	4619      	mov	r1, r3
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f000 fda3 	bl	800cd44 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	795b      	ldrb	r3, [r3, #5]
 800c202:	4619      	mov	r1, r3
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f000 fd9d 	bl	800cd44 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c20a:	2300      	movs	r3, #0
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3708      	adds	r7, #8
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b086      	sub	sp, #24
 800c218:	af02      	add	r7, sp, #8
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	460b      	mov	r3, r1
 800c21e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c226:	78fb      	ldrb	r3, [r7, #3]
 800c228:	b29b      	uxth	r3, r3
 800c22a:	9300      	str	r3, [sp, #0]
 800c22c:	4613      	mov	r3, r2
 800c22e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c232:	2100      	movs	r1, #0
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f000 f864 	bl	800c302 <USBH_GetDescriptor>
 800c23a:	4603      	mov	r3, r0
 800c23c:	73fb      	strb	r3, [r7, #15]
 800c23e:	7bfb      	ldrb	r3, [r7, #15]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d10a      	bne.n	800c25a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f203 3026 	addw	r0, r3, #806	; 0x326
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c250:	78fa      	ldrb	r2, [r7, #3]
 800c252:	b292      	uxth	r2, r2
 800c254:	4619      	mov	r1, r3
 800c256:	f000 f918 	bl	800c48a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c25a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3710      	adds	r7, #16
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c264:	b580      	push	{r7, lr}
 800c266:	b086      	sub	sp, #24
 800c268:	af02      	add	r7, sp, #8
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	460b      	mov	r3, r1
 800c26e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	331c      	adds	r3, #28
 800c274:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c276:	887b      	ldrh	r3, [r7, #2]
 800c278:	9300      	str	r3, [sp, #0]
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c280:	2100      	movs	r1, #0
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 f83d 	bl	800c302 <USBH_GetDescriptor>
 800c288:	4603      	mov	r3, r0
 800c28a:	72fb      	strb	r3, [r7, #11]
 800c28c:	7afb      	ldrb	r3, [r7, #11]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d107      	bne.n	800c2a2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c298:	887a      	ldrh	r2, [r7, #2]
 800c29a:	68f9      	ldr	r1, [r7, #12]
 800c29c:	4618      	mov	r0, r3
 800c29e:	f000 f964 	bl	800c56a <USBH_ParseCfgDesc>
  }

  return status;
 800c2a2:	7afb      	ldrb	r3, [r7, #11]
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3710      	adds	r7, #16
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}

0800c2ac <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b088      	sub	sp, #32
 800c2b0:	af02      	add	r7, sp, #8
 800c2b2:	60f8      	str	r0, [r7, #12]
 800c2b4:	607a      	str	r2, [r7, #4]
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	72fb      	strb	r3, [r7, #11]
 800c2bc:	4613      	mov	r3, r2
 800c2be:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800c2c0:	7afb      	ldrb	r3, [r7, #11]
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c2c8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c2d0:	893b      	ldrh	r3, [r7, #8]
 800c2d2:	9300      	str	r3, [sp, #0]
 800c2d4:	460b      	mov	r3, r1
 800c2d6:	2100      	movs	r1, #0
 800c2d8:	68f8      	ldr	r0, [r7, #12]
 800c2da:	f000 f812 	bl	800c302 <USBH_GetDescriptor>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	75fb      	strb	r3, [r7, #23]
 800c2e2:	7dfb      	ldrb	r3, [r7, #23]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d107      	bne.n	800c2f8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c2ee:	893a      	ldrh	r2, [r7, #8]
 800c2f0:	6879      	ldr	r1, [r7, #4]
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f000 fa37 	bl	800c766 <USBH_ParseStringDesc>
  }

  return status;
 800c2f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3718      	adds	r7, #24
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}

0800c302 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c302:	b580      	push	{r7, lr}
 800c304:	b084      	sub	sp, #16
 800c306:	af00      	add	r7, sp, #0
 800c308:	60f8      	str	r0, [r7, #12]
 800c30a:	607b      	str	r3, [r7, #4]
 800c30c:	460b      	mov	r3, r1
 800c30e:	72fb      	strb	r3, [r7, #11]
 800c310:	4613      	mov	r3, r2
 800c312:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	789b      	ldrb	r3, [r3, #2]
 800c318:	2b01      	cmp	r3, #1
 800c31a:	d11c      	bne.n	800c356 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c31c:	7afb      	ldrb	r3, [r7, #11]
 800c31e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c322:	b2da      	uxtb	r2, r3
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2206      	movs	r2, #6
 800c32c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	893a      	ldrh	r2, [r7, #8]
 800c332:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c334:	893b      	ldrh	r3, [r7, #8]
 800c336:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c33a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c33e:	d104      	bne.n	800c34a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f240 4209 	movw	r2, #1033	; 0x409
 800c346:	829a      	strh	r2, [r3, #20]
 800c348:	e002      	b.n	800c350 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2200      	movs	r2, #0
 800c34e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	8b3a      	ldrh	r2, [r7, #24]
 800c354:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c356:	8b3b      	ldrh	r3, [r7, #24]
 800c358:	461a      	mov	r2, r3
 800c35a:	6879      	ldr	r1, [r7, #4]
 800c35c:	68f8      	ldr	r0, [r7, #12]
 800c35e:	f000 fa50 	bl	800c802 <USBH_CtlReq>
 800c362:	4603      	mov	r3, r0
}
 800c364:	4618      	mov	r0, r3
 800c366:	3710      	adds	r7, #16
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	460b      	mov	r3, r1
 800c376:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	789b      	ldrb	r3, [r3, #2]
 800c37c:	2b01      	cmp	r3, #1
 800c37e:	d10f      	bne.n	800c3a0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2200      	movs	r2, #0
 800c384:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2205      	movs	r2, #5
 800c38a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c38c:	78fb      	ldrb	r3, [r7, #3]
 800c38e:	b29a      	uxth	r2, r3
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2200      	movs	r2, #0
 800c398:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2200      	movs	r2, #0
 800c39e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	2100      	movs	r1, #0
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f000 fa2c 	bl	800c802 <USBH_CtlReq>
 800c3aa:	4603      	mov	r3, r0
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3708      	adds	r7, #8
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}

0800c3b4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b082      	sub	sp, #8
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	460b      	mov	r3, r1
 800c3be:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	789b      	ldrb	r3, [r3, #2]
 800c3c4:	2b01      	cmp	r3, #1
 800c3c6:	d10e      	bne.n	800c3e6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2209      	movs	r2, #9
 800c3d2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	887a      	ldrh	r2, [r7, #2]
 800c3d8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	2100      	movs	r1, #0
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f000 fa09 	bl	800c802 <USBH_CtlReq>
 800c3f0:	4603      	mov	r3, r0
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3708      	adds	r7, #8
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}

0800c3fa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c3fa:	b580      	push	{r7, lr}
 800c3fc:	b082      	sub	sp, #8
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	6078      	str	r0, [r7, #4]
 800c402:	460b      	mov	r3, r1
 800c404:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	789b      	ldrb	r3, [r3, #2]
 800c40a:	2b01      	cmp	r3, #1
 800c40c:	d10f      	bne.n	800c42e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2200      	movs	r2, #0
 800c412:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2203      	movs	r2, #3
 800c418:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c41a:	78fb      	ldrb	r3, [r7, #3]
 800c41c:	b29a      	uxth	r2, r3
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2200      	movs	r2, #0
 800c426:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2200      	movs	r2, #0
 800c42c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c42e:	2200      	movs	r2, #0
 800c430:	2100      	movs	r1, #0
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f000 f9e5 	bl	800c802 <USBH_CtlReq>
 800c438:	4603      	mov	r3, r0
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3708      	adds	r7, #8
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}

0800c442 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c442:	b580      	push	{r7, lr}
 800c444:	b082      	sub	sp, #8
 800c446:	af00      	add	r7, sp, #0
 800c448:	6078      	str	r0, [r7, #4]
 800c44a:	460b      	mov	r3, r1
 800c44c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	789b      	ldrb	r3, [r3, #2]
 800c452:	2b01      	cmp	r3, #1
 800c454:	d10f      	bne.n	800c476 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2202      	movs	r2, #2
 800c45a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2201      	movs	r2, #1
 800c460:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2200      	movs	r2, #0
 800c466:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c468:	78fb      	ldrb	r3, [r7, #3]
 800c46a:	b29a      	uxth	r2, r3
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2200      	movs	r2, #0
 800c474:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800c476:	2200      	movs	r2, #0
 800c478:	2100      	movs	r1, #0
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f000 f9c1 	bl	800c802 <USBH_CtlReq>
 800c480:	4603      	mov	r3, r0
}
 800c482:	4618      	mov	r0, r3
 800c484:	3708      	adds	r7, #8
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}

0800c48a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c48a:	b480      	push	{r7}
 800c48c:	b085      	sub	sp, #20
 800c48e:	af00      	add	r7, sp, #0
 800c490:	60f8      	str	r0, [r7, #12]
 800c492:	60b9      	str	r1, [r7, #8]
 800c494:	4613      	mov	r3, r2
 800c496:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	781a      	ldrb	r2, [r3, #0]
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	785a      	ldrb	r2, [r3, #1]
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	3302      	adds	r3, #2
 800c4ac:	781b      	ldrb	r3, [r3, #0]
 800c4ae:	b29a      	uxth	r2, r3
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	3303      	adds	r3, #3
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	021b      	lsls	r3, r3, #8
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	4313      	orrs	r3, r2
 800c4be:	b29a      	uxth	r2, r3
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	791a      	ldrb	r2, [r3, #4]
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	795a      	ldrb	r2, [r3, #5]
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	799a      	ldrb	r2, [r3, #6]
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	79da      	ldrb	r2, [r3, #7]
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800c4e4:	88fb      	ldrh	r3, [r7, #6]
 800c4e6:	2b08      	cmp	r3, #8
 800c4e8:	d939      	bls.n	800c55e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	3308      	adds	r3, #8
 800c4ee:	781b      	ldrb	r3, [r3, #0]
 800c4f0:	b29a      	uxth	r2, r3
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	3309      	adds	r3, #9
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	021b      	lsls	r3, r3, #8
 800c4fc:	b29b      	uxth	r3, r3
 800c4fe:	4313      	orrs	r3, r2
 800c500:	b29a      	uxth	r2, r3
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	330a      	adds	r3, #10
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	b29a      	uxth	r2, r3
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	330b      	adds	r3, #11
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	b29b      	uxth	r3, r3
 800c516:	021b      	lsls	r3, r3, #8
 800c518:	b29b      	uxth	r3, r3
 800c51a:	4313      	orrs	r3, r2
 800c51c:	b29a      	uxth	r2, r3
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	330c      	adds	r3, #12
 800c526:	781b      	ldrb	r3, [r3, #0]
 800c528:	b29a      	uxth	r2, r3
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	330d      	adds	r3, #13
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	b29b      	uxth	r3, r3
 800c532:	021b      	lsls	r3, r3, #8
 800c534:	b29b      	uxth	r3, r3
 800c536:	4313      	orrs	r3, r2
 800c538:	b29a      	uxth	r2, r3
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	7b9a      	ldrb	r2, [r3, #14]
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	7bda      	ldrb	r2, [r3, #15]
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	7c1a      	ldrb	r2, [r3, #16]
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	7c5a      	ldrb	r2, [r3, #17]
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	745a      	strb	r2, [r3, #17]
  }
}
 800c55e:	bf00      	nop
 800c560:	3714      	adds	r7, #20
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr

0800c56a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b08a      	sub	sp, #40	; 0x28
 800c56e:	af00      	add	r7, sp, #0
 800c570:	60f8      	str	r0, [r7, #12]
 800c572:	60b9      	str	r1, [r7, #8]
 800c574:	4613      	mov	r3, r2
 800c576:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c57c:	2300      	movs	r3, #0
 800c57e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800c582:	2300      	movs	r3, #0
 800c584:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	781a      	ldrb	r2, [r3, #0]
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	785a      	ldrb	r2, [r3, #1]
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	3302      	adds	r3, #2
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	b29a      	uxth	r2, r3
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	3303      	adds	r3, #3
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	021b      	lsls	r3, r3, #8
 800c5ae:	b29b      	uxth	r3, r3
 800c5b0:	4313      	orrs	r3, r2
 800c5b2:	b29a      	uxth	r2, r3
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	791a      	ldrb	r2, [r3, #4]
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	795a      	ldrb	r2, [r3, #5]
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	799a      	ldrb	r2, [r3, #6]
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	79da      	ldrb	r2, [r3, #7]
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	7a1a      	ldrb	r2, [r3, #8]
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c5e0:	88fb      	ldrh	r3, [r7, #6]
 800c5e2:	2b09      	cmp	r3, #9
 800c5e4:	d95f      	bls.n	800c6a6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800c5e6:	2309      	movs	r3, #9
 800c5e8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c5ee:	e051      	b.n	800c694 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c5f0:	f107 0316 	add.w	r3, r7, #22
 800c5f4:	4619      	mov	r1, r3
 800c5f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c5f8:	f000 f8e8 	bl	800c7cc <USBH_GetNextDesc>
 800c5fc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800c5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c600:	785b      	ldrb	r3, [r3, #1]
 800c602:	2b04      	cmp	r3, #4
 800c604:	d146      	bne.n	800c694 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800c606:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c60a:	221a      	movs	r2, #26
 800c60c:	fb02 f303 	mul.w	r3, r2, r3
 800c610:	3308      	adds	r3, #8
 800c612:	68fa      	ldr	r2, [r7, #12]
 800c614:	4413      	add	r3, r2
 800c616:	3302      	adds	r3, #2
 800c618:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c61a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c61c:	69f8      	ldr	r0, [r7, #28]
 800c61e:	f000 f846 	bl	800c6ae <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c622:	2300      	movs	r3, #0
 800c624:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800c628:	2300      	movs	r3, #0
 800c62a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c62c:	e022      	b.n	800c674 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c62e:	f107 0316 	add.w	r3, r7, #22
 800c632:	4619      	mov	r1, r3
 800c634:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c636:	f000 f8c9 	bl	800c7cc <USBH_GetNextDesc>
 800c63a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800c63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63e:	785b      	ldrb	r3, [r3, #1]
 800c640:	2b05      	cmp	r3, #5
 800c642:	d117      	bne.n	800c674 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c644:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c648:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800c64c:	3201      	adds	r2, #1
 800c64e:	00d2      	lsls	r2, r2, #3
 800c650:	211a      	movs	r1, #26
 800c652:	fb01 f303 	mul.w	r3, r1, r3
 800c656:	4413      	add	r3, r2
 800c658:	3308      	adds	r3, #8
 800c65a:	68fa      	ldr	r2, [r7, #12]
 800c65c:	4413      	add	r3, r2
 800c65e:	3304      	adds	r3, #4
 800c660:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800c662:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c664:	69b8      	ldr	r0, [r7, #24]
 800c666:	f000 f851 	bl	800c70c <USBH_ParseEPDesc>
            ep_ix++;
 800c66a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c66e:	3301      	adds	r3, #1
 800c670:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c674:	69fb      	ldr	r3, [r7, #28]
 800c676:	791b      	ldrb	r3, [r3, #4]
 800c678:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d204      	bcs.n	800c68a <USBH_ParseCfgDesc+0x120>
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	885a      	ldrh	r2, [r3, #2]
 800c684:	8afb      	ldrh	r3, [r7, #22]
 800c686:	429a      	cmp	r2, r3
 800c688:	d8d1      	bhi.n	800c62e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800c68a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c68e:	3301      	adds	r3, #1
 800c690:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c694:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c698:	2b01      	cmp	r3, #1
 800c69a:	d804      	bhi.n	800c6a6 <USBH_ParseCfgDesc+0x13c>
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	885a      	ldrh	r2, [r3, #2]
 800c6a0:	8afb      	ldrh	r3, [r7, #22]
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	d8a4      	bhi.n	800c5f0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800c6a6:	bf00      	nop
 800c6a8:	3728      	adds	r7, #40	; 0x28
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}

0800c6ae <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800c6ae:	b480      	push	{r7}
 800c6b0:	b083      	sub	sp, #12
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
 800c6b6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	781a      	ldrb	r2, [r3, #0]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	785a      	ldrb	r2, [r3, #1]
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	789a      	ldrb	r2, [r3, #2]
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	78da      	ldrb	r2, [r3, #3]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	791a      	ldrb	r2, [r3, #4]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	795a      	ldrb	r2, [r3, #5]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	799a      	ldrb	r2, [r3, #6]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	79da      	ldrb	r2, [r3, #7]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	7a1a      	ldrb	r2, [r3, #8]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	721a      	strb	r2, [r3, #8]
}
 800c700:	bf00      	nop
 800c702:	370c      	adds	r7, #12
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr

0800c70c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b083      	sub	sp, #12
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	781a      	ldrb	r2, [r3, #0]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	785a      	ldrb	r2, [r3, #1]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	789a      	ldrb	r2, [r3, #2]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	78da      	ldrb	r2, [r3, #3]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	3304      	adds	r3, #4
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	b29a      	uxth	r2, r3
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	3305      	adds	r3, #5
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	b29b      	uxth	r3, r3
 800c746:	021b      	lsls	r3, r3, #8
 800c748:	b29b      	uxth	r3, r3
 800c74a:	4313      	orrs	r3, r2
 800c74c:	b29a      	uxth	r2, r3
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	799a      	ldrb	r2, [r3, #6]
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	719a      	strb	r2, [r3, #6]
}
 800c75a:	bf00      	nop
 800c75c:	370c      	adds	r7, #12
 800c75e:	46bd      	mov	sp, r7
 800c760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c764:	4770      	bx	lr

0800c766 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c766:	b480      	push	{r7}
 800c768:	b087      	sub	sp, #28
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	60f8      	str	r0, [r7, #12]
 800c76e:	60b9      	str	r1, [r7, #8]
 800c770:	4613      	mov	r3, r2
 800c772:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	3301      	adds	r3, #1
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	2b03      	cmp	r3, #3
 800c77c:	d120      	bne.n	800c7c0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	1e9a      	subs	r2, r3, #2
 800c784:	88fb      	ldrh	r3, [r7, #6]
 800c786:	4293      	cmp	r3, r2
 800c788:	bf28      	it	cs
 800c78a:	4613      	movcs	r3, r2
 800c78c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	3302      	adds	r3, #2
 800c792:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c794:	2300      	movs	r3, #0
 800c796:	82fb      	strh	r3, [r7, #22]
 800c798:	e00b      	b.n	800c7b2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c79a:	8afb      	ldrh	r3, [r7, #22]
 800c79c:	68fa      	ldr	r2, [r7, #12]
 800c79e:	4413      	add	r3, r2
 800c7a0:	781a      	ldrb	r2, [r3, #0]
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	3301      	adds	r3, #1
 800c7aa:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c7ac:	8afb      	ldrh	r3, [r7, #22]
 800c7ae:	3302      	adds	r3, #2
 800c7b0:	82fb      	strh	r3, [r7, #22]
 800c7b2:	8afa      	ldrh	r2, [r7, #22]
 800c7b4:	8abb      	ldrh	r3, [r7, #20]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d3ef      	bcc.n	800c79a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	701a      	strb	r2, [r3, #0]
  }
}
 800c7c0:	bf00      	nop
 800c7c2:	371c      	adds	r7, #28
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr

0800c7cc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b085      	sub	sp, #20
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	881a      	ldrh	r2, [r3, #0]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	4413      	add	r3, r2
 800c7e2:	b29a      	uxth	r2, r3
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	781b      	ldrb	r3, [r3, #0]
 800c7ec:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	4413      	add	r3, r2
 800c7f2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c7f4:	68fb      	ldr	r3, [r7, #12]
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3714      	adds	r7, #20
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c800:	4770      	bx	lr

0800c802 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c802:	b580      	push	{r7, lr}
 800c804:	b086      	sub	sp, #24
 800c806:	af00      	add	r7, sp, #0
 800c808:	60f8      	str	r0, [r7, #12]
 800c80a:	60b9      	str	r1, [r7, #8]
 800c80c:	4613      	mov	r3, r2
 800c80e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c810:	2301      	movs	r3, #1
 800c812:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	789b      	ldrb	r3, [r3, #2]
 800c818:	2b01      	cmp	r3, #1
 800c81a:	d002      	beq.n	800c822 <USBH_CtlReq+0x20>
 800c81c:	2b02      	cmp	r3, #2
 800c81e:	d00f      	beq.n	800c840 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c820:	e027      	b.n	800c872 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	68ba      	ldr	r2, [r7, #8]
 800c826:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	88fa      	ldrh	r2, [r7, #6]
 800c82c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	2201      	movs	r2, #1
 800c832:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	2202      	movs	r2, #2
 800c838:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c83a:	2301      	movs	r3, #1
 800c83c:	75fb      	strb	r3, [r7, #23]
      break;
 800c83e:	e018      	b.n	800c872 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c840:	68f8      	ldr	r0, [r7, #12]
 800c842:	f000 f81b 	bl	800c87c <USBH_HandleControl>
 800c846:	4603      	mov	r3, r0
 800c848:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c84a:	7dfb      	ldrb	r3, [r7, #23]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d002      	beq.n	800c856 <USBH_CtlReq+0x54>
 800c850:	7dfb      	ldrb	r3, [r7, #23]
 800c852:	2b03      	cmp	r3, #3
 800c854:	d106      	bne.n	800c864 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	2201      	movs	r2, #1
 800c85a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	2200      	movs	r2, #0
 800c860:	761a      	strb	r2, [r3, #24]
      break;
 800c862:	e005      	b.n	800c870 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c864:	7dfb      	ldrb	r3, [r7, #23]
 800c866:	2b02      	cmp	r3, #2
 800c868:	d102      	bne.n	800c870 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	2201      	movs	r2, #1
 800c86e:	709a      	strb	r2, [r3, #2]
      break;
 800c870:	bf00      	nop
  }
  return status;
 800c872:	7dfb      	ldrb	r3, [r7, #23]
}
 800c874:	4618      	mov	r0, r3
 800c876:	3718      	adds	r7, #24
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b086      	sub	sp, #24
 800c880:	af02      	add	r7, sp, #8
 800c882:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c884:	2301      	movs	r3, #1
 800c886:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c888:	2300      	movs	r3, #0
 800c88a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	7e1b      	ldrb	r3, [r3, #24]
 800c890:	3b01      	subs	r3, #1
 800c892:	2b0a      	cmp	r3, #10
 800c894:	f200 8156 	bhi.w	800cb44 <USBH_HandleControl+0x2c8>
 800c898:	a201      	add	r2, pc, #4	; (adr r2, 800c8a0 <USBH_HandleControl+0x24>)
 800c89a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c89e:	bf00      	nop
 800c8a0:	0800c8cd 	.word	0x0800c8cd
 800c8a4:	0800c8e7 	.word	0x0800c8e7
 800c8a8:	0800c951 	.word	0x0800c951
 800c8ac:	0800c977 	.word	0x0800c977
 800c8b0:	0800c9af 	.word	0x0800c9af
 800c8b4:	0800c9d9 	.word	0x0800c9d9
 800c8b8:	0800ca2b 	.word	0x0800ca2b
 800c8bc:	0800ca4d 	.word	0x0800ca4d
 800c8c0:	0800ca89 	.word	0x0800ca89
 800c8c4:	0800caaf 	.word	0x0800caaf
 800c8c8:	0800caed 	.word	0x0800caed
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f103 0110 	add.w	r1, r3, #16
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	795b      	ldrb	r3, [r3, #5]
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f000 f943 	bl	800cb64 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2202      	movs	r2, #2
 800c8e2:	761a      	strb	r2, [r3, #24]
      break;
 800c8e4:	e139      	b.n	800cb5a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	795b      	ldrb	r3, [r3, #5]
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f003 f853 	bl	800f998 <USBH_LL_GetURBState>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c8f6:	7bbb      	ldrb	r3, [r7, #14]
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d11e      	bne.n	800c93a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	7c1b      	ldrb	r3, [r3, #16]
 800c900:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c904:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	8adb      	ldrh	r3, [r3, #22]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d00a      	beq.n	800c924 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c90e:	7b7b      	ldrb	r3, [r7, #13]
 800c910:	2b80      	cmp	r3, #128	; 0x80
 800c912:	d103      	bne.n	800c91c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2203      	movs	r2, #3
 800c918:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c91a:	e115      	b.n	800cb48 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2205      	movs	r2, #5
 800c920:	761a      	strb	r2, [r3, #24]
      break;
 800c922:	e111      	b.n	800cb48 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c924:	7b7b      	ldrb	r3, [r7, #13]
 800c926:	2b80      	cmp	r3, #128	; 0x80
 800c928:	d103      	bne.n	800c932 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2209      	movs	r2, #9
 800c92e:	761a      	strb	r2, [r3, #24]
      break;
 800c930:	e10a      	b.n	800cb48 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2207      	movs	r2, #7
 800c936:	761a      	strb	r2, [r3, #24]
      break;
 800c938:	e106      	b.n	800cb48 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c93a:	7bbb      	ldrb	r3, [r7, #14]
 800c93c:	2b04      	cmp	r3, #4
 800c93e:	d003      	beq.n	800c948 <USBH_HandleControl+0xcc>
 800c940:	7bbb      	ldrb	r3, [r7, #14]
 800c942:	2b02      	cmp	r3, #2
 800c944:	f040 8100 	bne.w	800cb48 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	220b      	movs	r2, #11
 800c94c:	761a      	strb	r2, [r3, #24]
      break;
 800c94e:	e0fb      	b.n	800cb48 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c956:	b29a      	uxth	r2, r3
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6899      	ldr	r1, [r3, #8]
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	899a      	ldrh	r2, [r3, #12]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	791b      	ldrb	r3, [r3, #4]
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 f93a 	bl	800cbe2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2204      	movs	r2, #4
 800c972:	761a      	strb	r2, [r3, #24]
      break;
 800c974:	e0f1      	b.n	800cb5a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	791b      	ldrb	r3, [r3, #4]
 800c97a:	4619      	mov	r1, r3
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f003 f80b 	bl	800f998 <USBH_LL_GetURBState>
 800c982:	4603      	mov	r3, r0
 800c984:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c986:	7bbb      	ldrb	r3, [r7, #14]
 800c988:	2b01      	cmp	r3, #1
 800c98a:	d102      	bne.n	800c992 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2209      	movs	r2, #9
 800c990:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c992:	7bbb      	ldrb	r3, [r7, #14]
 800c994:	2b05      	cmp	r3, #5
 800c996:	d102      	bne.n	800c99e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c998:	2303      	movs	r3, #3
 800c99a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c99c:	e0d6      	b.n	800cb4c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800c99e:	7bbb      	ldrb	r3, [r7, #14]
 800c9a0:	2b04      	cmp	r3, #4
 800c9a2:	f040 80d3 	bne.w	800cb4c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	220b      	movs	r2, #11
 800c9aa:	761a      	strb	r2, [r3, #24]
      break;
 800c9ac:	e0ce      	b.n	800cb4c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6899      	ldr	r1, [r3, #8]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	899a      	ldrh	r2, [r3, #12]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	795b      	ldrb	r3, [r3, #5]
 800c9ba:	2001      	movs	r0, #1
 800c9bc:	9000      	str	r0, [sp, #0]
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	f000 f8ea 	bl	800cb98 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c9ca:	b29a      	uxth	r2, r3
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2206      	movs	r2, #6
 800c9d4:	761a      	strb	r2, [r3, #24]
      break;
 800c9d6:	e0c0      	b.n	800cb5a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	795b      	ldrb	r3, [r3, #5]
 800c9dc:	4619      	mov	r1, r3
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f002 ffda 	bl	800f998 <USBH_LL_GetURBState>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c9e8:	7bbb      	ldrb	r3, [r7, #14]
 800c9ea:	2b01      	cmp	r3, #1
 800c9ec:	d103      	bne.n	800c9f6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2207      	movs	r2, #7
 800c9f2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c9f4:	e0ac      	b.n	800cb50 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800c9f6:	7bbb      	ldrb	r3, [r7, #14]
 800c9f8:	2b05      	cmp	r3, #5
 800c9fa:	d105      	bne.n	800ca08 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	220c      	movs	r2, #12
 800ca00:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ca02:	2303      	movs	r3, #3
 800ca04:	73fb      	strb	r3, [r7, #15]
      break;
 800ca06:	e0a3      	b.n	800cb50 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ca08:	7bbb      	ldrb	r3, [r7, #14]
 800ca0a:	2b02      	cmp	r3, #2
 800ca0c:	d103      	bne.n	800ca16 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2205      	movs	r2, #5
 800ca12:	761a      	strb	r2, [r3, #24]
      break;
 800ca14:	e09c      	b.n	800cb50 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ca16:	7bbb      	ldrb	r3, [r7, #14]
 800ca18:	2b04      	cmp	r3, #4
 800ca1a:	f040 8099 	bne.w	800cb50 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	220b      	movs	r2, #11
 800ca22:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ca24:	2302      	movs	r3, #2
 800ca26:	73fb      	strb	r3, [r7, #15]
      break;
 800ca28:	e092      	b.n	800cb50 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	791b      	ldrb	r3, [r3, #4]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	2100      	movs	r1, #0
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f000 f8d5 	bl	800cbe2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ca3e:	b29a      	uxth	r2, r3
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2208      	movs	r2, #8
 800ca48:	761a      	strb	r2, [r3, #24]

      break;
 800ca4a:	e086      	b.n	800cb5a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	791b      	ldrb	r3, [r3, #4]
 800ca50:	4619      	mov	r1, r3
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f002 ffa0 	bl	800f998 <USBH_LL_GetURBState>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ca5c:	7bbb      	ldrb	r3, [r7, #14]
 800ca5e:	2b01      	cmp	r3, #1
 800ca60:	d105      	bne.n	800ca6e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	220d      	movs	r2, #13
 800ca66:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ca6c:	e072      	b.n	800cb54 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800ca6e:	7bbb      	ldrb	r3, [r7, #14]
 800ca70:	2b04      	cmp	r3, #4
 800ca72:	d103      	bne.n	800ca7c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	220b      	movs	r2, #11
 800ca78:	761a      	strb	r2, [r3, #24]
      break;
 800ca7a:	e06b      	b.n	800cb54 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800ca7c:	7bbb      	ldrb	r3, [r7, #14]
 800ca7e:	2b05      	cmp	r3, #5
 800ca80:	d168      	bne.n	800cb54 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800ca82:	2303      	movs	r3, #3
 800ca84:	73fb      	strb	r3, [r7, #15]
      break;
 800ca86:	e065      	b.n	800cb54 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	795b      	ldrb	r3, [r3, #5]
 800ca8c:	2201      	movs	r2, #1
 800ca8e:	9200      	str	r2, [sp, #0]
 800ca90:	2200      	movs	r2, #0
 800ca92:	2100      	movs	r1, #0
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f000 f87f 	bl	800cb98 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800caa0:	b29a      	uxth	r2, r3
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	220a      	movs	r2, #10
 800caaa:	761a      	strb	r2, [r3, #24]
      break;
 800caac:	e055      	b.n	800cb5a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	795b      	ldrb	r3, [r3, #5]
 800cab2:	4619      	mov	r1, r3
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f002 ff6f 	bl	800f998 <USBH_LL_GetURBState>
 800caba:	4603      	mov	r3, r0
 800cabc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800cabe:	7bbb      	ldrb	r3, [r7, #14]
 800cac0:	2b01      	cmp	r3, #1
 800cac2:	d105      	bne.n	800cad0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800cac4:	2300      	movs	r3, #0
 800cac6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	220d      	movs	r2, #13
 800cacc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800cace:	e043      	b.n	800cb58 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cad0:	7bbb      	ldrb	r3, [r7, #14]
 800cad2:	2b02      	cmp	r3, #2
 800cad4:	d103      	bne.n	800cade <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2209      	movs	r2, #9
 800cada:	761a      	strb	r2, [r3, #24]
      break;
 800cadc:	e03c      	b.n	800cb58 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800cade:	7bbb      	ldrb	r3, [r7, #14]
 800cae0:	2b04      	cmp	r3, #4
 800cae2:	d139      	bne.n	800cb58 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	220b      	movs	r2, #11
 800cae8:	761a      	strb	r2, [r3, #24]
      break;
 800caea:	e035      	b.n	800cb58 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	7e5b      	ldrb	r3, [r3, #25]
 800caf0:	3301      	adds	r3, #1
 800caf2:	b2da      	uxtb	r2, r3
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	765a      	strb	r2, [r3, #25]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	7e5b      	ldrb	r3, [r3, #25]
 800cafc:	2b02      	cmp	r3, #2
 800cafe:	d806      	bhi.n	800cb0e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2201      	movs	r2, #1
 800cb04:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2201      	movs	r2, #1
 800cb0a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800cb0c:	e025      	b.n	800cb5a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cb14:	2106      	movs	r1, #6
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	795b      	ldrb	r3, [r3, #5]
 800cb24:	4619      	mov	r1, r3
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f000 f90c 	bl	800cd44 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	791b      	ldrb	r3, [r3, #4]
 800cb30:	4619      	mov	r1, r3
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 f906 	bl	800cd44 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800cb3e:	2302      	movs	r3, #2
 800cb40:	73fb      	strb	r3, [r7, #15]
      break;
 800cb42:	e00a      	b.n	800cb5a <USBH_HandleControl+0x2de>

    default:
      break;
 800cb44:	bf00      	nop
 800cb46:	e008      	b.n	800cb5a <USBH_HandleControl+0x2de>
      break;
 800cb48:	bf00      	nop
 800cb4a:	e006      	b.n	800cb5a <USBH_HandleControl+0x2de>
      break;
 800cb4c:	bf00      	nop
 800cb4e:	e004      	b.n	800cb5a <USBH_HandleControl+0x2de>
      break;
 800cb50:	bf00      	nop
 800cb52:	e002      	b.n	800cb5a <USBH_HandleControl+0x2de>
      break;
 800cb54:	bf00      	nop
 800cb56:	e000      	b.n	800cb5a <USBH_HandleControl+0x2de>
      break;
 800cb58:	bf00      	nop
  }

  return status;
 800cb5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3710      	adds	r7, #16
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b088      	sub	sp, #32
 800cb68:	af04      	add	r7, sp, #16
 800cb6a:	60f8      	str	r0, [r7, #12]
 800cb6c:	60b9      	str	r1, [r7, #8]
 800cb6e:	4613      	mov	r3, r2
 800cb70:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800cb72:	79f9      	ldrb	r1, [r7, #7]
 800cb74:	2300      	movs	r3, #0
 800cb76:	9303      	str	r3, [sp, #12]
 800cb78:	2308      	movs	r3, #8
 800cb7a:	9302      	str	r3, [sp, #8]
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	9301      	str	r3, [sp, #4]
 800cb80:	2300      	movs	r3, #0
 800cb82:	9300      	str	r3, [sp, #0]
 800cb84:	2300      	movs	r3, #0
 800cb86:	2200      	movs	r2, #0
 800cb88:	68f8      	ldr	r0, [r7, #12]
 800cb8a:	f002 fed4 	bl	800f936 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800cb8e:	2300      	movs	r3, #0
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3710      	adds	r7, #16
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b088      	sub	sp, #32
 800cb9c:	af04      	add	r7, sp, #16
 800cb9e:	60f8      	str	r0, [r7, #12]
 800cba0:	60b9      	str	r1, [r7, #8]
 800cba2:	4611      	mov	r1, r2
 800cba4:	461a      	mov	r2, r3
 800cba6:	460b      	mov	r3, r1
 800cba8:	80fb      	strh	r3, [r7, #6]
 800cbaa:	4613      	mov	r3, r2
 800cbac:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d001      	beq.n	800cbbc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800cbbc:	7979      	ldrb	r1, [r7, #5]
 800cbbe:	7e3b      	ldrb	r3, [r7, #24]
 800cbc0:	9303      	str	r3, [sp, #12]
 800cbc2:	88fb      	ldrh	r3, [r7, #6]
 800cbc4:	9302      	str	r3, [sp, #8]
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	9301      	str	r3, [sp, #4]
 800cbca:	2301      	movs	r3, #1
 800cbcc:	9300      	str	r3, [sp, #0]
 800cbce:	2300      	movs	r3, #0
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	68f8      	ldr	r0, [r7, #12]
 800cbd4:	f002 feaf 	bl	800f936 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800cbd8:	2300      	movs	r3, #0
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	3710      	adds	r7, #16
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}

0800cbe2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800cbe2:	b580      	push	{r7, lr}
 800cbe4:	b088      	sub	sp, #32
 800cbe6:	af04      	add	r7, sp, #16
 800cbe8:	60f8      	str	r0, [r7, #12]
 800cbea:	60b9      	str	r1, [r7, #8]
 800cbec:	4611      	mov	r1, r2
 800cbee:	461a      	mov	r2, r3
 800cbf0:	460b      	mov	r3, r1
 800cbf2:	80fb      	strh	r3, [r7, #6]
 800cbf4:	4613      	mov	r3, r2
 800cbf6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800cbf8:	7979      	ldrb	r1, [r7, #5]
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	9303      	str	r3, [sp, #12]
 800cbfe:	88fb      	ldrh	r3, [r7, #6]
 800cc00:	9302      	str	r3, [sp, #8]
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	9301      	str	r3, [sp, #4]
 800cc06:	2301      	movs	r3, #1
 800cc08:	9300      	str	r3, [sp, #0]
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	2201      	movs	r2, #1
 800cc0e:	68f8      	ldr	r0, [r7, #12]
 800cc10:	f002 fe91 	bl	800f936 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800cc14:	2300      	movs	r3, #0

}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3710      	adds	r7, #16
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}

0800cc1e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800cc1e:	b580      	push	{r7, lr}
 800cc20:	b088      	sub	sp, #32
 800cc22:	af04      	add	r7, sp, #16
 800cc24:	60f8      	str	r0, [r7, #12]
 800cc26:	60b9      	str	r1, [r7, #8]
 800cc28:	4611      	mov	r1, r2
 800cc2a:	461a      	mov	r2, r3
 800cc2c:	460b      	mov	r3, r1
 800cc2e:	80fb      	strh	r3, [r7, #6]
 800cc30:	4613      	mov	r3, r2
 800cc32:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d001      	beq.n	800cc42 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800cc42:	7979      	ldrb	r1, [r7, #5]
 800cc44:	7e3b      	ldrb	r3, [r7, #24]
 800cc46:	9303      	str	r3, [sp, #12]
 800cc48:	88fb      	ldrh	r3, [r7, #6]
 800cc4a:	9302      	str	r3, [sp, #8]
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	9301      	str	r3, [sp, #4]
 800cc50:	2301      	movs	r3, #1
 800cc52:	9300      	str	r3, [sp, #0]
 800cc54:	2302      	movs	r3, #2
 800cc56:	2200      	movs	r2, #0
 800cc58:	68f8      	ldr	r0, [r7, #12]
 800cc5a:	f002 fe6c 	bl	800f936 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800cc5e:	2300      	movs	r3, #0
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3710      	adds	r7, #16
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b088      	sub	sp, #32
 800cc6c:	af04      	add	r7, sp, #16
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	60b9      	str	r1, [r7, #8]
 800cc72:	4611      	mov	r1, r2
 800cc74:	461a      	mov	r2, r3
 800cc76:	460b      	mov	r3, r1
 800cc78:	80fb      	strh	r3, [r7, #6]
 800cc7a:	4613      	mov	r3, r2
 800cc7c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800cc7e:	7979      	ldrb	r1, [r7, #5]
 800cc80:	2300      	movs	r3, #0
 800cc82:	9303      	str	r3, [sp, #12]
 800cc84:	88fb      	ldrh	r3, [r7, #6]
 800cc86:	9302      	str	r3, [sp, #8]
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	9301      	str	r3, [sp, #4]
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	9300      	str	r3, [sp, #0]
 800cc90:	2302      	movs	r3, #2
 800cc92:	2201      	movs	r2, #1
 800cc94:	68f8      	ldr	r0, [r7, #12]
 800cc96:	f002 fe4e 	bl	800f936 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800cc9a:	2300      	movs	r3, #0
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3710      	adds	r7, #16
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b086      	sub	sp, #24
 800cca8:	af04      	add	r7, sp, #16
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	4608      	mov	r0, r1
 800ccae:	4611      	mov	r1, r2
 800ccb0:	461a      	mov	r2, r3
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	70fb      	strb	r3, [r7, #3]
 800ccb6:	460b      	mov	r3, r1
 800ccb8:	70bb      	strb	r3, [r7, #2]
 800ccba:	4613      	mov	r3, r2
 800ccbc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ccbe:	7878      	ldrb	r0, [r7, #1]
 800ccc0:	78ba      	ldrb	r2, [r7, #2]
 800ccc2:	78f9      	ldrb	r1, [r7, #3]
 800ccc4:	8b3b      	ldrh	r3, [r7, #24]
 800ccc6:	9302      	str	r3, [sp, #8]
 800ccc8:	7d3b      	ldrb	r3, [r7, #20]
 800ccca:	9301      	str	r3, [sp, #4]
 800cccc:	7c3b      	ldrb	r3, [r7, #16]
 800ccce:	9300      	str	r3, [sp, #0]
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f002 fde1 	bl	800f89a <USBH_LL_OpenPipe>

  return USBH_OK;
 800ccd8:	2300      	movs	r3, #0
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3708      	adds	r7, #8
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}

0800cce2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800cce2:	b580      	push	{r7, lr}
 800cce4:	b082      	sub	sp, #8
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
 800ccea:	460b      	mov	r3, r1
 800ccec:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800ccee:	78fb      	ldrb	r3, [r7, #3]
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f002 fe00 	bl	800f8f8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ccf8:	2300      	movs	r3, #0
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3708      	adds	r7, #8
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}

0800cd02 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800cd02:	b580      	push	{r7, lr}
 800cd04:	b084      	sub	sp, #16
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	6078      	str	r0, [r7, #4]
 800cd0a:	460b      	mov	r3, r1
 800cd0c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f000 f836 	bl	800cd80 <USBH_GetFreePipe>
 800cd14:	4603      	mov	r3, r0
 800cd16:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800cd18:	89fb      	ldrh	r3, [r7, #14]
 800cd1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d00a      	beq.n	800cd38 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800cd22:	78fa      	ldrb	r2, [r7, #3]
 800cd24:	89fb      	ldrh	r3, [r7, #14]
 800cd26:	f003 030f 	and.w	r3, r3, #15
 800cd2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cd2e:	6879      	ldr	r1, [r7, #4]
 800cd30:	33e0      	adds	r3, #224	; 0xe0
 800cd32:	009b      	lsls	r3, r3, #2
 800cd34:	440b      	add	r3, r1
 800cd36:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800cd38:	89fb      	ldrh	r3, [r7, #14]
 800cd3a:	b2db      	uxtb	r3, r3
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3710      	adds	r7, #16
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}

0800cd44 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b083      	sub	sp, #12
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	460b      	mov	r3, r1
 800cd4e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800cd50:	78fb      	ldrb	r3, [r7, #3]
 800cd52:	2b0a      	cmp	r3, #10
 800cd54:	d80d      	bhi.n	800cd72 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800cd56:	78fb      	ldrb	r3, [r7, #3]
 800cd58:	687a      	ldr	r2, [r7, #4]
 800cd5a:	33e0      	adds	r3, #224	; 0xe0
 800cd5c:	009b      	lsls	r3, r3, #2
 800cd5e:	4413      	add	r3, r2
 800cd60:	685a      	ldr	r2, [r3, #4]
 800cd62:	78fb      	ldrb	r3, [r7, #3]
 800cd64:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800cd68:	6879      	ldr	r1, [r7, #4]
 800cd6a:	33e0      	adds	r3, #224	; 0xe0
 800cd6c:	009b      	lsls	r3, r3, #2
 800cd6e:	440b      	add	r3, r1
 800cd70:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800cd72:	2300      	movs	r3, #0
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	370c      	adds	r7, #12
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7e:	4770      	bx	lr

0800cd80 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800cd80:	b480      	push	{r7}
 800cd82:	b085      	sub	sp, #20
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	73fb      	strb	r3, [r7, #15]
 800cd90:	e00f      	b.n	800cdb2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800cd92:	7bfb      	ldrb	r3, [r7, #15]
 800cd94:	687a      	ldr	r2, [r7, #4]
 800cd96:	33e0      	adds	r3, #224	; 0xe0
 800cd98:	009b      	lsls	r3, r3, #2
 800cd9a:	4413      	add	r3, r2
 800cd9c:	685b      	ldr	r3, [r3, #4]
 800cd9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d102      	bne.n	800cdac <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800cda6:	7bfb      	ldrb	r3, [r7, #15]
 800cda8:	b29b      	uxth	r3, r3
 800cdaa:	e007      	b.n	800cdbc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800cdac:	7bfb      	ldrb	r3, [r7, #15]
 800cdae:	3301      	adds	r3, #1
 800cdb0:	73fb      	strb	r3, [r7, #15]
 800cdb2:	7bfb      	ldrb	r3, [r7, #15]
 800cdb4:	2b0a      	cmp	r3, #10
 800cdb6:	d9ec      	bls.n	800cd92 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800cdb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3714      	adds	r7, #20
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc6:	4770      	bx	lr

0800cdc8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b084      	sub	sp, #16
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	4603      	mov	r3, r0
 800cdd0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cdd2:	79fb      	ldrb	r3, [r7, #7]
 800cdd4:	4a08      	ldr	r2, [pc, #32]	; (800cdf8 <disk_status+0x30>)
 800cdd6:	009b      	lsls	r3, r3, #2
 800cdd8:	4413      	add	r3, r2
 800cdda:	685b      	ldr	r3, [r3, #4]
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	79fa      	ldrb	r2, [r7, #7]
 800cde0:	4905      	ldr	r1, [pc, #20]	; (800cdf8 <disk_status+0x30>)
 800cde2:	440a      	add	r2, r1
 800cde4:	7a12      	ldrb	r2, [r2, #8]
 800cde6:	4610      	mov	r0, r2
 800cde8:	4798      	blx	r3
 800cdea:	4603      	mov	r3, r0
 800cdec:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cdee:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	3710      	adds	r7, #16
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}
 800cdf8:	200013ac 	.word	0x200013ac

0800cdfc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b084      	sub	sp, #16
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	4603      	mov	r3, r0
 800ce04:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ce06:	2300      	movs	r3, #0
 800ce08:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ce0a:	79fb      	ldrb	r3, [r7, #7]
 800ce0c:	4a0d      	ldr	r2, [pc, #52]	; (800ce44 <disk_initialize+0x48>)
 800ce0e:	5cd3      	ldrb	r3, [r2, r3]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d111      	bne.n	800ce38 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ce14:	79fb      	ldrb	r3, [r7, #7]
 800ce16:	4a0b      	ldr	r2, [pc, #44]	; (800ce44 <disk_initialize+0x48>)
 800ce18:	2101      	movs	r1, #1
 800ce1a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ce1c:	79fb      	ldrb	r3, [r7, #7]
 800ce1e:	4a09      	ldr	r2, [pc, #36]	; (800ce44 <disk_initialize+0x48>)
 800ce20:	009b      	lsls	r3, r3, #2
 800ce22:	4413      	add	r3, r2
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	79fa      	ldrb	r2, [r7, #7]
 800ce2a:	4906      	ldr	r1, [pc, #24]	; (800ce44 <disk_initialize+0x48>)
 800ce2c:	440a      	add	r2, r1
 800ce2e:	7a12      	ldrb	r2, [r2, #8]
 800ce30:	4610      	mov	r0, r2
 800ce32:	4798      	blx	r3
 800ce34:	4603      	mov	r3, r0
 800ce36:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ce38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3710      	adds	r7, #16
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}
 800ce42:	bf00      	nop
 800ce44:	200013ac 	.word	0x200013ac

0800ce48 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ce48:	b590      	push	{r4, r7, lr}
 800ce4a:	b087      	sub	sp, #28
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	60b9      	str	r1, [r7, #8]
 800ce50:	607a      	str	r2, [r7, #4]
 800ce52:	603b      	str	r3, [r7, #0]
 800ce54:	4603      	mov	r3, r0
 800ce56:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ce58:	7bfb      	ldrb	r3, [r7, #15]
 800ce5a:	4a0a      	ldr	r2, [pc, #40]	; (800ce84 <disk_read+0x3c>)
 800ce5c:	009b      	lsls	r3, r3, #2
 800ce5e:	4413      	add	r3, r2
 800ce60:	685b      	ldr	r3, [r3, #4]
 800ce62:	689c      	ldr	r4, [r3, #8]
 800ce64:	7bfb      	ldrb	r3, [r7, #15]
 800ce66:	4a07      	ldr	r2, [pc, #28]	; (800ce84 <disk_read+0x3c>)
 800ce68:	4413      	add	r3, r2
 800ce6a:	7a18      	ldrb	r0, [r3, #8]
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	687a      	ldr	r2, [r7, #4]
 800ce70:	68b9      	ldr	r1, [r7, #8]
 800ce72:	47a0      	blx	r4
 800ce74:	4603      	mov	r3, r0
 800ce76:	75fb      	strb	r3, [r7, #23]
  return res;
 800ce78:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	371c      	adds	r7, #28
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd90      	pop	{r4, r7, pc}
 800ce82:	bf00      	nop
 800ce84:	200013ac 	.word	0x200013ac

0800ce88 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ce88:	b590      	push	{r4, r7, lr}
 800ce8a:	b087      	sub	sp, #28
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	60b9      	str	r1, [r7, #8]
 800ce90:	607a      	str	r2, [r7, #4]
 800ce92:	603b      	str	r3, [r7, #0]
 800ce94:	4603      	mov	r3, r0
 800ce96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ce98:	7bfb      	ldrb	r3, [r7, #15]
 800ce9a:	4a0a      	ldr	r2, [pc, #40]	; (800cec4 <disk_write+0x3c>)
 800ce9c:	009b      	lsls	r3, r3, #2
 800ce9e:	4413      	add	r3, r2
 800cea0:	685b      	ldr	r3, [r3, #4]
 800cea2:	68dc      	ldr	r4, [r3, #12]
 800cea4:	7bfb      	ldrb	r3, [r7, #15]
 800cea6:	4a07      	ldr	r2, [pc, #28]	; (800cec4 <disk_write+0x3c>)
 800cea8:	4413      	add	r3, r2
 800ceaa:	7a18      	ldrb	r0, [r3, #8]
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	68b9      	ldr	r1, [r7, #8]
 800ceb2:	47a0      	blx	r4
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	75fb      	strb	r3, [r7, #23]
  return res;
 800ceb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	371c      	adds	r7, #28
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd90      	pop	{r4, r7, pc}
 800cec2:	bf00      	nop
 800cec4:	200013ac 	.word	0x200013ac

0800cec8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b084      	sub	sp, #16
 800cecc:	af00      	add	r7, sp, #0
 800cece:	4603      	mov	r3, r0
 800ced0:	603a      	str	r2, [r7, #0]
 800ced2:	71fb      	strb	r3, [r7, #7]
 800ced4:	460b      	mov	r3, r1
 800ced6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ced8:	79fb      	ldrb	r3, [r7, #7]
 800ceda:	4a09      	ldr	r2, [pc, #36]	; (800cf00 <disk_ioctl+0x38>)
 800cedc:	009b      	lsls	r3, r3, #2
 800cede:	4413      	add	r3, r2
 800cee0:	685b      	ldr	r3, [r3, #4]
 800cee2:	691b      	ldr	r3, [r3, #16]
 800cee4:	79fa      	ldrb	r2, [r7, #7]
 800cee6:	4906      	ldr	r1, [pc, #24]	; (800cf00 <disk_ioctl+0x38>)
 800cee8:	440a      	add	r2, r1
 800ceea:	7a10      	ldrb	r0, [r2, #8]
 800ceec:	79b9      	ldrb	r1, [r7, #6]
 800ceee:	683a      	ldr	r2, [r7, #0]
 800cef0:	4798      	blx	r3
 800cef2:	4603      	mov	r3, r0
 800cef4:	73fb      	strb	r3, [r7, #15]
  return res;
 800cef6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3710      	adds	r7, #16
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}
 800cf00:	200013ac 	.word	0x200013ac

0800cf04 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cf04:	b480      	push	{r7}
 800cf06:	b085      	sub	sp, #20
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	3301      	adds	r3, #1
 800cf10:	781b      	ldrb	r3, [r3, #0]
 800cf12:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cf14:	89fb      	ldrh	r3, [r7, #14]
 800cf16:	021b      	lsls	r3, r3, #8
 800cf18:	b21a      	sxth	r2, r3
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	781b      	ldrb	r3, [r3, #0]
 800cf1e:	b21b      	sxth	r3, r3
 800cf20:	4313      	orrs	r3, r2
 800cf22:	b21b      	sxth	r3, r3
 800cf24:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cf26:	89fb      	ldrh	r3, [r7, #14]
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3714      	adds	r7, #20
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf32:	4770      	bx	lr

0800cf34 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cf34:	b480      	push	{r7}
 800cf36:	b085      	sub	sp, #20
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	3303      	adds	r3, #3
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	021b      	lsls	r3, r3, #8
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	3202      	adds	r2, #2
 800cf4c:	7812      	ldrb	r2, [r2, #0]
 800cf4e:	4313      	orrs	r3, r2
 800cf50:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	021b      	lsls	r3, r3, #8
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	3201      	adds	r2, #1
 800cf5a:	7812      	ldrb	r2, [r2, #0]
 800cf5c:	4313      	orrs	r3, r2
 800cf5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	021b      	lsls	r3, r3, #8
 800cf64:	687a      	ldr	r2, [r7, #4]
 800cf66:	7812      	ldrb	r2, [r2, #0]
 800cf68:	4313      	orrs	r3, r2
 800cf6a:	60fb      	str	r3, [r7, #12]
	return rv;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3714      	adds	r7, #20
 800cf72:	46bd      	mov	sp, r7
 800cf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf78:	4770      	bx	lr

0800cf7a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cf7a:	b480      	push	{r7}
 800cf7c:	b083      	sub	sp, #12
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	6078      	str	r0, [r7, #4]
 800cf82:	460b      	mov	r3, r1
 800cf84:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	1c5a      	adds	r2, r3, #1
 800cf8a:	607a      	str	r2, [r7, #4]
 800cf8c:	887a      	ldrh	r2, [r7, #2]
 800cf8e:	b2d2      	uxtb	r2, r2
 800cf90:	701a      	strb	r2, [r3, #0]
 800cf92:	887b      	ldrh	r3, [r7, #2]
 800cf94:	0a1b      	lsrs	r3, r3, #8
 800cf96:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	1c5a      	adds	r2, r3, #1
 800cf9c:	607a      	str	r2, [r7, #4]
 800cf9e:	887a      	ldrh	r2, [r7, #2]
 800cfa0:	b2d2      	uxtb	r2, r2
 800cfa2:	701a      	strb	r2, [r3, #0]
}
 800cfa4:	bf00      	nop
 800cfa6:	370c      	adds	r7, #12
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr

0800cfb0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	b083      	sub	sp, #12
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	1c5a      	adds	r2, r3, #1
 800cfbe:	607a      	str	r2, [r7, #4]
 800cfc0:	683a      	ldr	r2, [r7, #0]
 800cfc2:	b2d2      	uxtb	r2, r2
 800cfc4:	701a      	strb	r2, [r3, #0]
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	0a1b      	lsrs	r3, r3, #8
 800cfca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	1c5a      	adds	r2, r3, #1
 800cfd0:	607a      	str	r2, [r7, #4]
 800cfd2:	683a      	ldr	r2, [r7, #0]
 800cfd4:	b2d2      	uxtb	r2, r2
 800cfd6:	701a      	strb	r2, [r3, #0]
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	0a1b      	lsrs	r3, r3, #8
 800cfdc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	1c5a      	adds	r2, r3, #1
 800cfe2:	607a      	str	r2, [r7, #4]
 800cfe4:	683a      	ldr	r2, [r7, #0]
 800cfe6:	b2d2      	uxtb	r2, r2
 800cfe8:	701a      	strb	r2, [r3, #0]
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	0a1b      	lsrs	r3, r3, #8
 800cfee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	1c5a      	adds	r2, r3, #1
 800cff4:	607a      	str	r2, [r7, #4]
 800cff6:	683a      	ldr	r2, [r7, #0]
 800cff8:	b2d2      	uxtb	r2, r2
 800cffa:	701a      	strb	r2, [r3, #0]
}
 800cffc:	bf00      	nop
 800cffe:	370c      	adds	r7, #12
 800d000:	46bd      	mov	sp, r7
 800d002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d006:	4770      	bx	lr

0800d008 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d008:	b480      	push	{r7}
 800d00a:	b087      	sub	sp, #28
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	60f8      	str	r0, [r7, #12]
 800d010:	60b9      	str	r1, [r7, #8]
 800d012:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d00d      	beq.n	800d03e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d022:	693a      	ldr	r2, [r7, #16]
 800d024:	1c53      	adds	r3, r2, #1
 800d026:	613b      	str	r3, [r7, #16]
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	1c59      	adds	r1, r3, #1
 800d02c:	6179      	str	r1, [r7, #20]
 800d02e:	7812      	ldrb	r2, [r2, #0]
 800d030:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	3b01      	subs	r3, #1
 800d036:	607b      	str	r3, [r7, #4]
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d1f1      	bne.n	800d022 <mem_cpy+0x1a>
	}
}
 800d03e:	bf00      	nop
 800d040:	371c      	adds	r7, #28
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr

0800d04a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d04a:	b480      	push	{r7}
 800d04c:	b087      	sub	sp, #28
 800d04e:	af00      	add	r7, sp, #0
 800d050:	60f8      	str	r0, [r7, #12]
 800d052:	60b9      	str	r1, [r7, #8]
 800d054:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	1c5a      	adds	r2, r3, #1
 800d05e:	617a      	str	r2, [r7, #20]
 800d060:	68ba      	ldr	r2, [r7, #8]
 800d062:	b2d2      	uxtb	r2, r2
 800d064:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	3b01      	subs	r3, #1
 800d06a:	607b      	str	r3, [r7, #4]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d1f3      	bne.n	800d05a <mem_set+0x10>
}
 800d072:	bf00      	nop
 800d074:	bf00      	nop
 800d076:	371c      	adds	r7, #28
 800d078:	46bd      	mov	sp, r7
 800d07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07e:	4770      	bx	lr

0800d080 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d080:	b480      	push	{r7}
 800d082:	b089      	sub	sp, #36	; 0x24
 800d084:	af00      	add	r7, sp, #0
 800d086:	60f8      	str	r0, [r7, #12]
 800d088:	60b9      	str	r1, [r7, #8]
 800d08a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	61fb      	str	r3, [r7, #28]
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d094:	2300      	movs	r3, #0
 800d096:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d098:	69fb      	ldr	r3, [r7, #28]
 800d09a:	1c5a      	adds	r2, r3, #1
 800d09c:	61fa      	str	r2, [r7, #28]
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	69bb      	ldr	r3, [r7, #24]
 800d0a4:	1c5a      	adds	r2, r3, #1
 800d0a6:	61ba      	str	r2, [r7, #24]
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	1acb      	subs	r3, r1, r3
 800d0ac:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	3b01      	subs	r3, #1
 800d0b2:	607b      	str	r3, [r7, #4]
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d002      	beq.n	800d0c0 <mem_cmp+0x40>
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d0eb      	beq.n	800d098 <mem_cmp+0x18>

	return r;
 800d0c0:	697b      	ldr	r3, [r7, #20]
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3724      	adds	r7, #36	; 0x24
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr

0800d0ce <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d0ce:	b480      	push	{r7}
 800d0d0:	b083      	sub	sp, #12
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	6078      	str	r0, [r7, #4]
 800d0d6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d0d8:	e002      	b.n	800d0e0 <chk_chr+0x12>
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	3301      	adds	r3, #1
 800d0de:	607b      	str	r3, [r7, #4]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	781b      	ldrb	r3, [r3, #0]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d005      	beq.n	800d0f4 <chk_chr+0x26>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	461a      	mov	r2, r3
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	4293      	cmp	r3, r2
 800d0f2:	d1f2      	bne.n	800d0da <chk_chr+0xc>
	return *str;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	781b      	ldrb	r3, [r3, #0]
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	370c      	adds	r7, #12
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr

0800d104 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d104:	b480      	push	{r7}
 800d106:	b085      	sub	sp, #20
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
 800d10c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d10e:	2300      	movs	r3, #0
 800d110:	60bb      	str	r3, [r7, #8]
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	60fb      	str	r3, [r7, #12]
 800d116:	e029      	b.n	800d16c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d118:	4a27      	ldr	r2, [pc, #156]	; (800d1b8 <chk_lock+0xb4>)
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	011b      	lsls	r3, r3, #4
 800d11e:	4413      	add	r3, r2
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d01d      	beq.n	800d162 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d126:	4a24      	ldr	r2, [pc, #144]	; (800d1b8 <chk_lock+0xb4>)
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	011b      	lsls	r3, r3, #4
 800d12c:	4413      	add	r3, r2
 800d12e:	681a      	ldr	r2, [r3, #0]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	429a      	cmp	r2, r3
 800d136:	d116      	bne.n	800d166 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d138:	4a1f      	ldr	r2, [pc, #124]	; (800d1b8 <chk_lock+0xb4>)
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	011b      	lsls	r3, r3, #4
 800d13e:	4413      	add	r3, r2
 800d140:	3304      	adds	r3, #4
 800d142:	681a      	ldr	r2, [r3, #0]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d148:	429a      	cmp	r2, r3
 800d14a:	d10c      	bne.n	800d166 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d14c:	4a1a      	ldr	r2, [pc, #104]	; (800d1b8 <chk_lock+0xb4>)
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	011b      	lsls	r3, r3, #4
 800d152:	4413      	add	r3, r2
 800d154:	3308      	adds	r3, #8
 800d156:	681a      	ldr	r2, [r3, #0]
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d102      	bne.n	800d166 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d160:	e007      	b.n	800d172 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d162:	2301      	movs	r3, #1
 800d164:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	3301      	adds	r3, #1
 800d16a:	60fb      	str	r3, [r7, #12]
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	2b01      	cmp	r3, #1
 800d170:	d9d2      	bls.n	800d118 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	2b02      	cmp	r3, #2
 800d176:	d109      	bne.n	800d18c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d102      	bne.n	800d184 <chk_lock+0x80>
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	2b02      	cmp	r3, #2
 800d182:	d101      	bne.n	800d188 <chk_lock+0x84>
 800d184:	2300      	movs	r3, #0
 800d186:	e010      	b.n	800d1aa <chk_lock+0xa6>
 800d188:	2312      	movs	r3, #18
 800d18a:	e00e      	b.n	800d1aa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d108      	bne.n	800d1a4 <chk_lock+0xa0>
 800d192:	4a09      	ldr	r2, [pc, #36]	; (800d1b8 <chk_lock+0xb4>)
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	011b      	lsls	r3, r3, #4
 800d198:	4413      	add	r3, r2
 800d19a:	330c      	adds	r3, #12
 800d19c:	881b      	ldrh	r3, [r3, #0]
 800d19e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1a2:	d101      	bne.n	800d1a8 <chk_lock+0xa4>
 800d1a4:	2310      	movs	r3, #16
 800d1a6:	e000      	b.n	800d1aa <chk_lock+0xa6>
 800d1a8:	2300      	movs	r3, #0
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3714      	adds	r7, #20
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b4:	4770      	bx	lr
 800d1b6:	bf00      	nop
 800d1b8:	2000138c 	.word	0x2000138c

0800d1bc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b083      	sub	sp, #12
 800d1c0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	607b      	str	r3, [r7, #4]
 800d1c6:	e002      	b.n	800d1ce <enq_lock+0x12>
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	3301      	adds	r3, #1
 800d1cc:	607b      	str	r3, [r7, #4]
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2b01      	cmp	r3, #1
 800d1d2:	d806      	bhi.n	800d1e2 <enq_lock+0x26>
 800d1d4:	4a09      	ldr	r2, [pc, #36]	; (800d1fc <enq_lock+0x40>)
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	011b      	lsls	r3, r3, #4
 800d1da:	4413      	add	r3, r2
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d1f2      	bne.n	800d1c8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2b02      	cmp	r3, #2
 800d1e6:	bf14      	ite	ne
 800d1e8:	2301      	movne	r3, #1
 800d1ea:	2300      	moveq	r3, #0
 800d1ec:	b2db      	uxtb	r3, r3
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	370c      	adds	r7, #12
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f8:	4770      	bx	lr
 800d1fa:	bf00      	nop
 800d1fc:	2000138c 	.word	0x2000138c

0800d200 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d200:	b480      	push	{r7}
 800d202:	b085      	sub	sp, #20
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d20a:	2300      	movs	r3, #0
 800d20c:	60fb      	str	r3, [r7, #12]
 800d20e:	e01f      	b.n	800d250 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d210:	4a41      	ldr	r2, [pc, #260]	; (800d318 <inc_lock+0x118>)
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	011b      	lsls	r3, r3, #4
 800d216:	4413      	add	r3, r2
 800d218:	681a      	ldr	r2, [r3, #0]
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	429a      	cmp	r2, r3
 800d220:	d113      	bne.n	800d24a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d222:	4a3d      	ldr	r2, [pc, #244]	; (800d318 <inc_lock+0x118>)
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	011b      	lsls	r3, r3, #4
 800d228:	4413      	add	r3, r2
 800d22a:	3304      	adds	r3, #4
 800d22c:	681a      	ldr	r2, [r3, #0]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d232:	429a      	cmp	r2, r3
 800d234:	d109      	bne.n	800d24a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d236:	4a38      	ldr	r2, [pc, #224]	; (800d318 <inc_lock+0x118>)
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	011b      	lsls	r3, r3, #4
 800d23c:	4413      	add	r3, r2
 800d23e:	3308      	adds	r3, #8
 800d240:	681a      	ldr	r2, [r3, #0]
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d246:	429a      	cmp	r2, r3
 800d248:	d006      	beq.n	800d258 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	3301      	adds	r3, #1
 800d24e:	60fb      	str	r3, [r7, #12]
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	2b01      	cmp	r3, #1
 800d254:	d9dc      	bls.n	800d210 <inc_lock+0x10>
 800d256:	e000      	b.n	800d25a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d258:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	2b02      	cmp	r3, #2
 800d25e:	d132      	bne.n	800d2c6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d260:	2300      	movs	r3, #0
 800d262:	60fb      	str	r3, [r7, #12]
 800d264:	e002      	b.n	800d26c <inc_lock+0x6c>
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	3301      	adds	r3, #1
 800d26a:	60fb      	str	r3, [r7, #12]
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	2b01      	cmp	r3, #1
 800d270:	d806      	bhi.n	800d280 <inc_lock+0x80>
 800d272:	4a29      	ldr	r2, [pc, #164]	; (800d318 <inc_lock+0x118>)
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	011b      	lsls	r3, r3, #4
 800d278:	4413      	add	r3, r2
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d1f2      	bne.n	800d266 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	2b02      	cmp	r3, #2
 800d284:	d101      	bne.n	800d28a <inc_lock+0x8a>
 800d286:	2300      	movs	r3, #0
 800d288:	e040      	b.n	800d30c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681a      	ldr	r2, [r3, #0]
 800d28e:	4922      	ldr	r1, [pc, #136]	; (800d318 <inc_lock+0x118>)
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	011b      	lsls	r3, r3, #4
 800d294:	440b      	add	r3, r1
 800d296:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	689a      	ldr	r2, [r3, #8]
 800d29c:	491e      	ldr	r1, [pc, #120]	; (800d318 <inc_lock+0x118>)
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	011b      	lsls	r3, r3, #4
 800d2a2:	440b      	add	r3, r1
 800d2a4:	3304      	adds	r3, #4
 800d2a6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	695a      	ldr	r2, [r3, #20]
 800d2ac:	491a      	ldr	r1, [pc, #104]	; (800d318 <inc_lock+0x118>)
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	011b      	lsls	r3, r3, #4
 800d2b2:	440b      	add	r3, r1
 800d2b4:	3308      	adds	r3, #8
 800d2b6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d2b8:	4a17      	ldr	r2, [pc, #92]	; (800d318 <inc_lock+0x118>)
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	011b      	lsls	r3, r3, #4
 800d2be:	4413      	add	r3, r2
 800d2c0:	330c      	adds	r3, #12
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d009      	beq.n	800d2e0 <inc_lock+0xe0>
 800d2cc:	4a12      	ldr	r2, [pc, #72]	; (800d318 <inc_lock+0x118>)
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	011b      	lsls	r3, r3, #4
 800d2d2:	4413      	add	r3, r2
 800d2d4:	330c      	adds	r3, #12
 800d2d6:	881b      	ldrh	r3, [r3, #0]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d001      	beq.n	800d2e0 <inc_lock+0xe0>
 800d2dc:	2300      	movs	r3, #0
 800d2de:	e015      	b.n	800d30c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d108      	bne.n	800d2f8 <inc_lock+0xf8>
 800d2e6:	4a0c      	ldr	r2, [pc, #48]	; (800d318 <inc_lock+0x118>)
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	011b      	lsls	r3, r3, #4
 800d2ec:	4413      	add	r3, r2
 800d2ee:	330c      	adds	r3, #12
 800d2f0:	881b      	ldrh	r3, [r3, #0]
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	b29a      	uxth	r2, r3
 800d2f6:	e001      	b.n	800d2fc <inc_lock+0xfc>
 800d2f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d2fc:	4906      	ldr	r1, [pc, #24]	; (800d318 <inc_lock+0x118>)
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	011b      	lsls	r3, r3, #4
 800d302:	440b      	add	r3, r1
 800d304:	330c      	adds	r3, #12
 800d306:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	3301      	adds	r3, #1
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	3714      	adds	r7, #20
 800d310:	46bd      	mov	sp, r7
 800d312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d316:	4770      	bx	lr
 800d318:	2000138c 	.word	0x2000138c

0800d31c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d31c:	b480      	push	{r7}
 800d31e:	b085      	sub	sp, #20
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	3b01      	subs	r3, #1
 800d328:	607b      	str	r3, [r7, #4]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d825      	bhi.n	800d37c <dec_lock+0x60>
		n = Files[i].ctr;
 800d330:	4a17      	ldr	r2, [pc, #92]	; (800d390 <dec_lock+0x74>)
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	011b      	lsls	r3, r3, #4
 800d336:	4413      	add	r3, r2
 800d338:	330c      	adds	r3, #12
 800d33a:	881b      	ldrh	r3, [r3, #0]
 800d33c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d33e:	89fb      	ldrh	r3, [r7, #14]
 800d340:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d344:	d101      	bne.n	800d34a <dec_lock+0x2e>
 800d346:	2300      	movs	r3, #0
 800d348:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d34a:	89fb      	ldrh	r3, [r7, #14]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d002      	beq.n	800d356 <dec_lock+0x3a>
 800d350:	89fb      	ldrh	r3, [r7, #14]
 800d352:	3b01      	subs	r3, #1
 800d354:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d356:	4a0e      	ldr	r2, [pc, #56]	; (800d390 <dec_lock+0x74>)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	011b      	lsls	r3, r3, #4
 800d35c:	4413      	add	r3, r2
 800d35e:	330c      	adds	r3, #12
 800d360:	89fa      	ldrh	r2, [r7, #14]
 800d362:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d364:	89fb      	ldrh	r3, [r7, #14]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d105      	bne.n	800d376 <dec_lock+0x5a>
 800d36a:	4a09      	ldr	r2, [pc, #36]	; (800d390 <dec_lock+0x74>)
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	011b      	lsls	r3, r3, #4
 800d370:	4413      	add	r3, r2
 800d372:	2200      	movs	r2, #0
 800d374:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d376:	2300      	movs	r3, #0
 800d378:	737b      	strb	r3, [r7, #13]
 800d37a:	e001      	b.n	800d380 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d37c:	2302      	movs	r3, #2
 800d37e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d380:	7b7b      	ldrb	r3, [r7, #13]
}
 800d382:	4618      	mov	r0, r3
 800d384:	3714      	adds	r7, #20
 800d386:	46bd      	mov	sp, r7
 800d388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38c:	4770      	bx	lr
 800d38e:	bf00      	nop
 800d390:	2000138c 	.word	0x2000138c

0800d394 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d394:	b480      	push	{r7}
 800d396:	b085      	sub	sp, #20
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d39c:	2300      	movs	r3, #0
 800d39e:	60fb      	str	r3, [r7, #12]
 800d3a0:	e010      	b.n	800d3c4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d3a2:	4a0d      	ldr	r2, [pc, #52]	; (800d3d8 <clear_lock+0x44>)
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	011b      	lsls	r3, r3, #4
 800d3a8:	4413      	add	r3, r2
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	687a      	ldr	r2, [r7, #4]
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	d105      	bne.n	800d3be <clear_lock+0x2a>
 800d3b2:	4a09      	ldr	r2, [pc, #36]	; (800d3d8 <clear_lock+0x44>)
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	011b      	lsls	r3, r3, #4
 800d3b8:	4413      	add	r3, r2
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	3301      	adds	r3, #1
 800d3c2:	60fb      	str	r3, [r7, #12]
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	2b01      	cmp	r3, #1
 800d3c8:	d9eb      	bls.n	800d3a2 <clear_lock+0xe>
	}
}
 800d3ca:	bf00      	nop
 800d3cc:	bf00      	nop
 800d3ce:	3714      	adds	r7, #20
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d6:	4770      	bx	lr
 800d3d8:	2000138c 	.word	0x2000138c

0800d3dc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b086      	sub	sp, #24
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	78db      	ldrb	r3, [r3, #3]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d034      	beq.n	800d45a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	7858      	ldrb	r0, [r3, #1]
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d400:	2301      	movs	r3, #1
 800d402:	697a      	ldr	r2, [r7, #20]
 800d404:	f7ff fd40 	bl	800ce88 <disk_write>
 800d408:	4603      	mov	r3, r0
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d002      	beq.n	800d414 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d40e:	2301      	movs	r3, #1
 800d410:	73fb      	strb	r3, [r7, #15]
 800d412:	e022      	b.n	800d45a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2200      	movs	r2, #0
 800d418:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6a1b      	ldr	r3, [r3, #32]
 800d41e:	697a      	ldr	r2, [r7, #20]
 800d420:	1ad2      	subs	r2, r2, r3
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	699b      	ldr	r3, [r3, #24]
 800d426:	429a      	cmp	r2, r3
 800d428:	d217      	bcs.n	800d45a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	789b      	ldrb	r3, [r3, #2]
 800d42e:	613b      	str	r3, [r7, #16]
 800d430:	e010      	b.n	800d454 <sync_window+0x78>
					wsect += fs->fsize;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	699b      	ldr	r3, [r3, #24]
 800d436:	697a      	ldr	r2, [r7, #20]
 800d438:	4413      	add	r3, r2
 800d43a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	7858      	ldrb	r0, [r3, #1]
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d446:	2301      	movs	r3, #1
 800d448:	697a      	ldr	r2, [r7, #20]
 800d44a:	f7ff fd1d 	bl	800ce88 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	3b01      	subs	r3, #1
 800d452:	613b      	str	r3, [r7, #16]
 800d454:	693b      	ldr	r3, [r7, #16]
 800d456:	2b01      	cmp	r3, #1
 800d458:	d8eb      	bhi.n	800d432 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d45a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3718      	adds	r7, #24
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}

0800d464 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b084      	sub	sp, #16
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d46e:	2300      	movs	r3, #0
 800d470:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d476:	683a      	ldr	r2, [r7, #0]
 800d478:	429a      	cmp	r2, r3
 800d47a:	d01b      	beq.n	800d4b4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f7ff ffad 	bl	800d3dc <sync_window>
 800d482:	4603      	mov	r3, r0
 800d484:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d486:	7bfb      	ldrb	r3, [r7, #15]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d113      	bne.n	800d4b4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	7858      	ldrb	r0, [r3, #1]
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d496:	2301      	movs	r3, #1
 800d498:	683a      	ldr	r2, [r7, #0]
 800d49a:	f7ff fcd5 	bl	800ce48 <disk_read>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d004      	beq.n	800d4ae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d4a4:	f04f 33ff 	mov.w	r3, #4294967295
 800d4a8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	683a      	ldr	r2, [r7, #0]
 800d4b2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800d4b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3710      	adds	r7, #16
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
	...

0800d4c0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b084      	sub	sp, #16
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f7ff ff87 	bl	800d3dc <sync_window>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d4d2:	7bfb      	ldrb	r3, [r7, #15]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d158      	bne.n	800d58a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	781b      	ldrb	r3, [r3, #0]
 800d4dc:	2b03      	cmp	r3, #3
 800d4de:	d148      	bne.n	800d572 <sync_fs+0xb2>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	791b      	ldrb	r3, [r3, #4]
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d144      	bne.n	800d572 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	3330      	adds	r3, #48	; 0x30
 800d4ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d4f0:	2100      	movs	r1, #0
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f7ff fda9 	bl	800d04a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	3330      	adds	r3, #48	; 0x30
 800d4fc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d500:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d504:	4618      	mov	r0, r3
 800d506:	f7ff fd38 	bl	800cf7a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	3330      	adds	r3, #48	; 0x30
 800d50e:	4921      	ldr	r1, [pc, #132]	; (800d594 <sync_fs+0xd4>)
 800d510:	4618      	mov	r0, r3
 800d512:	f7ff fd4d 	bl	800cfb0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	3330      	adds	r3, #48	; 0x30
 800d51a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d51e:	491e      	ldr	r1, [pc, #120]	; (800d598 <sync_fs+0xd8>)
 800d520:	4618      	mov	r0, r3
 800d522:	f7ff fd45 	bl	800cfb0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	3330      	adds	r3, #48	; 0x30
 800d52a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	691b      	ldr	r3, [r3, #16]
 800d532:	4619      	mov	r1, r3
 800d534:	4610      	mov	r0, r2
 800d536:	f7ff fd3b 	bl	800cfb0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	3330      	adds	r3, #48	; 0x30
 800d53e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	68db      	ldr	r3, [r3, #12]
 800d546:	4619      	mov	r1, r3
 800d548:	4610      	mov	r0, r2
 800d54a:	f7ff fd31 	bl	800cfb0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	69db      	ldr	r3, [r3, #28]
 800d552:	1c5a      	adds	r2, r3, #1
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	7858      	ldrb	r0, [r3, #1]
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d566:	2301      	movs	r3, #1
 800d568:	f7ff fc8e 	bl	800ce88 <disk_write>
			fs->fsi_flag = 0;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2200      	movs	r2, #0
 800d570:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	785b      	ldrb	r3, [r3, #1]
 800d576:	2200      	movs	r2, #0
 800d578:	2100      	movs	r1, #0
 800d57a:	4618      	mov	r0, r3
 800d57c:	f7ff fca4 	bl	800cec8 <disk_ioctl>
 800d580:	4603      	mov	r3, r0
 800d582:	2b00      	cmp	r3, #0
 800d584:	d001      	beq.n	800d58a <sync_fs+0xca>
 800d586:	2301      	movs	r3, #1
 800d588:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d58a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	3710      	adds	r7, #16
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}
 800d594:	41615252 	.word	0x41615252
 800d598:	61417272 	.word	0x61417272

0800d59c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b083      	sub	sp, #12
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	3b02      	subs	r3, #2
 800d5aa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	695b      	ldr	r3, [r3, #20]
 800d5b0:	3b02      	subs	r3, #2
 800d5b2:	683a      	ldr	r2, [r7, #0]
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d301      	bcc.n	800d5bc <clust2sect+0x20>
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	e008      	b.n	800d5ce <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	895b      	ldrh	r3, [r3, #10]
 800d5c0:	461a      	mov	r2, r3
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	fb03 f202 	mul.w	r2, r3, r2
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5cc:	4413      	add	r3, r2
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	370c      	adds	r7, #12
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d8:	4770      	bx	lr

0800d5da <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d5da:	b580      	push	{r7, lr}
 800d5dc:	b086      	sub	sp, #24
 800d5de:	af00      	add	r7, sp, #0
 800d5e0:	6078      	str	r0, [r7, #4]
 800d5e2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	2b01      	cmp	r3, #1
 800d5ee:	d904      	bls.n	800d5fa <get_fat+0x20>
 800d5f0:	693b      	ldr	r3, [r7, #16]
 800d5f2:	695b      	ldr	r3, [r3, #20]
 800d5f4:	683a      	ldr	r2, [r7, #0]
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d302      	bcc.n	800d600 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	617b      	str	r3, [r7, #20]
 800d5fe:	e08f      	b.n	800d720 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d600:	f04f 33ff 	mov.w	r3, #4294967295
 800d604:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d606:	693b      	ldr	r3, [r7, #16]
 800d608:	781b      	ldrb	r3, [r3, #0]
 800d60a:	2b03      	cmp	r3, #3
 800d60c:	d062      	beq.n	800d6d4 <get_fat+0xfa>
 800d60e:	2b03      	cmp	r3, #3
 800d610:	dc7c      	bgt.n	800d70c <get_fat+0x132>
 800d612:	2b01      	cmp	r3, #1
 800d614:	d002      	beq.n	800d61c <get_fat+0x42>
 800d616:	2b02      	cmp	r3, #2
 800d618:	d042      	beq.n	800d6a0 <get_fat+0xc6>
 800d61a:	e077      	b.n	800d70c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	60fb      	str	r3, [r7, #12]
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	085b      	lsrs	r3, r3, #1
 800d624:	68fa      	ldr	r2, [r7, #12]
 800d626:	4413      	add	r3, r2
 800d628:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d62a:	693b      	ldr	r3, [r7, #16]
 800d62c:	6a1a      	ldr	r2, [r3, #32]
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	0a5b      	lsrs	r3, r3, #9
 800d632:	4413      	add	r3, r2
 800d634:	4619      	mov	r1, r3
 800d636:	6938      	ldr	r0, [r7, #16]
 800d638:	f7ff ff14 	bl	800d464 <move_window>
 800d63c:	4603      	mov	r3, r0
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d167      	bne.n	800d712 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	1c5a      	adds	r2, r3, #1
 800d646:	60fa      	str	r2, [r7, #12]
 800d648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d64c:	693a      	ldr	r2, [r7, #16]
 800d64e:	4413      	add	r3, r2
 800d650:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d654:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	6a1a      	ldr	r2, [r3, #32]
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	0a5b      	lsrs	r3, r3, #9
 800d65e:	4413      	add	r3, r2
 800d660:	4619      	mov	r1, r3
 800d662:	6938      	ldr	r0, [r7, #16]
 800d664:	f7ff fefe 	bl	800d464 <move_window>
 800d668:	4603      	mov	r3, r0
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d153      	bne.n	800d716 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d674:	693a      	ldr	r2, [r7, #16]
 800d676:	4413      	add	r3, r2
 800d678:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d67c:	021b      	lsls	r3, r3, #8
 800d67e:	461a      	mov	r2, r3
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	4313      	orrs	r3, r2
 800d684:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	f003 0301 	and.w	r3, r3, #1
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d002      	beq.n	800d696 <get_fat+0xbc>
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	091b      	lsrs	r3, r3, #4
 800d694:	e002      	b.n	800d69c <get_fat+0xc2>
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d69c:	617b      	str	r3, [r7, #20]
			break;
 800d69e:	e03f      	b.n	800d720 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d6a0:	693b      	ldr	r3, [r7, #16]
 800d6a2:	6a1a      	ldr	r2, [r3, #32]
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	0a1b      	lsrs	r3, r3, #8
 800d6a8:	4413      	add	r3, r2
 800d6aa:	4619      	mov	r1, r3
 800d6ac:	6938      	ldr	r0, [r7, #16]
 800d6ae:	f7ff fed9 	bl	800d464 <move_window>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d130      	bne.n	800d71a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d6b8:	693b      	ldr	r3, [r7, #16]
 800d6ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	005b      	lsls	r3, r3, #1
 800d6c2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d6c6:	4413      	add	r3, r2
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7ff fc1b 	bl	800cf04 <ld_word>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	617b      	str	r3, [r7, #20]
			break;
 800d6d2:	e025      	b.n	800d720 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	6a1a      	ldr	r2, [r3, #32]
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	09db      	lsrs	r3, r3, #7
 800d6dc:	4413      	add	r3, r2
 800d6de:	4619      	mov	r1, r3
 800d6e0:	6938      	ldr	r0, [r7, #16]
 800d6e2:	f7ff febf 	bl	800d464 <move_window>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d118      	bne.n	800d71e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	009b      	lsls	r3, r3, #2
 800d6f6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d6fa:	4413      	add	r3, r2
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f7ff fc19 	bl	800cf34 <ld_dword>
 800d702:	4603      	mov	r3, r0
 800d704:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d708:	617b      	str	r3, [r7, #20]
			break;
 800d70a:	e009      	b.n	800d720 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d70c:	2301      	movs	r3, #1
 800d70e:	617b      	str	r3, [r7, #20]
 800d710:	e006      	b.n	800d720 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d712:	bf00      	nop
 800d714:	e004      	b.n	800d720 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d716:	bf00      	nop
 800d718:	e002      	b.n	800d720 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d71a:	bf00      	nop
 800d71c:	e000      	b.n	800d720 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d71e:	bf00      	nop
		}
	}

	return val;
 800d720:	697b      	ldr	r3, [r7, #20]
}
 800d722:	4618      	mov	r0, r3
 800d724:	3718      	adds	r7, #24
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}

0800d72a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d72a:	b590      	push	{r4, r7, lr}
 800d72c:	b089      	sub	sp, #36	; 0x24
 800d72e:	af00      	add	r7, sp, #0
 800d730:	60f8      	str	r0, [r7, #12]
 800d732:	60b9      	str	r1, [r7, #8]
 800d734:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d736:	2302      	movs	r3, #2
 800d738:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	2b01      	cmp	r3, #1
 800d73e:	f240 80d2 	bls.w	800d8e6 <put_fat+0x1bc>
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	695b      	ldr	r3, [r3, #20]
 800d746:	68ba      	ldr	r2, [r7, #8]
 800d748:	429a      	cmp	r2, r3
 800d74a:	f080 80cc 	bcs.w	800d8e6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	781b      	ldrb	r3, [r3, #0]
 800d752:	2b03      	cmp	r3, #3
 800d754:	f000 8096 	beq.w	800d884 <put_fat+0x15a>
 800d758:	2b03      	cmp	r3, #3
 800d75a:	f300 80cd 	bgt.w	800d8f8 <put_fat+0x1ce>
 800d75e:	2b01      	cmp	r3, #1
 800d760:	d002      	beq.n	800d768 <put_fat+0x3e>
 800d762:	2b02      	cmp	r3, #2
 800d764:	d06e      	beq.n	800d844 <put_fat+0x11a>
 800d766:	e0c7      	b.n	800d8f8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	61bb      	str	r3, [r7, #24]
 800d76c:	69bb      	ldr	r3, [r7, #24]
 800d76e:	085b      	lsrs	r3, r3, #1
 800d770:	69ba      	ldr	r2, [r7, #24]
 800d772:	4413      	add	r3, r2
 800d774:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	6a1a      	ldr	r2, [r3, #32]
 800d77a:	69bb      	ldr	r3, [r7, #24]
 800d77c:	0a5b      	lsrs	r3, r3, #9
 800d77e:	4413      	add	r3, r2
 800d780:	4619      	mov	r1, r3
 800d782:	68f8      	ldr	r0, [r7, #12]
 800d784:	f7ff fe6e 	bl	800d464 <move_window>
 800d788:	4603      	mov	r3, r0
 800d78a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d78c:	7ffb      	ldrb	r3, [r7, #31]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	f040 80ab 	bne.w	800d8ea <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d79a:	69bb      	ldr	r3, [r7, #24]
 800d79c:	1c59      	adds	r1, r3, #1
 800d79e:	61b9      	str	r1, [r7, #24]
 800d7a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7a4:	4413      	add	r3, r2
 800d7a6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	f003 0301 	and.w	r3, r3, #1
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d00d      	beq.n	800d7ce <put_fat+0xa4>
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	781b      	ldrb	r3, [r3, #0]
 800d7b6:	b25b      	sxtb	r3, r3
 800d7b8:	f003 030f 	and.w	r3, r3, #15
 800d7bc:	b25a      	sxtb	r2, r3
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	b2db      	uxtb	r3, r3
 800d7c2:	011b      	lsls	r3, r3, #4
 800d7c4:	b25b      	sxtb	r3, r3
 800d7c6:	4313      	orrs	r3, r2
 800d7c8:	b25b      	sxtb	r3, r3
 800d7ca:	b2db      	uxtb	r3, r3
 800d7cc:	e001      	b.n	800d7d2 <put_fat+0xa8>
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	b2db      	uxtb	r3, r3
 800d7d2:	697a      	ldr	r2, [r7, #20]
 800d7d4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	2201      	movs	r2, #1
 800d7da:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	6a1a      	ldr	r2, [r3, #32]
 800d7e0:	69bb      	ldr	r3, [r7, #24]
 800d7e2:	0a5b      	lsrs	r3, r3, #9
 800d7e4:	4413      	add	r3, r2
 800d7e6:	4619      	mov	r1, r3
 800d7e8:	68f8      	ldr	r0, [r7, #12]
 800d7ea:	f7ff fe3b 	bl	800d464 <move_window>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d7f2:	7ffb      	ldrb	r3, [r7, #31]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d17a      	bne.n	800d8ee <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d7fe:	69bb      	ldr	r3, [r7, #24]
 800d800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d804:	4413      	add	r3, r2
 800d806:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	f003 0301 	and.w	r3, r3, #1
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d003      	beq.n	800d81a <put_fat+0xf0>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	091b      	lsrs	r3, r3, #4
 800d816:	b2db      	uxtb	r3, r3
 800d818:	e00e      	b.n	800d838 <put_fat+0x10e>
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	781b      	ldrb	r3, [r3, #0]
 800d81e:	b25b      	sxtb	r3, r3
 800d820:	f023 030f 	bic.w	r3, r3, #15
 800d824:	b25a      	sxtb	r2, r3
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	0a1b      	lsrs	r3, r3, #8
 800d82a:	b25b      	sxtb	r3, r3
 800d82c:	f003 030f 	and.w	r3, r3, #15
 800d830:	b25b      	sxtb	r3, r3
 800d832:	4313      	orrs	r3, r2
 800d834:	b25b      	sxtb	r3, r3
 800d836:	b2db      	uxtb	r3, r3
 800d838:	697a      	ldr	r2, [r7, #20]
 800d83a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	2201      	movs	r2, #1
 800d840:	70da      	strb	r2, [r3, #3]
			break;
 800d842:	e059      	b.n	800d8f8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	6a1a      	ldr	r2, [r3, #32]
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	0a1b      	lsrs	r3, r3, #8
 800d84c:	4413      	add	r3, r2
 800d84e:	4619      	mov	r1, r3
 800d850:	68f8      	ldr	r0, [r7, #12]
 800d852:	f7ff fe07 	bl	800d464 <move_window>
 800d856:	4603      	mov	r3, r0
 800d858:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d85a:	7ffb      	ldrb	r3, [r7, #31]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d148      	bne.n	800d8f2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	005b      	lsls	r3, r3, #1
 800d86a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d86e:	4413      	add	r3, r2
 800d870:	687a      	ldr	r2, [r7, #4]
 800d872:	b292      	uxth	r2, r2
 800d874:	4611      	mov	r1, r2
 800d876:	4618      	mov	r0, r3
 800d878:	f7ff fb7f 	bl	800cf7a <st_word>
			fs->wflag = 1;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	2201      	movs	r2, #1
 800d880:	70da      	strb	r2, [r3, #3]
			break;
 800d882:	e039      	b.n	800d8f8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	6a1a      	ldr	r2, [r3, #32]
 800d888:	68bb      	ldr	r3, [r7, #8]
 800d88a:	09db      	lsrs	r3, r3, #7
 800d88c:	4413      	add	r3, r2
 800d88e:	4619      	mov	r1, r3
 800d890:	68f8      	ldr	r0, [r7, #12]
 800d892:	f7ff fde7 	bl	800d464 <move_window>
 800d896:	4603      	mov	r3, r0
 800d898:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d89a:	7ffb      	ldrb	r3, [r7, #31]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d12a      	bne.n	800d8f6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	009b      	lsls	r3, r3, #2
 800d8b0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d8b4:	4413      	add	r3, r2
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f7ff fb3c 	bl	800cf34 <ld_dword>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d8c2:	4323      	orrs	r3, r4
 800d8c4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	009b      	lsls	r3, r3, #2
 800d8d0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d8d4:	4413      	add	r3, r2
 800d8d6:	6879      	ldr	r1, [r7, #4]
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f7ff fb69 	bl	800cfb0 <st_dword>
			fs->wflag = 1;
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	2201      	movs	r2, #1
 800d8e2:	70da      	strb	r2, [r3, #3]
			break;
 800d8e4:	e008      	b.n	800d8f8 <put_fat+0x1ce>
		}
	}
 800d8e6:	bf00      	nop
 800d8e8:	e006      	b.n	800d8f8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d8ea:	bf00      	nop
 800d8ec:	e004      	b.n	800d8f8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d8ee:	bf00      	nop
 800d8f0:	e002      	b.n	800d8f8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d8f2:	bf00      	nop
 800d8f4:	e000      	b.n	800d8f8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d8f6:	bf00      	nop
	return res;
 800d8f8:	7ffb      	ldrb	r3, [r7, #31]
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3724      	adds	r7, #36	; 0x24
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd90      	pop	{r4, r7, pc}

0800d902 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d902:	b580      	push	{r7, lr}
 800d904:	b088      	sub	sp, #32
 800d906:	af00      	add	r7, sp, #0
 800d908:	60f8      	str	r0, [r7, #12]
 800d90a:	60b9      	str	r1, [r7, #8]
 800d90c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d90e:	2300      	movs	r3, #0
 800d910:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	2b01      	cmp	r3, #1
 800d91c:	d904      	bls.n	800d928 <remove_chain+0x26>
 800d91e:	69bb      	ldr	r3, [r7, #24]
 800d920:	695b      	ldr	r3, [r3, #20]
 800d922:	68ba      	ldr	r2, [r7, #8]
 800d924:	429a      	cmp	r2, r3
 800d926:	d301      	bcc.n	800d92c <remove_chain+0x2a>
 800d928:	2302      	movs	r3, #2
 800d92a:	e04b      	b.n	800d9c4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d00c      	beq.n	800d94c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d932:	f04f 32ff 	mov.w	r2, #4294967295
 800d936:	6879      	ldr	r1, [r7, #4]
 800d938:	69b8      	ldr	r0, [r7, #24]
 800d93a:	f7ff fef6 	bl	800d72a <put_fat>
 800d93e:	4603      	mov	r3, r0
 800d940:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d942:	7ffb      	ldrb	r3, [r7, #31]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d001      	beq.n	800d94c <remove_chain+0x4a>
 800d948:	7ffb      	ldrb	r3, [r7, #31]
 800d94a:	e03b      	b.n	800d9c4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d94c:	68b9      	ldr	r1, [r7, #8]
 800d94e:	68f8      	ldr	r0, [r7, #12]
 800d950:	f7ff fe43 	bl	800d5da <get_fat>
 800d954:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d031      	beq.n	800d9c0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	2b01      	cmp	r3, #1
 800d960:	d101      	bne.n	800d966 <remove_chain+0x64>
 800d962:	2302      	movs	r3, #2
 800d964:	e02e      	b.n	800d9c4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d96c:	d101      	bne.n	800d972 <remove_chain+0x70>
 800d96e:	2301      	movs	r3, #1
 800d970:	e028      	b.n	800d9c4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d972:	2200      	movs	r2, #0
 800d974:	68b9      	ldr	r1, [r7, #8]
 800d976:	69b8      	ldr	r0, [r7, #24]
 800d978:	f7ff fed7 	bl	800d72a <put_fat>
 800d97c:	4603      	mov	r3, r0
 800d97e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d980:	7ffb      	ldrb	r3, [r7, #31]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d001      	beq.n	800d98a <remove_chain+0x88>
 800d986:	7ffb      	ldrb	r3, [r7, #31]
 800d988:	e01c      	b.n	800d9c4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d98a:	69bb      	ldr	r3, [r7, #24]
 800d98c:	691a      	ldr	r2, [r3, #16]
 800d98e:	69bb      	ldr	r3, [r7, #24]
 800d990:	695b      	ldr	r3, [r3, #20]
 800d992:	3b02      	subs	r3, #2
 800d994:	429a      	cmp	r2, r3
 800d996:	d20b      	bcs.n	800d9b0 <remove_chain+0xae>
			fs->free_clst++;
 800d998:	69bb      	ldr	r3, [r7, #24]
 800d99a:	691b      	ldr	r3, [r3, #16]
 800d99c:	1c5a      	adds	r2, r3, #1
 800d99e:	69bb      	ldr	r3, [r7, #24]
 800d9a0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d9a2:	69bb      	ldr	r3, [r7, #24]
 800d9a4:	791b      	ldrb	r3, [r3, #4]
 800d9a6:	f043 0301 	orr.w	r3, r3, #1
 800d9aa:	b2da      	uxtb	r2, r3
 800d9ac:	69bb      	ldr	r3, [r7, #24]
 800d9ae:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d9b4:	69bb      	ldr	r3, [r7, #24]
 800d9b6:	695b      	ldr	r3, [r3, #20]
 800d9b8:	68ba      	ldr	r2, [r7, #8]
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	d3c6      	bcc.n	800d94c <remove_chain+0x4a>
 800d9be:	e000      	b.n	800d9c2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d9c0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d9c2:	2300      	movs	r3, #0
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3720      	adds	r7, #32
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}

0800d9cc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b088      	sub	sp, #32
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
 800d9d4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d10d      	bne.n	800d9fe <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d9e2:	693b      	ldr	r3, [r7, #16]
 800d9e4:	68db      	ldr	r3, [r3, #12]
 800d9e6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d9e8:	69bb      	ldr	r3, [r7, #24]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d004      	beq.n	800d9f8 <create_chain+0x2c>
 800d9ee:	693b      	ldr	r3, [r7, #16]
 800d9f0:	695b      	ldr	r3, [r3, #20]
 800d9f2:	69ba      	ldr	r2, [r7, #24]
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d31b      	bcc.n	800da30 <create_chain+0x64>
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	61bb      	str	r3, [r7, #24]
 800d9fc:	e018      	b.n	800da30 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d9fe:	6839      	ldr	r1, [r7, #0]
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f7ff fdea 	bl	800d5da <get_fat>
 800da06:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	2b01      	cmp	r3, #1
 800da0c:	d801      	bhi.n	800da12 <create_chain+0x46>
 800da0e:	2301      	movs	r3, #1
 800da10:	e070      	b.n	800daf4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da18:	d101      	bne.n	800da1e <create_chain+0x52>
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	e06a      	b.n	800daf4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	695b      	ldr	r3, [r3, #20]
 800da22:	68fa      	ldr	r2, [r7, #12]
 800da24:	429a      	cmp	r2, r3
 800da26:	d201      	bcs.n	800da2c <create_chain+0x60>
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	e063      	b.n	800daf4 <create_chain+0x128>
		scl = clst;
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800da30:	69bb      	ldr	r3, [r7, #24]
 800da32:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800da34:	69fb      	ldr	r3, [r7, #28]
 800da36:	3301      	adds	r3, #1
 800da38:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	695b      	ldr	r3, [r3, #20]
 800da3e:	69fa      	ldr	r2, [r7, #28]
 800da40:	429a      	cmp	r2, r3
 800da42:	d307      	bcc.n	800da54 <create_chain+0x88>
				ncl = 2;
 800da44:	2302      	movs	r3, #2
 800da46:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800da48:	69fa      	ldr	r2, [r7, #28]
 800da4a:	69bb      	ldr	r3, [r7, #24]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d901      	bls.n	800da54 <create_chain+0x88>
 800da50:	2300      	movs	r3, #0
 800da52:	e04f      	b.n	800daf4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800da54:	69f9      	ldr	r1, [r7, #28]
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f7ff fdbf 	bl	800d5da <get_fat>
 800da5c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d00e      	beq.n	800da82 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	2b01      	cmp	r3, #1
 800da68:	d003      	beq.n	800da72 <create_chain+0xa6>
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da70:	d101      	bne.n	800da76 <create_chain+0xaa>
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	e03e      	b.n	800daf4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800da76:	69fa      	ldr	r2, [r7, #28]
 800da78:	69bb      	ldr	r3, [r7, #24]
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d1da      	bne.n	800da34 <create_chain+0x68>
 800da7e:	2300      	movs	r3, #0
 800da80:	e038      	b.n	800daf4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800da82:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800da84:	f04f 32ff 	mov.w	r2, #4294967295
 800da88:	69f9      	ldr	r1, [r7, #28]
 800da8a:	6938      	ldr	r0, [r7, #16]
 800da8c:	f7ff fe4d 	bl	800d72a <put_fat>
 800da90:	4603      	mov	r3, r0
 800da92:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800da94:	7dfb      	ldrb	r3, [r7, #23]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d109      	bne.n	800daae <create_chain+0xe2>
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d006      	beq.n	800daae <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800daa0:	69fa      	ldr	r2, [r7, #28]
 800daa2:	6839      	ldr	r1, [r7, #0]
 800daa4:	6938      	ldr	r0, [r7, #16]
 800daa6:	f7ff fe40 	bl	800d72a <put_fat>
 800daaa:	4603      	mov	r3, r0
 800daac:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800daae:	7dfb      	ldrb	r3, [r7, #23]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d116      	bne.n	800dae2 <create_chain+0x116>
		fs->last_clst = ncl;
 800dab4:	693b      	ldr	r3, [r7, #16]
 800dab6:	69fa      	ldr	r2, [r7, #28]
 800dab8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	691a      	ldr	r2, [r3, #16]
 800dabe:	693b      	ldr	r3, [r7, #16]
 800dac0:	695b      	ldr	r3, [r3, #20]
 800dac2:	3b02      	subs	r3, #2
 800dac4:	429a      	cmp	r2, r3
 800dac6:	d804      	bhi.n	800dad2 <create_chain+0x106>
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	691b      	ldr	r3, [r3, #16]
 800dacc:	1e5a      	subs	r2, r3, #1
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800dad2:	693b      	ldr	r3, [r7, #16]
 800dad4:	791b      	ldrb	r3, [r3, #4]
 800dad6:	f043 0301 	orr.w	r3, r3, #1
 800dada:	b2da      	uxtb	r2, r3
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	711a      	strb	r2, [r3, #4]
 800dae0:	e007      	b.n	800daf2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800dae2:	7dfb      	ldrb	r3, [r7, #23]
 800dae4:	2b01      	cmp	r3, #1
 800dae6:	d102      	bne.n	800daee <create_chain+0x122>
 800dae8:	f04f 33ff 	mov.w	r3, #4294967295
 800daec:	e000      	b.n	800daf0 <create_chain+0x124>
 800daee:	2301      	movs	r3, #1
 800daf0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800daf2:	69fb      	ldr	r3, [r7, #28]
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3720      	adds	r7, #32
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b087      	sub	sp, #28
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db10:	3304      	adds	r3, #4
 800db12:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	0a5b      	lsrs	r3, r3, #9
 800db18:	68fa      	ldr	r2, [r7, #12]
 800db1a:	8952      	ldrh	r2, [r2, #10]
 800db1c:	fbb3 f3f2 	udiv	r3, r3, r2
 800db20:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	1d1a      	adds	r2, r3, #4
 800db26:	613a      	str	r2, [r7, #16]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d101      	bne.n	800db36 <clmt_clust+0x3a>
 800db32:	2300      	movs	r3, #0
 800db34:	e010      	b.n	800db58 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800db36:	697a      	ldr	r2, [r7, #20]
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	429a      	cmp	r2, r3
 800db3c:	d307      	bcc.n	800db4e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800db3e:	697a      	ldr	r2, [r7, #20]
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	1ad3      	subs	r3, r2, r3
 800db44:	617b      	str	r3, [r7, #20]
 800db46:	693b      	ldr	r3, [r7, #16]
 800db48:	3304      	adds	r3, #4
 800db4a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800db4c:	e7e9      	b.n	800db22 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800db4e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800db50:	693b      	ldr	r3, [r7, #16]
 800db52:	681a      	ldr	r2, [r3, #0]
 800db54:	697b      	ldr	r3, [r7, #20]
 800db56:	4413      	add	r3, r2
}
 800db58:	4618      	mov	r0, r3
 800db5a:	371c      	adds	r7, #28
 800db5c:	46bd      	mov	sp, r7
 800db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db62:	4770      	bx	lr

0800db64 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b086      	sub	sp, #24
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
 800db6c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800db7a:	d204      	bcs.n	800db86 <dir_sdi+0x22>
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	f003 031f 	and.w	r3, r3, #31
 800db82:	2b00      	cmp	r3, #0
 800db84:	d001      	beq.n	800db8a <dir_sdi+0x26>
		return FR_INT_ERR;
 800db86:	2302      	movs	r3, #2
 800db88:	e063      	b.n	800dc52 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	683a      	ldr	r2, [r7, #0]
 800db8e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	689b      	ldr	r3, [r3, #8]
 800db94:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d106      	bne.n	800dbaa <dir_sdi+0x46>
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	2b02      	cmp	r3, #2
 800dba2:	d902      	bls.n	800dbaa <dir_sdi+0x46>
		clst = fs->dirbase;
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dba8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d10c      	bne.n	800dbca <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	095b      	lsrs	r3, r3, #5
 800dbb4:	693a      	ldr	r2, [r7, #16]
 800dbb6:	8912      	ldrh	r2, [r2, #8]
 800dbb8:	4293      	cmp	r3, r2
 800dbba:	d301      	bcc.n	800dbc0 <dir_sdi+0x5c>
 800dbbc:	2302      	movs	r3, #2
 800dbbe:	e048      	b.n	800dc52 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800dbc0:	693b      	ldr	r3, [r7, #16]
 800dbc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	61da      	str	r2, [r3, #28]
 800dbc8:	e029      	b.n	800dc1e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	895b      	ldrh	r3, [r3, #10]
 800dbce:	025b      	lsls	r3, r3, #9
 800dbd0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dbd2:	e019      	b.n	800dc08 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6979      	ldr	r1, [r7, #20]
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f7ff fcfe 	bl	800d5da <get_fat>
 800dbde:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbe6:	d101      	bne.n	800dbec <dir_sdi+0x88>
 800dbe8:	2301      	movs	r3, #1
 800dbea:	e032      	b.n	800dc52 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	2b01      	cmp	r3, #1
 800dbf0:	d904      	bls.n	800dbfc <dir_sdi+0x98>
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	695b      	ldr	r3, [r3, #20]
 800dbf6:	697a      	ldr	r2, [r7, #20]
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d301      	bcc.n	800dc00 <dir_sdi+0x9c>
 800dbfc:	2302      	movs	r3, #2
 800dbfe:	e028      	b.n	800dc52 <dir_sdi+0xee>
			ofs -= csz;
 800dc00:	683a      	ldr	r2, [r7, #0]
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	1ad3      	subs	r3, r2, r3
 800dc06:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dc08:	683a      	ldr	r2, [r7, #0]
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	d2e1      	bcs.n	800dbd4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800dc10:	6979      	ldr	r1, [r7, #20]
 800dc12:	6938      	ldr	r0, [r7, #16]
 800dc14:	f7ff fcc2 	bl	800d59c <clust2sect>
 800dc18:	4602      	mov	r2, r0
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	697a      	ldr	r2, [r7, #20]
 800dc22:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	69db      	ldr	r3, [r3, #28]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d101      	bne.n	800dc30 <dir_sdi+0xcc>
 800dc2c:	2302      	movs	r3, #2
 800dc2e:	e010      	b.n	800dc52 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	69da      	ldr	r2, [r3, #28]
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	0a5b      	lsrs	r3, r3, #9
 800dc38:	441a      	add	r2, r3
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc4a:	441a      	add	r2, r3
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dc50:	2300      	movs	r3, #0
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3718      	adds	r7, #24
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}

0800dc5a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800dc5a:	b580      	push	{r7, lr}
 800dc5c:	b086      	sub	sp, #24
 800dc5e:	af00      	add	r7, sp, #0
 800dc60:	6078      	str	r0, [r7, #4]
 800dc62:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	695b      	ldr	r3, [r3, #20]
 800dc6e:	3320      	adds	r3, #32
 800dc70:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	69db      	ldr	r3, [r3, #28]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d003      	beq.n	800dc82 <dir_next+0x28>
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dc80:	d301      	bcc.n	800dc86 <dir_next+0x2c>
 800dc82:	2304      	movs	r3, #4
 800dc84:	e0aa      	b.n	800dddc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	f040 8098 	bne.w	800ddc2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	69db      	ldr	r3, [r3, #28]
 800dc96:	1c5a      	adds	r2, r3, #1
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	699b      	ldr	r3, [r3, #24]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d10b      	bne.n	800dcbc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	095b      	lsrs	r3, r3, #5
 800dca8:	68fa      	ldr	r2, [r7, #12]
 800dcaa:	8912      	ldrh	r2, [r2, #8]
 800dcac:	4293      	cmp	r3, r2
 800dcae:	f0c0 8088 	bcc.w	800ddc2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	61da      	str	r2, [r3, #28]
 800dcb8:	2304      	movs	r3, #4
 800dcba:	e08f      	b.n	800dddc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	0a5b      	lsrs	r3, r3, #9
 800dcc0:	68fa      	ldr	r2, [r7, #12]
 800dcc2:	8952      	ldrh	r2, [r2, #10]
 800dcc4:	3a01      	subs	r2, #1
 800dcc6:	4013      	ands	r3, r2
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d17a      	bne.n	800ddc2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800dccc:	687a      	ldr	r2, [r7, #4]
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	699b      	ldr	r3, [r3, #24]
 800dcd2:	4619      	mov	r1, r3
 800dcd4:	4610      	mov	r0, r2
 800dcd6:	f7ff fc80 	bl	800d5da <get_fat>
 800dcda:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800dcdc:	697b      	ldr	r3, [r7, #20]
 800dcde:	2b01      	cmp	r3, #1
 800dce0:	d801      	bhi.n	800dce6 <dir_next+0x8c>
 800dce2:	2302      	movs	r3, #2
 800dce4:	e07a      	b.n	800dddc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800dce6:	697b      	ldr	r3, [r7, #20]
 800dce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcec:	d101      	bne.n	800dcf2 <dir_next+0x98>
 800dcee:	2301      	movs	r3, #1
 800dcf0:	e074      	b.n	800dddc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	695b      	ldr	r3, [r3, #20]
 800dcf6:	697a      	ldr	r2, [r7, #20]
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d358      	bcc.n	800ddae <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d104      	bne.n	800dd0c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2200      	movs	r2, #0
 800dd06:	61da      	str	r2, [r3, #28]
 800dd08:	2304      	movs	r3, #4
 800dd0a:	e067      	b.n	800dddc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800dd0c:	687a      	ldr	r2, [r7, #4]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	699b      	ldr	r3, [r3, #24]
 800dd12:	4619      	mov	r1, r3
 800dd14:	4610      	mov	r0, r2
 800dd16:	f7ff fe59 	bl	800d9cc <create_chain>
 800dd1a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d101      	bne.n	800dd26 <dir_next+0xcc>
 800dd22:	2307      	movs	r3, #7
 800dd24:	e05a      	b.n	800dddc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	2b01      	cmp	r3, #1
 800dd2a:	d101      	bne.n	800dd30 <dir_next+0xd6>
 800dd2c:	2302      	movs	r3, #2
 800dd2e:	e055      	b.n	800dddc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd36:	d101      	bne.n	800dd3c <dir_next+0xe2>
 800dd38:	2301      	movs	r3, #1
 800dd3a:	e04f      	b.n	800dddc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800dd3c:	68f8      	ldr	r0, [r7, #12]
 800dd3e:	f7ff fb4d 	bl	800d3dc <sync_window>
 800dd42:	4603      	mov	r3, r0
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d001      	beq.n	800dd4c <dir_next+0xf2>
 800dd48:	2301      	movs	r3, #1
 800dd4a:	e047      	b.n	800dddc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	3330      	adds	r3, #48	; 0x30
 800dd50:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dd54:	2100      	movs	r1, #0
 800dd56:	4618      	mov	r0, r3
 800dd58:	f7ff f977 	bl	800d04a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	613b      	str	r3, [r7, #16]
 800dd60:	6979      	ldr	r1, [r7, #20]
 800dd62:	68f8      	ldr	r0, [r7, #12]
 800dd64:	f7ff fc1a 	bl	800d59c <clust2sect>
 800dd68:	4602      	mov	r2, r0
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	62da      	str	r2, [r3, #44]	; 0x2c
 800dd6e:	e012      	b.n	800dd96 <dir_next+0x13c>
						fs->wflag = 1;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	2201      	movs	r2, #1
 800dd74:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800dd76:	68f8      	ldr	r0, [r7, #12]
 800dd78:	f7ff fb30 	bl	800d3dc <sync_window>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d001      	beq.n	800dd86 <dir_next+0x12c>
 800dd82:	2301      	movs	r3, #1
 800dd84:	e02a      	b.n	800dddc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dd86:	693b      	ldr	r3, [r7, #16]
 800dd88:	3301      	adds	r3, #1
 800dd8a:	613b      	str	r3, [r7, #16]
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd90:	1c5a      	adds	r2, r3, #1
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	62da      	str	r2, [r3, #44]	; 0x2c
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	895b      	ldrh	r3, [r3, #10]
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	693b      	ldr	r3, [r7, #16]
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	d3e6      	bcc.n	800dd70 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	1ad2      	subs	r2, r2, r3
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	697a      	ldr	r2, [r7, #20]
 800ddb2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ddb4:	6979      	ldr	r1, [r7, #20]
 800ddb6:	68f8      	ldr	r0, [r7, #12]
 800ddb8:	f7ff fbf0 	bl	800d59c <clust2sect>
 800ddbc:	4602      	mov	r2, r0
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	68ba      	ldr	r2, [r7, #8]
 800ddc6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddd4:	441a      	add	r2, r3
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ddda:	2300      	movs	r3, #0
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3718      	adds	r7, #24
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b086      	sub	sp, #24
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ddf4:	2100      	movs	r1, #0
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f7ff feb4 	bl	800db64 <dir_sdi>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800de00:	7dfb      	ldrb	r3, [r7, #23]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d12b      	bne.n	800de5e <dir_alloc+0x7a>
		n = 0;
 800de06:	2300      	movs	r3, #0
 800de08:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	69db      	ldr	r3, [r3, #28]
 800de0e:	4619      	mov	r1, r3
 800de10:	68f8      	ldr	r0, [r7, #12]
 800de12:	f7ff fb27 	bl	800d464 <move_window>
 800de16:	4603      	mov	r3, r0
 800de18:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800de1a:	7dfb      	ldrb	r3, [r7, #23]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d11d      	bne.n	800de5c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6a1b      	ldr	r3, [r3, #32]
 800de24:	781b      	ldrb	r3, [r3, #0]
 800de26:	2be5      	cmp	r3, #229	; 0xe5
 800de28:	d004      	beq.n	800de34 <dir_alloc+0x50>
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6a1b      	ldr	r3, [r3, #32]
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d107      	bne.n	800de44 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	3301      	adds	r3, #1
 800de38:	613b      	str	r3, [r7, #16]
 800de3a:	693a      	ldr	r2, [r7, #16]
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	429a      	cmp	r2, r3
 800de40:	d102      	bne.n	800de48 <dir_alloc+0x64>
 800de42:	e00c      	b.n	800de5e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800de44:	2300      	movs	r3, #0
 800de46:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800de48:	2101      	movs	r1, #1
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f7ff ff05 	bl	800dc5a <dir_next>
 800de50:	4603      	mov	r3, r0
 800de52:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800de54:	7dfb      	ldrb	r3, [r7, #23]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d0d7      	beq.n	800de0a <dir_alloc+0x26>
 800de5a:	e000      	b.n	800de5e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800de5c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800de5e:	7dfb      	ldrb	r3, [r7, #23]
 800de60:	2b04      	cmp	r3, #4
 800de62:	d101      	bne.n	800de68 <dir_alloc+0x84>
 800de64:	2307      	movs	r3, #7
 800de66:	75fb      	strb	r3, [r7, #23]
	return res;
 800de68:	7dfb      	ldrb	r3, [r7, #23]
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3718      	adds	r7, #24
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}

0800de72 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800de72:	b580      	push	{r7, lr}
 800de74:	b084      	sub	sp, #16
 800de76:	af00      	add	r7, sp, #0
 800de78:	6078      	str	r0, [r7, #4]
 800de7a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	331a      	adds	r3, #26
 800de80:	4618      	mov	r0, r3
 800de82:	f7ff f83f 	bl	800cf04 <ld_word>
 800de86:	4603      	mov	r3, r0
 800de88:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	781b      	ldrb	r3, [r3, #0]
 800de8e:	2b03      	cmp	r3, #3
 800de90:	d109      	bne.n	800dea6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	3314      	adds	r3, #20
 800de96:	4618      	mov	r0, r3
 800de98:	f7ff f834 	bl	800cf04 <ld_word>
 800de9c:	4603      	mov	r3, r0
 800de9e:	041b      	lsls	r3, r3, #16
 800dea0:	68fa      	ldr	r2, [r7, #12]
 800dea2:	4313      	orrs	r3, r2
 800dea4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800dea6:	68fb      	ldr	r3, [r7, #12]
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	3710      	adds	r7, #16
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}

0800deb0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b084      	sub	sp, #16
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	60f8      	str	r0, [r7, #12]
 800deb8:	60b9      	str	r1, [r7, #8]
 800deba:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	331a      	adds	r3, #26
 800dec0:	687a      	ldr	r2, [r7, #4]
 800dec2:	b292      	uxth	r2, r2
 800dec4:	4611      	mov	r1, r2
 800dec6:	4618      	mov	r0, r3
 800dec8:	f7ff f857 	bl	800cf7a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	781b      	ldrb	r3, [r3, #0]
 800ded0:	2b03      	cmp	r3, #3
 800ded2:	d109      	bne.n	800dee8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	f103 0214 	add.w	r2, r3, #20
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	0c1b      	lsrs	r3, r3, #16
 800dede:	b29b      	uxth	r3, r3
 800dee0:	4619      	mov	r1, r3
 800dee2:	4610      	mov	r0, r2
 800dee4:	f7ff f849 	bl	800cf7a <st_word>
	}
}
 800dee8:	bf00      	nop
 800deea:	3710      	adds	r7, #16
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}

0800def0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b086      	sub	sp, #24
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800defe:	2100      	movs	r1, #0
 800df00:	6878      	ldr	r0, [r7, #4]
 800df02:	f7ff fe2f 	bl	800db64 <dir_sdi>
 800df06:	4603      	mov	r3, r0
 800df08:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800df0a:	7dfb      	ldrb	r3, [r7, #23]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d001      	beq.n	800df14 <dir_find+0x24>
 800df10:	7dfb      	ldrb	r3, [r7, #23]
 800df12:	e03e      	b.n	800df92 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	69db      	ldr	r3, [r3, #28]
 800df18:	4619      	mov	r1, r3
 800df1a:	6938      	ldr	r0, [r7, #16]
 800df1c:	f7ff faa2 	bl	800d464 <move_window>
 800df20:	4603      	mov	r3, r0
 800df22:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800df24:	7dfb      	ldrb	r3, [r7, #23]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d12f      	bne.n	800df8a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	6a1b      	ldr	r3, [r3, #32]
 800df2e:	781b      	ldrb	r3, [r3, #0]
 800df30:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800df32:	7bfb      	ldrb	r3, [r7, #15]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d102      	bne.n	800df3e <dir_find+0x4e>
 800df38:	2304      	movs	r3, #4
 800df3a:	75fb      	strb	r3, [r7, #23]
 800df3c:	e028      	b.n	800df90 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6a1b      	ldr	r3, [r3, #32]
 800df42:	330b      	adds	r3, #11
 800df44:	781b      	ldrb	r3, [r3, #0]
 800df46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800df4a:	b2da      	uxtb	r2, r3
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6a1b      	ldr	r3, [r3, #32]
 800df54:	330b      	adds	r3, #11
 800df56:	781b      	ldrb	r3, [r3, #0]
 800df58:	f003 0308 	and.w	r3, r3, #8
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d10a      	bne.n	800df76 <dir_find+0x86>
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	6a18      	ldr	r0, [r3, #32]
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	3324      	adds	r3, #36	; 0x24
 800df68:	220b      	movs	r2, #11
 800df6a:	4619      	mov	r1, r3
 800df6c:	f7ff f888 	bl	800d080 <mem_cmp>
 800df70:	4603      	mov	r3, r0
 800df72:	2b00      	cmp	r3, #0
 800df74:	d00b      	beq.n	800df8e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800df76:	2100      	movs	r1, #0
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f7ff fe6e 	bl	800dc5a <dir_next>
 800df7e:	4603      	mov	r3, r0
 800df80:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800df82:	7dfb      	ldrb	r3, [r7, #23]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d0c5      	beq.n	800df14 <dir_find+0x24>
 800df88:	e002      	b.n	800df90 <dir_find+0xa0>
		if (res != FR_OK) break;
 800df8a:	bf00      	nop
 800df8c:	e000      	b.n	800df90 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800df8e:	bf00      	nop

	return res;
 800df90:	7dfb      	ldrb	r3, [r7, #23]
}
 800df92:	4618      	mov	r0, r3
 800df94:	3718      	adds	r7, #24
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}

0800df9a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800df9a:	b580      	push	{r7, lr}
 800df9c:	b084      	sub	sp, #16
 800df9e:	af00      	add	r7, sp, #0
 800dfa0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800dfa8:	2101      	movs	r1, #1
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f7ff ff1a 	bl	800dde4 <dir_alloc>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800dfb4:	7bfb      	ldrb	r3, [r7, #15]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d11c      	bne.n	800dff4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	69db      	ldr	r3, [r3, #28]
 800dfbe:	4619      	mov	r1, r3
 800dfc0:	68b8      	ldr	r0, [r7, #8]
 800dfc2:	f7ff fa4f 	bl	800d464 <move_window>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dfca:	7bfb      	ldrb	r3, [r7, #15]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d111      	bne.n	800dff4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6a1b      	ldr	r3, [r3, #32]
 800dfd4:	2220      	movs	r2, #32
 800dfd6:	2100      	movs	r1, #0
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f7ff f836 	bl	800d04a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6a18      	ldr	r0, [r3, #32]
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	3324      	adds	r3, #36	; 0x24
 800dfe6:	220b      	movs	r2, #11
 800dfe8:	4619      	mov	r1, r3
 800dfea:	f7ff f80d 	bl	800d008 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	2201      	movs	r2, #1
 800dff2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800dff4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	3710      	adds	r7, #16
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}
	...

0800e000 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b088      	sub	sp, #32
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
 800e008:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	60fb      	str	r3, [r7, #12]
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	3324      	adds	r3, #36	; 0x24
 800e014:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800e016:	220b      	movs	r2, #11
 800e018:	2120      	movs	r1, #32
 800e01a:	68b8      	ldr	r0, [r7, #8]
 800e01c:	f7ff f815 	bl	800d04a <mem_set>
	si = i = 0; ni = 8;
 800e020:	2300      	movs	r3, #0
 800e022:	613b      	str	r3, [r7, #16]
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	61fb      	str	r3, [r7, #28]
 800e028:	2308      	movs	r3, #8
 800e02a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800e02c:	69fb      	ldr	r3, [r7, #28]
 800e02e:	1c5a      	adds	r2, r3, #1
 800e030:	61fa      	str	r2, [r7, #28]
 800e032:	68fa      	ldr	r2, [r7, #12]
 800e034:	4413      	add	r3, r2
 800e036:	781b      	ldrb	r3, [r3, #0]
 800e038:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e03a:	7efb      	ldrb	r3, [r7, #27]
 800e03c:	2b20      	cmp	r3, #32
 800e03e:	d94e      	bls.n	800e0de <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800e040:	7efb      	ldrb	r3, [r7, #27]
 800e042:	2b2f      	cmp	r3, #47	; 0x2f
 800e044:	d006      	beq.n	800e054 <create_name+0x54>
 800e046:	7efb      	ldrb	r3, [r7, #27]
 800e048:	2b5c      	cmp	r3, #92	; 0x5c
 800e04a:	d110      	bne.n	800e06e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e04c:	e002      	b.n	800e054 <create_name+0x54>
 800e04e:	69fb      	ldr	r3, [r7, #28]
 800e050:	3301      	adds	r3, #1
 800e052:	61fb      	str	r3, [r7, #28]
 800e054:	68fa      	ldr	r2, [r7, #12]
 800e056:	69fb      	ldr	r3, [r7, #28]
 800e058:	4413      	add	r3, r2
 800e05a:	781b      	ldrb	r3, [r3, #0]
 800e05c:	2b2f      	cmp	r3, #47	; 0x2f
 800e05e:	d0f6      	beq.n	800e04e <create_name+0x4e>
 800e060:	68fa      	ldr	r2, [r7, #12]
 800e062:	69fb      	ldr	r3, [r7, #28]
 800e064:	4413      	add	r3, r2
 800e066:	781b      	ldrb	r3, [r3, #0]
 800e068:	2b5c      	cmp	r3, #92	; 0x5c
 800e06a:	d0f0      	beq.n	800e04e <create_name+0x4e>
			break;
 800e06c:	e038      	b.n	800e0e0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800e06e:	7efb      	ldrb	r3, [r7, #27]
 800e070:	2b2e      	cmp	r3, #46	; 0x2e
 800e072:	d003      	beq.n	800e07c <create_name+0x7c>
 800e074:	693a      	ldr	r2, [r7, #16]
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	429a      	cmp	r2, r3
 800e07a:	d30c      	bcc.n	800e096 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e07c:	697b      	ldr	r3, [r7, #20]
 800e07e:	2b0b      	cmp	r3, #11
 800e080:	d002      	beq.n	800e088 <create_name+0x88>
 800e082:	7efb      	ldrb	r3, [r7, #27]
 800e084:	2b2e      	cmp	r3, #46	; 0x2e
 800e086:	d001      	beq.n	800e08c <create_name+0x8c>
 800e088:	2306      	movs	r3, #6
 800e08a:	e044      	b.n	800e116 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800e08c:	2308      	movs	r3, #8
 800e08e:	613b      	str	r3, [r7, #16]
 800e090:	230b      	movs	r3, #11
 800e092:	617b      	str	r3, [r7, #20]
			continue;
 800e094:	e022      	b.n	800e0dc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800e096:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	da04      	bge.n	800e0a8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800e09e:	7efb      	ldrb	r3, [r7, #27]
 800e0a0:	3b80      	subs	r3, #128	; 0x80
 800e0a2:	4a1f      	ldr	r2, [pc, #124]	; (800e120 <create_name+0x120>)
 800e0a4:	5cd3      	ldrb	r3, [r2, r3]
 800e0a6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800e0a8:	7efb      	ldrb	r3, [r7, #27]
 800e0aa:	4619      	mov	r1, r3
 800e0ac:	481d      	ldr	r0, [pc, #116]	; (800e124 <create_name+0x124>)
 800e0ae:	f7ff f80e 	bl	800d0ce <chk_chr>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d001      	beq.n	800e0bc <create_name+0xbc>
 800e0b8:	2306      	movs	r3, #6
 800e0ba:	e02c      	b.n	800e116 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800e0bc:	7efb      	ldrb	r3, [r7, #27]
 800e0be:	2b60      	cmp	r3, #96	; 0x60
 800e0c0:	d905      	bls.n	800e0ce <create_name+0xce>
 800e0c2:	7efb      	ldrb	r3, [r7, #27]
 800e0c4:	2b7a      	cmp	r3, #122	; 0x7a
 800e0c6:	d802      	bhi.n	800e0ce <create_name+0xce>
 800e0c8:	7efb      	ldrb	r3, [r7, #27]
 800e0ca:	3b20      	subs	r3, #32
 800e0cc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	1c5a      	adds	r2, r3, #1
 800e0d2:	613a      	str	r2, [r7, #16]
 800e0d4:	68ba      	ldr	r2, [r7, #8]
 800e0d6:	4413      	add	r3, r2
 800e0d8:	7efa      	ldrb	r2, [r7, #27]
 800e0da:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800e0dc:	e7a6      	b.n	800e02c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e0de:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800e0e0:	68fa      	ldr	r2, [r7, #12]
 800e0e2:	69fb      	ldr	r3, [r7, #28]
 800e0e4:	441a      	add	r2, r3
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800e0ea:	693b      	ldr	r3, [r7, #16]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d101      	bne.n	800e0f4 <create_name+0xf4>
 800e0f0:	2306      	movs	r3, #6
 800e0f2:	e010      	b.n	800e116 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	781b      	ldrb	r3, [r3, #0]
 800e0f8:	2be5      	cmp	r3, #229	; 0xe5
 800e0fa:	d102      	bne.n	800e102 <create_name+0x102>
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	2205      	movs	r2, #5
 800e100:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e102:	7efb      	ldrb	r3, [r7, #27]
 800e104:	2b20      	cmp	r3, #32
 800e106:	d801      	bhi.n	800e10c <create_name+0x10c>
 800e108:	2204      	movs	r2, #4
 800e10a:	e000      	b.n	800e10e <create_name+0x10e>
 800e10c:	2200      	movs	r2, #0
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	330b      	adds	r3, #11
 800e112:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e114:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800e116:	4618      	mov	r0, r3
 800e118:	3720      	adds	r7, #32
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	bf00      	nop
 800e120:	08010d18 	.word	0x08010d18
 800e124:	08010c40 	.word	0x08010c40

0800e128 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b086      	sub	sp, #24
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
 800e130:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e13c:	e002      	b.n	800e144 <follow_path+0x1c>
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	3301      	adds	r3, #1
 800e142:	603b      	str	r3, [r7, #0]
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	781b      	ldrb	r3, [r3, #0]
 800e148:	2b2f      	cmp	r3, #47	; 0x2f
 800e14a:	d0f8      	beq.n	800e13e <follow_path+0x16>
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	2b5c      	cmp	r3, #92	; 0x5c
 800e152:	d0f4      	beq.n	800e13e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	2200      	movs	r2, #0
 800e158:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	781b      	ldrb	r3, [r3, #0]
 800e15e:	2b1f      	cmp	r3, #31
 800e160:	d80a      	bhi.n	800e178 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2280      	movs	r2, #128	; 0x80
 800e166:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e16a:	2100      	movs	r1, #0
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f7ff fcf9 	bl	800db64 <dir_sdi>
 800e172:	4603      	mov	r3, r0
 800e174:	75fb      	strb	r3, [r7, #23]
 800e176:	e043      	b.n	800e200 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e178:	463b      	mov	r3, r7
 800e17a:	4619      	mov	r1, r3
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f7ff ff3f 	bl	800e000 <create_name>
 800e182:	4603      	mov	r3, r0
 800e184:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e186:	7dfb      	ldrb	r3, [r7, #23]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d134      	bne.n	800e1f6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f7ff feaf 	bl	800def0 <dir_find>
 800e192:	4603      	mov	r3, r0
 800e194:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e19c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e19e:	7dfb      	ldrb	r3, [r7, #23]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d00a      	beq.n	800e1ba <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e1a4:	7dfb      	ldrb	r3, [r7, #23]
 800e1a6:	2b04      	cmp	r3, #4
 800e1a8:	d127      	bne.n	800e1fa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e1aa:	7afb      	ldrb	r3, [r7, #11]
 800e1ac:	f003 0304 	and.w	r3, r3, #4
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d122      	bne.n	800e1fa <follow_path+0xd2>
 800e1b4:	2305      	movs	r3, #5
 800e1b6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e1b8:	e01f      	b.n	800e1fa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e1ba:	7afb      	ldrb	r3, [r7, #11]
 800e1bc:	f003 0304 	and.w	r3, r3, #4
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d11c      	bne.n	800e1fe <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e1c4:	693b      	ldr	r3, [r7, #16]
 800e1c6:	799b      	ldrb	r3, [r3, #6]
 800e1c8:	f003 0310 	and.w	r3, r3, #16
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d102      	bne.n	800e1d6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e1d0:	2305      	movs	r3, #5
 800e1d2:	75fb      	strb	r3, [r7, #23]
 800e1d4:	e014      	b.n	800e200 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	695b      	ldr	r3, [r3, #20]
 800e1e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1e4:	4413      	add	r3, r2
 800e1e6:	4619      	mov	r1, r3
 800e1e8:	68f8      	ldr	r0, [r7, #12]
 800e1ea:	f7ff fe42 	bl	800de72 <ld_clust>
 800e1ee:	4602      	mov	r2, r0
 800e1f0:	693b      	ldr	r3, [r7, #16]
 800e1f2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e1f4:	e7c0      	b.n	800e178 <follow_path+0x50>
			if (res != FR_OK) break;
 800e1f6:	bf00      	nop
 800e1f8:	e002      	b.n	800e200 <follow_path+0xd8>
				break;
 800e1fa:	bf00      	nop
 800e1fc:	e000      	b.n	800e200 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e1fe:	bf00      	nop
			}
		}
	}

	return res;
 800e200:	7dfb      	ldrb	r3, [r7, #23]
}
 800e202:	4618      	mov	r0, r3
 800e204:	3718      	adds	r7, #24
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}

0800e20a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e20a:	b480      	push	{r7}
 800e20c:	b087      	sub	sp, #28
 800e20e:	af00      	add	r7, sp, #0
 800e210:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e212:	f04f 33ff 	mov.w	r3, #4294967295
 800e216:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d031      	beq.n	800e284 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	617b      	str	r3, [r7, #20]
 800e226:	e002      	b.n	800e22e <get_ldnumber+0x24>
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	3301      	adds	r3, #1
 800e22c:	617b      	str	r3, [r7, #20]
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	781b      	ldrb	r3, [r3, #0]
 800e232:	2b20      	cmp	r3, #32
 800e234:	d903      	bls.n	800e23e <get_ldnumber+0x34>
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	781b      	ldrb	r3, [r3, #0]
 800e23a:	2b3a      	cmp	r3, #58	; 0x3a
 800e23c:	d1f4      	bne.n	800e228 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	781b      	ldrb	r3, [r3, #0]
 800e242:	2b3a      	cmp	r3, #58	; 0x3a
 800e244:	d11c      	bne.n	800e280 <get_ldnumber+0x76>
			tp = *path;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	1c5a      	adds	r2, r3, #1
 800e250:	60fa      	str	r2, [r7, #12]
 800e252:	781b      	ldrb	r3, [r3, #0]
 800e254:	3b30      	subs	r3, #48	; 0x30
 800e256:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	2b09      	cmp	r3, #9
 800e25c:	d80e      	bhi.n	800e27c <get_ldnumber+0x72>
 800e25e:	68fa      	ldr	r2, [r7, #12]
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	429a      	cmp	r2, r3
 800e264:	d10a      	bne.n	800e27c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d107      	bne.n	800e27c <get_ldnumber+0x72>
					vol = (int)i;
 800e26c:	68bb      	ldr	r3, [r7, #8]
 800e26e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	3301      	adds	r3, #1
 800e274:	617b      	str	r3, [r7, #20]
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	697a      	ldr	r2, [r7, #20]
 800e27a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e27c:	693b      	ldr	r3, [r7, #16]
 800e27e:	e002      	b.n	800e286 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e280:	2300      	movs	r3, #0
 800e282:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e284:	693b      	ldr	r3, [r7, #16]
}
 800e286:	4618      	mov	r0, r3
 800e288:	371c      	adds	r7, #28
 800e28a:	46bd      	mov	sp, r7
 800e28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e290:	4770      	bx	lr
	...

0800e294 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b082      	sub	sp, #8
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
 800e29c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	70da      	strb	r2, [r3, #3]
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f04f 32ff 	mov.w	r2, #4294967295
 800e2aa:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e2ac:	6839      	ldr	r1, [r7, #0]
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f7ff f8d8 	bl	800d464 <move_window>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d001      	beq.n	800e2be <check_fs+0x2a>
 800e2ba:	2304      	movs	r3, #4
 800e2bc:	e038      	b.n	800e330 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	3330      	adds	r3, #48	; 0x30
 800e2c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f7fe fe1c 	bl	800cf04 <ld_word>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	461a      	mov	r2, r3
 800e2d0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d001      	beq.n	800e2dc <check_fs+0x48>
 800e2d8:	2303      	movs	r3, #3
 800e2da:	e029      	b.n	800e330 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e2e2:	2be9      	cmp	r3, #233	; 0xe9
 800e2e4:	d009      	beq.n	800e2fa <check_fs+0x66>
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e2ec:	2beb      	cmp	r3, #235	; 0xeb
 800e2ee:	d11e      	bne.n	800e32e <check_fs+0x9a>
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800e2f6:	2b90      	cmp	r3, #144	; 0x90
 800e2f8:	d119      	bne.n	800e32e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	3330      	adds	r3, #48	; 0x30
 800e2fe:	3336      	adds	r3, #54	; 0x36
 800e300:	4618      	mov	r0, r3
 800e302:	f7fe fe17 	bl	800cf34 <ld_dword>
 800e306:	4603      	mov	r3, r0
 800e308:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e30c:	4a0a      	ldr	r2, [pc, #40]	; (800e338 <check_fs+0xa4>)
 800e30e:	4293      	cmp	r3, r2
 800e310:	d101      	bne.n	800e316 <check_fs+0x82>
 800e312:	2300      	movs	r3, #0
 800e314:	e00c      	b.n	800e330 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	3330      	adds	r3, #48	; 0x30
 800e31a:	3352      	adds	r3, #82	; 0x52
 800e31c:	4618      	mov	r0, r3
 800e31e:	f7fe fe09 	bl	800cf34 <ld_dword>
 800e322:	4603      	mov	r3, r0
 800e324:	4a05      	ldr	r2, [pc, #20]	; (800e33c <check_fs+0xa8>)
 800e326:	4293      	cmp	r3, r2
 800e328:	d101      	bne.n	800e32e <check_fs+0x9a>
 800e32a:	2300      	movs	r3, #0
 800e32c:	e000      	b.n	800e330 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e32e:	2302      	movs	r3, #2
}
 800e330:	4618      	mov	r0, r3
 800e332:	3708      	adds	r7, #8
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}
 800e338:	00544146 	.word	0x00544146
 800e33c:	33544146 	.word	0x33544146

0800e340 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b096      	sub	sp, #88	; 0x58
 800e344:	af00      	add	r7, sp, #0
 800e346:	60f8      	str	r0, [r7, #12]
 800e348:	60b9      	str	r1, [r7, #8]
 800e34a:	4613      	mov	r3, r2
 800e34c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	2200      	movs	r2, #0
 800e352:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e354:	68f8      	ldr	r0, [r7, #12]
 800e356:	f7ff ff58 	bl	800e20a <get_ldnumber>
 800e35a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e35c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e35e:	2b00      	cmp	r3, #0
 800e360:	da01      	bge.n	800e366 <find_volume+0x26>
 800e362:	230b      	movs	r3, #11
 800e364:	e22e      	b.n	800e7c4 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e366:	4aa8      	ldr	r2, [pc, #672]	; (800e608 <find_volume+0x2c8>)
 800e368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e36a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e36e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e372:	2b00      	cmp	r3, #0
 800e374:	d101      	bne.n	800e37a <find_volume+0x3a>
 800e376:	230c      	movs	r3, #12
 800e378:	e224      	b.n	800e7c4 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e37e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e380:	79fb      	ldrb	r3, [r7, #7]
 800e382:	f023 0301 	bic.w	r3, r3, #1
 800e386:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e38a:	781b      	ldrb	r3, [r3, #0]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d01a      	beq.n	800e3c6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e392:	785b      	ldrb	r3, [r3, #1]
 800e394:	4618      	mov	r0, r3
 800e396:	f7fe fd17 	bl	800cdc8 <disk_status>
 800e39a:	4603      	mov	r3, r0
 800e39c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e3a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e3a4:	f003 0301 	and.w	r3, r3, #1
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d10c      	bne.n	800e3c6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e3ac:	79fb      	ldrb	r3, [r7, #7]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d007      	beq.n	800e3c2 <find_volume+0x82>
 800e3b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e3b6:	f003 0304 	and.w	r3, r3, #4
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d001      	beq.n	800e3c2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e3be:	230a      	movs	r3, #10
 800e3c0:	e200      	b.n	800e7c4 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	e1fe      	b.n	800e7c4 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e3cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3ce:	b2da      	uxtb	r2, r3
 800e3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d6:	785b      	ldrb	r3, [r3, #1]
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f7fe fd0f 	bl	800cdfc <disk_initialize>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e3e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e3e8:	f003 0301 	and.w	r3, r3, #1
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d001      	beq.n	800e3f4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e3f0:	2303      	movs	r3, #3
 800e3f2:	e1e7      	b.n	800e7c4 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e3f4:	79fb      	ldrb	r3, [r7, #7]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d007      	beq.n	800e40a <find_volume+0xca>
 800e3fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e3fe:	f003 0304 	and.w	r3, r3, #4
 800e402:	2b00      	cmp	r3, #0
 800e404:	d001      	beq.n	800e40a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e406:	230a      	movs	r3, #10
 800e408:	e1dc      	b.n	800e7c4 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e40a:	2300      	movs	r3, #0
 800e40c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e40e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e410:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e412:	f7ff ff3f 	bl	800e294 <check_fs>
 800e416:	4603      	mov	r3, r0
 800e418:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e41c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e420:	2b02      	cmp	r3, #2
 800e422:	d14b      	bne.n	800e4bc <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e424:	2300      	movs	r3, #0
 800e426:	643b      	str	r3, [r7, #64]	; 0x40
 800e428:	e01f      	b.n	800e46a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e42c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e432:	011b      	lsls	r3, r3, #4
 800e434:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e438:	4413      	add	r3, r2
 800e43a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e43e:	3304      	adds	r3, #4
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d006      	beq.n	800e454 <find_volume+0x114>
 800e446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e448:	3308      	adds	r3, #8
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7fe fd72 	bl	800cf34 <ld_dword>
 800e450:	4602      	mov	r2, r0
 800e452:	e000      	b.n	800e456 <find_volume+0x116>
 800e454:	2200      	movs	r2, #0
 800e456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e458:	009b      	lsls	r3, r3, #2
 800e45a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800e45e:	440b      	add	r3, r1
 800e460:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e466:	3301      	adds	r3, #1
 800e468:	643b      	str	r3, [r7, #64]	; 0x40
 800e46a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e46c:	2b03      	cmp	r3, #3
 800e46e:	d9dc      	bls.n	800e42a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e470:	2300      	movs	r3, #0
 800e472:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e476:	2b00      	cmp	r3, #0
 800e478:	d002      	beq.n	800e480 <find_volume+0x140>
 800e47a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e47c:	3b01      	subs	r3, #1
 800e47e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e482:	009b      	lsls	r3, r3, #2
 800e484:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e488:	4413      	add	r3, r2
 800e48a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e48e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e492:	2b00      	cmp	r3, #0
 800e494:	d005      	beq.n	800e4a2 <find_volume+0x162>
 800e496:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e498:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e49a:	f7ff fefb 	bl	800e294 <check_fs>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	e000      	b.n	800e4a4 <find_volume+0x164>
 800e4a2:	2303      	movs	r3, #3
 800e4a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e4a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e4ac:	2b01      	cmp	r3, #1
 800e4ae:	d905      	bls.n	800e4bc <find_volume+0x17c>
 800e4b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4b2:	3301      	adds	r3, #1
 800e4b4:	643b      	str	r3, [r7, #64]	; 0x40
 800e4b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4b8:	2b03      	cmp	r3, #3
 800e4ba:	d9e1      	bls.n	800e480 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e4bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e4c0:	2b04      	cmp	r3, #4
 800e4c2:	d101      	bne.n	800e4c8 <find_volume+0x188>
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	e17d      	b.n	800e7c4 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e4c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e4cc:	2b01      	cmp	r3, #1
 800e4ce:	d901      	bls.n	800e4d4 <find_volume+0x194>
 800e4d0:	230d      	movs	r3, #13
 800e4d2:	e177      	b.n	800e7c4 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4d6:	3330      	adds	r3, #48	; 0x30
 800e4d8:	330b      	adds	r3, #11
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f7fe fd12 	bl	800cf04 <ld_word>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e4e6:	d001      	beq.n	800e4ec <find_volume+0x1ac>
 800e4e8:	230d      	movs	r3, #13
 800e4ea:	e16b      	b.n	800e7c4 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ee:	3330      	adds	r3, #48	; 0x30
 800e4f0:	3316      	adds	r3, #22
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f7fe fd06 	bl	800cf04 <ld_word>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e4fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d106      	bne.n	800e510 <find_volume+0x1d0>
 800e502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e504:	3330      	adds	r3, #48	; 0x30
 800e506:	3324      	adds	r3, #36	; 0x24
 800e508:	4618      	mov	r0, r3
 800e50a:	f7fe fd13 	bl	800cf34 <ld_dword>
 800e50e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e512:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e514:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e518:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800e51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e51e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e522:	789b      	ldrb	r3, [r3, #2]
 800e524:	2b01      	cmp	r3, #1
 800e526:	d005      	beq.n	800e534 <find_volume+0x1f4>
 800e528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e52a:	789b      	ldrb	r3, [r3, #2]
 800e52c:	2b02      	cmp	r3, #2
 800e52e:	d001      	beq.n	800e534 <find_volume+0x1f4>
 800e530:	230d      	movs	r3, #13
 800e532:	e147      	b.n	800e7c4 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e536:	789b      	ldrb	r3, [r3, #2]
 800e538:	461a      	mov	r2, r3
 800e53a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e53c:	fb02 f303 	mul.w	r3, r2, r3
 800e540:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e548:	b29a      	uxth	r2, r3
 800e54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e54c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e550:	895b      	ldrh	r3, [r3, #10]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d008      	beq.n	800e568 <find_volume+0x228>
 800e556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e558:	895b      	ldrh	r3, [r3, #10]
 800e55a:	461a      	mov	r2, r3
 800e55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e55e:	895b      	ldrh	r3, [r3, #10]
 800e560:	3b01      	subs	r3, #1
 800e562:	4013      	ands	r3, r2
 800e564:	2b00      	cmp	r3, #0
 800e566:	d001      	beq.n	800e56c <find_volume+0x22c>
 800e568:	230d      	movs	r3, #13
 800e56a:	e12b      	b.n	800e7c4 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e56e:	3330      	adds	r3, #48	; 0x30
 800e570:	3311      	adds	r3, #17
 800e572:	4618      	mov	r0, r3
 800e574:	f7fe fcc6 	bl	800cf04 <ld_word>
 800e578:	4603      	mov	r3, r0
 800e57a:	461a      	mov	r2, r3
 800e57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e57e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e582:	891b      	ldrh	r3, [r3, #8]
 800e584:	f003 030f 	and.w	r3, r3, #15
 800e588:	b29b      	uxth	r3, r3
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d001      	beq.n	800e592 <find_volume+0x252>
 800e58e:	230d      	movs	r3, #13
 800e590:	e118      	b.n	800e7c4 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e594:	3330      	adds	r3, #48	; 0x30
 800e596:	3313      	adds	r3, #19
 800e598:	4618      	mov	r0, r3
 800e59a:	f7fe fcb3 	bl	800cf04 <ld_word>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e5a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d106      	bne.n	800e5b6 <find_volume+0x276>
 800e5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5aa:	3330      	adds	r3, #48	; 0x30
 800e5ac:	3320      	adds	r3, #32
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f7fe fcc0 	bl	800cf34 <ld_dword>
 800e5b4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b8:	3330      	adds	r3, #48	; 0x30
 800e5ba:	330e      	adds	r3, #14
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f7fe fca1 	bl	800cf04 <ld_word>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e5c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d101      	bne.n	800e5d0 <find_volume+0x290>
 800e5cc:	230d      	movs	r3, #13
 800e5ce:	e0f9      	b.n	800e7c4 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e5d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e5d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5d4:	4413      	add	r3, r2
 800e5d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e5d8:	8912      	ldrh	r2, [r2, #8]
 800e5da:	0912      	lsrs	r2, r2, #4
 800e5dc:	b292      	uxth	r2, r2
 800e5de:	4413      	add	r3, r2
 800e5e0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e5e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e6:	429a      	cmp	r2, r3
 800e5e8:	d201      	bcs.n	800e5ee <find_volume+0x2ae>
 800e5ea:	230d      	movs	r3, #13
 800e5ec:	e0ea      	b.n	800e7c4 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e5ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f2:	1ad3      	subs	r3, r2, r3
 800e5f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e5f6:	8952      	ldrh	r2, [r2, #10]
 800e5f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800e5fc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e600:	2b00      	cmp	r3, #0
 800e602:	d103      	bne.n	800e60c <find_volume+0x2cc>
 800e604:	230d      	movs	r3, #13
 800e606:	e0dd      	b.n	800e7c4 <find_volume+0x484>
 800e608:	20001384 	.word	0x20001384
		fmt = FS_FAT32;
 800e60c:	2303      	movs	r3, #3
 800e60e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e614:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e618:	4293      	cmp	r3, r2
 800e61a:	d802      	bhi.n	800e622 <find_volume+0x2e2>
 800e61c:	2302      	movs	r3, #2
 800e61e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e624:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e628:	4293      	cmp	r3, r2
 800e62a:	d802      	bhi.n	800e632 <find_volume+0x2f2>
 800e62c:	2301      	movs	r3, #1
 800e62e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e634:	1c9a      	adds	r2, r3, #2
 800e636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e638:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e63c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e63e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e640:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e644:	441a      	add	r2, r3
 800e646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e648:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800e64a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e64e:	441a      	add	r2, r3
 800e650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e652:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800e654:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e658:	2b03      	cmp	r3, #3
 800e65a:	d11e      	bne.n	800e69a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e65e:	3330      	adds	r3, #48	; 0x30
 800e660:	332a      	adds	r3, #42	; 0x2a
 800e662:	4618      	mov	r0, r3
 800e664:	f7fe fc4e 	bl	800cf04 <ld_word>
 800e668:	4603      	mov	r3, r0
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d001      	beq.n	800e672 <find_volume+0x332>
 800e66e:	230d      	movs	r3, #13
 800e670:	e0a8      	b.n	800e7c4 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e674:	891b      	ldrh	r3, [r3, #8]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d001      	beq.n	800e67e <find_volume+0x33e>
 800e67a:	230d      	movs	r3, #13
 800e67c:	e0a2      	b.n	800e7c4 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e680:	3330      	adds	r3, #48	; 0x30
 800e682:	332c      	adds	r3, #44	; 0x2c
 800e684:	4618      	mov	r0, r3
 800e686:	f7fe fc55 	bl	800cf34 <ld_dword>
 800e68a:	4602      	mov	r2, r0
 800e68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e68e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e692:	695b      	ldr	r3, [r3, #20]
 800e694:	009b      	lsls	r3, r3, #2
 800e696:	647b      	str	r3, [r7, #68]	; 0x44
 800e698:	e01f      	b.n	800e6da <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e69c:	891b      	ldrh	r3, [r3, #8]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d101      	bne.n	800e6a6 <find_volume+0x366>
 800e6a2:	230d      	movs	r3, #13
 800e6a4:	e08e      	b.n	800e7c4 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6a8:	6a1a      	ldr	r2, [r3, #32]
 800e6aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6ac:	441a      	add	r2, r3
 800e6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6b0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e6b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e6b6:	2b02      	cmp	r3, #2
 800e6b8:	d103      	bne.n	800e6c2 <find_volume+0x382>
 800e6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6bc:	695b      	ldr	r3, [r3, #20]
 800e6be:	005b      	lsls	r3, r3, #1
 800e6c0:	e00a      	b.n	800e6d8 <find_volume+0x398>
 800e6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c4:	695a      	ldr	r2, [r3, #20]
 800e6c6:	4613      	mov	r3, r2
 800e6c8:	005b      	lsls	r3, r3, #1
 800e6ca:	4413      	add	r3, r2
 800e6cc:	085a      	lsrs	r2, r3, #1
 800e6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d0:	695b      	ldr	r3, [r3, #20]
 800e6d2:	f003 0301 	and.w	r3, r3, #1
 800e6d6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e6d8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6dc:	699a      	ldr	r2, [r3, #24]
 800e6de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6e0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e6e4:	0a5b      	lsrs	r3, r3, #9
 800e6e6:	429a      	cmp	r2, r3
 800e6e8:	d201      	bcs.n	800e6ee <find_volume+0x3ae>
 800e6ea:	230d      	movs	r3, #13
 800e6ec:	e06a      	b.n	800e7c4 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f0:	f04f 32ff 	mov.w	r2, #4294967295
 800e6f4:	611a      	str	r2, [r3, #16]
 800e6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f8:	691a      	ldr	r2, [r3, #16]
 800e6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6fc:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e700:	2280      	movs	r2, #128	; 0x80
 800e702:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e704:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e708:	2b03      	cmp	r3, #3
 800e70a:	d149      	bne.n	800e7a0 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e70e:	3330      	adds	r3, #48	; 0x30
 800e710:	3330      	adds	r3, #48	; 0x30
 800e712:	4618      	mov	r0, r3
 800e714:	f7fe fbf6 	bl	800cf04 <ld_word>
 800e718:	4603      	mov	r3, r0
 800e71a:	2b01      	cmp	r3, #1
 800e71c:	d140      	bne.n	800e7a0 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e71e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e720:	3301      	adds	r3, #1
 800e722:	4619      	mov	r1, r3
 800e724:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e726:	f7fe fe9d 	bl	800d464 <move_window>
 800e72a:	4603      	mov	r3, r0
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d137      	bne.n	800e7a0 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800e730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e732:	2200      	movs	r2, #0
 800e734:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e738:	3330      	adds	r3, #48	; 0x30
 800e73a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e73e:	4618      	mov	r0, r3
 800e740:	f7fe fbe0 	bl	800cf04 <ld_word>
 800e744:	4603      	mov	r3, r0
 800e746:	461a      	mov	r2, r3
 800e748:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e74c:	429a      	cmp	r2, r3
 800e74e:	d127      	bne.n	800e7a0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e752:	3330      	adds	r3, #48	; 0x30
 800e754:	4618      	mov	r0, r3
 800e756:	f7fe fbed 	bl	800cf34 <ld_dword>
 800e75a:	4603      	mov	r3, r0
 800e75c:	4a1b      	ldr	r2, [pc, #108]	; (800e7cc <find_volume+0x48c>)
 800e75e:	4293      	cmp	r3, r2
 800e760:	d11e      	bne.n	800e7a0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e764:	3330      	adds	r3, #48	; 0x30
 800e766:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e76a:	4618      	mov	r0, r3
 800e76c:	f7fe fbe2 	bl	800cf34 <ld_dword>
 800e770:	4603      	mov	r3, r0
 800e772:	4a17      	ldr	r2, [pc, #92]	; (800e7d0 <find_volume+0x490>)
 800e774:	4293      	cmp	r3, r2
 800e776:	d113      	bne.n	800e7a0 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e77a:	3330      	adds	r3, #48	; 0x30
 800e77c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e780:	4618      	mov	r0, r3
 800e782:	f7fe fbd7 	bl	800cf34 <ld_dword>
 800e786:	4602      	mov	r2, r0
 800e788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e78a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e78e:	3330      	adds	r3, #48	; 0x30
 800e790:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e794:	4618      	mov	r0, r3
 800e796:	f7fe fbcd 	bl	800cf34 <ld_dword>
 800e79a:	4602      	mov	r2, r0
 800e79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e79e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7a2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e7a6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e7a8:	4b0a      	ldr	r3, [pc, #40]	; (800e7d4 <find_volume+0x494>)
 800e7aa:	881b      	ldrh	r3, [r3, #0]
 800e7ac:	3301      	adds	r3, #1
 800e7ae:	b29a      	uxth	r2, r3
 800e7b0:	4b08      	ldr	r3, [pc, #32]	; (800e7d4 <find_volume+0x494>)
 800e7b2:	801a      	strh	r2, [r3, #0]
 800e7b4:	4b07      	ldr	r3, [pc, #28]	; (800e7d4 <find_volume+0x494>)
 800e7b6:	881a      	ldrh	r2, [r3, #0]
 800e7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ba:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e7bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e7be:	f7fe fde9 	bl	800d394 <clear_lock>
#endif
	return FR_OK;
 800e7c2:	2300      	movs	r3, #0
}
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	3758      	adds	r7, #88	; 0x58
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}
 800e7cc:	41615252 	.word	0x41615252
 800e7d0:	61417272 	.word	0x61417272
 800e7d4:	20001388 	.word	0x20001388

0800e7d8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b084      	sub	sp, #16
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e7e2:	2309      	movs	r3, #9
 800e7e4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d01c      	beq.n	800e826 <validate+0x4e>
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d018      	beq.n	800e826 <validate+0x4e>
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	781b      	ldrb	r3, [r3, #0]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d013      	beq.n	800e826 <validate+0x4e>
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	889a      	ldrh	r2, [r3, #4]
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	88db      	ldrh	r3, [r3, #6]
 800e808:	429a      	cmp	r2, r3
 800e80a:	d10c      	bne.n	800e826 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	785b      	ldrb	r3, [r3, #1]
 800e812:	4618      	mov	r0, r3
 800e814:	f7fe fad8 	bl	800cdc8 <disk_status>
 800e818:	4603      	mov	r3, r0
 800e81a:	f003 0301 	and.w	r3, r3, #1
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d101      	bne.n	800e826 <validate+0x4e>
			res = FR_OK;
 800e822:	2300      	movs	r3, #0
 800e824:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e826:	7bfb      	ldrb	r3, [r7, #15]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d102      	bne.n	800e832 <validate+0x5a>
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	e000      	b.n	800e834 <validate+0x5c>
 800e832:	2300      	movs	r3, #0
 800e834:	683a      	ldr	r2, [r7, #0]
 800e836:	6013      	str	r3, [r2, #0]
	return res;
 800e838:	7bfb      	ldrb	r3, [r7, #15]
}
 800e83a:	4618      	mov	r0, r3
 800e83c:	3710      	adds	r7, #16
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}
	...

0800e844 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b088      	sub	sp, #32
 800e848:	af00      	add	r7, sp, #0
 800e84a:	60f8      	str	r0, [r7, #12]
 800e84c:	60b9      	str	r1, [r7, #8]
 800e84e:	4613      	mov	r3, r2
 800e850:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e856:	f107 0310 	add.w	r3, r7, #16
 800e85a:	4618      	mov	r0, r3
 800e85c:	f7ff fcd5 	bl	800e20a <get_ldnumber>
 800e860:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e862:	69fb      	ldr	r3, [r7, #28]
 800e864:	2b00      	cmp	r3, #0
 800e866:	da01      	bge.n	800e86c <f_mount+0x28>
 800e868:	230b      	movs	r3, #11
 800e86a:	e02b      	b.n	800e8c4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e86c:	4a17      	ldr	r2, [pc, #92]	; (800e8cc <f_mount+0x88>)
 800e86e:	69fb      	ldr	r3, [r7, #28]
 800e870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e874:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e876:	69bb      	ldr	r3, [r7, #24]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d005      	beq.n	800e888 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e87c:	69b8      	ldr	r0, [r7, #24]
 800e87e:	f7fe fd89 	bl	800d394 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e882:	69bb      	ldr	r3, [r7, #24]
 800e884:	2200      	movs	r2, #0
 800e886:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d002      	beq.n	800e894 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	2200      	movs	r2, #0
 800e892:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e894:	68fa      	ldr	r2, [r7, #12]
 800e896:	490d      	ldr	r1, [pc, #52]	; (800e8cc <f_mount+0x88>)
 800e898:	69fb      	ldr	r3, [r7, #28]
 800e89a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d002      	beq.n	800e8aa <f_mount+0x66>
 800e8a4:	79fb      	ldrb	r3, [r7, #7]
 800e8a6:	2b01      	cmp	r3, #1
 800e8a8:	d001      	beq.n	800e8ae <f_mount+0x6a>
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	e00a      	b.n	800e8c4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e8ae:	f107 010c 	add.w	r1, r7, #12
 800e8b2:	f107 0308 	add.w	r3, r7, #8
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7ff fd41 	bl	800e340 <find_volume>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e8c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3720      	adds	r7, #32
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}
 800e8cc:	20001384 	.word	0x20001384

0800e8d0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b098      	sub	sp, #96	; 0x60
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	60f8      	str	r0, [r7, #12]
 800e8d8:	60b9      	str	r1, [r7, #8]
 800e8da:	4613      	mov	r3, r2
 800e8dc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d101      	bne.n	800e8e8 <f_open+0x18>
 800e8e4:	2309      	movs	r3, #9
 800e8e6:	e1ad      	b.n	800ec44 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e8e8:	79fb      	ldrb	r3, [r7, #7]
 800e8ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e8ee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e8f0:	79fa      	ldrb	r2, [r7, #7]
 800e8f2:	f107 0110 	add.w	r1, r7, #16
 800e8f6:	f107 0308 	add.w	r3, r7, #8
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f7ff fd20 	bl	800e340 <find_volume>
 800e900:	4603      	mov	r3, r0
 800e902:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800e906:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	f040 8191 	bne.w	800ec32 <f_open+0x362>
		dj.obj.fs = fs;
 800e910:	693b      	ldr	r3, [r7, #16]
 800e912:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e914:	68ba      	ldr	r2, [r7, #8]
 800e916:	f107 0314 	add.w	r3, r7, #20
 800e91a:	4611      	mov	r1, r2
 800e91c:	4618      	mov	r0, r3
 800e91e:	f7ff fc03 	bl	800e128 <follow_path>
 800e922:	4603      	mov	r3, r0
 800e924:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e928:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d11a      	bne.n	800e966 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e930:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e934:	b25b      	sxtb	r3, r3
 800e936:	2b00      	cmp	r3, #0
 800e938:	da03      	bge.n	800e942 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e93a:	2306      	movs	r3, #6
 800e93c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e940:	e011      	b.n	800e966 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e942:	79fb      	ldrb	r3, [r7, #7]
 800e944:	f023 0301 	bic.w	r3, r3, #1
 800e948:	2b00      	cmp	r3, #0
 800e94a:	bf14      	ite	ne
 800e94c:	2301      	movne	r3, #1
 800e94e:	2300      	moveq	r3, #0
 800e950:	b2db      	uxtb	r3, r3
 800e952:	461a      	mov	r2, r3
 800e954:	f107 0314 	add.w	r3, r7, #20
 800e958:	4611      	mov	r1, r2
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7fe fbd2 	bl	800d104 <chk_lock>
 800e960:	4603      	mov	r3, r0
 800e962:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e966:	79fb      	ldrb	r3, [r7, #7]
 800e968:	f003 031c 	and.w	r3, r3, #28
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d07f      	beq.n	800ea70 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e970:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e974:	2b00      	cmp	r3, #0
 800e976:	d017      	beq.n	800e9a8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e978:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e97c:	2b04      	cmp	r3, #4
 800e97e:	d10e      	bne.n	800e99e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e980:	f7fe fc1c 	bl	800d1bc <enq_lock>
 800e984:	4603      	mov	r3, r0
 800e986:	2b00      	cmp	r3, #0
 800e988:	d006      	beq.n	800e998 <f_open+0xc8>
 800e98a:	f107 0314 	add.w	r3, r7, #20
 800e98e:	4618      	mov	r0, r3
 800e990:	f7ff fb03 	bl	800df9a <dir_register>
 800e994:	4603      	mov	r3, r0
 800e996:	e000      	b.n	800e99a <f_open+0xca>
 800e998:	2312      	movs	r3, #18
 800e99a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e99e:	79fb      	ldrb	r3, [r7, #7]
 800e9a0:	f043 0308 	orr.w	r3, r3, #8
 800e9a4:	71fb      	strb	r3, [r7, #7]
 800e9a6:	e010      	b.n	800e9ca <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e9a8:	7ebb      	ldrb	r3, [r7, #26]
 800e9aa:	f003 0311 	and.w	r3, r3, #17
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d003      	beq.n	800e9ba <f_open+0xea>
					res = FR_DENIED;
 800e9b2:	2307      	movs	r3, #7
 800e9b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e9b8:	e007      	b.n	800e9ca <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e9ba:	79fb      	ldrb	r3, [r7, #7]
 800e9bc:	f003 0304 	and.w	r3, r3, #4
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d002      	beq.n	800e9ca <f_open+0xfa>
 800e9c4:	2308      	movs	r3, #8
 800e9c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e9ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d168      	bne.n	800eaa4 <f_open+0x1d4>
 800e9d2:	79fb      	ldrb	r3, [r7, #7]
 800e9d4:	f003 0308 	and.w	r3, r3, #8
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d063      	beq.n	800eaa4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e9dc:	f7fb f9f8 	bl	8009dd0 <get_fattime>
 800e9e0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e9e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9e4:	330e      	adds	r3, #14
 800e9e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f7fe fae1 	bl	800cfb0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e9ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9f0:	3316      	adds	r3, #22
 800e9f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f7fe fadb 	bl	800cfb0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e9fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9fc:	330b      	adds	r3, #11
 800e9fe:	2220      	movs	r2, #32
 800ea00:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ea02:	693b      	ldr	r3, [r7, #16]
 800ea04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea06:	4611      	mov	r1, r2
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f7ff fa32 	bl	800de72 <ld_clust>
 800ea0e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ea10:	693b      	ldr	r3, [r7, #16]
 800ea12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ea14:	2200      	movs	r2, #0
 800ea16:	4618      	mov	r0, r3
 800ea18:	f7ff fa4a 	bl	800deb0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ea1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea1e:	331c      	adds	r3, #28
 800ea20:	2100      	movs	r1, #0
 800ea22:	4618      	mov	r0, r3
 800ea24:	f7fe fac4 	bl	800cfb0 <st_dword>
					fs->wflag = 1;
 800ea28:	693b      	ldr	r3, [r7, #16]
 800ea2a:	2201      	movs	r2, #1
 800ea2c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ea2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d037      	beq.n	800eaa4 <f_open+0x1d4>
						dw = fs->winsect;
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea38:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ea3a:	f107 0314 	add.w	r3, r7, #20
 800ea3e:	2200      	movs	r2, #0
 800ea40:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ea42:	4618      	mov	r0, r3
 800ea44:	f7fe ff5d 	bl	800d902 <remove_chain>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800ea4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d126      	bne.n	800eaa4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ea56:	693b      	ldr	r3, [r7, #16]
 800ea58:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f7fe fd02 	bl	800d464 <move_window>
 800ea60:	4603      	mov	r3, r0
 800ea62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ea66:	693b      	ldr	r3, [r7, #16]
 800ea68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ea6a:	3a01      	subs	r2, #1
 800ea6c:	60da      	str	r2, [r3, #12]
 800ea6e:	e019      	b.n	800eaa4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ea70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d115      	bne.n	800eaa4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ea78:	7ebb      	ldrb	r3, [r7, #26]
 800ea7a:	f003 0310 	and.w	r3, r3, #16
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d003      	beq.n	800ea8a <f_open+0x1ba>
					res = FR_NO_FILE;
 800ea82:	2304      	movs	r3, #4
 800ea84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ea88:	e00c      	b.n	800eaa4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ea8a:	79fb      	ldrb	r3, [r7, #7]
 800ea8c:	f003 0302 	and.w	r3, r3, #2
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d007      	beq.n	800eaa4 <f_open+0x1d4>
 800ea94:	7ebb      	ldrb	r3, [r7, #26]
 800ea96:	f003 0301 	and.w	r3, r3, #1
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d002      	beq.n	800eaa4 <f_open+0x1d4>
						res = FR_DENIED;
 800ea9e:	2307      	movs	r3, #7
 800eaa0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800eaa4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d128      	bne.n	800eafe <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800eaac:	79fb      	ldrb	r3, [r7, #7]
 800eaae:	f003 0308 	and.w	r3, r3, #8
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d003      	beq.n	800eabe <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800eab6:	79fb      	ldrb	r3, [r7, #7]
 800eab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eabc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800eabe:	693b      	ldr	r3, [r7, #16]
 800eac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800eac6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800eacc:	79fb      	ldrb	r3, [r7, #7]
 800eace:	f023 0301 	bic.w	r3, r3, #1
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	bf14      	ite	ne
 800ead6:	2301      	movne	r3, #1
 800ead8:	2300      	moveq	r3, #0
 800eada:	b2db      	uxtb	r3, r3
 800eadc:	461a      	mov	r2, r3
 800eade:	f107 0314 	add.w	r3, r7, #20
 800eae2:	4611      	mov	r1, r2
 800eae4:	4618      	mov	r0, r3
 800eae6:	f7fe fb8b 	bl	800d200 <inc_lock>
 800eaea:	4602      	mov	r2, r0
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	691b      	ldr	r3, [r3, #16]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d102      	bne.n	800eafe <f_open+0x22e>
 800eaf8:	2302      	movs	r3, #2
 800eafa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800eafe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	f040 8095 	bne.w	800ec32 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800eb08:	693b      	ldr	r3, [r7, #16]
 800eb0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eb0c:	4611      	mov	r1, r2
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f7ff f9af 	bl	800de72 <ld_clust>
 800eb14:	4602      	mov	r2, r0
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800eb1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb1c:	331c      	adds	r3, #28
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f7fe fa08 	bl	800cf34 <ld_dword>
 800eb24:	4602      	mov	r2, r0
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800eb30:	693a      	ldr	r2, [r7, #16]
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800eb36:	693b      	ldr	r3, [r7, #16]
 800eb38:	88da      	ldrh	r2, [r3, #6]
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	79fa      	ldrb	r2, [r7, #7]
 800eb42:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	2200      	movs	r2, #0
 800eb48:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	2200      	movs	r2, #0
 800eb54:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	3330      	adds	r3, #48	; 0x30
 800eb5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eb5e:	2100      	movs	r1, #0
 800eb60:	4618      	mov	r0, r3
 800eb62:	f7fe fa72 	bl	800d04a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800eb66:	79fb      	ldrb	r3, [r7, #7]
 800eb68:	f003 0320 	and.w	r3, r3, #32
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d060      	beq.n	800ec32 <f_open+0x362>
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	68db      	ldr	r3, [r3, #12]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d05c      	beq.n	800ec32 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	68da      	ldr	r2, [r3, #12]
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800eb80:	693b      	ldr	r3, [r7, #16]
 800eb82:	895b      	ldrh	r3, [r3, #10]
 800eb84:	025b      	lsls	r3, r3, #9
 800eb86:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	689b      	ldr	r3, [r3, #8]
 800eb8c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	68db      	ldr	r3, [r3, #12]
 800eb92:	657b      	str	r3, [r7, #84]	; 0x54
 800eb94:	e016      	b.n	800ebc4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f7fe fd1d 	bl	800d5da <get_fat>
 800eba0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800eba2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eba4:	2b01      	cmp	r3, #1
 800eba6:	d802      	bhi.n	800ebae <f_open+0x2de>
 800eba8:	2302      	movs	r3, #2
 800ebaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ebae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebb4:	d102      	bne.n	800ebbc <f_open+0x2ec>
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ebbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ebbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebc0:	1ad3      	subs	r3, r2, r3
 800ebc2:	657b      	str	r3, [r7, #84]	; 0x54
 800ebc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d103      	bne.n	800ebd4 <f_open+0x304>
 800ebcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ebce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebd0:	429a      	cmp	r2, r3
 800ebd2:	d8e0      	bhi.n	800eb96 <f_open+0x2c6>
				}
				fp->clust = clst;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ebd8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ebda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d127      	bne.n	800ec32 <f_open+0x362>
 800ebe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d022      	beq.n	800ec32 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f7fe fcd3 	bl	800d59c <clust2sect>
 800ebf6:	6478      	str	r0, [r7, #68]	; 0x44
 800ebf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d103      	bne.n	800ec06 <f_open+0x336>
						res = FR_INT_ERR;
 800ebfe:	2302      	movs	r3, #2
 800ec00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ec04:	e015      	b.n	800ec32 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ec06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec08:	0a5a      	lsrs	r2, r3, #9
 800ec0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec0c:	441a      	add	r2, r3
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ec12:	693b      	ldr	r3, [r7, #16]
 800ec14:	7858      	ldrb	r0, [r3, #1]
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	6a1a      	ldr	r2, [r3, #32]
 800ec20:	2301      	movs	r3, #1
 800ec22:	f7fe f911 	bl	800ce48 <disk_read>
 800ec26:	4603      	mov	r3, r0
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d002      	beq.n	800ec32 <f_open+0x362>
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ec32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d002      	beq.n	800ec40 <f_open+0x370>
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ec40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ec44:	4618      	mov	r0, r3
 800ec46:	3760      	adds	r7, #96	; 0x60
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}

0800ec4c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b08e      	sub	sp, #56	; 0x38
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	60f8      	str	r0, [r7, #12]
 800ec54:	60b9      	str	r1, [r7, #8]
 800ec56:	607a      	str	r2, [r7, #4]
 800ec58:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	2200      	movs	r2, #0
 800ec62:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	f107 0214 	add.w	r2, r7, #20
 800ec6a:	4611      	mov	r1, r2
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	f7ff fdb3 	bl	800e7d8 <validate>
 800ec72:	4603      	mov	r3, r0
 800ec74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ec78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d107      	bne.n	800ec90 <f_read+0x44>
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	7d5b      	ldrb	r3, [r3, #21]
 800ec84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ec88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d002      	beq.n	800ec96 <f_read+0x4a>
 800ec90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec94:	e115      	b.n	800eec2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	7d1b      	ldrb	r3, [r3, #20]
 800ec9a:	f003 0301 	and.w	r3, r3, #1
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d101      	bne.n	800eca6 <f_read+0x5a>
 800eca2:	2307      	movs	r3, #7
 800eca4:	e10d      	b.n	800eec2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	68da      	ldr	r2, [r3, #12]
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	699b      	ldr	r3, [r3, #24]
 800ecae:	1ad3      	subs	r3, r2, r3
 800ecb0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ecb2:	687a      	ldr	r2, [r7, #4]
 800ecb4:	6a3b      	ldr	r3, [r7, #32]
 800ecb6:	429a      	cmp	r2, r3
 800ecb8:	f240 80fe 	bls.w	800eeb8 <f_read+0x26c>
 800ecbc:	6a3b      	ldr	r3, [r7, #32]
 800ecbe:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ecc0:	e0fa      	b.n	800eeb8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	699b      	ldr	r3, [r3, #24]
 800ecc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	f040 80c6 	bne.w	800ee5c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	699b      	ldr	r3, [r3, #24]
 800ecd4:	0a5b      	lsrs	r3, r3, #9
 800ecd6:	697a      	ldr	r2, [r7, #20]
 800ecd8:	8952      	ldrh	r2, [r2, #10]
 800ecda:	3a01      	subs	r2, #1
 800ecdc:	4013      	ands	r3, r2
 800ecde:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ece0:	69fb      	ldr	r3, [r7, #28]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d12f      	bne.n	800ed46 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	699b      	ldr	r3, [r3, #24]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d103      	bne.n	800ecf6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	689b      	ldr	r3, [r3, #8]
 800ecf2:	633b      	str	r3, [r7, #48]	; 0x30
 800ecf4:	e013      	b.n	800ed1e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d007      	beq.n	800ed0e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	699b      	ldr	r3, [r3, #24]
 800ed02:	4619      	mov	r1, r3
 800ed04:	68f8      	ldr	r0, [r7, #12]
 800ed06:	f7fe fef9 	bl	800dafc <clmt_clust>
 800ed0a:	6338      	str	r0, [r7, #48]	; 0x30
 800ed0c:	e007      	b.n	800ed1e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ed0e:	68fa      	ldr	r2, [r7, #12]
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	69db      	ldr	r3, [r3, #28]
 800ed14:	4619      	mov	r1, r3
 800ed16:	4610      	mov	r0, r2
 800ed18:	f7fe fc5f 	bl	800d5da <get_fat>
 800ed1c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ed1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed20:	2b01      	cmp	r3, #1
 800ed22:	d804      	bhi.n	800ed2e <f_read+0xe2>
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	2202      	movs	r2, #2
 800ed28:	755a      	strb	r2, [r3, #21]
 800ed2a:	2302      	movs	r3, #2
 800ed2c:	e0c9      	b.n	800eec2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ed2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed34:	d104      	bne.n	800ed40 <f_read+0xf4>
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	2201      	movs	r2, #1
 800ed3a:	755a      	strb	r2, [r3, #21]
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	e0c0      	b.n	800eec2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed44:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ed46:	697a      	ldr	r2, [r7, #20]
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	69db      	ldr	r3, [r3, #28]
 800ed4c:	4619      	mov	r1, r3
 800ed4e:	4610      	mov	r0, r2
 800ed50:	f7fe fc24 	bl	800d59c <clust2sect>
 800ed54:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ed56:	69bb      	ldr	r3, [r7, #24]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d104      	bne.n	800ed66 <f_read+0x11a>
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	2202      	movs	r2, #2
 800ed60:	755a      	strb	r2, [r3, #21]
 800ed62:	2302      	movs	r3, #2
 800ed64:	e0ad      	b.n	800eec2 <f_read+0x276>
			sect += csect;
 800ed66:	69ba      	ldr	r2, [r7, #24]
 800ed68:	69fb      	ldr	r3, [r7, #28]
 800ed6a:	4413      	add	r3, r2
 800ed6c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	0a5b      	lsrs	r3, r3, #9
 800ed72:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ed74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d039      	beq.n	800edee <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ed7a:	69fa      	ldr	r2, [r7, #28]
 800ed7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed7e:	4413      	add	r3, r2
 800ed80:	697a      	ldr	r2, [r7, #20]
 800ed82:	8952      	ldrh	r2, [r2, #10]
 800ed84:	4293      	cmp	r3, r2
 800ed86:	d905      	bls.n	800ed94 <f_read+0x148>
					cc = fs->csize - csect;
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	895b      	ldrh	r3, [r3, #10]
 800ed8c:	461a      	mov	r2, r3
 800ed8e:	69fb      	ldr	r3, [r7, #28]
 800ed90:	1ad3      	subs	r3, r2, r3
 800ed92:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	7858      	ldrb	r0, [r3, #1]
 800ed98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed9a:	69ba      	ldr	r2, [r7, #24]
 800ed9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ed9e:	f7fe f853 	bl	800ce48 <disk_read>
 800eda2:	4603      	mov	r3, r0
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d004      	beq.n	800edb2 <f_read+0x166>
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	2201      	movs	r2, #1
 800edac:	755a      	strb	r2, [r3, #21]
 800edae:	2301      	movs	r3, #1
 800edb0:	e087      	b.n	800eec2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	7d1b      	ldrb	r3, [r3, #20]
 800edb6:	b25b      	sxtb	r3, r3
 800edb8:	2b00      	cmp	r3, #0
 800edba:	da14      	bge.n	800ede6 <f_read+0x19a>
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	6a1a      	ldr	r2, [r3, #32]
 800edc0:	69bb      	ldr	r3, [r7, #24]
 800edc2:	1ad3      	subs	r3, r2, r3
 800edc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edc6:	429a      	cmp	r2, r3
 800edc8:	d90d      	bls.n	800ede6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	6a1a      	ldr	r2, [r3, #32]
 800edce:	69bb      	ldr	r3, [r7, #24]
 800edd0:	1ad3      	subs	r3, r2, r3
 800edd2:	025b      	lsls	r3, r3, #9
 800edd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edd6:	18d0      	adds	r0, r2, r3
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	3330      	adds	r3, #48	; 0x30
 800eddc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ede0:	4619      	mov	r1, r3
 800ede2:	f7fe f911 	bl	800d008 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ede6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede8:	025b      	lsls	r3, r3, #9
 800edea:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800edec:	e050      	b.n	800ee90 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	6a1b      	ldr	r3, [r3, #32]
 800edf2:	69ba      	ldr	r2, [r7, #24]
 800edf4:	429a      	cmp	r2, r3
 800edf6:	d02e      	beq.n	800ee56 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	7d1b      	ldrb	r3, [r3, #20]
 800edfc:	b25b      	sxtb	r3, r3
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	da18      	bge.n	800ee34 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	7858      	ldrb	r0, [r3, #1]
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	6a1a      	ldr	r2, [r3, #32]
 800ee10:	2301      	movs	r3, #1
 800ee12:	f7fe f839 	bl	800ce88 <disk_write>
 800ee16:	4603      	mov	r3, r0
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d004      	beq.n	800ee26 <f_read+0x1da>
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	2201      	movs	r2, #1
 800ee20:	755a      	strb	r2, [r3, #21]
 800ee22:	2301      	movs	r3, #1
 800ee24:	e04d      	b.n	800eec2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	7d1b      	ldrb	r3, [r3, #20]
 800ee2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee2e:	b2da      	uxtb	r2, r3
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	7858      	ldrb	r0, [r3, #1]
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ee3e:	2301      	movs	r3, #1
 800ee40:	69ba      	ldr	r2, [r7, #24]
 800ee42:	f7fe f801 	bl	800ce48 <disk_read>
 800ee46:	4603      	mov	r3, r0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d004      	beq.n	800ee56 <f_read+0x20a>
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	2201      	movs	r2, #1
 800ee50:	755a      	strb	r2, [r3, #21]
 800ee52:	2301      	movs	r3, #1
 800ee54:	e035      	b.n	800eec2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	69ba      	ldr	r2, [r7, #24]
 800ee5a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	699b      	ldr	r3, [r3, #24]
 800ee60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee64:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ee68:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ee6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d901      	bls.n	800ee76 <f_read+0x22a>
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	699b      	ldr	r3, [r3, #24]
 800ee80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee84:	4413      	add	r3, r2
 800ee86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee88:	4619      	mov	r1, r3
 800ee8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee8c:	f7fe f8bc 	bl	800d008 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ee90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee94:	4413      	add	r3, r2
 800ee96:	627b      	str	r3, [r7, #36]	; 0x24
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	699a      	ldr	r2, [r3, #24]
 800ee9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee9e:	441a      	add	r2, r3
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	619a      	str	r2, [r3, #24]
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	681a      	ldr	r2, [r3, #0]
 800eea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeaa:	441a      	add	r2, r3
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	601a      	str	r2, [r3, #0]
 800eeb0:	687a      	ldr	r2, [r7, #4]
 800eeb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeb4:	1ad3      	subs	r3, r2, r3
 800eeb6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	f47f af01 	bne.w	800ecc2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800eec0:	2300      	movs	r3, #0
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3738      	adds	r7, #56	; 0x38
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}

0800eeca <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800eeca:	b580      	push	{r7, lr}
 800eecc:	b086      	sub	sp, #24
 800eece:	af00      	add	r7, sp, #0
 800eed0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f107 0208 	add.w	r2, r7, #8
 800eed8:	4611      	mov	r1, r2
 800eeda:	4618      	mov	r0, r3
 800eedc:	f7ff fc7c 	bl	800e7d8 <validate>
 800eee0:	4603      	mov	r3, r0
 800eee2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800eee4:	7dfb      	ldrb	r3, [r7, #23]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d168      	bne.n	800efbc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	7d1b      	ldrb	r3, [r3, #20]
 800eeee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d062      	beq.n	800efbc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	7d1b      	ldrb	r3, [r3, #20]
 800eefa:	b25b      	sxtb	r3, r3
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	da15      	bge.n	800ef2c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	7858      	ldrb	r0, [r3, #1]
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	6a1a      	ldr	r2, [r3, #32]
 800ef0e:	2301      	movs	r3, #1
 800ef10:	f7fd ffba 	bl	800ce88 <disk_write>
 800ef14:	4603      	mov	r3, r0
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d001      	beq.n	800ef1e <f_sync+0x54>
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	e04f      	b.n	800efbe <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	7d1b      	ldrb	r3, [r3, #20]
 800ef22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef26:	b2da      	uxtb	r2, r3
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ef2c:	f7fa ff50 	bl	8009dd0 <get_fattime>
 800ef30:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ef32:	68ba      	ldr	r2, [r7, #8]
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef38:	4619      	mov	r1, r3
 800ef3a:	4610      	mov	r0, r2
 800ef3c:	f7fe fa92 	bl	800d464 <move_window>
 800ef40:	4603      	mov	r3, r0
 800ef42:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ef44:	7dfb      	ldrb	r3, [r7, #23]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d138      	bne.n	800efbc <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef4e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	330b      	adds	r3, #11
 800ef54:	781a      	ldrb	r2, [r3, #0]
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	330b      	adds	r3, #11
 800ef5a:	f042 0220 	orr.w	r2, r2, #32
 800ef5e:	b2d2      	uxtb	r2, r2
 800ef60:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6818      	ldr	r0, [r3, #0]
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	689b      	ldr	r3, [r3, #8]
 800ef6a:	461a      	mov	r2, r3
 800ef6c:	68f9      	ldr	r1, [r7, #12]
 800ef6e:	f7fe ff9f 	bl	800deb0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	f103 021c 	add.w	r2, r3, #28
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	68db      	ldr	r3, [r3, #12]
 800ef7c:	4619      	mov	r1, r3
 800ef7e:	4610      	mov	r0, r2
 800ef80:	f7fe f816 	bl	800cfb0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	3316      	adds	r3, #22
 800ef88:	6939      	ldr	r1, [r7, #16]
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f7fe f810 	bl	800cfb0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	3312      	adds	r3, #18
 800ef94:	2100      	movs	r1, #0
 800ef96:	4618      	mov	r0, r3
 800ef98:	f7fd ffef 	bl	800cf7a <st_word>
					fs->wflag = 1;
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	2201      	movs	r2, #1
 800efa0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	4618      	mov	r0, r3
 800efa6:	f7fe fa8b 	bl	800d4c0 <sync_fs>
 800efaa:	4603      	mov	r3, r0
 800efac:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	7d1b      	ldrb	r3, [r3, #20]
 800efb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800efb6:	b2da      	uxtb	r2, r3
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800efbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3718      	adds	r7, #24
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}

0800efc6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800efc6:	b580      	push	{r7, lr}
 800efc8:	b084      	sub	sp, #16
 800efca:	af00      	add	r7, sp, #0
 800efcc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	f7ff ff7b 	bl	800eeca <f_sync>
 800efd4:	4603      	mov	r3, r0
 800efd6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800efd8:	7bfb      	ldrb	r3, [r7, #15]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d118      	bne.n	800f010 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f107 0208 	add.w	r2, r7, #8
 800efe4:	4611      	mov	r1, r2
 800efe6:	4618      	mov	r0, r3
 800efe8:	f7ff fbf6 	bl	800e7d8 <validate>
 800efec:	4603      	mov	r3, r0
 800efee:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800eff0:	7bfb      	ldrb	r3, [r7, #15]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d10c      	bne.n	800f010 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	691b      	ldr	r3, [r3, #16]
 800effa:	4618      	mov	r0, r3
 800effc:	f7fe f98e 	bl	800d31c <dec_lock>
 800f000:	4603      	mov	r3, r0
 800f002:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f004:	7bfb      	ldrb	r3, [r7, #15]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d102      	bne.n	800f010 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	2200      	movs	r2, #0
 800f00e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f010:	7bfb      	ldrb	r3, [r7, #15]
}
 800f012:	4618      	mov	r0, r3
 800f014:	3710      	adds	r7, #16
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}

0800f01a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800f01a:	b580      	push	{r7, lr}
 800f01c:	b090      	sub	sp, #64	; 0x40
 800f01e:	af00      	add	r7, sp, #0
 800f020:	6078      	str	r0, [r7, #4]
 800f022:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f107 0208 	add.w	r2, r7, #8
 800f02a:	4611      	mov	r1, r2
 800f02c:	4618      	mov	r0, r3
 800f02e:	f7ff fbd3 	bl	800e7d8 <validate>
 800f032:	4603      	mov	r3, r0
 800f034:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800f038:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d103      	bne.n	800f048 <f_lseek+0x2e>
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	7d5b      	ldrb	r3, [r3, #21]
 800f044:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f048:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d002      	beq.n	800f056 <f_lseek+0x3c>
 800f050:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f054:	e1e6      	b.n	800f424 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	f000 80d1 	beq.w	800f202 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f066:	d15a      	bne.n	800f11e <f_lseek+0x104>
			tbl = fp->cltbl;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f06c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f070:	1d1a      	adds	r2, r3, #4
 800f072:	627a      	str	r2, [r7, #36]	; 0x24
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	617b      	str	r3, [r7, #20]
 800f078:	2302      	movs	r3, #2
 800f07a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	689b      	ldr	r3, [r3, #8]
 800f080:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800f082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f084:	2b00      	cmp	r3, #0
 800f086:	d03a      	beq.n	800f0fe <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f08a:	613b      	str	r3, [r7, #16]
 800f08c:	2300      	movs	r3, #0
 800f08e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f092:	3302      	adds	r3, #2
 800f094:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800f096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f098:	60fb      	str	r3, [r7, #12]
 800f09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f09c:	3301      	adds	r3, #1
 800f09e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f7fe fa98 	bl	800d5da <get_fat>
 800f0aa:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ae:	2b01      	cmp	r3, #1
 800f0b0:	d804      	bhi.n	800f0bc <f_lseek+0xa2>
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	2202      	movs	r2, #2
 800f0b6:	755a      	strb	r2, [r3, #21]
 800f0b8:	2302      	movs	r3, #2
 800f0ba:	e1b3      	b.n	800f424 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0c2:	d104      	bne.n	800f0ce <f_lseek+0xb4>
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2201      	movs	r2, #1
 800f0c8:	755a      	strb	r2, [r3, #21]
 800f0ca:	2301      	movs	r3, #1
 800f0cc:	e1aa      	b.n	800f424 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	3301      	adds	r3, #1
 800f0d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0d4:	429a      	cmp	r2, r3
 800f0d6:	d0de      	beq.n	800f096 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f0d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0da:	697b      	ldr	r3, [r7, #20]
 800f0dc:	429a      	cmp	r2, r3
 800f0de:	d809      	bhi.n	800f0f4 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800f0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e2:	1d1a      	adds	r2, r3, #4
 800f0e4:	627a      	str	r2, [r7, #36]	; 0x24
 800f0e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0e8:	601a      	str	r2, [r3, #0]
 800f0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ec:	1d1a      	adds	r2, r3, #4
 800f0ee:	627a      	str	r2, [r7, #36]	; 0x24
 800f0f0:	693a      	ldr	r2, [r7, #16]
 800f0f2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f0f4:	68bb      	ldr	r3, [r7, #8]
 800f0f6:	695b      	ldr	r3, [r3, #20]
 800f0f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	d3c4      	bcc.n	800f088 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f104:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800f106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	429a      	cmp	r2, r3
 800f10c:	d803      	bhi.n	800f116 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800f10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f110:	2200      	movs	r2, #0
 800f112:	601a      	str	r2, [r3, #0]
 800f114:	e184      	b.n	800f420 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f116:	2311      	movs	r3, #17
 800f118:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f11c:	e180      	b.n	800f420 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	68db      	ldr	r3, [r3, #12]
 800f122:	683a      	ldr	r2, [r7, #0]
 800f124:	429a      	cmp	r2, r3
 800f126:	d902      	bls.n	800f12e <f_lseek+0x114>
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	68db      	ldr	r3, [r3, #12]
 800f12c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	683a      	ldr	r2, [r7, #0]
 800f132:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	2b00      	cmp	r3, #0
 800f138:	f000 8172 	beq.w	800f420 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	3b01      	subs	r3, #1
 800f140:	4619      	mov	r1, r3
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f7fe fcda 	bl	800dafc <clmt_clust>
 800f148:	4602      	mov	r2, r0
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800f14e:	68ba      	ldr	r2, [r7, #8]
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	69db      	ldr	r3, [r3, #28]
 800f154:	4619      	mov	r1, r3
 800f156:	4610      	mov	r0, r2
 800f158:	f7fe fa20 	bl	800d59c <clust2sect>
 800f15c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f15e:	69bb      	ldr	r3, [r7, #24]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d104      	bne.n	800f16e <f_lseek+0x154>
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	2202      	movs	r2, #2
 800f168:	755a      	strb	r2, [r3, #21]
 800f16a:	2302      	movs	r3, #2
 800f16c:	e15a      	b.n	800f424 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	3b01      	subs	r3, #1
 800f172:	0a5b      	lsrs	r3, r3, #9
 800f174:	68ba      	ldr	r2, [r7, #8]
 800f176:	8952      	ldrh	r2, [r2, #10]
 800f178:	3a01      	subs	r2, #1
 800f17a:	4013      	ands	r3, r2
 800f17c:	69ba      	ldr	r2, [r7, #24]
 800f17e:	4413      	add	r3, r2
 800f180:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	699b      	ldr	r3, [r3, #24]
 800f186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	f000 8148 	beq.w	800f420 <f_lseek+0x406>
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	6a1b      	ldr	r3, [r3, #32]
 800f194:	69ba      	ldr	r2, [r7, #24]
 800f196:	429a      	cmp	r2, r3
 800f198:	f000 8142 	beq.w	800f420 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	7d1b      	ldrb	r3, [r3, #20]
 800f1a0:	b25b      	sxtb	r3, r3
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	da18      	bge.n	800f1d8 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	7858      	ldrb	r0, [r3, #1]
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	6a1a      	ldr	r2, [r3, #32]
 800f1b4:	2301      	movs	r3, #1
 800f1b6:	f7fd fe67 	bl	800ce88 <disk_write>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d004      	beq.n	800f1ca <f_lseek+0x1b0>
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2201      	movs	r2, #1
 800f1c4:	755a      	strb	r2, [r3, #21]
 800f1c6:	2301      	movs	r3, #1
 800f1c8:	e12c      	b.n	800f424 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	7d1b      	ldrb	r3, [r3, #20]
 800f1ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f1d2:	b2da      	uxtb	r2, r3
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	7858      	ldrb	r0, [r3, #1]
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f1e2:	2301      	movs	r3, #1
 800f1e4:	69ba      	ldr	r2, [r7, #24]
 800f1e6:	f7fd fe2f 	bl	800ce48 <disk_read>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d004      	beq.n	800f1fa <f_lseek+0x1e0>
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2201      	movs	r2, #1
 800f1f4:	755a      	strb	r2, [r3, #21]
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	e114      	b.n	800f424 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	69ba      	ldr	r2, [r7, #24]
 800f1fe:	621a      	str	r2, [r3, #32]
 800f200:	e10e      	b.n	800f420 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	68db      	ldr	r3, [r3, #12]
 800f206:	683a      	ldr	r2, [r7, #0]
 800f208:	429a      	cmp	r2, r3
 800f20a:	d908      	bls.n	800f21e <f_lseek+0x204>
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	7d1b      	ldrb	r3, [r3, #20]
 800f210:	f003 0302 	and.w	r3, r3, #2
 800f214:	2b00      	cmp	r3, #0
 800f216:	d102      	bne.n	800f21e <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	68db      	ldr	r3, [r3, #12]
 800f21c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	699b      	ldr	r3, [r3, #24]
 800f222:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f224:	2300      	movs	r3, #0
 800f226:	637b      	str	r3, [r7, #52]	; 0x34
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f22c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	2b00      	cmp	r3, #0
 800f232:	f000 80a7 	beq.w	800f384 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	895b      	ldrh	r3, [r3, #10]
 800f23a:	025b      	lsls	r3, r3, #9
 800f23c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f23e:	6a3b      	ldr	r3, [r7, #32]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d01b      	beq.n	800f27c <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	1e5a      	subs	r2, r3, #1
 800f248:	69fb      	ldr	r3, [r7, #28]
 800f24a:	fbb2 f2f3 	udiv	r2, r2, r3
 800f24e:	6a3b      	ldr	r3, [r7, #32]
 800f250:	1e59      	subs	r1, r3, #1
 800f252:	69fb      	ldr	r3, [r7, #28]
 800f254:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f258:	429a      	cmp	r2, r3
 800f25a:	d30f      	bcc.n	800f27c <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f25c:	6a3b      	ldr	r3, [r7, #32]
 800f25e:	1e5a      	subs	r2, r3, #1
 800f260:	69fb      	ldr	r3, [r7, #28]
 800f262:	425b      	negs	r3, r3
 800f264:	401a      	ands	r2, r3
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	699b      	ldr	r3, [r3, #24]
 800f26e:	683a      	ldr	r2, [r7, #0]
 800f270:	1ad3      	subs	r3, r2, r3
 800f272:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	69db      	ldr	r3, [r3, #28]
 800f278:	63bb      	str	r3, [r7, #56]	; 0x38
 800f27a:	e022      	b.n	800f2c2 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	689b      	ldr	r3, [r3, #8]
 800f280:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f284:	2b00      	cmp	r3, #0
 800f286:	d119      	bne.n	800f2bc <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2100      	movs	r1, #0
 800f28c:	4618      	mov	r0, r3
 800f28e:	f7fe fb9d 	bl	800d9cc <create_chain>
 800f292:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f296:	2b01      	cmp	r3, #1
 800f298:	d104      	bne.n	800f2a4 <f_lseek+0x28a>
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	2202      	movs	r2, #2
 800f29e:	755a      	strb	r2, [r3, #21]
 800f2a0:	2302      	movs	r3, #2
 800f2a2:	e0bf      	b.n	800f424 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2aa:	d104      	bne.n	800f2b6 <f_lseek+0x29c>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2201      	movs	r2, #1
 800f2b0:	755a      	strb	r2, [r3, #21]
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	e0b6      	b.n	800f424 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2ba:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2c0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d05d      	beq.n	800f384 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800f2c8:	e03a      	b.n	800f340 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800f2ca:	683a      	ldr	r2, [r7, #0]
 800f2cc:	69fb      	ldr	r3, [r7, #28]
 800f2ce:	1ad3      	subs	r3, r2, r3
 800f2d0:	603b      	str	r3, [r7, #0]
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	699a      	ldr	r2, [r3, #24]
 800f2d6:	69fb      	ldr	r3, [r7, #28]
 800f2d8:	441a      	add	r2, r3
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	7d1b      	ldrb	r3, [r3, #20]
 800f2e2:	f003 0302 	and.w	r3, r3, #2
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d00b      	beq.n	800f302 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f7fe fb6c 	bl	800d9cc <create_chain>
 800f2f4:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d108      	bne.n	800f30e <f_lseek+0x2f4>
							ofs = 0; break;
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	603b      	str	r3, [r7, #0]
 800f300:	e022      	b.n	800f348 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f306:	4618      	mov	r0, r3
 800f308:	f7fe f967 	bl	800d5da <get_fat>
 800f30c:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f310:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f314:	d104      	bne.n	800f320 <f_lseek+0x306>
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2201      	movs	r2, #1
 800f31a:	755a      	strb	r2, [r3, #21]
 800f31c:	2301      	movs	r3, #1
 800f31e:	e081      	b.n	800f424 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f322:	2b01      	cmp	r3, #1
 800f324:	d904      	bls.n	800f330 <f_lseek+0x316>
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	695b      	ldr	r3, [r3, #20]
 800f32a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f32c:	429a      	cmp	r2, r3
 800f32e:	d304      	bcc.n	800f33a <f_lseek+0x320>
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2202      	movs	r2, #2
 800f334:	755a      	strb	r2, [r3, #21]
 800f336:	2302      	movs	r3, #2
 800f338:	e074      	b.n	800f424 <f_lseek+0x40a>
					fp->clust = clst;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f33e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f340:	683a      	ldr	r2, [r7, #0]
 800f342:	69fb      	ldr	r3, [r7, #28]
 800f344:	429a      	cmp	r2, r3
 800f346:	d8c0      	bhi.n	800f2ca <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	699a      	ldr	r2, [r3, #24]
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	441a      	add	r2, r3
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d012      	beq.n	800f384 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f362:	4618      	mov	r0, r3
 800f364:	f7fe f91a 	bl	800d59c <clust2sect>
 800f368:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f36a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d104      	bne.n	800f37a <f_lseek+0x360>
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2202      	movs	r2, #2
 800f374:	755a      	strb	r2, [r3, #21]
 800f376:	2302      	movs	r3, #2
 800f378:	e054      	b.n	800f424 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	0a5b      	lsrs	r3, r3, #9
 800f37e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f380:	4413      	add	r3, r2
 800f382:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	699a      	ldr	r2, [r3, #24]
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	68db      	ldr	r3, [r3, #12]
 800f38c:	429a      	cmp	r2, r3
 800f38e:	d90a      	bls.n	800f3a6 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	699a      	ldr	r2, [r3, #24]
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	7d1b      	ldrb	r3, [r3, #20]
 800f39c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3a0:	b2da      	uxtb	r2, r3
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	699b      	ldr	r3, [r3, #24]
 800f3aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d036      	beq.n	800f420 <f_lseek+0x406>
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	6a1b      	ldr	r3, [r3, #32]
 800f3b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f3b8:	429a      	cmp	r2, r3
 800f3ba:	d031      	beq.n	800f420 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	7d1b      	ldrb	r3, [r3, #20]
 800f3c0:	b25b      	sxtb	r3, r3
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	da18      	bge.n	800f3f8 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f3c6:	68bb      	ldr	r3, [r7, #8]
 800f3c8:	7858      	ldrb	r0, [r3, #1]
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6a1a      	ldr	r2, [r3, #32]
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	f7fd fd57 	bl	800ce88 <disk_write>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d004      	beq.n	800f3ea <f_lseek+0x3d0>
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	2201      	movs	r2, #1
 800f3e4:	755a      	strb	r2, [r3, #21]
 800f3e6:	2301      	movs	r3, #1
 800f3e8:	e01c      	b.n	800f424 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	7d1b      	ldrb	r3, [r3, #20]
 800f3ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f3f2:	b2da      	uxtb	r2, r3
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	7858      	ldrb	r0, [r3, #1]
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f402:	2301      	movs	r3, #1
 800f404:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f406:	f7fd fd1f 	bl	800ce48 <disk_read>
 800f40a:	4603      	mov	r3, r0
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d004      	beq.n	800f41a <f_lseek+0x400>
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2201      	movs	r2, #1
 800f414:	755a      	strb	r2, [r3, #21]
 800f416:	2301      	movs	r3, #1
 800f418:	e004      	b.n	800f424 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f41e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f420:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f424:	4618      	mov	r0, r3
 800f426:	3740      	adds	r7, #64	; 0x40
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}

0800f42c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f42c:	b480      	push	{r7}
 800f42e:	b087      	sub	sp, #28
 800f430:	af00      	add	r7, sp, #0
 800f432:	60f8      	str	r0, [r7, #12]
 800f434:	60b9      	str	r1, [r7, #8]
 800f436:	4613      	mov	r3, r2
 800f438:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f43a:	2301      	movs	r3, #1
 800f43c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f43e:	2300      	movs	r3, #0
 800f440:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f442:	4b1f      	ldr	r3, [pc, #124]	; (800f4c0 <FATFS_LinkDriverEx+0x94>)
 800f444:	7a5b      	ldrb	r3, [r3, #9]
 800f446:	b2db      	uxtb	r3, r3
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d131      	bne.n	800f4b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f44c:	4b1c      	ldr	r3, [pc, #112]	; (800f4c0 <FATFS_LinkDriverEx+0x94>)
 800f44e:	7a5b      	ldrb	r3, [r3, #9]
 800f450:	b2db      	uxtb	r3, r3
 800f452:	461a      	mov	r2, r3
 800f454:	4b1a      	ldr	r3, [pc, #104]	; (800f4c0 <FATFS_LinkDriverEx+0x94>)
 800f456:	2100      	movs	r1, #0
 800f458:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f45a:	4b19      	ldr	r3, [pc, #100]	; (800f4c0 <FATFS_LinkDriverEx+0x94>)
 800f45c:	7a5b      	ldrb	r3, [r3, #9]
 800f45e:	b2db      	uxtb	r3, r3
 800f460:	4a17      	ldr	r2, [pc, #92]	; (800f4c0 <FATFS_LinkDriverEx+0x94>)
 800f462:	009b      	lsls	r3, r3, #2
 800f464:	4413      	add	r3, r2
 800f466:	68fa      	ldr	r2, [r7, #12]
 800f468:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f46a:	4b15      	ldr	r3, [pc, #84]	; (800f4c0 <FATFS_LinkDriverEx+0x94>)
 800f46c:	7a5b      	ldrb	r3, [r3, #9]
 800f46e:	b2db      	uxtb	r3, r3
 800f470:	461a      	mov	r2, r3
 800f472:	4b13      	ldr	r3, [pc, #76]	; (800f4c0 <FATFS_LinkDriverEx+0x94>)
 800f474:	4413      	add	r3, r2
 800f476:	79fa      	ldrb	r2, [r7, #7]
 800f478:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f47a:	4b11      	ldr	r3, [pc, #68]	; (800f4c0 <FATFS_LinkDriverEx+0x94>)
 800f47c:	7a5b      	ldrb	r3, [r3, #9]
 800f47e:	b2db      	uxtb	r3, r3
 800f480:	1c5a      	adds	r2, r3, #1
 800f482:	b2d1      	uxtb	r1, r2
 800f484:	4a0e      	ldr	r2, [pc, #56]	; (800f4c0 <FATFS_LinkDriverEx+0x94>)
 800f486:	7251      	strb	r1, [r2, #9]
 800f488:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f48a:	7dbb      	ldrb	r3, [r7, #22]
 800f48c:	3330      	adds	r3, #48	; 0x30
 800f48e:	b2da      	uxtb	r2, r3
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	3301      	adds	r3, #1
 800f498:	223a      	movs	r2, #58	; 0x3a
 800f49a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f49c:	68bb      	ldr	r3, [r7, #8]
 800f49e:	3302      	adds	r3, #2
 800f4a0:	222f      	movs	r2, #47	; 0x2f
 800f4a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	3303      	adds	r3, #3
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f4b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	371c      	adds	r7, #28
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4bc:	4770      	bx	lr
 800f4be:	bf00      	nop
 800f4c0:	200013ac 	.word	0x200013ac

0800f4c4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b082      	sub	sp, #8
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
 800f4cc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	6839      	ldr	r1, [r7, #0]
 800f4d2:	6878      	ldr	r0, [r7, #4]
 800f4d4:	f7ff ffaa 	bl	800f42c <FATFS_LinkDriverEx>
 800f4d8:	4603      	mov	r3, r0
}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	3708      	adds	r7, #8
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}
	...

0800f4e4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800f4e8:	2201      	movs	r2, #1
 800f4ea:	490e      	ldr	r1, [pc, #56]	; (800f524 <MX_USB_HOST_Init+0x40>)
 800f4ec:	480e      	ldr	r0, [pc, #56]	; (800f528 <MX_USB_HOST_Init+0x44>)
 800f4ee:	f7fc f913 	bl	800b718 <USBH_Init>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d001      	beq.n	800f4fc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800f4f8:	f7f2 facc 	bl	8001a94 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800f4fc:	490b      	ldr	r1, [pc, #44]	; (800f52c <MX_USB_HOST_Init+0x48>)
 800f4fe:	480a      	ldr	r0, [pc, #40]	; (800f528 <MX_USB_HOST_Init+0x44>)
 800f500:	f7fc f998 	bl	800b834 <USBH_RegisterClass>
 800f504:	4603      	mov	r3, r0
 800f506:	2b00      	cmp	r3, #0
 800f508:	d001      	beq.n	800f50e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800f50a:	f7f2 fac3 	bl	8001a94 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800f50e:	4806      	ldr	r0, [pc, #24]	; (800f528 <MX_USB_HOST_Init+0x44>)
 800f510:	f7fc fa1c 	bl	800b94c <USBH_Start>
 800f514:	4603      	mov	r3, r0
 800f516:	2b00      	cmp	r3, #0
 800f518:	d001      	beq.n	800f51e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800f51a:	f7f2 fabb 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800f51e:	bf00      	nop
 800f520:	bd80      	pop	{r7, pc}
 800f522:	bf00      	nop
 800f524:	0800f545 	.word	0x0800f545
 800f528:	20001a8c 	.word	0x20001a8c
 800f52c:	20000020 	.word	0x20000020

0800f530 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800f534:	4802      	ldr	r0, [pc, #8]	; (800f540 <MX_USB_HOST_Process+0x10>)
 800f536:	f7fc fa19 	bl	800b96c <USBH_Process>
}
 800f53a:	bf00      	nop
 800f53c:	bd80      	pop	{r7, pc}
 800f53e:	bf00      	nop
 800f540:	20001a8c 	.word	0x20001a8c

0800f544 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800f544:	b480      	push	{r7}
 800f546:	b083      	sub	sp, #12
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
 800f54c:	460b      	mov	r3, r1
 800f54e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800f550:	78fb      	ldrb	r3, [r7, #3]
 800f552:	3b01      	subs	r3, #1
 800f554:	2b04      	cmp	r3, #4
 800f556:	d819      	bhi.n	800f58c <USBH_UserProcess+0x48>
 800f558:	a201      	add	r2, pc, #4	; (adr r2, 800f560 <USBH_UserProcess+0x1c>)
 800f55a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f55e:	bf00      	nop
 800f560:	0800f58d 	.word	0x0800f58d
 800f564:	0800f57d 	.word	0x0800f57d
 800f568:	0800f58d 	.word	0x0800f58d
 800f56c:	0800f585 	.word	0x0800f585
 800f570:	0800f575 	.word	0x0800f575
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800f574:	4b09      	ldr	r3, [pc, #36]	; (800f59c <USBH_UserProcess+0x58>)
 800f576:	2203      	movs	r2, #3
 800f578:	701a      	strb	r2, [r3, #0]
  break;
 800f57a:	e008      	b.n	800f58e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800f57c:	4b07      	ldr	r3, [pc, #28]	; (800f59c <USBH_UserProcess+0x58>)
 800f57e:	2202      	movs	r2, #2
 800f580:	701a      	strb	r2, [r3, #0]
  break;
 800f582:	e004      	b.n	800f58e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800f584:	4b05      	ldr	r3, [pc, #20]	; (800f59c <USBH_UserProcess+0x58>)
 800f586:	2201      	movs	r2, #1
 800f588:	701a      	strb	r2, [r3, #0]
  break;
 800f58a:	e000      	b.n	800f58e <USBH_UserProcess+0x4a>

  default:
  break;
 800f58c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800f58e:	bf00      	nop
 800f590:	370c      	adds	r7, #12
 800f592:	46bd      	mov	sp, r7
 800f594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f598:	4770      	bx	lr
 800f59a:	bf00      	nop
 800f59c:	200013b8 	.word	0x200013b8

0800f5a0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b08a      	sub	sp, #40	; 0x28
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f5a8:	f107 0314 	add.w	r3, r7, #20
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	601a      	str	r2, [r3, #0]
 800f5b0:	605a      	str	r2, [r3, #4]
 800f5b2:	609a      	str	r2, [r3, #8]
 800f5b4:	60da      	str	r2, [r3, #12]
 800f5b6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f5c0:	d147      	bne.n	800f652 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	613b      	str	r3, [r7, #16]
 800f5c6:	4b25      	ldr	r3, [pc, #148]	; (800f65c <HAL_HCD_MspInit+0xbc>)
 800f5c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5ca:	4a24      	ldr	r2, [pc, #144]	; (800f65c <HAL_HCD_MspInit+0xbc>)
 800f5cc:	f043 0301 	orr.w	r3, r3, #1
 800f5d0:	6313      	str	r3, [r2, #48]	; 0x30
 800f5d2:	4b22      	ldr	r3, [pc, #136]	; (800f65c <HAL_HCD_MspInit+0xbc>)
 800f5d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5d6:	f003 0301 	and.w	r3, r3, #1
 800f5da:	613b      	str	r3, [r7, #16]
 800f5dc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800f5de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f5e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f5ec:	f107 0314 	add.w	r3, r7, #20
 800f5f0:	4619      	mov	r1, r3
 800f5f2:	481b      	ldr	r0, [pc, #108]	; (800f660 <HAL_HCD_MspInit+0xc0>)
 800f5f4:	f7f4 faf0 	bl	8003bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f5f8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f5fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f5fe:	2302      	movs	r3, #2
 800f600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f602:	2300      	movs	r3, #0
 800f604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f606:	2303      	movs	r3, #3
 800f608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f60a:	230a      	movs	r3, #10
 800f60c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f60e:	f107 0314 	add.w	r3, r7, #20
 800f612:	4619      	mov	r1, r3
 800f614:	4812      	ldr	r0, [pc, #72]	; (800f660 <HAL_HCD_MspInit+0xc0>)
 800f616:	f7f4 fadf 	bl	8003bd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f61a:	4b10      	ldr	r3, [pc, #64]	; (800f65c <HAL_HCD_MspInit+0xbc>)
 800f61c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f61e:	4a0f      	ldr	r2, [pc, #60]	; (800f65c <HAL_HCD_MspInit+0xbc>)
 800f620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f624:	6353      	str	r3, [r2, #52]	; 0x34
 800f626:	2300      	movs	r3, #0
 800f628:	60fb      	str	r3, [r7, #12]
 800f62a:	4b0c      	ldr	r3, [pc, #48]	; (800f65c <HAL_HCD_MspInit+0xbc>)
 800f62c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f62e:	4a0b      	ldr	r2, [pc, #44]	; (800f65c <HAL_HCD_MspInit+0xbc>)
 800f630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f634:	6453      	str	r3, [r2, #68]	; 0x44
 800f636:	4b09      	ldr	r3, [pc, #36]	; (800f65c <HAL_HCD_MspInit+0xbc>)
 800f638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f63a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f63e:	60fb      	str	r3, [r7, #12]
 800f640:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f642:	2200      	movs	r2, #0
 800f644:	2100      	movs	r1, #0
 800f646:	2043      	movs	r0, #67	; 0x43
 800f648:	f7f3 febc 	bl	80033c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f64c:	2043      	movs	r0, #67	; 0x43
 800f64e:	f7f3 fed5 	bl	80033fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f652:	bf00      	nop
 800f654:	3728      	adds	r7, #40	; 0x28
 800f656:	46bd      	mov	sp, r7
 800f658:	bd80      	pop	{r7, pc}
 800f65a:	bf00      	nop
 800f65c:	40023800 	.word	0x40023800
 800f660:	40020000 	.word	0x40020000

0800f664 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b082      	sub	sp, #8
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f672:	4618      	mov	r0, r3
 800f674:	f7fc fd4d 	bl	800c112 <USBH_LL_IncTimer>
}
 800f678:	bf00      	nop
 800f67a:	3708      	adds	r7, #8
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd80      	pop	{r7, pc}

0800f680 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b082      	sub	sp, #8
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f68e:	4618      	mov	r0, r3
 800f690:	f7fc fd85 	bl	800c19e <USBH_LL_Connect>
}
 800f694:	bf00      	nop
 800f696:	3708      	adds	r7, #8
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}

0800f69c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b082      	sub	sp, #8
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f7fc fd8e 	bl	800c1cc <USBH_LL_Disconnect>
}
 800f6b0:	bf00      	nop
 800f6b2:	3708      	adds	r7, #8
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	bd80      	pop	{r7, pc}

0800f6b8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f6b8:	b480      	push	{r7}
 800f6ba:	b083      	sub	sp, #12
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
 800f6c0:	460b      	mov	r3, r1
 800f6c2:	70fb      	strb	r3, [r7, #3]
 800f6c4:	4613      	mov	r3, r2
 800f6c6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800f6c8:	bf00      	nop
 800f6ca:	370c      	adds	r7, #12
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d2:	4770      	bx	lr

0800f6d4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b082      	sub	sp, #8
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f7fc fd3f 	bl	800c166 <USBH_LL_PortEnabled>
}
 800f6e8:	bf00      	nop
 800f6ea:	3708      	adds	r7, #8
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bd80      	pop	{r7, pc}

0800f6f0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b082      	sub	sp, #8
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7fc fd3f 	bl	800c182 <USBH_LL_PortDisabled>
}
 800f704:	bf00      	nop
 800f706:	3708      	adds	r7, #8
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd80      	pop	{r7, pc}

0800f70c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b082      	sub	sp, #8
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f71a:	2b01      	cmp	r3, #1
 800f71c:	d12a      	bne.n	800f774 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800f71e:	4a18      	ldr	r2, [pc, #96]	; (800f780 <USBH_LL_Init+0x74>)
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	4a15      	ldr	r2, [pc, #84]	; (800f780 <USBH_LL_Init+0x74>)
 800f72a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f72e:	4b14      	ldr	r3, [pc, #80]	; (800f780 <USBH_LL_Init+0x74>)
 800f730:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f734:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800f736:	4b12      	ldr	r3, [pc, #72]	; (800f780 <USBH_LL_Init+0x74>)
 800f738:	2208      	movs	r2, #8
 800f73a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800f73c:	4b10      	ldr	r3, [pc, #64]	; (800f780 <USBH_LL_Init+0x74>)
 800f73e:	2201      	movs	r2, #1
 800f740:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f742:	4b0f      	ldr	r3, [pc, #60]	; (800f780 <USBH_LL_Init+0x74>)
 800f744:	2200      	movs	r2, #0
 800f746:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800f748:	4b0d      	ldr	r3, [pc, #52]	; (800f780 <USBH_LL_Init+0x74>)
 800f74a:	2202      	movs	r2, #2
 800f74c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f74e:	4b0c      	ldr	r3, [pc, #48]	; (800f780 <USBH_LL_Init+0x74>)
 800f750:	2200      	movs	r2, #0
 800f752:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800f754:	480a      	ldr	r0, [pc, #40]	; (800f780 <USBH_LL_Init+0x74>)
 800f756:	f7f4 fc30 	bl	8003fba <HAL_HCD_Init>
 800f75a:	4603      	mov	r3, r0
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d001      	beq.n	800f764 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800f760:	f7f2 f998 	bl	8001a94 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800f764:	4806      	ldr	r0, [pc, #24]	; (800f780 <USBH_LL_Init+0x74>)
 800f766:	f7f5 f814 	bl	8004792 <HAL_HCD_GetCurrentFrame>
 800f76a:	4603      	mov	r3, r0
 800f76c:	4619      	mov	r1, r3
 800f76e:	6878      	ldr	r0, [r7, #4]
 800f770:	f7fc fcc0 	bl	800c0f4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f774:	2300      	movs	r3, #0
}
 800f776:	4618      	mov	r0, r3
 800f778:	3708      	adds	r7, #8
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}
 800f77e:	bf00      	nop
 800f780:	20001e64 	.word	0x20001e64

0800f784 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b084      	sub	sp, #16
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f78c:	2300      	movs	r3, #0
 800f78e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f790:	2300      	movs	r3, #0
 800f792:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f79a:	4618      	mov	r0, r3
 800f79c:	f7f4 ff83 	bl	80046a6 <HAL_HCD_Start>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f7a4:	7bfb      	ldrb	r3, [r7, #15]
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f000 f982 	bl	800fab0 <USBH_Get_USB_Status>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f7b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	3710      	adds	r7, #16
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd80      	pop	{r7, pc}

0800f7ba <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f7ba:	b580      	push	{r7, lr}
 800f7bc:	b084      	sub	sp, #16
 800f7be:	af00      	add	r7, sp, #0
 800f7c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f7f4 ff8b 	bl	80046ec <HAL_HCD_Stop>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f7da:	7bfb      	ldrb	r3, [r7, #15]
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f000 f967 	bl	800fab0 <USBH_Get_USB_Status>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f7e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	3710      	adds	r7, #16
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	bd80      	pop	{r7, pc}

0800f7f0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b084      	sub	sp, #16
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f802:	4618      	mov	r0, r3
 800f804:	f7f4 ffd3 	bl	80047ae <HAL_HCD_GetCurrentSpeed>
 800f808:	4603      	mov	r3, r0
 800f80a:	2b02      	cmp	r3, #2
 800f80c:	d00c      	beq.n	800f828 <USBH_LL_GetSpeed+0x38>
 800f80e:	2b02      	cmp	r3, #2
 800f810:	d80d      	bhi.n	800f82e <USBH_LL_GetSpeed+0x3e>
 800f812:	2b00      	cmp	r3, #0
 800f814:	d002      	beq.n	800f81c <USBH_LL_GetSpeed+0x2c>
 800f816:	2b01      	cmp	r3, #1
 800f818:	d003      	beq.n	800f822 <USBH_LL_GetSpeed+0x32>
 800f81a:	e008      	b.n	800f82e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800f81c:	2300      	movs	r3, #0
 800f81e:	73fb      	strb	r3, [r7, #15]
    break;
 800f820:	e008      	b.n	800f834 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800f822:	2301      	movs	r3, #1
 800f824:	73fb      	strb	r3, [r7, #15]
    break;
 800f826:	e005      	b.n	800f834 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800f828:	2302      	movs	r3, #2
 800f82a:	73fb      	strb	r3, [r7, #15]
    break;
 800f82c:	e002      	b.n	800f834 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800f82e:	2301      	movs	r3, #1
 800f830:	73fb      	strb	r3, [r7, #15]
    break;
 800f832:	bf00      	nop
  }
  return  speed;
 800f834:	7bfb      	ldrb	r3, [r7, #15]
}
 800f836:	4618      	mov	r0, r3
 800f838:	3710      	adds	r7, #16
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}

0800f83e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800f83e:	b580      	push	{r7, lr}
 800f840:	b084      	sub	sp, #16
 800f842:	af00      	add	r7, sp, #0
 800f844:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f846:	2300      	movs	r3, #0
 800f848:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f84a:	2300      	movs	r3, #0
 800f84c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f854:	4618      	mov	r0, r3
 800f856:	f7f4 ff66 	bl	8004726 <HAL_HCD_ResetPort>
 800f85a:	4603      	mov	r3, r0
 800f85c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f85e:	7bfb      	ldrb	r3, [r7, #15]
 800f860:	4618      	mov	r0, r3
 800f862:	f000 f925 	bl	800fab0 <USBH_Get_USB_Status>
 800f866:	4603      	mov	r3, r0
 800f868:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f86a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f86c:	4618      	mov	r0, r3
 800f86e:	3710      	adds	r7, #16
 800f870:	46bd      	mov	sp, r7
 800f872:	bd80      	pop	{r7, pc}

0800f874 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b082      	sub	sp, #8
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
 800f87c:	460b      	mov	r3, r1
 800f87e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f886:	78fa      	ldrb	r2, [r7, #3]
 800f888:	4611      	mov	r1, r2
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7f4 ff6d 	bl	800476a <HAL_HCD_HC_GetXferCount>
 800f890:	4603      	mov	r3, r0
}
 800f892:	4618      	mov	r0, r3
 800f894:	3708      	adds	r7, #8
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}

0800f89a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f89a:	b590      	push	{r4, r7, lr}
 800f89c:	b089      	sub	sp, #36	; 0x24
 800f89e:	af04      	add	r7, sp, #16
 800f8a0:	6078      	str	r0, [r7, #4]
 800f8a2:	4608      	mov	r0, r1
 800f8a4:	4611      	mov	r1, r2
 800f8a6:	461a      	mov	r2, r3
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	70fb      	strb	r3, [r7, #3]
 800f8ac:	460b      	mov	r3, r1
 800f8ae:	70bb      	strb	r3, [r7, #2]
 800f8b0:	4613      	mov	r3, r2
 800f8b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f8c2:	787c      	ldrb	r4, [r7, #1]
 800f8c4:	78ba      	ldrb	r2, [r7, #2]
 800f8c6:	78f9      	ldrb	r1, [r7, #3]
 800f8c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f8ca:	9302      	str	r3, [sp, #8]
 800f8cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f8d0:	9301      	str	r3, [sp, #4]
 800f8d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f8d6:	9300      	str	r3, [sp, #0]
 800f8d8:	4623      	mov	r3, r4
 800f8da:	f7f4 fbd0 	bl	800407e <HAL_HCD_HC_Init>
 800f8de:	4603      	mov	r3, r0
 800f8e0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f8e2:	7bfb      	ldrb	r3, [r7, #15]
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f000 f8e3 	bl	800fab0 <USBH_Get_USB_Status>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f8ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3714      	adds	r7, #20
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd90      	pop	{r4, r7, pc}

0800f8f8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b084      	sub	sp, #16
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
 800f900:	460b      	mov	r3, r1
 800f902:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f904:	2300      	movs	r3, #0
 800f906:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f908:	2300      	movs	r3, #0
 800f90a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f912:	78fa      	ldrb	r2, [r7, #3]
 800f914:	4611      	mov	r1, r2
 800f916:	4618      	mov	r0, r3
 800f918:	f7f4 fc40 	bl	800419c <HAL_HCD_HC_Halt>
 800f91c:	4603      	mov	r3, r0
 800f91e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f920:	7bfb      	ldrb	r3, [r7, #15]
 800f922:	4618      	mov	r0, r3
 800f924:	f000 f8c4 	bl	800fab0 <USBH_Get_USB_Status>
 800f928:	4603      	mov	r3, r0
 800f92a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f92c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f92e:	4618      	mov	r0, r3
 800f930:	3710      	adds	r7, #16
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}

0800f936 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f936:	b590      	push	{r4, r7, lr}
 800f938:	b089      	sub	sp, #36	; 0x24
 800f93a:	af04      	add	r7, sp, #16
 800f93c:	6078      	str	r0, [r7, #4]
 800f93e:	4608      	mov	r0, r1
 800f940:	4611      	mov	r1, r2
 800f942:	461a      	mov	r2, r3
 800f944:	4603      	mov	r3, r0
 800f946:	70fb      	strb	r3, [r7, #3]
 800f948:	460b      	mov	r3, r1
 800f94a:	70bb      	strb	r3, [r7, #2]
 800f94c:	4613      	mov	r3, r2
 800f94e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f950:	2300      	movs	r3, #0
 800f952:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f954:	2300      	movs	r3, #0
 800f956:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f95e:	787c      	ldrb	r4, [r7, #1]
 800f960:	78ba      	ldrb	r2, [r7, #2]
 800f962:	78f9      	ldrb	r1, [r7, #3]
 800f964:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f968:	9303      	str	r3, [sp, #12]
 800f96a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f96c:	9302      	str	r3, [sp, #8]
 800f96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f970:	9301      	str	r3, [sp, #4]
 800f972:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f976:	9300      	str	r3, [sp, #0]
 800f978:	4623      	mov	r3, r4
 800f97a:	f7f4 fc33 	bl	80041e4 <HAL_HCD_HC_SubmitRequest>
 800f97e:	4603      	mov	r3, r0
 800f980:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800f982:	7bfb      	ldrb	r3, [r7, #15]
 800f984:	4618      	mov	r0, r3
 800f986:	f000 f893 	bl	800fab0 <USBH_Get_USB_Status>
 800f98a:	4603      	mov	r3, r0
 800f98c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f98e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f990:	4618      	mov	r0, r3
 800f992:	3714      	adds	r7, #20
 800f994:	46bd      	mov	sp, r7
 800f996:	bd90      	pop	{r4, r7, pc}

0800f998 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b082      	sub	sp, #8
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
 800f9a0:	460b      	mov	r3, r1
 800f9a2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f9aa:	78fa      	ldrb	r2, [r7, #3]
 800f9ac:	4611      	mov	r1, r2
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f7f4 fec7 	bl	8004742 <HAL_HCD_HC_GetURBState>
 800f9b4:	4603      	mov	r3, r0
}
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	3708      	adds	r7, #8
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}

0800f9be <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f9be:	b580      	push	{r7, lr}
 800f9c0:	b082      	sub	sp, #8
 800f9c2:	af00      	add	r7, sp, #0
 800f9c4:	6078      	str	r0, [r7, #4]
 800f9c6:	460b      	mov	r3, r1
 800f9c8:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800f9ca:	20c8      	movs	r0, #200	; 0xc8
 800f9cc:	f7f2 fdb2 	bl	8002534 <HAL_Delay>
  return USBH_OK;
 800f9d0:	2300      	movs	r3, #0
}
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	3708      	adds	r7, #8
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	bd80      	pop	{r7, pc}

0800f9da <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f9da:	b480      	push	{r7}
 800f9dc:	b085      	sub	sp, #20
 800f9de:	af00      	add	r7, sp, #0
 800f9e0:	6078      	str	r0, [r7, #4]
 800f9e2:	460b      	mov	r3, r1
 800f9e4:	70fb      	strb	r3, [r7, #3]
 800f9e6:	4613      	mov	r3, r2
 800f9e8:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f9f0:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f9f2:	78fb      	ldrb	r3, [r7, #3]
 800f9f4:	68fa      	ldr	r2, [r7, #12]
 800f9f6:	212c      	movs	r1, #44	; 0x2c
 800f9f8:	fb01 f303 	mul.w	r3, r1, r3
 800f9fc:	4413      	add	r3, r2
 800f9fe:	333b      	adds	r3, #59	; 0x3b
 800fa00:	781b      	ldrb	r3, [r3, #0]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d009      	beq.n	800fa1a <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800fa06:	78fb      	ldrb	r3, [r7, #3]
 800fa08:	68fa      	ldr	r2, [r7, #12]
 800fa0a:	212c      	movs	r1, #44	; 0x2c
 800fa0c:	fb01 f303 	mul.w	r3, r1, r3
 800fa10:	4413      	add	r3, r2
 800fa12:	3354      	adds	r3, #84	; 0x54
 800fa14:	78ba      	ldrb	r2, [r7, #2]
 800fa16:	701a      	strb	r2, [r3, #0]
 800fa18:	e008      	b.n	800fa2c <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800fa1a:	78fb      	ldrb	r3, [r7, #3]
 800fa1c:	68fa      	ldr	r2, [r7, #12]
 800fa1e:	212c      	movs	r1, #44	; 0x2c
 800fa20:	fb01 f303 	mul.w	r3, r1, r3
 800fa24:	4413      	add	r3, r2
 800fa26:	3355      	adds	r3, #85	; 0x55
 800fa28:	78ba      	ldrb	r2, [r7, #2]
 800fa2a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800fa2c:	2300      	movs	r3, #0
}
 800fa2e:	4618      	mov	r0, r3
 800fa30:	3714      	adds	r7, #20
 800fa32:	46bd      	mov	sp, r7
 800fa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa38:	4770      	bx	lr

0800fa3a <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fa3a:	b480      	push	{r7}
 800fa3c:	b085      	sub	sp, #20
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	6078      	str	r0, [r7, #4]
 800fa42:	460b      	mov	r3, r1
 800fa44:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800fa46:	2300      	movs	r3, #0
 800fa48:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fa50:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800fa52:	78fb      	ldrb	r3, [r7, #3]
 800fa54:	68ba      	ldr	r2, [r7, #8]
 800fa56:	212c      	movs	r1, #44	; 0x2c
 800fa58:	fb01 f303 	mul.w	r3, r1, r3
 800fa5c:	4413      	add	r3, r2
 800fa5e:	333b      	adds	r3, #59	; 0x3b
 800fa60:	781b      	ldrb	r3, [r3, #0]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d009      	beq.n	800fa7a <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800fa66:	78fb      	ldrb	r3, [r7, #3]
 800fa68:	68ba      	ldr	r2, [r7, #8]
 800fa6a:	212c      	movs	r1, #44	; 0x2c
 800fa6c:	fb01 f303 	mul.w	r3, r1, r3
 800fa70:	4413      	add	r3, r2
 800fa72:	3354      	adds	r3, #84	; 0x54
 800fa74:	781b      	ldrb	r3, [r3, #0]
 800fa76:	73fb      	strb	r3, [r7, #15]
 800fa78:	e008      	b.n	800fa8c <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800fa7a:	78fb      	ldrb	r3, [r7, #3]
 800fa7c:	68ba      	ldr	r2, [r7, #8]
 800fa7e:	212c      	movs	r1, #44	; 0x2c
 800fa80:	fb01 f303 	mul.w	r3, r1, r3
 800fa84:	4413      	add	r3, r2
 800fa86:	3355      	adds	r3, #85	; 0x55
 800fa88:	781b      	ldrb	r3, [r3, #0]
 800fa8a:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800fa8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa8e:	4618      	mov	r0, r3
 800fa90:	3714      	adds	r7, #20
 800fa92:	46bd      	mov	sp, r7
 800fa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa98:	4770      	bx	lr

0800fa9a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800fa9a:	b580      	push	{r7, lr}
 800fa9c:	b082      	sub	sp, #8
 800fa9e:	af00      	add	r7, sp, #0
 800faa0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800faa2:	6878      	ldr	r0, [r7, #4]
 800faa4:	f7f2 fd46 	bl	8002534 <HAL_Delay>
}
 800faa8:	bf00      	nop
 800faaa:	3708      	adds	r7, #8
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}

0800fab0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fab0:	b480      	push	{r7}
 800fab2:	b085      	sub	sp, #20
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	4603      	mov	r3, r0
 800fab8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800faba:	2300      	movs	r3, #0
 800fabc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fabe:	79fb      	ldrb	r3, [r7, #7]
 800fac0:	2b03      	cmp	r3, #3
 800fac2:	d817      	bhi.n	800faf4 <USBH_Get_USB_Status+0x44>
 800fac4:	a201      	add	r2, pc, #4	; (adr r2, 800facc <USBH_Get_USB_Status+0x1c>)
 800fac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faca:	bf00      	nop
 800facc:	0800fadd 	.word	0x0800fadd
 800fad0:	0800fae3 	.word	0x0800fae3
 800fad4:	0800fae9 	.word	0x0800fae9
 800fad8:	0800faef 	.word	0x0800faef
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800fadc:	2300      	movs	r3, #0
 800fade:	73fb      	strb	r3, [r7, #15]
    break;
 800fae0:	e00b      	b.n	800fafa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800fae2:	2302      	movs	r3, #2
 800fae4:	73fb      	strb	r3, [r7, #15]
    break;
 800fae6:	e008      	b.n	800fafa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800fae8:	2301      	movs	r3, #1
 800faea:	73fb      	strb	r3, [r7, #15]
    break;
 800faec:	e005      	b.n	800fafa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800faee:	2302      	movs	r3, #2
 800faf0:	73fb      	strb	r3, [r7, #15]
    break;
 800faf2:	e002      	b.n	800fafa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800faf4:	2302      	movs	r3, #2
 800faf6:	73fb      	strb	r3, [r7, #15]
    break;
 800faf8:	bf00      	nop
  }
  return usb_status;
 800fafa:	7bfb      	ldrb	r3, [r7, #15]
}
 800fafc:	4618      	mov	r0, r3
 800fafe:	3714      	adds	r7, #20
 800fb00:	46bd      	mov	sp, r7
 800fb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb06:	4770      	bx	lr

0800fb08 <__errno>:
 800fb08:	4b01      	ldr	r3, [pc, #4]	; (800fb10 <__errno+0x8>)
 800fb0a:	6818      	ldr	r0, [r3, #0]
 800fb0c:	4770      	bx	lr
 800fb0e:	bf00      	nop
 800fb10:	20000040 	.word	0x20000040

0800fb14 <__libc_init_array>:
 800fb14:	b570      	push	{r4, r5, r6, lr}
 800fb16:	4d0d      	ldr	r5, [pc, #52]	; (800fb4c <__libc_init_array+0x38>)
 800fb18:	4c0d      	ldr	r4, [pc, #52]	; (800fb50 <__libc_init_array+0x3c>)
 800fb1a:	1b64      	subs	r4, r4, r5
 800fb1c:	10a4      	asrs	r4, r4, #2
 800fb1e:	2600      	movs	r6, #0
 800fb20:	42a6      	cmp	r6, r4
 800fb22:	d109      	bne.n	800fb38 <__libc_init_array+0x24>
 800fb24:	4d0b      	ldr	r5, [pc, #44]	; (800fb54 <__libc_init_array+0x40>)
 800fb26:	4c0c      	ldr	r4, [pc, #48]	; (800fb58 <__libc_init_array+0x44>)
 800fb28:	f001 f838 	bl	8010b9c <_init>
 800fb2c:	1b64      	subs	r4, r4, r5
 800fb2e:	10a4      	asrs	r4, r4, #2
 800fb30:	2600      	movs	r6, #0
 800fb32:	42a6      	cmp	r6, r4
 800fb34:	d105      	bne.n	800fb42 <__libc_init_array+0x2e>
 800fb36:	bd70      	pop	{r4, r5, r6, pc}
 800fb38:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb3c:	4798      	blx	r3
 800fb3e:	3601      	adds	r6, #1
 800fb40:	e7ee      	b.n	800fb20 <__libc_init_array+0xc>
 800fb42:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb46:	4798      	blx	r3
 800fb48:	3601      	adds	r6, #1
 800fb4a:	e7f2      	b.n	800fb32 <__libc_init_array+0x1e>
 800fb4c:	08010eec 	.word	0x08010eec
 800fb50:	08010eec 	.word	0x08010eec
 800fb54:	08010eec 	.word	0x08010eec
 800fb58:	08010ef0 	.word	0x08010ef0

0800fb5c <malloc>:
 800fb5c:	4b02      	ldr	r3, [pc, #8]	; (800fb68 <malloc+0xc>)
 800fb5e:	4601      	mov	r1, r0
 800fb60:	6818      	ldr	r0, [r3, #0]
 800fb62:	f000 b871 	b.w	800fc48 <_malloc_r>
 800fb66:	bf00      	nop
 800fb68:	20000040 	.word	0x20000040

0800fb6c <free>:
 800fb6c:	4b02      	ldr	r3, [pc, #8]	; (800fb78 <free+0xc>)
 800fb6e:	4601      	mov	r1, r0
 800fb70:	6818      	ldr	r0, [r3, #0]
 800fb72:	f000 b819 	b.w	800fba8 <_free_r>
 800fb76:	bf00      	nop
 800fb78:	20000040 	.word	0x20000040

0800fb7c <memcpy>:
 800fb7c:	440a      	add	r2, r1
 800fb7e:	4291      	cmp	r1, r2
 800fb80:	f100 33ff 	add.w	r3, r0, #4294967295
 800fb84:	d100      	bne.n	800fb88 <memcpy+0xc>
 800fb86:	4770      	bx	lr
 800fb88:	b510      	push	{r4, lr}
 800fb8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb92:	4291      	cmp	r1, r2
 800fb94:	d1f9      	bne.n	800fb8a <memcpy+0xe>
 800fb96:	bd10      	pop	{r4, pc}

0800fb98 <memset>:
 800fb98:	4402      	add	r2, r0
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	4293      	cmp	r3, r2
 800fb9e:	d100      	bne.n	800fba2 <memset+0xa>
 800fba0:	4770      	bx	lr
 800fba2:	f803 1b01 	strb.w	r1, [r3], #1
 800fba6:	e7f9      	b.n	800fb9c <memset+0x4>

0800fba8 <_free_r>:
 800fba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fbaa:	2900      	cmp	r1, #0
 800fbac:	d048      	beq.n	800fc40 <_free_r+0x98>
 800fbae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fbb2:	9001      	str	r0, [sp, #4]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	f1a1 0404 	sub.w	r4, r1, #4
 800fbba:	bfb8      	it	lt
 800fbbc:	18e4      	addlt	r4, r4, r3
 800fbbe:	f000 f91d 	bl	800fdfc <__malloc_lock>
 800fbc2:	4a20      	ldr	r2, [pc, #128]	; (800fc44 <_free_r+0x9c>)
 800fbc4:	9801      	ldr	r0, [sp, #4]
 800fbc6:	6813      	ldr	r3, [r2, #0]
 800fbc8:	4615      	mov	r5, r2
 800fbca:	b933      	cbnz	r3, 800fbda <_free_r+0x32>
 800fbcc:	6063      	str	r3, [r4, #4]
 800fbce:	6014      	str	r4, [r2, #0]
 800fbd0:	b003      	add	sp, #12
 800fbd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fbd6:	f000 b917 	b.w	800fe08 <__malloc_unlock>
 800fbda:	42a3      	cmp	r3, r4
 800fbdc:	d90b      	bls.n	800fbf6 <_free_r+0x4e>
 800fbde:	6821      	ldr	r1, [r4, #0]
 800fbe0:	1862      	adds	r2, r4, r1
 800fbe2:	4293      	cmp	r3, r2
 800fbe4:	bf04      	itt	eq
 800fbe6:	681a      	ldreq	r2, [r3, #0]
 800fbe8:	685b      	ldreq	r3, [r3, #4]
 800fbea:	6063      	str	r3, [r4, #4]
 800fbec:	bf04      	itt	eq
 800fbee:	1852      	addeq	r2, r2, r1
 800fbf0:	6022      	streq	r2, [r4, #0]
 800fbf2:	602c      	str	r4, [r5, #0]
 800fbf4:	e7ec      	b.n	800fbd0 <_free_r+0x28>
 800fbf6:	461a      	mov	r2, r3
 800fbf8:	685b      	ldr	r3, [r3, #4]
 800fbfa:	b10b      	cbz	r3, 800fc00 <_free_r+0x58>
 800fbfc:	42a3      	cmp	r3, r4
 800fbfe:	d9fa      	bls.n	800fbf6 <_free_r+0x4e>
 800fc00:	6811      	ldr	r1, [r2, #0]
 800fc02:	1855      	adds	r5, r2, r1
 800fc04:	42a5      	cmp	r5, r4
 800fc06:	d10b      	bne.n	800fc20 <_free_r+0x78>
 800fc08:	6824      	ldr	r4, [r4, #0]
 800fc0a:	4421      	add	r1, r4
 800fc0c:	1854      	adds	r4, r2, r1
 800fc0e:	42a3      	cmp	r3, r4
 800fc10:	6011      	str	r1, [r2, #0]
 800fc12:	d1dd      	bne.n	800fbd0 <_free_r+0x28>
 800fc14:	681c      	ldr	r4, [r3, #0]
 800fc16:	685b      	ldr	r3, [r3, #4]
 800fc18:	6053      	str	r3, [r2, #4]
 800fc1a:	4421      	add	r1, r4
 800fc1c:	6011      	str	r1, [r2, #0]
 800fc1e:	e7d7      	b.n	800fbd0 <_free_r+0x28>
 800fc20:	d902      	bls.n	800fc28 <_free_r+0x80>
 800fc22:	230c      	movs	r3, #12
 800fc24:	6003      	str	r3, [r0, #0]
 800fc26:	e7d3      	b.n	800fbd0 <_free_r+0x28>
 800fc28:	6825      	ldr	r5, [r4, #0]
 800fc2a:	1961      	adds	r1, r4, r5
 800fc2c:	428b      	cmp	r3, r1
 800fc2e:	bf04      	itt	eq
 800fc30:	6819      	ldreq	r1, [r3, #0]
 800fc32:	685b      	ldreq	r3, [r3, #4]
 800fc34:	6063      	str	r3, [r4, #4]
 800fc36:	bf04      	itt	eq
 800fc38:	1949      	addeq	r1, r1, r5
 800fc3a:	6021      	streq	r1, [r4, #0]
 800fc3c:	6054      	str	r4, [r2, #4]
 800fc3e:	e7c7      	b.n	800fbd0 <_free_r+0x28>
 800fc40:	b003      	add	sp, #12
 800fc42:	bd30      	pop	{r4, r5, pc}
 800fc44:	200013bc 	.word	0x200013bc

0800fc48 <_malloc_r>:
 800fc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc4a:	1ccd      	adds	r5, r1, #3
 800fc4c:	f025 0503 	bic.w	r5, r5, #3
 800fc50:	3508      	adds	r5, #8
 800fc52:	2d0c      	cmp	r5, #12
 800fc54:	bf38      	it	cc
 800fc56:	250c      	movcc	r5, #12
 800fc58:	2d00      	cmp	r5, #0
 800fc5a:	4606      	mov	r6, r0
 800fc5c:	db01      	blt.n	800fc62 <_malloc_r+0x1a>
 800fc5e:	42a9      	cmp	r1, r5
 800fc60:	d903      	bls.n	800fc6a <_malloc_r+0x22>
 800fc62:	230c      	movs	r3, #12
 800fc64:	6033      	str	r3, [r6, #0]
 800fc66:	2000      	movs	r0, #0
 800fc68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc6a:	f000 f8c7 	bl	800fdfc <__malloc_lock>
 800fc6e:	4921      	ldr	r1, [pc, #132]	; (800fcf4 <_malloc_r+0xac>)
 800fc70:	680a      	ldr	r2, [r1, #0]
 800fc72:	4614      	mov	r4, r2
 800fc74:	b99c      	cbnz	r4, 800fc9e <_malloc_r+0x56>
 800fc76:	4f20      	ldr	r7, [pc, #128]	; (800fcf8 <_malloc_r+0xb0>)
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	b923      	cbnz	r3, 800fc86 <_malloc_r+0x3e>
 800fc7c:	4621      	mov	r1, r4
 800fc7e:	4630      	mov	r0, r6
 800fc80:	f000 f87c 	bl	800fd7c <_sbrk_r>
 800fc84:	6038      	str	r0, [r7, #0]
 800fc86:	4629      	mov	r1, r5
 800fc88:	4630      	mov	r0, r6
 800fc8a:	f000 f877 	bl	800fd7c <_sbrk_r>
 800fc8e:	1c43      	adds	r3, r0, #1
 800fc90:	d123      	bne.n	800fcda <_malloc_r+0x92>
 800fc92:	230c      	movs	r3, #12
 800fc94:	6033      	str	r3, [r6, #0]
 800fc96:	4630      	mov	r0, r6
 800fc98:	f000 f8b6 	bl	800fe08 <__malloc_unlock>
 800fc9c:	e7e3      	b.n	800fc66 <_malloc_r+0x1e>
 800fc9e:	6823      	ldr	r3, [r4, #0]
 800fca0:	1b5b      	subs	r3, r3, r5
 800fca2:	d417      	bmi.n	800fcd4 <_malloc_r+0x8c>
 800fca4:	2b0b      	cmp	r3, #11
 800fca6:	d903      	bls.n	800fcb0 <_malloc_r+0x68>
 800fca8:	6023      	str	r3, [r4, #0]
 800fcaa:	441c      	add	r4, r3
 800fcac:	6025      	str	r5, [r4, #0]
 800fcae:	e004      	b.n	800fcba <_malloc_r+0x72>
 800fcb0:	6863      	ldr	r3, [r4, #4]
 800fcb2:	42a2      	cmp	r2, r4
 800fcb4:	bf0c      	ite	eq
 800fcb6:	600b      	streq	r3, [r1, #0]
 800fcb8:	6053      	strne	r3, [r2, #4]
 800fcba:	4630      	mov	r0, r6
 800fcbc:	f000 f8a4 	bl	800fe08 <__malloc_unlock>
 800fcc0:	f104 000b 	add.w	r0, r4, #11
 800fcc4:	1d23      	adds	r3, r4, #4
 800fcc6:	f020 0007 	bic.w	r0, r0, #7
 800fcca:	1ac2      	subs	r2, r0, r3
 800fccc:	d0cc      	beq.n	800fc68 <_malloc_r+0x20>
 800fcce:	1a1b      	subs	r3, r3, r0
 800fcd0:	50a3      	str	r3, [r4, r2]
 800fcd2:	e7c9      	b.n	800fc68 <_malloc_r+0x20>
 800fcd4:	4622      	mov	r2, r4
 800fcd6:	6864      	ldr	r4, [r4, #4]
 800fcd8:	e7cc      	b.n	800fc74 <_malloc_r+0x2c>
 800fcda:	1cc4      	adds	r4, r0, #3
 800fcdc:	f024 0403 	bic.w	r4, r4, #3
 800fce0:	42a0      	cmp	r0, r4
 800fce2:	d0e3      	beq.n	800fcac <_malloc_r+0x64>
 800fce4:	1a21      	subs	r1, r4, r0
 800fce6:	4630      	mov	r0, r6
 800fce8:	f000 f848 	bl	800fd7c <_sbrk_r>
 800fcec:	3001      	adds	r0, #1
 800fcee:	d1dd      	bne.n	800fcac <_malloc_r+0x64>
 800fcf0:	e7cf      	b.n	800fc92 <_malloc_r+0x4a>
 800fcf2:	bf00      	nop
 800fcf4:	200013bc 	.word	0x200013bc
 800fcf8:	200013c0 	.word	0x200013c0

0800fcfc <rand>:
 800fcfc:	4b17      	ldr	r3, [pc, #92]	; (800fd5c <rand+0x60>)
 800fcfe:	b510      	push	{r4, lr}
 800fd00:	681c      	ldr	r4, [r3, #0]
 800fd02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fd04:	b9b3      	cbnz	r3, 800fd34 <rand+0x38>
 800fd06:	2018      	movs	r0, #24
 800fd08:	f7ff ff28 	bl	800fb5c <malloc>
 800fd0c:	63a0      	str	r0, [r4, #56]	; 0x38
 800fd0e:	b928      	cbnz	r0, 800fd1c <rand+0x20>
 800fd10:	4602      	mov	r2, r0
 800fd12:	4b13      	ldr	r3, [pc, #76]	; (800fd60 <rand+0x64>)
 800fd14:	4813      	ldr	r0, [pc, #76]	; (800fd64 <rand+0x68>)
 800fd16:	214e      	movs	r1, #78	; 0x4e
 800fd18:	f000 f840 	bl	800fd9c <__assert_func>
 800fd1c:	4a12      	ldr	r2, [pc, #72]	; (800fd68 <rand+0x6c>)
 800fd1e:	4b13      	ldr	r3, [pc, #76]	; (800fd6c <rand+0x70>)
 800fd20:	e9c0 2300 	strd	r2, r3, [r0]
 800fd24:	4b12      	ldr	r3, [pc, #72]	; (800fd70 <rand+0x74>)
 800fd26:	6083      	str	r3, [r0, #8]
 800fd28:	230b      	movs	r3, #11
 800fd2a:	8183      	strh	r3, [r0, #12]
 800fd2c:	2201      	movs	r2, #1
 800fd2e:	2300      	movs	r3, #0
 800fd30:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800fd34:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fd36:	480f      	ldr	r0, [pc, #60]	; (800fd74 <rand+0x78>)
 800fd38:	690a      	ldr	r2, [r1, #16]
 800fd3a:	694b      	ldr	r3, [r1, #20]
 800fd3c:	4c0e      	ldr	r4, [pc, #56]	; (800fd78 <rand+0x7c>)
 800fd3e:	4350      	muls	r0, r2
 800fd40:	fb04 0003 	mla	r0, r4, r3, r0
 800fd44:	fba2 3404 	umull	r3, r4, r2, r4
 800fd48:	1c5a      	adds	r2, r3, #1
 800fd4a:	4404      	add	r4, r0
 800fd4c:	f144 0000 	adc.w	r0, r4, #0
 800fd50:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800fd54:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800fd58:	bd10      	pop	{r4, pc}
 800fd5a:	bf00      	nop
 800fd5c:	20000040 	.word	0x20000040
 800fd60:	08010d9c 	.word	0x08010d9c
 800fd64:	08010db3 	.word	0x08010db3
 800fd68:	abcd330e 	.word	0xabcd330e
 800fd6c:	e66d1234 	.word	0xe66d1234
 800fd70:	0005deec 	.word	0x0005deec
 800fd74:	5851f42d 	.word	0x5851f42d
 800fd78:	4c957f2d 	.word	0x4c957f2d

0800fd7c <_sbrk_r>:
 800fd7c:	b538      	push	{r3, r4, r5, lr}
 800fd7e:	4d06      	ldr	r5, [pc, #24]	; (800fd98 <_sbrk_r+0x1c>)
 800fd80:	2300      	movs	r3, #0
 800fd82:	4604      	mov	r4, r0
 800fd84:	4608      	mov	r0, r1
 800fd86:	602b      	str	r3, [r5, #0]
 800fd88:	f7f2 fa10 	bl	80021ac <_sbrk>
 800fd8c:	1c43      	adds	r3, r0, #1
 800fd8e:	d102      	bne.n	800fd96 <_sbrk_r+0x1a>
 800fd90:	682b      	ldr	r3, [r5, #0]
 800fd92:	b103      	cbz	r3, 800fd96 <_sbrk_r+0x1a>
 800fd94:	6023      	str	r3, [r4, #0]
 800fd96:	bd38      	pop	{r3, r4, r5, pc}
 800fd98:	20002168 	.word	0x20002168

0800fd9c <__assert_func>:
 800fd9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd9e:	4614      	mov	r4, r2
 800fda0:	461a      	mov	r2, r3
 800fda2:	4b09      	ldr	r3, [pc, #36]	; (800fdc8 <__assert_func+0x2c>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	4605      	mov	r5, r0
 800fda8:	68d8      	ldr	r0, [r3, #12]
 800fdaa:	b14c      	cbz	r4, 800fdc0 <__assert_func+0x24>
 800fdac:	4b07      	ldr	r3, [pc, #28]	; (800fdcc <__assert_func+0x30>)
 800fdae:	9100      	str	r1, [sp, #0]
 800fdb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fdb4:	4906      	ldr	r1, [pc, #24]	; (800fdd0 <__assert_func+0x34>)
 800fdb6:	462b      	mov	r3, r5
 800fdb8:	f000 f80e 	bl	800fdd8 <fiprintf>
 800fdbc:	f000 fbd8 	bl	8010570 <abort>
 800fdc0:	4b04      	ldr	r3, [pc, #16]	; (800fdd4 <__assert_func+0x38>)
 800fdc2:	461c      	mov	r4, r3
 800fdc4:	e7f3      	b.n	800fdae <__assert_func+0x12>
 800fdc6:	bf00      	nop
 800fdc8:	20000040 	.word	0x20000040
 800fdcc:	08010e12 	.word	0x08010e12
 800fdd0:	08010e1f 	.word	0x08010e1f
 800fdd4:	08010e4d 	.word	0x08010e4d

0800fdd8 <fiprintf>:
 800fdd8:	b40e      	push	{r1, r2, r3}
 800fdda:	b503      	push	{r0, r1, lr}
 800fddc:	4601      	mov	r1, r0
 800fdde:	ab03      	add	r3, sp, #12
 800fde0:	4805      	ldr	r0, [pc, #20]	; (800fdf8 <fiprintf+0x20>)
 800fde2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fde6:	6800      	ldr	r0, [r0, #0]
 800fde8:	9301      	str	r3, [sp, #4]
 800fdea:	f000 f83d 	bl	800fe68 <_vfiprintf_r>
 800fdee:	b002      	add	sp, #8
 800fdf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fdf4:	b003      	add	sp, #12
 800fdf6:	4770      	bx	lr
 800fdf8:	20000040 	.word	0x20000040

0800fdfc <__malloc_lock>:
 800fdfc:	4801      	ldr	r0, [pc, #4]	; (800fe04 <__malloc_lock+0x8>)
 800fdfe:	f000 bd77 	b.w	80108f0 <__retarget_lock_acquire_recursive>
 800fe02:	bf00      	nop
 800fe04:	20002170 	.word	0x20002170

0800fe08 <__malloc_unlock>:
 800fe08:	4801      	ldr	r0, [pc, #4]	; (800fe10 <__malloc_unlock+0x8>)
 800fe0a:	f000 bd72 	b.w	80108f2 <__retarget_lock_release_recursive>
 800fe0e:	bf00      	nop
 800fe10:	20002170 	.word	0x20002170

0800fe14 <__sfputc_r>:
 800fe14:	6893      	ldr	r3, [r2, #8]
 800fe16:	3b01      	subs	r3, #1
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	b410      	push	{r4}
 800fe1c:	6093      	str	r3, [r2, #8]
 800fe1e:	da08      	bge.n	800fe32 <__sfputc_r+0x1e>
 800fe20:	6994      	ldr	r4, [r2, #24]
 800fe22:	42a3      	cmp	r3, r4
 800fe24:	db01      	blt.n	800fe2a <__sfputc_r+0x16>
 800fe26:	290a      	cmp	r1, #10
 800fe28:	d103      	bne.n	800fe32 <__sfputc_r+0x1e>
 800fe2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe2e:	f000 badf 	b.w	80103f0 <__swbuf_r>
 800fe32:	6813      	ldr	r3, [r2, #0]
 800fe34:	1c58      	adds	r0, r3, #1
 800fe36:	6010      	str	r0, [r2, #0]
 800fe38:	7019      	strb	r1, [r3, #0]
 800fe3a:	4608      	mov	r0, r1
 800fe3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe40:	4770      	bx	lr

0800fe42 <__sfputs_r>:
 800fe42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe44:	4606      	mov	r6, r0
 800fe46:	460f      	mov	r7, r1
 800fe48:	4614      	mov	r4, r2
 800fe4a:	18d5      	adds	r5, r2, r3
 800fe4c:	42ac      	cmp	r4, r5
 800fe4e:	d101      	bne.n	800fe54 <__sfputs_r+0x12>
 800fe50:	2000      	movs	r0, #0
 800fe52:	e007      	b.n	800fe64 <__sfputs_r+0x22>
 800fe54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe58:	463a      	mov	r2, r7
 800fe5a:	4630      	mov	r0, r6
 800fe5c:	f7ff ffda 	bl	800fe14 <__sfputc_r>
 800fe60:	1c43      	adds	r3, r0, #1
 800fe62:	d1f3      	bne.n	800fe4c <__sfputs_r+0xa>
 800fe64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fe68 <_vfiprintf_r>:
 800fe68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe6c:	460d      	mov	r5, r1
 800fe6e:	b09d      	sub	sp, #116	; 0x74
 800fe70:	4614      	mov	r4, r2
 800fe72:	4698      	mov	r8, r3
 800fe74:	4606      	mov	r6, r0
 800fe76:	b118      	cbz	r0, 800fe80 <_vfiprintf_r+0x18>
 800fe78:	6983      	ldr	r3, [r0, #24]
 800fe7a:	b90b      	cbnz	r3, 800fe80 <_vfiprintf_r+0x18>
 800fe7c:	f000 fc9a 	bl	80107b4 <__sinit>
 800fe80:	4b89      	ldr	r3, [pc, #548]	; (80100a8 <_vfiprintf_r+0x240>)
 800fe82:	429d      	cmp	r5, r3
 800fe84:	d11b      	bne.n	800febe <_vfiprintf_r+0x56>
 800fe86:	6875      	ldr	r5, [r6, #4]
 800fe88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe8a:	07d9      	lsls	r1, r3, #31
 800fe8c:	d405      	bmi.n	800fe9a <_vfiprintf_r+0x32>
 800fe8e:	89ab      	ldrh	r3, [r5, #12]
 800fe90:	059a      	lsls	r2, r3, #22
 800fe92:	d402      	bmi.n	800fe9a <_vfiprintf_r+0x32>
 800fe94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe96:	f000 fd2b 	bl	80108f0 <__retarget_lock_acquire_recursive>
 800fe9a:	89ab      	ldrh	r3, [r5, #12]
 800fe9c:	071b      	lsls	r3, r3, #28
 800fe9e:	d501      	bpl.n	800fea4 <_vfiprintf_r+0x3c>
 800fea0:	692b      	ldr	r3, [r5, #16]
 800fea2:	b9eb      	cbnz	r3, 800fee0 <_vfiprintf_r+0x78>
 800fea4:	4629      	mov	r1, r5
 800fea6:	4630      	mov	r0, r6
 800fea8:	f000 faf4 	bl	8010494 <__swsetup_r>
 800feac:	b1c0      	cbz	r0, 800fee0 <_vfiprintf_r+0x78>
 800feae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800feb0:	07dc      	lsls	r4, r3, #31
 800feb2:	d50e      	bpl.n	800fed2 <_vfiprintf_r+0x6a>
 800feb4:	f04f 30ff 	mov.w	r0, #4294967295
 800feb8:	b01d      	add	sp, #116	; 0x74
 800feba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800febe:	4b7b      	ldr	r3, [pc, #492]	; (80100ac <_vfiprintf_r+0x244>)
 800fec0:	429d      	cmp	r5, r3
 800fec2:	d101      	bne.n	800fec8 <_vfiprintf_r+0x60>
 800fec4:	68b5      	ldr	r5, [r6, #8]
 800fec6:	e7df      	b.n	800fe88 <_vfiprintf_r+0x20>
 800fec8:	4b79      	ldr	r3, [pc, #484]	; (80100b0 <_vfiprintf_r+0x248>)
 800feca:	429d      	cmp	r5, r3
 800fecc:	bf08      	it	eq
 800fece:	68f5      	ldreq	r5, [r6, #12]
 800fed0:	e7da      	b.n	800fe88 <_vfiprintf_r+0x20>
 800fed2:	89ab      	ldrh	r3, [r5, #12]
 800fed4:	0598      	lsls	r0, r3, #22
 800fed6:	d4ed      	bmi.n	800feb4 <_vfiprintf_r+0x4c>
 800fed8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800feda:	f000 fd0a 	bl	80108f2 <__retarget_lock_release_recursive>
 800fede:	e7e9      	b.n	800feb4 <_vfiprintf_r+0x4c>
 800fee0:	2300      	movs	r3, #0
 800fee2:	9309      	str	r3, [sp, #36]	; 0x24
 800fee4:	2320      	movs	r3, #32
 800fee6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800feea:	f8cd 800c 	str.w	r8, [sp, #12]
 800feee:	2330      	movs	r3, #48	; 0x30
 800fef0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80100b4 <_vfiprintf_r+0x24c>
 800fef4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fef8:	f04f 0901 	mov.w	r9, #1
 800fefc:	4623      	mov	r3, r4
 800fefe:	469a      	mov	sl, r3
 800ff00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff04:	b10a      	cbz	r2, 800ff0a <_vfiprintf_r+0xa2>
 800ff06:	2a25      	cmp	r2, #37	; 0x25
 800ff08:	d1f9      	bne.n	800fefe <_vfiprintf_r+0x96>
 800ff0a:	ebba 0b04 	subs.w	fp, sl, r4
 800ff0e:	d00b      	beq.n	800ff28 <_vfiprintf_r+0xc0>
 800ff10:	465b      	mov	r3, fp
 800ff12:	4622      	mov	r2, r4
 800ff14:	4629      	mov	r1, r5
 800ff16:	4630      	mov	r0, r6
 800ff18:	f7ff ff93 	bl	800fe42 <__sfputs_r>
 800ff1c:	3001      	adds	r0, #1
 800ff1e:	f000 80aa 	beq.w	8010076 <_vfiprintf_r+0x20e>
 800ff22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff24:	445a      	add	r2, fp
 800ff26:	9209      	str	r2, [sp, #36]	; 0x24
 800ff28:	f89a 3000 	ldrb.w	r3, [sl]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	f000 80a2 	beq.w	8010076 <_vfiprintf_r+0x20e>
 800ff32:	2300      	movs	r3, #0
 800ff34:	f04f 32ff 	mov.w	r2, #4294967295
 800ff38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff3c:	f10a 0a01 	add.w	sl, sl, #1
 800ff40:	9304      	str	r3, [sp, #16]
 800ff42:	9307      	str	r3, [sp, #28]
 800ff44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff48:	931a      	str	r3, [sp, #104]	; 0x68
 800ff4a:	4654      	mov	r4, sl
 800ff4c:	2205      	movs	r2, #5
 800ff4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff52:	4858      	ldr	r0, [pc, #352]	; (80100b4 <_vfiprintf_r+0x24c>)
 800ff54:	f7f0 f93c 	bl	80001d0 <memchr>
 800ff58:	9a04      	ldr	r2, [sp, #16]
 800ff5a:	b9d8      	cbnz	r0, 800ff94 <_vfiprintf_r+0x12c>
 800ff5c:	06d1      	lsls	r1, r2, #27
 800ff5e:	bf44      	itt	mi
 800ff60:	2320      	movmi	r3, #32
 800ff62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff66:	0713      	lsls	r3, r2, #28
 800ff68:	bf44      	itt	mi
 800ff6a:	232b      	movmi	r3, #43	; 0x2b
 800ff6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff70:	f89a 3000 	ldrb.w	r3, [sl]
 800ff74:	2b2a      	cmp	r3, #42	; 0x2a
 800ff76:	d015      	beq.n	800ffa4 <_vfiprintf_r+0x13c>
 800ff78:	9a07      	ldr	r2, [sp, #28]
 800ff7a:	4654      	mov	r4, sl
 800ff7c:	2000      	movs	r0, #0
 800ff7e:	f04f 0c0a 	mov.w	ip, #10
 800ff82:	4621      	mov	r1, r4
 800ff84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff88:	3b30      	subs	r3, #48	; 0x30
 800ff8a:	2b09      	cmp	r3, #9
 800ff8c:	d94e      	bls.n	801002c <_vfiprintf_r+0x1c4>
 800ff8e:	b1b0      	cbz	r0, 800ffbe <_vfiprintf_r+0x156>
 800ff90:	9207      	str	r2, [sp, #28]
 800ff92:	e014      	b.n	800ffbe <_vfiprintf_r+0x156>
 800ff94:	eba0 0308 	sub.w	r3, r0, r8
 800ff98:	fa09 f303 	lsl.w	r3, r9, r3
 800ff9c:	4313      	orrs	r3, r2
 800ff9e:	9304      	str	r3, [sp, #16]
 800ffa0:	46a2      	mov	sl, r4
 800ffa2:	e7d2      	b.n	800ff4a <_vfiprintf_r+0xe2>
 800ffa4:	9b03      	ldr	r3, [sp, #12]
 800ffa6:	1d19      	adds	r1, r3, #4
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	9103      	str	r1, [sp, #12]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	bfbb      	ittet	lt
 800ffb0:	425b      	neglt	r3, r3
 800ffb2:	f042 0202 	orrlt.w	r2, r2, #2
 800ffb6:	9307      	strge	r3, [sp, #28]
 800ffb8:	9307      	strlt	r3, [sp, #28]
 800ffba:	bfb8      	it	lt
 800ffbc:	9204      	strlt	r2, [sp, #16]
 800ffbe:	7823      	ldrb	r3, [r4, #0]
 800ffc0:	2b2e      	cmp	r3, #46	; 0x2e
 800ffc2:	d10c      	bne.n	800ffde <_vfiprintf_r+0x176>
 800ffc4:	7863      	ldrb	r3, [r4, #1]
 800ffc6:	2b2a      	cmp	r3, #42	; 0x2a
 800ffc8:	d135      	bne.n	8010036 <_vfiprintf_r+0x1ce>
 800ffca:	9b03      	ldr	r3, [sp, #12]
 800ffcc:	1d1a      	adds	r2, r3, #4
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	9203      	str	r2, [sp, #12]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	bfb8      	it	lt
 800ffd6:	f04f 33ff 	movlt.w	r3, #4294967295
 800ffda:	3402      	adds	r4, #2
 800ffdc:	9305      	str	r3, [sp, #20]
 800ffde:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80100c4 <_vfiprintf_r+0x25c>
 800ffe2:	7821      	ldrb	r1, [r4, #0]
 800ffe4:	2203      	movs	r2, #3
 800ffe6:	4650      	mov	r0, sl
 800ffe8:	f7f0 f8f2 	bl	80001d0 <memchr>
 800ffec:	b140      	cbz	r0, 8010000 <_vfiprintf_r+0x198>
 800ffee:	2340      	movs	r3, #64	; 0x40
 800fff0:	eba0 000a 	sub.w	r0, r0, sl
 800fff4:	fa03 f000 	lsl.w	r0, r3, r0
 800fff8:	9b04      	ldr	r3, [sp, #16]
 800fffa:	4303      	orrs	r3, r0
 800fffc:	3401      	adds	r4, #1
 800fffe:	9304      	str	r3, [sp, #16]
 8010000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010004:	482c      	ldr	r0, [pc, #176]	; (80100b8 <_vfiprintf_r+0x250>)
 8010006:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801000a:	2206      	movs	r2, #6
 801000c:	f7f0 f8e0 	bl	80001d0 <memchr>
 8010010:	2800      	cmp	r0, #0
 8010012:	d03f      	beq.n	8010094 <_vfiprintf_r+0x22c>
 8010014:	4b29      	ldr	r3, [pc, #164]	; (80100bc <_vfiprintf_r+0x254>)
 8010016:	bb1b      	cbnz	r3, 8010060 <_vfiprintf_r+0x1f8>
 8010018:	9b03      	ldr	r3, [sp, #12]
 801001a:	3307      	adds	r3, #7
 801001c:	f023 0307 	bic.w	r3, r3, #7
 8010020:	3308      	adds	r3, #8
 8010022:	9303      	str	r3, [sp, #12]
 8010024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010026:	443b      	add	r3, r7
 8010028:	9309      	str	r3, [sp, #36]	; 0x24
 801002a:	e767      	b.n	800fefc <_vfiprintf_r+0x94>
 801002c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010030:	460c      	mov	r4, r1
 8010032:	2001      	movs	r0, #1
 8010034:	e7a5      	b.n	800ff82 <_vfiprintf_r+0x11a>
 8010036:	2300      	movs	r3, #0
 8010038:	3401      	adds	r4, #1
 801003a:	9305      	str	r3, [sp, #20]
 801003c:	4619      	mov	r1, r3
 801003e:	f04f 0c0a 	mov.w	ip, #10
 8010042:	4620      	mov	r0, r4
 8010044:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010048:	3a30      	subs	r2, #48	; 0x30
 801004a:	2a09      	cmp	r2, #9
 801004c:	d903      	bls.n	8010056 <_vfiprintf_r+0x1ee>
 801004e:	2b00      	cmp	r3, #0
 8010050:	d0c5      	beq.n	800ffde <_vfiprintf_r+0x176>
 8010052:	9105      	str	r1, [sp, #20]
 8010054:	e7c3      	b.n	800ffde <_vfiprintf_r+0x176>
 8010056:	fb0c 2101 	mla	r1, ip, r1, r2
 801005a:	4604      	mov	r4, r0
 801005c:	2301      	movs	r3, #1
 801005e:	e7f0      	b.n	8010042 <_vfiprintf_r+0x1da>
 8010060:	ab03      	add	r3, sp, #12
 8010062:	9300      	str	r3, [sp, #0]
 8010064:	462a      	mov	r2, r5
 8010066:	4b16      	ldr	r3, [pc, #88]	; (80100c0 <_vfiprintf_r+0x258>)
 8010068:	a904      	add	r1, sp, #16
 801006a:	4630      	mov	r0, r6
 801006c:	f3af 8000 	nop.w
 8010070:	4607      	mov	r7, r0
 8010072:	1c78      	adds	r0, r7, #1
 8010074:	d1d6      	bne.n	8010024 <_vfiprintf_r+0x1bc>
 8010076:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010078:	07d9      	lsls	r1, r3, #31
 801007a:	d405      	bmi.n	8010088 <_vfiprintf_r+0x220>
 801007c:	89ab      	ldrh	r3, [r5, #12]
 801007e:	059a      	lsls	r2, r3, #22
 8010080:	d402      	bmi.n	8010088 <_vfiprintf_r+0x220>
 8010082:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010084:	f000 fc35 	bl	80108f2 <__retarget_lock_release_recursive>
 8010088:	89ab      	ldrh	r3, [r5, #12]
 801008a:	065b      	lsls	r3, r3, #25
 801008c:	f53f af12 	bmi.w	800feb4 <_vfiprintf_r+0x4c>
 8010090:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010092:	e711      	b.n	800feb8 <_vfiprintf_r+0x50>
 8010094:	ab03      	add	r3, sp, #12
 8010096:	9300      	str	r3, [sp, #0]
 8010098:	462a      	mov	r2, r5
 801009a:	4b09      	ldr	r3, [pc, #36]	; (80100c0 <_vfiprintf_r+0x258>)
 801009c:	a904      	add	r1, sp, #16
 801009e:	4630      	mov	r0, r6
 80100a0:	f000 f880 	bl	80101a4 <_printf_i>
 80100a4:	e7e4      	b.n	8010070 <_vfiprintf_r+0x208>
 80100a6:	bf00      	nop
 80100a8:	08010ea4 	.word	0x08010ea4
 80100ac:	08010ec4 	.word	0x08010ec4
 80100b0:	08010e84 	.word	0x08010e84
 80100b4:	08010e4e 	.word	0x08010e4e
 80100b8:	08010e58 	.word	0x08010e58
 80100bc:	00000000 	.word	0x00000000
 80100c0:	0800fe43 	.word	0x0800fe43
 80100c4:	08010e54 	.word	0x08010e54

080100c8 <_printf_common>:
 80100c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100cc:	4616      	mov	r6, r2
 80100ce:	4699      	mov	r9, r3
 80100d0:	688a      	ldr	r2, [r1, #8]
 80100d2:	690b      	ldr	r3, [r1, #16]
 80100d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80100d8:	4293      	cmp	r3, r2
 80100da:	bfb8      	it	lt
 80100dc:	4613      	movlt	r3, r2
 80100de:	6033      	str	r3, [r6, #0]
 80100e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80100e4:	4607      	mov	r7, r0
 80100e6:	460c      	mov	r4, r1
 80100e8:	b10a      	cbz	r2, 80100ee <_printf_common+0x26>
 80100ea:	3301      	adds	r3, #1
 80100ec:	6033      	str	r3, [r6, #0]
 80100ee:	6823      	ldr	r3, [r4, #0]
 80100f0:	0699      	lsls	r1, r3, #26
 80100f2:	bf42      	ittt	mi
 80100f4:	6833      	ldrmi	r3, [r6, #0]
 80100f6:	3302      	addmi	r3, #2
 80100f8:	6033      	strmi	r3, [r6, #0]
 80100fa:	6825      	ldr	r5, [r4, #0]
 80100fc:	f015 0506 	ands.w	r5, r5, #6
 8010100:	d106      	bne.n	8010110 <_printf_common+0x48>
 8010102:	f104 0a19 	add.w	sl, r4, #25
 8010106:	68e3      	ldr	r3, [r4, #12]
 8010108:	6832      	ldr	r2, [r6, #0]
 801010a:	1a9b      	subs	r3, r3, r2
 801010c:	42ab      	cmp	r3, r5
 801010e:	dc26      	bgt.n	801015e <_printf_common+0x96>
 8010110:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010114:	1e13      	subs	r3, r2, #0
 8010116:	6822      	ldr	r2, [r4, #0]
 8010118:	bf18      	it	ne
 801011a:	2301      	movne	r3, #1
 801011c:	0692      	lsls	r2, r2, #26
 801011e:	d42b      	bmi.n	8010178 <_printf_common+0xb0>
 8010120:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010124:	4649      	mov	r1, r9
 8010126:	4638      	mov	r0, r7
 8010128:	47c0      	blx	r8
 801012a:	3001      	adds	r0, #1
 801012c:	d01e      	beq.n	801016c <_printf_common+0xa4>
 801012e:	6823      	ldr	r3, [r4, #0]
 8010130:	68e5      	ldr	r5, [r4, #12]
 8010132:	6832      	ldr	r2, [r6, #0]
 8010134:	f003 0306 	and.w	r3, r3, #6
 8010138:	2b04      	cmp	r3, #4
 801013a:	bf08      	it	eq
 801013c:	1aad      	subeq	r5, r5, r2
 801013e:	68a3      	ldr	r3, [r4, #8]
 8010140:	6922      	ldr	r2, [r4, #16]
 8010142:	bf0c      	ite	eq
 8010144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010148:	2500      	movne	r5, #0
 801014a:	4293      	cmp	r3, r2
 801014c:	bfc4      	itt	gt
 801014e:	1a9b      	subgt	r3, r3, r2
 8010150:	18ed      	addgt	r5, r5, r3
 8010152:	2600      	movs	r6, #0
 8010154:	341a      	adds	r4, #26
 8010156:	42b5      	cmp	r5, r6
 8010158:	d11a      	bne.n	8010190 <_printf_common+0xc8>
 801015a:	2000      	movs	r0, #0
 801015c:	e008      	b.n	8010170 <_printf_common+0xa8>
 801015e:	2301      	movs	r3, #1
 8010160:	4652      	mov	r2, sl
 8010162:	4649      	mov	r1, r9
 8010164:	4638      	mov	r0, r7
 8010166:	47c0      	blx	r8
 8010168:	3001      	adds	r0, #1
 801016a:	d103      	bne.n	8010174 <_printf_common+0xac>
 801016c:	f04f 30ff 	mov.w	r0, #4294967295
 8010170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010174:	3501      	adds	r5, #1
 8010176:	e7c6      	b.n	8010106 <_printf_common+0x3e>
 8010178:	18e1      	adds	r1, r4, r3
 801017a:	1c5a      	adds	r2, r3, #1
 801017c:	2030      	movs	r0, #48	; 0x30
 801017e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010182:	4422      	add	r2, r4
 8010184:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010188:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801018c:	3302      	adds	r3, #2
 801018e:	e7c7      	b.n	8010120 <_printf_common+0x58>
 8010190:	2301      	movs	r3, #1
 8010192:	4622      	mov	r2, r4
 8010194:	4649      	mov	r1, r9
 8010196:	4638      	mov	r0, r7
 8010198:	47c0      	blx	r8
 801019a:	3001      	adds	r0, #1
 801019c:	d0e6      	beq.n	801016c <_printf_common+0xa4>
 801019e:	3601      	adds	r6, #1
 80101a0:	e7d9      	b.n	8010156 <_printf_common+0x8e>
	...

080101a4 <_printf_i>:
 80101a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80101a8:	460c      	mov	r4, r1
 80101aa:	4691      	mov	r9, r2
 80101ac:	7e27      	ldrb	r7, [r4, #24]
 80101ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80101b0:	2f78      	cmp	r7, #120	; 0x78
 80101b2:	4680      	mov	r8, r0
 80101b4:	469a      	mov	sl, r3
 80101b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80101ba:	d807      	bhi.n	80101cc <_printf_i+0x28>
 80101bc:	2f62      	cmp	r7, #98	; 0x62
 80101be:	d80a      	bhi.n	80101d6 <_printf_i+0x32>
 80101c0:	2f00      	cmp	r7, #0
 80101c2:	f000 80d8 	beq.w	8010376 <_printf_i+0x1d2>
 80101c6:	2f58      	cmp	r7, #88	; 0x58
 80101c8:	f000 80a3 	beq.w	8010312 <_printf_i+0x16e>
 80101cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80101d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80101d4:	e03a      	b.n	801024c <_printf_i+0xa8>
 80101d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80101da:	2b15      	cmp	r3, #21
 80101dc:	d8f6      	bhi.n	80101cc <_printf_i+0x28>
 80101de:	a001      	add	r0, pc, #4	; (adr r0, 80101e4 <_printf_i+0x40>)
 80101e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80101e4:	0801023d 	.word	0x0801023d
 80101e8:	08010251 	.word	0x08010251
 80101ec:	080101cd 	.word	0x080101cd
 80101f0:	080101cd 	.word	0x080101cd
 80101f4:	080101cd 	.word	0x080101cd
 80101f8:	080101cd 	.word	0x080101cd
 80101fc:	08010251 	.word	0x08010251
 8010200:	080101cd 	.word	0x080101cd
 8010204:	080101cd 	.word	0x080101cd
 8010208:	080101cd 	.word	0x080101cd
 801020c:	080101cd 	.word	0x080101cd
 8010210:	0801035d 	.word	0x0801035d
 8010214:	08010281 	.word	0x08010281
 8010218:	0801033f 	.word	0x0801033f
 801021c:	080101cd 	.word	0x080101cd
 8010220:	080101cd 	.word	0x080101cd
 8010224:	0801037f 	.word	0x0801037f
 8010228:	080101cd 	.word	0x080101cd
 801022c:	08010281 	.word	0x08010281
 8010230:	080101cd 	.word	0x080101cd
 8010234:	080101cd 	.word	0x080101cd
 8010238:	08010347 	.word	0x08010347
 801023c:	680b      	ldr	r3, [r1, #0]
 801023e:	1d1a      	adds	r2, r3, #4
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	600a      	str	r2, [r1, #0]
 8010244:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010248:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801024c:	2301      	movs	r3, #1
 801024e:	e0a3      	b.n	8010398 <_printf_i+0x1f4>
 8010250:	6825      	ldr	r5, [r4, #0]
 8010252:	6808      	ldr	r0, [r1, #0]
 8010254:	062e      	lsls	r6, r5, #24
 8010256:	f100 0304 	add.w	r3, r0, #4
 801025a:	d50a      	bpl.n	8010272 <_printf_i+0xce>
 801025c:	6805      	ldr	r5, [r0, #0]
 801025e:	600b      	str	r3, [r1, #0]
 8010260:	2d00      	cmp	r5, #0
 8010262:	da03      	bge.n	801026c <_printf_i+0xc8>
 8010264:	232d      	movs	r3, #45	; 0x2d
 8010266:	426d      	negs	r5, r5
 8010268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801026c:	485e      	ldr	r0, [pc, #376]	; (80103e8 <_printf_i+0x244>)
 801026e:	230a      	movs	r3, #10
 8010270:	e019      	b.n	80102a6 <_printf_i+0x102>
 8010272:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010276:	6805      	ldr	r5, [r0, #0]
 8010278:	600b      	str	r3, [r1, #0]
 801027a:	bf18      	it	ne
 801027c:	b22d      	sxthne	r5, r5
 801027e:	e7ef      	b.n	8010260 <_printf_i+0xbc>
 8010280:	680b      	ldr	r3, [r1, #0]
 8010282:	6825      	ldr	r5, [r4, #0]
 8010284:	1d18      	adds	r0, r3, #4
 8010286:	6008      	str	r0, [r1, #0]
 8010288:	0628      	lsls	r0, r5, #24
 801028a:	d501      	bpl.n	8010290 <_printf_i+0xec>
 801028c:	681d      	ldr	r5, [r3, #0]
 801028e:	e002      	b.n	8010296 <_printf_i+0xf2>
 8010290:	0669      	lsls	r1, r5, #25
 8010292:	d5fb      	bpl.n	801028c <_printf_i+0xe8>
 8010294:	881d      	ldrh	r5, [r3, #0]
 8010296:	4854      	ldr	r0, [pc, #336]	; (80103e8 <_printf_i+0x244>)
 8010298:	2f6f      	cmp	r7, #111	; 0x6f
 801029a:	bf0c      	ite	eq
 801029c:	2308      	moveq	r3, #8
 801029e:	230a      	movne	r3, #10
 80102a0:	2100      	movs	r1, #0
 80102a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80102a6:	6866      	ldr	r6, [r4, #4]
 80102a8:	60a6      	str	r6, [r4, #8]
 80102aa:	2e00      	cmp	r6, #0
 80102ac:	bfa2      	ittt	ge
 80102ae:	6821      	ldrge	r1, [r4, #0]
 80102b0:	f021 0104 	bicge.w	r1, r1, #4
 80102b4:	6021      	strge	r1, [r4, #0]
 80102b6:	b90d      	cbnz	r5, 80102bc <_printf_i+0x118>
 80102b8:	2e00      	cmp	r6, #0
 80102ba:	d04d      	beq.n	8010358 <_printf_i+0x1b4>
 80102bc:	4616      	mov	r6, r2
 80102be:	fbb5 f1f3 	udiv	r1, r5, r3
 80102c2:	fb03 5711 	mls	r7, r3, r1, r5
 80102c6:	5dc7      	ldrb	r7, [r0, r7]
 80102c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80102cc:	462f      	mov	r7, r5
 80102ce:	42bb      	cmp	r3, r7
 80102d0:	460d      	mov	r5, r1
 80102d2:	d9f4      	bls.n	80102be <_printf_i+0x11a>
 80102d4:	2b08      	cmp	r3, #8
 80102d6:	d10b      	bne.n	80102f0 <_printf_i+0x14c>
 80102d8:	6823      	ldr	r3, [r4, #0]
 80102da:	07df      	lsls	r7, r3, #31
 80102dc:	d508      	bpl.n	80102f0 <_printf_i+0x14c>
 80102de:	6923      	ldr	r3, [r4, #16]
 80102e0:	6861      	ldr	r1, [r4, #4]
 80102e2:	4299      	cmp	r1, r3
 80102e4:	bfde      	ittt	le
 80102e6:	2330      	movle	r3, #48	; 0x30
 80102e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80102ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80102f0:	1b92      	subs	r2, r2, r6
 80102f2:	6122      	str	r2, [r4, #16]
 80102f4:	f8cd a000 	str.w	sl, [sp]
 80102f8:	464b      	mov	r3, r9
 80102fa:	aa03      	add	r2, sp, #12
 80102fc:	4621      	mov	r1, r4
 80102fe:	4640      	mov	r0, r8
 8010300:	f7ff fee2 	bl	80100c8 <_printf_common>
 8010304:	3001      	adds	r0, #1
 8010306:	d14c      	bne.n	80103a2 <_printf_i+0x1fe>
 8010308:	f04f 30ff 	mov.w	r0, #4294967295
 801030c:	b004      	add	sp, #16
 801030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010312:	4835      	ldr	r0, [pc, #212]	; (80103e8 <_printf_i+0x244>)
 8010314:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010318:	6823      	ldr	r3, [r4, #0]
 801031a:	680e      	ldr	r6, [r1, #0]
 801031c:	061f      	lsls	r7, r3, #24
 801031e:	f856 5b04 	ldr.w	r5, [r6], #4
 8010322:	600e      	str	r6, [r1, #0]
 8010324:	d514      	bpl.n	8010350 <_printf_i+0x1ac>
 8010326:	07d9      	lsls	r1, r3, #31
 8010328:	bf44      	itt	mi
 801032a:	f043 0320 	orrmi.w	r3, r3, #32
 801032e:	6023      	strmi	r3, [r4, #0]
 8010330:	b91d      	cbnz	r5, 801033a <_printf_i+0x196>
 8010332:	6823      	ldr	r3, [r4, #0]
 8010334:	f023 0320 	bic.w	r3, r3, #32
 8010338:	6023      	str	r3, [r4, #0]
 801033a:	2310      	movs	r3, #16
 801033c:	e7b0      	b.n	80102a0 <_printf_i+0xfc>
 801033e:	6823      	ldr	r3, [r4, #0]
 8010340:	f043 0320 	orr.w	r3, r3, #32
 8010344:	6023      	str	r3, [r4, #0]
 8010346:	2378      	movs	r3, #120	; 0x78
 8010348:	4828      	ldr	r0, [pc, #160]	; (80103ec <_printf_i+0x248>)
 801034a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801034e:	e7e3      	b.n	8010318 <_printf_i+0x174>
 8010350:	065e      	lsls	r6, r3, #25
 8010352:	bf48      	it	mi
 8010354:	b2ad      	uxthmi	r5, r5
 8010356:	e7e6      	b.n	8010326 <_printf_i+0x182>
 8010358:	4616      	mov	r6, r2
 801035a:	e7bb      	b.n	80102d4 <_printf_i+0x130>
 801035c:	680b      	ldr	r3, [r1, #0]
 801035e:	6826      	ldr	r6, [r4, #0]
 8010360:	6960      	ldr	r0, [r4, #20]
 8010362:	1d1d      	adds	r5, r3, #4
 8010364:	600d      	str	r5, [r1, #0]
 8010366:	0635      	lsls	r5, r6, #24
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	d501      	bpl.n	8010370 <_printf_i+0x1cc>
 801036c:	6018      	str	r0, [r3, #0]
 801036e:	e002      	b.n	8010376 <_printf_i+0x1d2>
 8010370:	0671      	lsls	r1, r6, #25
 8010372:	d5fb      	bpl.n	801036c <_printf_i+0x1c8>
 8010374:	8018      	strh	r0, [r3, #0]
 8010376:	2300      	movs	r3, #0
 8010378:	6123      	str	r3, [r4, #16]
 801037a:	4616      	mov	r6, r2
 801037c:	e7ba      	b.n	80102f4 <_printf_i+0x150>
 801037e:	680b      	ldr	r3, [r1, #0]
 8010380:	1d1a      	adds	r2, r3, #4
 8010382:	600a      	str	r2, [r1, #0]
 8010384:	681e      	ldr	r6, [r3, #0]
 8010386:	6862      	ldr	r2, [r4, #4]
 8010388:	2100      	movs	r1, #0
 801038a:	4630      	mov	r0, r6
 801038c:	f7ef ff20 	bl	80001d0 <memchr>
 8010390:	b108      	cbz	r0, 8010396 <_printf_i+0x1f2>
 8010392:	1b80      	subs	r0, r0, r6
 8010394:	6060      	str	r0, [r4, #4]
 8010396:	6863      	ldr	r3, [r4, #4]
 8010398:	6123      	str	r3, [r4, #16]
 801039a:	2300      	movs	r3, #0
 801039c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80103a0:	e7a8      	b.n	80102f4 <_printf_i+0x150>
 80103a2:	6923      	ldr	r3, [r4, #16]
 80103a4:	4632      	mov	r2, r6
 80103a6:	4649      	mov	r1, r9
 80103a8:	4640      	mov	r0, r8
 80103aa:	47d0      	blx	sl
 80103ac:	3001      	adds	r0, #1
 80103ae:	d0ab      	beq.n	8010308 <_printf_i+0x164>
 80103b0:	6823      	ldr	r3, [r4, #0]
 80103b2:	079b      	lsls	r3, r3, #30
 80103b4:	d413      	bmi.n	80103de <_printf_i+0x23a>
 80103b6:	68e0      	ldr	r0, [r4, #12]
 80103b8:	9b03      	ldr	r3, [sp, #12]
 80103ba:	4298      	cmp	r0, r3
 80103bc:	bfb8      	it	lt
 80103be:	4618      	movlt	r0, r3
 80103c0:	e7a4      	b.n	801030c <_printf_i+0x168>
 80103c2:	2301      	movs	r3, #1
 80103c4:	4632      	mov	r2, r6
 80103c6:	4649      	mov	r1, r9
 80103c8:	4640      	mov	r0, r8
 80103ca:	47d0      	blx	sl
 80103cc:	3001      	adds	r0, #1
 80103ce:	d09b      	beq.n	8010308 <_printf_i+0x164>
 80103d0:	3501      	adds	r5, #1
 80103d2:	68e3      	ldr	r3, [r4, #12]
 80103d4:	9903      	ldr	r1, [sp, #12]
 80103d6:	1a5b      	subs	r3, r3, r1
 80103d8:	42ab      	cmp	r3, r5
 80103da:	dcf2      	bgt.n	80103c2 <_printf_i+0x21e>
 80103dc:	e7eb      	b.n	80103b6 <_printf_i+0x212>
 80103de:	2500      	movs	r5, #0
 80103e0:	f104 0619 	add.w	r6, r4, #25
 80103e4:	e7f5      	b.n	80103d2 <_printf_i+0x22e>
 80103e6:	bf00      	nop
 80103e8:	08010e5f 	.word	0x08010e5f
 80103ec:	08010e70 	.word	0x08010e70

080103f0 <__swbuf_r>:
 80103f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103f2:	460e      	mov	r6, r1
 80103f4:	4614      	mov	r4, r2
 80103f6:	4605      	mov	r5, r0
 80103f8:	b118      	cbz	r0, 8010402 <__swbuf_r+0x12>
 80103fa:	6983      	ldr	r3, [r0, #24]
 80103fc:	b90b      	cbnz	r3, 8010402 <__swbuf_r+0x12>
 80103fe:	f000 f9d9 	bl	80107b4 <__sinit>
 8010402:	4b21      	ldr	r3, [pc, #132]	; (8010488 <__swbuf_r+0x98>)
 8010404:	429c      	cmp	r4, r3
 8010406:	d12b      	bne.n	8010460 <__swbuf_r+0x70>
 8010408:	686c      	ldr	r4, [r5, #4]
 801040a:	69a3      	ldr	r3, [r4, #24]
 801040c:	60a3      	str	r3, [r4, #8]
 801040e:	89a3      	ldrh	r3, [r4, #12]
 8010410:	071a      	lsls	r2, r3, #28
 8010412:	d52f      	bpl.n	8010474 <__swbuf_r+0x84>
 8010414:	6923      	ldr	r3, [r4, #16]
 8010416:	b36b      	cbz	r3, 8010474 <__swbuf_r+0x84>
 8010418:	6923      	ldr	r3, [r4, #16]
 801041a:	6820      	ldr	r0, [r4, #0]
 801041c:	1ac0      	subs	r0, r0, r3
 801041e:	6963      	ldr	r3, [r4, #20]
 8010420:	b2f6      	uxtb	r6, r6
 8010422:	4283      	cmp	r3, r0
 8010424:	4637      	mov	r7, r6
 8010426:	dc04      	bgt.n	8010432 <__swbuf_r+0x42>
 8010428:	4621      	mov	r1, r4
 801042a:	4628      	mov	r0, r5
 801042c:	f000 f92e 	bl	801068c <_fflush_r>
 8010430:	bb30      	cbnz	r0, 8010480 <__swbuf_r+0x90>
 8010432:	68a3      	ldr	r3, [r4, #8]
 8010434:	3b01      	subs	r3, #1
 8010436:	60a3      	str	r3, [r4, #8]
 8010438:	6823      	ldr	r3, [r4, #0]
 801043a:	1c5a      	adds	r2, r3, #1
 801043c:	6022      	str	r2, [r4, #0]
 801043e:	701e      	strb	r6, [r3, #0]
 8010440:	6963      	ldr	r3, [r4, #20]
 8010442:	3001      	adds	r0, #1
 8010444:	4283      	cmp	r3, r0
 8010446:	d004      	beq.n	8010452 <__swbuf_r+0x62>
 8010448:	89a3      	ldrh	r3, [r4, #12]
 801044a:	07db      	lsls	r3, r3, #31
 801044c:	d506      	bpl.n	801045c <__swbuf_r+0x6c>
 801044e:	2e0a      	cmp	r6, #10
 8010450:	d104      	bne.n	801045c <__swbuf_r+0x6c>
 8010452:	4621      	mov	r1, r4
 8010454:	4628      	mov	r0, r5
 8010456:	f000 f919 	bl	801068c <_fflush_r>
 801045a:	b988      	cbnz	r0, 8010480 <__swbuf_r+0x90>
 801045c:	4638      	mov	r0, r7
 801045e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010460:	4b0a      	ldr	r3, [pc, #40]	; (801048c <__swbuf_r+0x9c>)
 8010462:	429c      	cmp	r4, r3
 8010464:	d101      	bne.n	801046a <__swbuf_r+0x7a>
 8010466:	68ac      	ldr	r4, [r5, #8]
 8010468:	e7cf      	b.n	801040a <__swbuf_r+0x1a>
 801046a:	4b09      	ldr	r3, [pc, #36]	; (8010490 <__swbuf_r+0xa0>)
 801046c:	429c      	cmp	r4, r3
 801046e:	bf08      	it	eq
 8010470:	68ec      	ldreq	r4, [r5, #12]
 8010472:	e7ca      	b.n	801040a <__swbuf_r+0x1a>
 8010474:	4621      	mov	r1, r4
 8010476:	4628      	mov	r0, r5
 8010478:	f000 f80c 	bl	8010494 <__swsetup_r>
 801047c:	2800      	cmp	r0, #0
 801047e:	d0cb      	beq.n	8010418 <__swbuf_r+0x28>
 8010480:	f04f 37ff 	mov.w	r7, #4294967295
 8010484:	e7ea      	b.n	801045c <__swbuf_r+0x6c>
 8010486:	bf00      	nop
 8010488:	08010ea4 	.word	0x08010ea4
 801048c:	08010ec4 	.word	0x08010ec4
 8010490:	08010e84 	.word	0x08010e84

08010494 <__swsetup_r>:
 8010494:	4b32      	ldr	r3, [pc, #200]	; (8010560 <__swsetup_r+0xcc>)
 8010496:	b570      	push	{r4, r5, r6, lr}
 8010498:	681d      	ldr	r5, [r3, #0]
 801049a:	4606      	mov	r6, r0
 801049c:	460c      	mov	r4, r1
 801049e:	b125      	cbz	r5, 80104aa <__swsetup_r+0x16>
 80104a0:	69ab      	ldr	r3, [r5, #24]
 80104a2:	b913      	cbnz	r3, 80104aa <__swsetup_r+0x16>
 80104a4:	4628      	mov	r0, r5
 80104a6:	f000 f985 	bl	80107b4 <__sinit>
 80104aa:	4b2e      	ldr	r3, [pc, #184]	; (8010564 <__swsetup_r+0xd0>)
 80104ac:	429c      	cmp	r4, r3
 80104ae:	d10f      	bne.n	80104d0 <__swsetup_r+0x3c>
 80104b0:	686c      	ldr	r4, [r5, #4]
 80104b2:	89a3      	ldrh	r3, [r4, #12]
 80104b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80104b8:	0719      	lsls	r1, r3, #28
 80104ba:	d42c      	bmi.n	8010516 <__swsetup_r+0x82>
 80104bc:	06dd      	lsls	r5, r3, #27
 80104be:	d411      	bmi.n	80104e4 <__swsetup_r+0x50>
 80104c0:	2309      	movs	r3, #9
 80104c2:	6033      	str	r3, [r6, #0]
 80104c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80104c8:	81a3      	strh	r3, [r4, #12]
 80104ca:	f04f 30ff 	mov.w	r0, #4294967295
 80104ce:	e03e      	b.n	801054e <__swsetup_r+0xba>
 80104d0:	4b25      	ldr	r3, [pc, #148]	; (8010568 <__swsetup_r+0xd4>)
 80104d2:	429c      	cmp	r4, r3
 80104d4:	d101      	bne.n	80104da <__swsetup_r+0x46>
 80104d6:	68ac      	ldr	r4, [r5, #8]
 80104d8:	e7eb      	b.n	80104b2 <__swsetup_r+0x1e>
 80104da:	4b24      	ldr	r3, [pc, #144]	; (801056c <__swsetup_r+0xd8>)
 80104dc:	429c      	cmp	r4, r3
 80104de:	bf08      	it	eq
 80104e0:	68ec      	ldreq	r4, [r5, #12]
 80104e2:	e7e6      	b.n	80104b2 <__swsetup_r+0x1e>
 80104e4:	0758      	lsls	r0, r3, #29
 80104e6:	d512      	bpl.n	801050e <__swsetup_r+0x7a>
 80104e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80104ea:	b141      	cbz	r1, 80104fe <__swsetup_r+0x6a>
 80104ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80104f0:	4299      	cmp	r1, r3
 80104f2:	d002      	beq.n	80104fa <__swsetup_r+0x66>
 80104f4:	4630      	mov	r0, r6
 80104f6:	f7ff fb57 	bl	800fba8 <_free_r>
 80104fa:	2300      	movs	r3, #0
 80104fc:	6363      	str	r3, [r4, #52]	; 0x34
 80104fe:	89a3      	ldrh	r3, [r4, #12]
 8010500:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010504:	81a3      	strh	r3, [r4, #12]
 8010506:	2300      	movs	r3, #0
 8010508:	6063      	str	r3, [r4, #4]
 801050a:	6923      	ldr	r3, [r4, #16]
 801050c:	6023      	str	r3, [r4, #0]
 801050e:	89a3      	ldrh	r3, [r4, #12]
 8010510:	f043 0308 	orr.w	r3, r3, #8
 8010514:	81a3      	strh	r3, [r4, #12]
 8010516:	6923      	ldr	r3, [r4, #16]
 8010518:	b94b      	cbnz	r3, 801052e <__swsetup_r+0x9a>
 801051a:	89a3      	ldrh	r3, [r4, #12]
 801051c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010524:	d003      	beq.n	801052e <__swsetup_r+0x9a>
 8010526:	4621      	mov	r1, r4
 8010528:	4630      	mov	r0, r6
 801052a:	f000 fa07 	bl	801093c <__smakebuf_r>
 801052e:	89a0      	ldrh	r0, [r4, #12]
 8010530:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010534:	f010 0301 	ands.w	r3, r0, #1
 8010538:	d00a      	beq.n	8010550 <__swsetup_r+0xbc>
 801053a:	2300      	movs	r3, #0
 801053c:	60a3      	str	r3, [r4, #8]
 801053e:	6963      	ldr	r3, [r4, #20]
 8010540:	425b      	negs	r3, r3
 8010542:	61a3      	str	r3, [r4, #24]
 8010544:	6923      	ldr	r3, [r4, #16]
 8010546:	b943      	cbnz	r3, 801055a <__swsetup_r+0xc6>
 8010548:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801054c:	d1ba      	bne.n	80104c4 <__swsetup_r+0x30>
 801054e:	bd70      	pop	{r4, r5, r6, pc}
 8010550:	0781      	lsls	r1, r0, #30
 8010552:	bf58      	it	pl
 8010554:	6963      	ldrpl	r3, [r4, #20]
 8010556:	60a3      	str	r3, [r4, #8]
 8010558:	e7f4      	b.n	8010544 <__swsetup_r+0xb0>
 801055a:	2000      	movs	r0, #0
 801055c:	e7f7      	b.n	801054e <__swsetup_r+0xba>
 801055e:	bf00      	nop
 8010560:	20000040 	.word	0x20000040
 8010564:	08010ea4 	.word	0x08010ea4
 8010568:	08010ec4 	.word	0x08010ec4
 801056c:	08010e84 	.word	0x08010e84

08010570 <abort>:
 8010570:	b508      	push	{r3, lr}
 8010572:	2006      	movs	r0, #6
 8010574:	f000 fa4a 	bl	8010a0c <raise>
 8010578:	2001      	movs	r0, #1
 801057a:	f7f1 fd9f 	bl	80020bc <_exit>
	...

08010580 <__sflush_r>:
 8010580:	898a      	ldrh	r2, [r1, #12]
 8010582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010586:	4605      	mov	r5, r0
 8010588:	0710      	lsls	r0, r2, #28
 801058a:	460c      	mov	r4, r1
 801058c:	d458      	bmi.n	8010640 <__sflush_r+0xc0>
 801058e:	684b      	ldr	r3, [r1, #4]
 8010590:	2b00      	cmp	r3, #0
 8010592:	dc05      	bgt.n	80105a0 <__sflush_r+0x20>
 8010594:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010596:	2b00      	cmp	r3, #0
 8010598:	dc02      	bgt.n	80105a0 <__sflush_r+0x20>
 801059a:	2000      	movs	r0, #0
 801059c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80105a2:	2e00      	cmp	r6, #0
 80105a4:	d0f9      	beq.n	801059a <__sflush_r+0x1a>
 80105a6:	2300      	movs	r3, #0
 80105a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80105ac:	682f      	ldr	r7, [r5, #0]
 80105ae:	602b      	str	r3, [r5, #0]
 80105b0:	d032      	beq.n	8010618 <__sflush_r+0x98>
 80105b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80105b4:	89a3      	ldrh	r3, [r4, #12]
 80105b6:	075a      	lsls	r2, r3, #29
 80105b8:	d505      	bpl.n	80105c6 <__sflush_r+0x46>
 80105ba:	6863      	ldr	r3, [r4, #4]
 80105bc:	1ac0      	subs	r0, r0, r3
 80105be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80105c0:	b10b      	cbz	r3, 80105c6 <__sflush_r+0x46>
 80105c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80105c4:	1ac0      	subs	r0, r0, r3
 80105c6:	2300      	movs	r3, #0
 80105c8:	4602      	mov	r2, r0
 80105ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80105cc:	6a21      	ldr	r1, [r4, #32]
 80105ce:	4628      	mov	r0, r5
 80105d0:	47b0      	blx	r6
 80105d2:	1c43      	adds	r3, r0, #1
 80105d4:	89a3      	ldrh	r3, [r4, #12]
 80105d6:	d106      	bne.n	80105e6 <__sflush_r+0x66>
 80105d8:	6829      	ldr	r1, [r5, #0]
 80105da:	291d      	cmp	r1, #29
 80105dc:	d82c      	bhi.n	8010638 <__sflush_r+0xb8>
 80105de:	4a2a      	ldr	r2, [pc, #168]	; (8010688 <__sflush_r+0x108>)
 80105e0:	40ca      	lsrs	r2, r1
 80105e2:	07d6      	lsls	r6, r2, #31
 80105e4:	d528      	bpl.n	8010638 <__sflush_r+0xb8>
 80105e6:	2200      	movs	r2, #0
 80105e8:	6062      	str	r2, [r4, #4]
 80105ea:	04d9      	lsls	r1, r3, #19
 80105ec:	6922      	ldr	r2, [r4, #16]
 80105ee:	6022      	str	r2, [r4, #0]
 80105f0:	d504      	bpl.n	80105fc <__sflush_r+0x7c>
 80105f2:	1c42      	adds	r2, r0, #1
 80105f4:	d101      	bne.n	80105fa <__sflush_r+0x7a>
 80105f6:	682b      	ldr	r3, [r5, #0]
 80105f8:	b903      	cbnz	r3, 80105fc <__sflush_r+0x7c>
 80105fa:	6560      	str	r0, [r4, #84]	; 0x54
 80105fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80105fe:	602f      	str	r7, [r5, #0]
 8010600:	2900      	cmp	r1, #0
 8010602:	d0ca      	beq.n	801059a <__sflush_r+0x1a>
 8010604:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010608:	4299      	cmp	r1, r3
 801060a:	d002      	beq.n	8010612 <__sflush_r+0x92>
 801060c:	4628      	mov	r0, r5
 801060e:	f7ff facb 	bl	800fba8 <_free_r>
 8010612:	2000      	movs	r0, #0
 8010614:	6360      	str	r0, [r4, #52]	; 0x34
 8010616:	e7c1      	b.n	801059c <__sflush_r+0x1c>
 8010618:	6a21      	ldr	r1, [r4, #32]
 801061a:	2301      	movs	r3, #1
 801061c:	4628      	mov	r0, r5
 801061e:	47b0      	blx	r6
 8010620:	1c41      	adds	r1, r0, #1
 8010622:	d1c7      	bne.n	80105b4 <__sflush_r+0x34>
 8010624:	682b      	ldr	r3, [r5, #0]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d0c4      	beq.n	80105b4 <__sflush_r+0x34>
 801062a:	2b1d      	cmp	r3, #29
 801062c:	d001      	beq.n	8010632 <__sflush_r+0xb2>
 801062e:	2b16      	cmp	r3, #22
 8010630:	d101      	bne.n	8010636 <__sflush_r+0xb6>
 8010632:	602f      	str	r7, [r5, #0]
 8010634:	e7b1      	b.n	801059a <__sflush_r+0x1a>
 8010636:	89a3      	ldrh	r3, [r4, #12]
 8010638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801063c:	81a3      	strh	r3, [r4, #12]
 801063e:	e7ad      	b.n	801059c <__sflush_r+0x1c>
 8010640:	690f      	ldr	r7, [r1, #16]
 8010642:	2f00      	cmp	r7, #0
 8010644:	d0a9      	beq.n	801059a <__sflush_r+0x1a>
 8010646:	0793      	lsls	r3, r2, #30
 8010648:	680e      	ldr	r6, [r1, #0]
 801064a:	bf08      	it	eq
 801064c:	694b      	ldreq	r3, [r1, #20]
 801064e:	600f      	str	r7, [r1, #0]
 8010650:	bf18      	it	ne
 8010652:	2300      	movne	r3, #0
 8010654:	eba6 0807 	sub.w	r8, r6, r7
 8010658:	608b      	str	r3, [r1, #8]
 801065a:	f1b8 0f00 	cmp.w	r8, #0
 801065e:	dd9c      	ble.n	801059a <__sflush_r+0x1a>
 8010660:	6a21      	ldr	r1, [r4, #32]
 8010662:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010664:	4643      	mov	r3, r8
 8010666:	463a      	mov	r2, r7
 8010668:	4628      	mov	r0, r5
 801066a:	47b0      	blx	r6
 801066c:	2800      	cmp	r0, #0
 801066e:	dc06      	bgt.n	801067e <__sflush_r+0xfe>
 8010670:	89a3      	ldrh	r3, [r4, #12]
 8010672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010676:	81a3      	strh	r3, [r4, #12]
 8010678:	f04f 30ff 	mov.w	r0, #4294967295
 801067c:	e78e      	b.n	801059c <__sflush_r+0x1c>
 801067e:	4407      	add	r7, r0
 8010680:	eba8 0800 	sub.w	r8, r8, r0
 8010684:	e7e9      	b.n	801065a <__sflush_r+0xda>
 8010686:	bf00      	nop
 8010688:	20400001 	.word	0x20400001

0801068c <_fflush_r>:
 801068c:	b538      	push	{r3, r4, r5, lr}
 801068e:	690b      	ldr	r3, [r1, #16]
 8010690:	4605      	mov	r5, r0
 8010692:	460c      	mov	r4, r1
 8010694:	b913      	cbnz	r3, 801069c <_fflush_r+0x10>
 8010696:	2500      	movs	r5, #0
 8010698:	4628      	mov	r0, r5
 801069a:	bd38      	pop	{r3, r4, r5, pc}
 801069c:	b118      	cbz	r0, 80106a6 <_fflush_r+0x1a>
 801069e:	6983      	ldr	r3, [r0, #24]
 80106a0:	b90b      	cbnz	r3, 80106a6 <_fflush_r+0x1a>
 80106a2:	f000 f887 	bl	80107b4 <__sinit>
 80106a6:	4b14      	ldr	r3, [pc, #80]	; (80106f8 <_fflush_r+0x6c>)
 80106a8:	429c      	cmp	r4, r3
 80106aa:	d11b      	bne.n	80106e4 <_fflush_r+0x58>
 80106ac:	686c      	ldr	r4, [r5, #4]
 80106ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d0ef      	beq.n	8010696 <_fflush_r+0xa>
 80106b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80106b8:	07d0      	lsls	r0, r2, #31
 80106ba:	d404      	bmi.n	80106c6 <_fflush_r+0x3a>
 80106bc:	0599      	lsls	r1, r3, #22
 80106be:	d402      	bmi.n	80106c6 <_fflush_r+0x3a>
 80106c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80106c2:	f000 f915 	bl	80108f0 <__retarget_lock_acquire_recursive>
 80106c6:	4628      	mov	r0, r5
 80106c8:	4621      	mov	r1, r4
 80106ca:	f7ff ff59 	bl	8010580 <__sflush_r>
 80106ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80106d0:	07da      	lsls	r2, r3, #31
 80106d2:	4605      	mov	r5, r0
 80106d4:	d4e0      	bmi.n	8010698 <_fflush_r+0xc>
 80106d6:	89a3      	ldrh	r3, [r4, #12]
 80106d8:	059b      	lsls	r3, r3, #22
 80106da:	d4dd      	bmi.n	8010698 <_fflush_r+0xc>
 80106dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80106de:	f000 f908 	bl	80108f2 <__retarget_lock_release_recursive>
 80106e2:	e7d9      	b.n	8010698 <_fflush_r+0xc>
 80106e4:	4b05      	ldr	r3, [pc, #20]	; (80106fc <_fflush_r+0x70>)
 80106e6:	429c      	cmp	r4, r3
 80106e8:	d101      	bne.n	80106ee <_fflush_r+0x62>
 80106ea:	68ac      	ldr	r4, [r5, #8]
 80106ec:	e7df      	b.n	80106ae <_fflush_r+0x22>
 80106ee:	4b04      	ldr	r3, [pc, #16]	; (8010700 <_fflush_r+0x74>)
 80106f0:	429c      	cmp	r4, r3
 80106f2:	bf08      	it	eq
 80106f4:	68ec      	ldreq	r4, [r5, #12]
 80106f6:	e7da      	b.n	80106ae <_fflush_r+0x22>
 80106f8:	08010ea4 	.word	0x08010ea4
 80106fc:	08010ec4 	.word	0x08010ec4
 8010700:	08010e84 	.word	0x08010e84

08010704 <std>:
 8010704:	2300      	movs	r3, #0
 8010706:	b510      	push	{r4, lr}
 8010708:	4604      	mov	r4, r0
 801070a:	e9c0 3300 	strd	r3, r3, [r0]
 801070e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010712:	6083      	str	r3, [r0, #8]
 8010714:	8181      	strh	r1, [r0, #12]
 8010716:	6643      	str	r3, [r0, #100]	; 0x64
 8010718:	81c2      	strh	r2, [r0, #14]
 801071a:	6183      	str	r3, [r0, #24]
 801071c:	4619      	mov	r1, r3
 801071e:	2208      	movs	r2, #8
 8010720:	305c      	adds	r0, #92	; 0x5c
 8010722:	f7ff fa39 	bl	800fb98 <memset>
 8010726:	4b05      	ldr	r3, [pc, #20]	; (801073c <std+0x38>)
 8010728:	6263      	str	r3, [r4, #36]	; 0x24
 801072a:	4b05      	ldr	r3, [pc, #20]	; (8010740 <std+0x3c>)
 801072c:	62a3      	str	r3, [r4, #40]	; 0x28
 801072e:	4b05      	ldr	r3, [pc, #20]	; (8010744 <std+0x40>)
 8010730:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010732:	4b05      	ldr	r3, [pc, #20]	; (8010748 <std+0x44>)
 8010734:	6224      	str	r4, [r4, #32]
 8010736:	6323      	str	r3, [r4, #48]	; 0x30
 8010738:	bd10      	pop	{r4, pc}
 801073a:	bf00      	nop
 801073c:	08010a45 	.word	0x08010a45
 8010740:	08010a67 	.word	0x08010a67
 8010744:	08010a9f 	.word	0x08010a9f
 8010748:	08010ac3 	.word	0x08010ac3

0801074c <_cleanup_r>:
 801074c:	4901      	ldr	r1, [pc, #4]	; (8010754 <_cleanup_r+0x8>)
 801074e:	f000 b8af 	b.w	80108b0 <_fwalk_reent>
 8010752:	bf00      	nop
 8010754:	0801068d 	.word	0x0801068d

08010758 <__sfmoreglue>:
 8010758:	b570      	push	{r4, r5, r6, lr}
 801075a:	1e4a      	subs	r2, r1, #1
 801075c:	2568      	movs	r5, #104	; 0x68
 801075e:	4355      	muls	r5, r2
 8010760:	460e      	mov	r6, r1
 8010762:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010766:	f7ff fa6f 	bl	800fc48 <_malloc_r>
 801076a:	4604      	mov	r4, r0
 801076c:	b140      	cbz	r0, 8010780 <__sfmoreglue+0x28>
 801076e:	2100      	movs	r1, #0
 8010770:	e9c0 1600 	strd	r1, r6, [r0]
 8010774:	300c      	adds	r0, #12
 8010776:	60a0      	str	r0, [r4, #8]
 8010778:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801077c:	f7ff fa0c 	bl	800fb98 <memset>
 8010780:	4620      	mov	r0, r4
 8010782:	bd70      	pop	{r4, r5, r6, pc}

08010784 <__sfp_lock_acquire>:
 8010784:	4801      	ldr	r0, [pc, #4]	; (801078c <__sfp_lock_acquire+0x8>)
 8010786:	f000 b8b3 	b.w	80108f0 <__retarget_lock_acquire_recursive>
 801078a:	bf00      	nop
 801078c:	20002174 	.word	0x20002174

08010790 <__sfp_lock_release>:
 8010790:	4801      	ldr	r0, [pc, #4]	; (8010798 <__sfp_lock_release+0x8>)
 8010792:	f000 b8ae 	b.w	80108f2 <__retarget_lock_release_recursive>
 8010796:	bf00      	nop
 8010798:	20002174 	.word	0x20002174

0801079c <__sinit_lock_acquire>:
 801079c:	4801      	ldr	r0, [pc, #4]	; (80107a4 <__sinit_lock_acquire+0x8>)
 801079e:	f000 b8a7 	b.w	80108f0 <__retarget_lock_acquire_recursive>
 80107a2:	bf00      	nop
 80107a4:	2000216f 	.word	0x2000216f

080107a8 <__sinit_lock_release>:
 80107a8:	4801      	ldr	r0, [pc, #4]	; (80107b0 <__sinit_lock_release+0x8>)
 80107aa:	f000 b8a2 	b.w	80108f2 <__retarget_lock_release_recursive>
 80107ae:	bf00      	nop
 80107b0:	2000216f 	.word	0x2000216f

080107b4 <__sinit>:
 80107b4:	b510      	push	{r4, lr}
 80107b6:	4604      	mov	r4, r0
 80107b8:	f7ff fff0 	bl	801079c <__sinit_lock_acquire>
 80107bc:	69a3      	ldr	r3, [r4, #24]
 80107be:	b11b      	cbz	r3, 80107c8 <__sinit+0x14>
 80107c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107c4:	f7ff bff0 	b.w	80107a8 <__sinit_lock_release>
 80107c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80107cc:	6523      	str	r3, [r4, #80]	; 0x50
 80107ce:	4b13      	ldr	r3, [pc, #76]	; (801081c <__sinit+0x68>)
 80107d0:	4a13      	ldr	r2, [pc, #76]	; (8010820 <__sinit+0x6c>)
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80107d6:	42a3      	cmp	r3, r4
 80107d8:	bf04      	itt	eq
 80107da:	2301      	moveq	r3, #1
 80107dc:	61a3      	streq	r3, [r4, #24]
 80107de:	4620      	mov	r0, r4
 80107e0:	f000 f820 	bl	8010824 <__sfp>
 80107e4:	6060      	str	r0, [r4, #4]
 80107e6:	4620      	mov	r0, r4
 80107e8:	f000 f81c 	bl	8010824 <__sfp>
 80107ec:	60a0      	str	r0, [r4, #8]
 80107ee:	4620      	mov	r0, r4
 80107f0:	f000 f818 	bl	8010824 <__sfp>
 80107f4:	2200      	movs	r2, #0
 80107f6:	60e0      	str	r0, [r4, #12]
 80107f8:	2104      	movs	r1, #4
 80107fa:	6860      	ldr	r0, [r4, #4]
 80107fc:	f7ff ff82 	bl	8010704 <std>
 8010800:	68a0      	ldr	r0, [r4, #8]
 8010802:	2201      	movs	r2, #1
 8010804:	2109      	movs	r1, #9
 8010806:	f7ff ff7d 	bl	8010704 <std>
 801080a:	68e0      	ldr	r0, [r4, #12]
 801080c:	2202      	movs	r2, #2
 801080e:	2112      	movs	r1, #18
 8010810:	f7ff ff78 	bl	8010704 <std>
 8010814:	2301      	movs	r3, #1
 8010816:	61a3      	str	r3, [r4, #24]
 8010818:	e7d2      	b.n	80107c0 <__sinit+0xc>
 801081a:	bf00      	nop
 801081c:	08010d98 	.word	0x08010d98
 8010820:	0801074d 	.word	0x0801074d

08010824 <__sfp>:
 8010824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010826:	4607      	mov	r7, r0
 8010828:	f7ff ffac 	bl	8010784 <__sfp_lock_acquire>
 801082c:	4b1e      	ldr	r3, [pc, #120]	; (80108a8 <__sfp+0x84>)
 801082e:	681e      	ldr	r6, [r3, #0]
 8010830:	69b3      	ldr	r3, [r6, #24]
 8010832:	b913      	cbnz	r3, 801083a <__sfp+0x16>
 8010834:	4630      	mov	r0, r6
 8010836:	f7ff ffbd 	bl	80107b4 <__sinit>
 801083a:	3648      	adds	r6, #72	; 0x48
 801083c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010840:	3b01      	subs	r3, #1
 8010842:	d503      	bpl.n	801084c <__sfp+0x28>
 8010844:	6833      	ldr	r3, [r6, #0]
 8010846:	b30b      	cbz	r3, 801088c <__sfp+0x68>
 8010848:	6836      	ldr	r6, [r6, #0]
 801084a:	e7f7      	b.n	801083c <__sfp+0x18>
 801084c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010850:	b9d5      	cbnz	r5, 8010888 <__sfp+0x64>
 8010852:	4b16      	ldr	r3, [pc, #88]	; (80108ac <__sfp+0x88>)
 8010854:	60e3      	str	r3, [r4, #12]
 8010856:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801085a:	6665      	str	r5, [r4, #100]	; 0x64
 801085c:	f000 f847 	bl	80108ee <__retarget_lock_init_recursive>
 8010860:	f7ff ff96 	bl	8010790 <__sfp_lock_release>
 8010864:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010868:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801086c:	6025      	str	r5, [r4, #0]
 801086e:	61a5      	str	r5, [r4, #24]
 8010870:	2208      	movs	r2, #8
 8010872:	4629      	mov	r1, r5
 8010874:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010878:	f7ff f98e 	bl	800fb98 <memset>
 801087c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010880:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010884:	4620      	mov	r0, r4
 8010886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010888:	3468      	adds	r4, #104	; 0x68
 801088a:	e7d9      	b.n	8010840 <__sfp+0x1c>
 801088c:	2104      	movs	r1, #4
 801088e:	4638      	mov	r0, r7
 8010890:	f7ff ff62 	bl	8010758 <__sfmoreglue>
 8010894:	4604      	mov	r4, r0
 8010896:	6030      	str	r0, [r6, #0]
 8010898:	2800      	cmp	r0, #0
 801089a:	d1d5      	bne.n	8010848 <__sfp+0x24>
 801089c:	f7ff ff78 	bl	8010790 <__sfp_lock_release>
 80108a0:	230c      	movs	r3, #12
 80108a2:	603b      	str	r3, [r7, #0]
 80108a4:	e7ee      	b.n	8010884 <__sfp+0x60>
 80108a6:	bf00      	nop
 80108a8:	08010d98 	.word	0x08010d98
 80108ac:	ffff0001 	.word	0xffff0001

080108b0 <_fwalk_reent>:
 80108b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108b4:	4606      	mov	r6, r0
 80108b6:	4688      	mov	r8, r1
 80108b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80108bc:	2700      	movs	r7, #0
 80108be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80108c2:	f1b9 0901 	subs.w	r9, r9, #1
 80108c6:	d505      	bpl.n	80108d4 <_fwalk_reent+0x24>
 80108c8:	6824      	ldr	r4, [r4, #0]
 80108ca:	2c00      	cmp	r4, #0
 80108cc:	d1f7      	bne.n	80108be <_fwalk_reent+0xe>
 80108ce:	4638      	mov	r0, r7
 80108d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108d4:	89ab      	ldrh	r3, [r5, #12]
 80108d6:	2b01      	cmp	r3, #1
 80108d8:	d907      	bls.n	80108ea <_fwalk_reent+0x3a>
 80108da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80108de:	3301      	adds	r3, #1
 80108e0:	d003      	beq.n	80108ea <_fwalk_reent+0x3a>
 80108e2:	4629      	mov	r1, r5
 80108e4:	4630      	mov	r0, r6
 80108e6:	47c0      	blx	r8
 80108e8:	4307      	orrs	r7, r0
 80108ea:	3568      	adds	r5, #104	; 0x68
 80108ec:	e7e9      	b.n	80108c2 <_fwalk_reent+0x12>

080108ee <__retarget_lock_init_recursive>:
 80108ee:	4770      	bx	lr

080108f0 <__retarget_lock_acquire_recursive>:
 80108f0:	4770      	bx	lr

080108f2 <__retarget_lock_release_recursive>:
 80108f2:	4770      	bx	lr

080108f4 <__swhatbuf_r>:
 80108f4:	b570      	push	{r4, r5, r6, lr}
 80108f6:	460e      	mov	r6, r1
 80108f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108fc:	2900      	cmp	r1, #0
 80108fe:	b096      	sub	sp, #88	; 0x58
 8010900:	4614      	mov	r4, r2
 8010902:	461d      	mov	r5, r3
 8010904:	da07      	bge.n	8010916 <__swhatbuf_r+0x22>
 8010906:	2300      	movs	r3, #0
 8010908:	602b      	str	r3, [r5, #0]
 801090a:	89b3      	ldrh	r3, [r6, #12]
 801090c:	061a      	lsls	r2, r3, #24
 801090e:	d410      	bmi.n	8010932 <__swhatbuf_r+0x3e>
 8010910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010914:	e00e      	b.n	8010934 <__swhatbuf_r+0x40>
 8010916:	466a      	mov	r2, sp
 8010918:	f000 f8fa 	bl	8010b10 <_fstat_r>
 801091c:	2800      	cmp	r0, #0
 801091e:	dbf2      	blt.n	8010906 <__swhatbuf_r+0x12>
 8010920:	9a01      	ldr	r2, [sp, #4]
 8010922:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010926:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801092a:	425a      	negs	r2, r3
 801092c:	415a      	adcs	r2, r3
 801092e:	602a      	str	r2, [r5, #0]
 8010930:	e7ee      	b.n	8010910 <__swhatbuf_r+0x1c>
 8010932:	2340      	movs	r3, #64	; 0x40
 8010934:	2000      	movs	r0, #0
 8010936:	6023      	str	r3, [r4, #0]
 8010938:	b016      	add	sp, #88	; 0x58
 801093a:	bd70      	pop	{r4, r5, r6, pc}

0801093c <__smakebuf_r>:
 801093c:	898b      	ldrh	r3, [r1, #12]
 801093e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010940:	079d      	lsls	r5, r3, #30
 8010942:	4606      	mov	r6, r0
 8010944:	460c      	mov	r4, r1
 8010946:	d507      	bpl.n	8010958 <__smakebuf_r+0x1c>
 8010948:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801094c:	6023      	str	r3, [r4, #0]
 801094e:	6123      	str	r3, [r4, #16]
 8010950:	2301      	movs	r3, #1
 8010952:	6163      	str	r3, [r4, #20]
 8010954:	b002      	add	sp, #8
 8010956:	bd70      	pop	{r4, r5, r6, pc}
 8010958:	ab01      	add	r3, sp, #4
 801095a:	466a      	mov	r2, sp
 801095c:	f7ff ffca 	bl	80108f4 <__swhatbuf_r>
 8010960:	9900      	ldr	r1, [sp, #0]
 8010962:	4605      	mov	r5, r0
 8010964:	4630      	mov	r0, r6
 8010966:	f7ff f96f 	bl	800fc48 <_malloc_r>
 801096a:	b948      	cbnz	r0, 8010980 <__smakebuf_r+0x44>
 801096c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010970:	059a      	lsls	r2, r3, #22
 8010972:	d4ef      	bmi.n	8010954 <__smakebuf_r+0x18>
 8010974:	f023 0303 	bic.w	r3, r3, #3
 8010978:	f043 0302 	orr.w	r3, r3, #2
 801097c:	81a3      	strh	r3, [r4, #12]
 801097e:	e7e3      	b.n	8010948 <__smakebuf_r+0xc>
 8010980:	4b0d      	ldr	r3, [pc, #52]	; (80109b8 <__smakebuf_r+0x7c>)
 8010982:	62b3      	str	r3, [r6, #40]	; 0x28
 8010984:	89a3      	ldrh	r3, [r4, #12]
 8010986:	6020      	str	r0, [r4, #0]
 8010988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801098c:	81a3      	strh	r3, [r4, #12]
 801098e:	9b00      	ldr	r3, [sp, #0]
 8010990:	6163      	str	r3, [r4, #20]
 8010992:	9b01      	ldr	r3, [sp, #4]
 8010994:	6120      	str	r0, [r4, #16]
 8010996:	b15b      	cbz	r3, 80109b0 <__smakebuf_r+0x74>
 8010998:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801099c:	4630      	mov	r0, r6
 801099e:	f000 f8c9 	bl	8010b34 <_isatty_r>
 80109a2:	b128      	cbz	r0, 80109b0 <__smakebuf_r+0x74>
 80109a4:	89a3      	ldrh	r3, [r4, #12]
 80109a6:	f023 0303 	bic.w	r3, r3, #3
 80109aa:	f043 0301 	orr.w	r3, r3, #1
 80109ae:	81a3      	strh	r3, [r4, #12]
 80109b0:	89a0      	ldrh	r0, [r4, #12]
 80109b2:	4305      	orrs	r5, r0
 80109b4:	81a5      	strh	r5, [r4, #12]
 80109b6:	e7cd      	b.n	8010954 <__smakebuf_r+0x18>
 80109b8:	0801074d 	.word	0x0801074d

080109bc <_raise_r>:
 80109bc:	291f      	cmp	r1, #31
 80109be:	b538      	push	{r3, r4, r5, lr}
 80109c0:	4604      	mov	r4, r0
 80109c2:	460d      	mov	r5, r1
 80109c4:	d904      	bls.n	80109d0 <_raise_r+0x14>
 80109c6:	2316      	movs	r3, #22
 80109c8:	6003      	str	r3, [r0, #0]
 80109ca:	f04f 30ff 	mov.w	r0, #4294967295
 80109ce:	bd38      	pop	{r3, r4, r5, pc}
 80109d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80109d2:	b112      	cbz	r2, 80109da <_raise_r+0x1e>
 80109d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80109d8:	b94b      	cbnz	r3, 80109ee <_raise_r+0x32>
 80109da:	4620      	mov	r0, r4
 80109dc:	f000 f830 	bl	8010a40 <_getpid_r>
 80109e0:	462a      	mov	r2, r5
 80109e2:	4601      	mov	r1, r0
 80109e4:	4620      	mov	r0, r4
 80109e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109ea:	f000 b817 	b.w	8010a1c <_kill_r>
 80109ee:	2b01      	cmp	r3, #1
 80109f0:	d00a      	beq.n	8010a08 <_raise_r+0x4c>
 80109f2:	1c59      	adds	r1, r3, #1
 80109f4:	d103      	bne.n	80109fe <_raise_r+0x42>
 80109f6:	2316      	movs	r3, #22
 80109f8:	6003      	str	r3, [r0, #0]
 80109fa:	2001      	movs	r0, #1
 80109fc:	e7e7      	b.n	80109ce <_raise_r+0x12>
 80109fe:	2400      	movs	r4, #0
 8010a00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010a04:	4628      	mov	r0, r5
 8010a06:	4798      	blx	r3
 8010a08:	2000      	movs	r0, #0
 8010a0a:	e7e0      	b.n	80109ce <_raise_r+0x12>

08010a0c <raise>:
 8010a0c:	4b02      	ldr	r3, [pc, #8]	; (8010a18 <raise+0xc>)
 8010a0e:	4601      	mov	r1, r0
 8010a10:	6818      	ldr	r0, [r3, #0]
 8010a12:	f7ff bfd3 	b.w	80109bc <_raise_r>
 8010a16:	bf00      	nop
 8010a18:	20000040 	.word	0x20000040

08010a1c <_kill_r>:
 8010a1c:	b538      	push	{r3, r4, r5, lr}
 8010a1e:	4d07      	ldr	r5, [pc, #28]	; (8010a3c <_kill_r+0x20>)
 8010a20:	2300      	movs	r3, #0
 8010a22:	4604      	mov	r4, r0
 8010a24:	4608      	mov	r0, r1
 8010a26:	4611      	mov	r1, r2
 8010a28:	602b      	str	r3, [r5, #0]
 8010a2a:	f7f1 fb37 	bl	800209c <_kill>
 8010a2e:	1c43      	adds	r3, r0, #1
 8010a30:	d102      	bne.n	8010a38 <_kill_r+0x1c>
 8010a32:	682b      	ldr	r3, [r5, #0]
 8010a34:	b103      	cbz	r3, 8010a38 <_kill_r+0x1c>
 8010a36:	6023      	str	r3, [r4, #0]
 8010a38:	bd38      	pop	{r3, r4, r5, pc}
 8010a3a:	bf00      	nop
 8010a3c:	20002168 	.word	0x20002168

08010a40 <_getpid_r>:
 8010a40:	f7f1 bb24 	b.w	800208c <_getpid>

08010a44 <__sread>:
 8010a44:	b510      	push	{r4, lr}
 8010a46:	460c      	mov	r4, r1
 8010a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a4c:	f000 f894 	bl	8010b78 <_read_r>
 8010a50:	2800      	cmp	r0, #0
 8010a52:	bfab      	itete	ge
 8010a54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010a56:	89a3      	ldrhlt	r3, [r4, #12]
 8010a58:	181b      	addge	r3, r3, r0
 8010a5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010a5e:	bfac      	ite	ge
 8010a60:	6563      	strge	r3, [r4, #84]	; 0x54
 8010a62:	81a3      	strhlt	r3, [r4, #12]
 8010a64:	bd10      	pop	{r4, pc}

08010a66 <__swrite>:
 8010a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a6a:	461f      	mov	r7, r3
 8010a6c:	898b      	ldrh	r3, [r1, #12]
 8010a6e:	05db      	lsls	r3, r3, #23
 8010a70:	4605      	mov	r5, r0
 8010a72:	460c      	mov	r4, r1
 8010a74:	4616      	mov	r6, r2
 8010a76:	d505      	bpl.n	8010a84 <__swrite+0x1e>
 8010a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a7c:	2302      	movs	r3, #2
 8010a7e:	2200      	movs	r2, #0
 8010a80:	f000 f868 	bl	8010b54 <_lseek_r>
 8010a84:	89a3      	ldrh	r3, [r4, #12]
 8010a86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010a8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010a8e:	81a3      	strh	r3, [r4, #12]
 8010a90:	4632      	mov	r2, r6
 8010a92:	463b      	mov	r3, r7
 8010a94:	4628      	mov	r0, r5
 8010a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a9a:	f000 b817 	b.w	8010acc <_write_r>

08010a9e <__sseek>:
 8010a9e:	b510      	push	{r4, lr}
 8010aa0:	460c      	mov	r4, r1
 8010aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010aa6:	f000 f855 	bl	8010b54 <_lseek_r>
 8010aaa:	1c43      	adds	r3, r0, #1
 8010aac:	89a3      	ldrh	r3, [r4, #12]
 8010aae:	bf15      	itete	ne
 8010ab0:	6560      	strne	r0, [r4, #84]	; 0x54
 8010ab2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010ab6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010aba:	81a3      	strheq	r3, [r4, #12]
 8010abc:	bf18      	it	ne
 8010abe:	81a3      	strhne	r3, [r4, #12]
 8010ac0:	bd10      	pop	{r4, pc}

08010ac2 <__sclose>:
 8010ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ac6:	f000 b813 	b.w	8010af0 <_close_r>
	...

08010acc <_write_r>:
 8010acc:	b538      	push	{r3, r4, r5, lr}
 8010ace:	4d07      	ldr	r5, [pc, #28]	; (8010aec <_write_r+0x20>)
 8010ad0:	4604      	mov	r4, r0
 8010ad2:	4608      	mov	r0, r1
 8010ad4:	4611      	mov	r1, r2
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	602a      	str	r2, [r5, #0]
 8010ada:	461a      	mov	r2, r3
 8010adc:	f7f1 fb15 	bl	800210a <_write>
 8010ae0:	1c43      	adds	r3, r0, #1
 8010ae2:	d102      	bne.n	8010aea <_write_r+0x1e>
 8010ae4:	682b      	ldr	r3, [r5, #0]
 8010ae6:	b103      	cbz	r3, 8010aea <_write_r+0x1e>
 8010ae8:	6023      	str	r3, [r4, #0]
 8010aea:	bd38      	pop	{r3, r4, r5, pc}
 8010aec:	20002168 	.word	0x20002168

08010af0 <_close_r>:
 8010af0:	b538      	push	{r3, r4, r5, lr}
 8010af2:	4d06      	ldr	r5, [pc, #24]	; (8010b0c <_close_r+0x1c>)
 8010af4:	2300      	movs	r3, #0
 8010af6:	4604      	mov	r4, r0
 8010af8:	4608      	mov	r0, r1
 8010afa:	602b      	str	r3, [r5, #0]
 8010afc:	f7f1 fb21 	bl	8002142 <_close>
 8010b00:	1c43      	adds	r3, r0, #1
 8010b02:	d102      	bne.n	8010b0a <_close_r+0x1a>
 8010b04:	682b      	ldr	r3, [r5, #0]
 8010b06:	b103      	cbz	r3, 8010b0a <_close_r+0x1a>
 8010b08:	6023      	str	r3, [r4, #0]
 8010b0a:	bd38      	pop	{r3, r4, r5, pc}
 8010b0c:	20002168 	.word	0x20002168

08010b10 <_fstat_r>:
 8010b10:	b538      	push	{r3, r4, r5, lr}
 8010b12:	4d07      	ldr	r5, [pc, #28]	; (8010b30 <_fstat_r+0x20>)
 8010b14:	2300      	movs	r3, #0
 8010b16:	4604      	mov	r4, r0
 8010b18:	4608      	mov	r0, r1
 8010b1a:	4611      	mov	r1, r2
 8010b1c:	602b      	str	r3, [r5, #0]
 8010b1e:	f7f1 fb1c 	bl	800215a <_fstat>
 8010b22:	1c43      	adds	r3, r0, #1
 8010b24:	d102      	bne.n	8010b2c <_fstat_r+0x1c>
 8010b26:	682b      	ldr	r3, [r5, #0]
 8010b28:	b103      	cbz	r3, 8010b2c <_fstat_r+0x1c>
 8010b2a:	6023      	str	r3, [r4, #0]
 8010b2c:	bd38      	pop	{r3, r4, r5, pc}
 8010b2e:	bf00      	nop
 8010b30:	20002168 	.word	0x20002168

08010b34 <_isatty_r>:
 8010b34:	b538      	push	{r3, r4, r5, lr}
 8010b36:	4d06      	ldr	r5, [pc, #24]	; (8010b50 <_isatty_r+0x1c>)
 8010b38:	2300      	movs	r3, #0
 8010b3a:	4604      	mov	r4, r0
 8010b3c:	4608      	mov	r0, r1
 8010b3e:	602b      	str	r3, [r5, #0]
 8010b40:	f7f1 fb1b 	bl	800217a <_isatty>
 8010b44:	1c43      	adds	r3, r0, #1
 8010b46:	d102      	bne.n	8010b4e <_isatty_r+0x1a>
 8010b48:	682b      	ldr	r3, [r5, #0]
 8010b4a:	b103      	cbz	r3, 8010b4e <_isatty_r+0x1a>
 8010b4c:	6023      	str	r3, [r4, #0]
 8010b4e:	bd38      	pop	{r3, r4, r5, pc}
 8010b50:	20002168 	.word	0x20002168

08010b54 <_lseek_r>:
 8010b54:	b538      	push	{r3, r4, r5, lr}
 8010b56:	4d07      	ldr	r5, [pc, #28]	; (8010b74 <_lseek_r+0x20>)
 8010b58:	4604      	mov	r4, r0
 8010b5a:	4608      	mov	r0, r1
 8010b5c:	4611      	mov	r1, r2
 8010b5e:	2200      	movs	r2, #0
 8010b60:	602a      	str	r2, [r5, #0]
 8010b62:	461a      	mov	r2, r3
 8010b64:	f7f1 fb14 	bl	8002190 <_lseek>
 8010b68:	1c43      	adds	r3, r0, #1
 8010b6a:	d102      	bne.n	8010b72 <_lseek_r+0x1e>
 8010b6c:	682b      	ldr	r3, [r5, #0]
 8010b6e:	b103      	cbz	r3, 8010b72 <_lseek_r+0x1e>
 8010b70:	6023      	str	r3, [r4, #0]
 8010b72:	bd38      	pop	{r3, r4, r5, pc}
 8010b74:	20002168 	.word	0x20002168

08010b78 <_read_r>:
 8010b78:	b538      	push	{r3, r4, r5, lr}
 8010b7a:	4d07      	ldr	r5, [pc, #28]	; (8010b98 <_read_r+0x20>)
 8010b7c:	4604      	mov	r4, r0
 8010b7e:	4608      	mov	r0, r1
 8010b80:	4611      	mov	r1, r2
 8010b82:	2200      	movs	r2, #0
 8010b84:	602a      	str	r2, [r5, #0]
 8010b86:	461a      	mov	r2, r3
 8010b88:	f7f1 faa2 	bl	80020d0 <_read>
 8010b8c:	1c43      	adds	r3, r0, #1
 8010b8e:	d102      	bne.n	8010b96 <_read_r+0x1e>
 8010b90:	682b      	ldr	r3, [r5, #0]
 8010b92:	b103      	cbz	r3, 8010b96 <_read_r+0x1e>
 8010b94:	6023      	str	r3, [r4, #0]
 8010b96:	bd38      	pop	{r3, r4, r5, pc}
 8010b98:	20002168 	.word	0x20002168

08010b9c <_init>:
 8010b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b9e:	bf00      	nop
 8010ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ba2:	bc08      	pop	{r3}
 8010ba4:	469e      	mov	lr, r3
 8010ba6:	4770      	bx	lr

08010ba8 <_fini>:
 8010ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010baa:	bf00      	nop
 8010bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010bae:	bc08      	pop	{r3}
 8010bb0:	469e      	mov	lr, r3
 8010bb2:	4770      	bx	lr
