
canBus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000103f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  08010580  08010580  00020580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801088c  0801088c  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  0801088c  0801088c  0002088c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010894  08010894  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010894  08010894  00020894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010898  08010898  00020898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0801089c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030094  2**0
                  CONTENTS
 10 .bss          000020d0  20000094  20000094  00030094  2**2
                  ALLOC
 11 ._user_heap_stack 00004004  20002164  20002164  00030094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003324e  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000062df  00000000  00000000  00063312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001be0  00000000  00000000  000695f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000019a0  00000000  00000000  0006b1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000292b4  00000000  00000000  0006cb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027bd6  00000000  00000000  00095e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7d23  00000000  00000000  000bda02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00195725  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007da8  00000000  00000000  00195778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010568 	.word	0x08010568

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	08010568 	.word	0x08010568

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <write_register>:
static void write_register(uint8_t reg, uint8_t *data);
static void read_register(uint8_t reg, uint8_t *data);

// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af02      	add	r7, sp, #8
 800056e:	4603      	mov	r3, r0
 8000570:	6039      	str	r1, [r7, #0]
 8000572:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	733b      	strb	r3, [r7, #12]
	iData[1] = data[0];
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 800057e:	f107 020c 	add.w	r2, r7, #12
 8000582:	2364      	movs	r3, #100	; 0x64
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2302      	movs	r3, #2
 8000588:	2194      	movs	r1, #148	; 0x94
 800058a:	4803      	ldr	r0, [pc, #12]	; (8000598 <write_register+0x30>)
 800058c:	f005 f8b0 	bl	80056f0 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 8000590:	bf00      	nop
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	200000b0 	.word	0x200000b0

0800059c <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af02      	add	r7, sp, #8
 80005a2:	4603      	mov	r3, r0
 80005a4:	6039      	str	r1, [r7, #0]
 80005a6:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 80005ac:	f107 020c 	add.w	r2, r7, #12
 80005b0:	2364      	movs	r3, #100	; 0x64
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2301      	movs	r3, #1
 80005b6:	2194      	movs	r1, #148	; 0x94
 80005b8:	4807      	ldr	r0, [pc, #28]	; (80005d8 <read_register+0x3c>)
 80005ba:	f005 f899 	bl	80056f0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 80005be:	2364      	movs	r3, #100	; 0x64
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2301      	movs	r3, #1
 80005c4:	683a      	ldr	r2, [r7, #0]
 80005c6:	2194      	movs	r1, #148	; 0x94
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <read_register+0x3c>)
 80005ca:	f005 f98f 	bl	80058ec <HAL_I2C_Master_Receive>
}
 80005ce:	bf00      	nop
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200000b0 	.word	0x200000b0

080005dc <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 80005dc:	b084      	sub	sp, #16
 80005de:	b580      	push	{r7, lr}
 80005e0:	b082      	sub	sp, #8
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	f107 0c10 	add.w	ip, r7, #16
 80005e8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t iData[2];
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 80005ec:	4b7b      	ldr	r3, [pc, #492]	; (80007dc <CS43_Init+0x200>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 80005f4:	4b79      	ldr	r3, [pc, #484]	; (80007dc <CS43_Init+0x200>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	69da      	ldr	r2, [r3, #28]
 80005fa:	4b78      	ldr	r3, [pc, #480]	; (80007dc <CS43_Init+0x200>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000602:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000604:	2201      	movs	r2, #1
 8000606:	2110      	movs	r1, #16
 8000608:	4875      	ldr	r0, [pc, #468]	; (80007e0 <CS43_Init+0x204>)
 800060a:	f003 f97f 	bl	800390c <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 800060e:	4b75      	ldr	r3, [pc, #468]	; (80007e4 <CS43_Init+0x208>)
 8000610:	4618      	mov	r0, r3
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	2254      	movs	r2, #84	; 0x54
 8000618:	4619      	mov	r1, r3
 800061a:	f00e ff95 	bl	800f548 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 800061e:	2301      	movs	r3, #1
 8000620:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,iData);
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	4619      	mov	r1, r3
 8000626:	2002      	movs	r0, #2
 8000628:	f7ff ff9e 	bl	8000568 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800062c:	2380      	movs	r3, #128	; 0x80
 800062e:	717b      	strb	r3, [r7, #5]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000630:	797b      	ldrb	r3, [r7, #5]
 8000632:	f043 0320 	orr.w	r3, r3, #32
 8000636:	b2db      	uxtb	r3, r3
 8000638:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 800063a:	797b      	ldrb	r3, [r7, #5]
 800063c:	f043 030c 	orr.w	r3, r3, #12
 8000640:	b2db      	uxtb	r3, r3
 8000642:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000644:	797b      	ldrb	r3, [r7, #5]
 8000646:	f043 0303 	orr.w	r3, r3, #3
 800064a:	b2db      	uxtb	r3, r3
 800064c:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL2,&iData[1]);
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	3301      	adds	r3, #1
 8000652:	4619      	mov	r1, r3
 8000654:	2004      	movs	r0, #4
 8000656:	f7ff ff87 	bl	8000568 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 800065a:	2380      	movs	r3, #128	; 0x80
 800065c:	717b      	strb	r3, [r7, #5]
	write_register(CLOCKING_CONTROL,&iData[1]);
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	3301      	adds	r3, #1
 8000662:	4619      	mov	r1, r3
 8000664:	2005      	movs	r0, #5
 8000666:	f7ff ff7f 	bl	8000568 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	4619      	mov	r1, r3
 800066e:	2006      	movs	r0, #6
 8000670:	f7ff ff94 	bl	800059c <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8000674:	797b      	ldrb	r3, [r7, #5]
 8000676:	f003 0320 	and.w	r3, r3, #32
 800067a:	b2db      	uxtb	r3, r3
 800067c:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 7);  // Slave
 800067e:	797b      	ldrb	r3, [r7, #5]
 8000680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000684:	b2db      	uxtb	r3, r3
 8000686:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 8000688:	797b      	ldrb	r3, [r7, #5]
 800068a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800068e:	b2db      	uxtb	r3, r3
 8000690:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8000692:	797b      	ldrb	r3, [r7, #5]
 8000694:	f023 0310 	bic.w	r3, r3, #16
 8000698:	b2db      	uxtb	r3, r3
 800069a:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 800069c:	797b      	ldrb	r3, [r7, #5]
 800069e:	f023 0304 	bic.w	r3, r3, #4
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	717b      	strb	r3, [r7, #5]
	iData[1] |= (1 << 2);
 80006a6:	797b      	ldrb	r3, [r7, #5]
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	717b      	strb	r3, [r7, #5]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 80006b0:	797b      	ldrb	r3, [r7, #5]
 80006b2:	f043 0303 	orr.w	r3, r3, #3
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	717b      	strb	r3, [r7, #5]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	3301      	adds	r3, #1
 80006be:	4619      	mov	r1, r3
 80006c0:	2006      	movs	r0, #6
 80006c2:	f7ff ff51 	bl	8000568 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	3301      	adds	r3, #1
 80006ca:	4619      	mov	r1, r3
 80006cc:	2008      	movs	r0, #8
 80006ce:	f7ff ff65 	bl	800059c <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 80006d2:	797b      	ldrb	r3, [r7, #5]
 80006d4:	f023 030f 	bic.w	r3, r3, #15
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 80006dc:	797b      	ldrb	r3, [r7, #5]
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_A,&iData[1]);
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	3301      	adds	r3, #1
 80006ea:	4619      	mov	r1, r3
 80006ec:	2008      	movs	r0, #8
 80006ee:	f7ff ff3b 	bl	8000568 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	3301      	adds	r3, #1
 80006f6:	4619      	mov	r1, r3
 80006f8:	2009      	movs	r0, #9
 80006fa:	f7ff ff4f 	bl	800059c <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 80006fe:	797b      	ldrb	r3, [r7, #5]
 8000700:	f023 030f 	bic.w	r3, r3, #15
 8000704:	b2db      	uxtb	r3, r3
 8000706:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000708:	797b      	ldrb	r3, [r7, #5]
 800070a:	f043 0301 	orr.w	r3, r3, #1
 800070e:	b2db      	uxtb	r3, r3
 8000710:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_B,&iData[1]);
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	3301      	adds	r3, #1
 8000716:	4619      	mov	r1, r3
 8000718:	2009      	movs	r0, #9
 800071a:	f7ff ff25 	bl	8000568 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	3301      	adds	r3, #1
 8000722:	4619      	mov	r1, r3
 8000724:	200e      	movs	r0, #14
 8000726:	f7ff ff39 	bl	800059c <read_register>
	if(outputMode == MODE_ANALOG)
 800072a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800072e:	2b03      	cmp	r3, #3
 8000730:	d119      	bne.n	8000766 <CS43_Init+0x18a>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 8000732:	797b      	ldrb	r3, [r7, #5]
 8000734:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000738:	b2db      	uxtb	r3, r3
 800073a:	717b      	strb	r3, [r7, #5]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 800073c:	797b      	ldrb	r3, [r7, #5]
 800073e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000742:	b2db      	uxtb	r3, r3
 8000744:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 8000746:	797b      	ldrb	r3, [r7, #5]
 8000748:	f023 0320 	bic.w	r3, r3, #32
 800074c:	b2db      	uxtb	r3, r3
 800074e:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 8000750:	797b      	ldrb	r3, [r7, #5]
 8000752:	f023 0310 	bic.w	r3, r3, #16
 8000756:	b2db      	uxtb	r3, r3
 8000758:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 800075a:	797b      	ldrb	r3, [r7, #5]
 800075c:	f023 0308 	bic.w	r3, r3, #8
 8000760:	b2db      	uxtb	r3, r3
 8000762:	717b      	strb	r3, [r7, #5]
 8000764:	e005      	b.n	8000772 <CS43_Init+0x196>
	}
	else if(outputMode == MODE_I2S)
 8000766:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800076a:	2b00      	cmp	r3, #0
 800076c:	d101      	bne.n	8000772 <CS43_Init+0x196>
	{
		iData[1] = 0x02;
 800076e:	2302      	movs	r3, #2
 8000770:	717b      	strb	r3, [r7, #5]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	3301      	adds	r3, #1
 8000776:	4619      	mov	r1, r3
 8000778:	200e      	movs	r0, #14
 800077a:	f7ff fef5 	bl	8000568 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	3301      	adds	r3, #1
 8000782:	4619      	mov	r1, r3
 8000784:	200f      	movs	r0, #15
 8000786:	f7ff ff09 	bl	800059c <read_register>
	iData[1] = 0x00;
 800078a:	2300      	movs	r3, #0
 800078c:	717b      	strb	r3, [r7, #5]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	3301      	adds	r3, #1
 8000792:	4619      	mov	r1, r3
 8000794:	200f      	movs	r0, #15
 8000796:	f7ff fee7 	bl	8000568 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	3301      	adds	r3, #1
 80007a2:	4619      	mov	r1, r3
 80007a4:	2014      	movs	r0, #20
 80007a6:	f7ff fedf 	bl	8000568 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	3301      	adds	r3, #1
 80007ae:	4619      	mov	r1, r3
 80007b0:	2015      	movs	r0, #21
 80007b2:	f7ff fed9 	bl	8000568 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	3301      	adds	r3, #1
 80007ba:	4619      	mov	r1, r3
 80007bc:	201a      	movs	r0, #26
 80007be:	f7ff fed3 	bl	8000568 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	3301      	adds	r3, #1
 80007c6:	4619      	mov	r1, r3
 80007c8:	201b      	movs	r0, #27
 80007ca:	f7ff fecd 	bl	8000568 <write_register>
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007d8:	b004      	add	sp, #16
 80007da:	4770      	bx	lr
 80007dc:	2000157c 	.word	0x2000157c
 80007e0:	40020c00 	.word	0x40020c00
 80007e4:	200000b0 	.word	0x200000b0

080007e8 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	switch (side)
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	2b03      	cmp	r3, #3
 80007f6:	d82b      	bhi.n	8000850 <CS43_Enable_RightLeft+0x68>
 80007f8:	a201      	add	r2, pc, #4	; (adr r2, 8000800 <CS43_Enable_RightLeft+0x18>)
 80007fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007fe:	bf00      	nop
 8000800:	08000811 	.word	0x08000811
 8000804:	08000821 	.word	0x08000821
 8000808:	08000831 	.word	0x08000831
 800080c:	08000841 	.word	0x08000841
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000810:	23c0      	movs	r3, #192	; 0xc0
 8000812:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000814:	7b7b      	ldrb	r3, [r7, #13]
 8000816:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800081a:	b2db      	uxtb	r3, r3
 800081c:	737b      	strb	r3, [r7, #13]
			break;
 800081e:	e018      	b.n	8000852 <CS43_Enable_RightLeft+0x6a>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000824:	7b7b      	ldrb	r3, [r7, #13]
 8000826:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800082a:	b2db      	uxtb	r3, r3
 800082c:	737b      	strb	r3, [r7, #13]
			break;
 800082e:	e010      	b.n	8000852 <CS43_Enable_RightLeft+0x6a>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000830:	23c0      	movs	r3, #192	; 0xc0
 8000832:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000834:	7b7b      	ldrb	r3, [r7, #13]
 8000836:	f043 0320 	orr.w	r3, r3, #32
 800083a:	b2db      	uxtb	r3, r3
 800083c:	737b      	strb	r3, [r7, #13]
			break;
 800083e:	e008      	b.n	8000852 <CS43_Enable_RightLeft+0x6a>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000840:	2380      	movs	r3, #128	; 0x80
 8000842:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000844:	7b7b      	ldrb	r3, [r7, #13]
 8000846:	f043 0320 	orr.w	r3, r3, #32
 800084a:	b2db      	uxtb	r3, r3
 800084c:	737b      	strb	r3, [r7, #13]
			break;
 800084e:	e000      	b.n	8000852 <CS43_Enable_RightLeft+0x6a>
		default:
			break;
 8000850:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000852:	7b7b      	ldrb	r3, [r7, #13]
 8000854:	f043 030c 	orr.w	r3, r3, #12
 8000858:	b2db      	uxtb	r3, r3
 800085a:	737b      	strb	r3, [r7, #13]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 800085c:	7b7b      	ldrb	r3, [r7, #13]
 800085e:	f043 0303 	orr.w	r3, r3, #3
 8000862:	b2db      	uxtb	r3, r3
 8000864:	737b      	strb	r3, [r7, #13]
	write_register(POWER_CONTROL2,&iData[1]);
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	3301      	adds	r3, #1
 800086c:	4619      	mov	r1, r3
 800086e:	2004      	movs	r0, #4
 8000870:	f7ff fe7a 	bl	8000568 <write_register>
}
 8000874:	bf00      	nop
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  /* Set the Master volume */
  iData[1] = VOLUME_MASTER(volume);
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	3319      	adds	r3, #25
 800088a:	b2db      	uxtb	r3, r3
 800088c:	737b      	strb	r3, [r7, #13]
  write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 800088e:	f107 030c 	add.w	r3, r7, #12
 8000892:	3301      	adds	r3, #1
 8000894:	4619      	mov	r1, r3
 8000896:	2020      	movs	r0, #32
 8000898:	f7ff fe66 	bl	8000568 <write_register>
  write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	3301      	adds	r3, #1
 80008a2:	4619      	mov	r1, r3
 80008a4:	2021      	movs	r0, #33	; 0x21
 80008a6:	f7ff fe5f 	bl	8000568 <write_register>
}
 80008aa:	bf00      	nop
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <CS43_SetMute>:

void CS43_SetMute(bool mute)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b084      	sub	sp, #16
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	4603      	mov	r3, r0
 80008ba:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  if(mute)
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d019      	beq.n	80008f6 <CS43_SetMute+0x44>
  {
    iData[1] = 0xFF;
 80008c2:	23ff      	movs	r3, #255	; 0xff
 80008c4:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 80008c6:	f107 030c 	add.w	r3, r7, #12
 80008ca:	3301      	adds	r3, #1
 80008cc:	4619      	mov	r1, r3
 80008ce:	2004      	movs	r0, #4
 80008d0:	f7ff fe4a 	bl	8000568 <write_register>
    iData[1] = 0x01;
 80008d4:	2301      	movs	r3, #1
 80008d6:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	3301      	adds	r3, #1
 80008de:	4619      	mov	r1, r3
 80008e0:	2022      	movs	r0, #34	; 0x22
 80008e2:	f7ff fe41 	bl	8000568 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	3301      	adds	r3, #1
 80008ec:	4619      	mov	r1, r3
 80008ee:	2023      	movs	r0, #35	; 0x23
 80008f0:	f7ff fe3a 	bl	8000568 <write_register>
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
    iData[1] = 0xAF;
    write_register(POWER_CONTROL2,&iData[1]);
  }
}
 80008f4:	e018      	b.n	8000928 <CS43_SetMute+0x76>
    iData[1] = 0x00;
 80008f6:	2300      	movs	r3, #0
 80008f8:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	3301      	adds	r3, #1
 8000900:	4619      	mov	r1, r3
 8000902:	2022      	movs	r0, #34	; 0x22
 8000904:	f7ff fe30 	bl	8000568 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	3301      	adds	r3, #1
 800090e:	4619      	mov	r1, r3
 8000910:	2023      	movs	r0, #35	; 0x23
 8000912:	f7ff fe29 	bl	8000568 <write_register>
    iData[1] = 0xAF;
 8000916:	23af      	movs	r3, #175	; 0xaf
 8000918:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	3301      	adds	r3, #1
 8000920:	4619      	mov	r1, r3
 8000922:	2004      	movs	r0, #4
 8000924:	f7ff fe20 	bl	8000568 <write_register>
}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(0);
 8000936:	2000      	movs	r0, #0
 8000938:	f7ff ffbb 	bl	80008b2 <CS43_SetMute>
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 800093c:	2399      	movs	r3, #153	; 0x99
 800093e:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	3301      	adds	r3, #1
 8000944:	4619      	mov	r1, r3
 8000946:	2000      	movs	r0, #0
 8000948:	f7ff fe0e 	bl	8000568 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_47,&iData[1]);
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	3301      	adds	r3, #1
 8000954:	4619      	mov	r1, r3
 8000956:	2047      	movs	r0, #71	; 0x47
 8000958:	f7ff fe06 	bl	8000568 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	3301      	adds	r3, #1
 8000960:	4619      	mov	r1, r3
 8000962:	2032      	movs	r0, #50	; 0x32
 8000964:	f7ff fe1a 	bl	800059c <read_register>
	iData[1] |= 0x80;
 8000968:	797b      	ldrb	r3, [r7, #5]
 800096a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800096e:	b2db      	uxtb	r3, r3
 8000970:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	3301      	adds	r3, #1
 8000976:	4619      	mov	r1, r3
 8000978:	2032      	movs	r0, #50	; 0x32
 800097a:	f7ff fdf5 	bl	8000568 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	3301      	adds	r3, #1
 8000982:	4619      	mov	r1, r3
 8000984:	2032      	movs	r0, #50	; 0x32
 8000986:	f7ff fe09 	bl	800059c <read_register>
	iData[1] &= ~(0x80);
 800098a:	797b      	ldrb	r3, [r7, #5]
 800098c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000990:	b2db      	uxtb	r3, r3
 8000992:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	3301      	adds	r3, #1
 8000998:	4619      	mov	r1, r3
 800099a:	2032      	movs	r0, #50	; 0x32
 800099c:	f7ff fde4 	bl	8000568 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 80009a0:	2300      	movs	r3, #0
 80009a2:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	3301      	adds	r3, #1
 80009a8:	4619      	mov	r1, r3
 80009aa:	2000      	movs	r0, #0
 80009ac:	f7ff fddc 	bl	8000568 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 80009b0:	239e      	movs	r3, #158	; 0x9e
 80009b2:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	3301      	adds	r3, #1
 80009b8:	4619      	mov	r1, r3
 80009ba:	2002      	movs	r0, #2
 80009bc:	f7ff fdd4 	bl	8000568 <write_register>
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <CS43_Stop>:

void CS43_Stop(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(1);
 80009ce:	2001      	movs	r0, #1
 80009d0:	f7ff ff6f 	bl	80008b2 <CS43_SetMute>
  iData[1] = 0x04;
 80009d4:	2304      	movs	r3, #4
 80009d6:	717b      	strb	r3, [r7, #5]
  write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	3301      	adds	r3, #1
 80009dc:	4619      	mov	r1, r3
 80009de:	200e      	movs	r0, #14
 80009e0:	f7ff fdc2 	bl	8000568 <write_register>
	iData[1] = 0x9F;
 80009e4:	239f      	movs	r3, #159	; 0x9f
 80009e6:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	3301      	adds	r3, #1
 80009ec:	4619      	mov	r1, r3
 80009ee:	2002      	movs	r0, #2
 80009f0:	f7ff fdba 	bl	8000568 <write_register>
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <audioI2S_pllClockConfig>:

/**
 * @brief I2S Clock Config
 */
static void audioI2S_pllClockConfig(uint32_t audioFreq)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 8000a04:	2300      	movs	r3, #0
 8000a06:	77fb      	strb	r3, [r7, #31]
 8000a08:	23ff      	movs	r3, #255	; 0xff
 8000a0a:	77bb      	strb	r3, [r7, #30]

  for(index = 0; index < 8; index++)
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	77fb      	strb	r3, [r7, #31]
 8000a10:	e00b      	b.n	8000a2a <audioI2S_pllClockConfig+0x2e>
  {
    if(I2SFreq[index] == audioFreq)
 8000a12:	7ffb      	ldrb	r3, [r7, #31]
 8000a14:	4a1c      	ldr	r2, [pc, #112]	; (8000a88 <audioI2S_pllClockConfig+0x8c>)
 8000a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d101      	bne.n	8000a24 <audioI2S_pllClockConfig+0x28>
    {
      freqindex = index;
 8000a20:	7ffb      	ldrb	r3, [r7, #31]
 8000a22:	77bb      	strb	r3, [r7, #30]
  for(index = 0; index < 8; index++)
 8000a24:	7ffb      	ldrb	r3, [r7, #31]
 8000a26:	3301      	adds	r3, #1
 8000a28:	77fb      	strb	r3, [r7, #31]
 8000a2a:	7ffb      	ldrb	r3, [r7, #31]
 8000a2c:	2b07      	cmp	r3, #7
 8000a2e:	d9f0      	bls.n	8000a12 <audioI2S_pllClockConfig+0x16>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	4618      	mov	r0, r3
 8000a36:	f007 f9db 	bl	8007df0 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8000a3a:	7fbb      	ldrb	r3, [r7, #30]
 8000a3c:	f003 0307 	and.w	r3, r3, #7
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d111      	bne.n	8000a68 <audioI2S_pllClockConfig+0x6c>
  {
    /* I2S clock config
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) × (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a44:	2301      	movs	r3, #1
 8000a46:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8000a48:	7fbb      	ldrb	r3, [r7, #30]
 8000a4a:	4a10      	ldr	r2, [pc, #64]	; (8000a8c <audioI2S_pllClockConfig+0x90>)
 8000a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a50:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8000a52:	7fbb      	ldrb	r3, [r7, #30]
 8000a54:	4a0e      	ldr	r2, [pc, #56]	; (8000a90 <audioI2S_pllClockConfig+0x94>)
 8000a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a5a:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	4618      	mov	r0, r3
 8000a62:	f007 f8e3 	bl	8007c2c <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 8000a66:	e00b      	b.n	8000a80 <audioI2S_pllClockConfig+0x84>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8000a6c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000a70:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8000a72:	2303      	movs	r3, #3
 8000a74:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f007 f8d6 	bl	8007c2c <HAL_RCCEx_PeriphCLKConfig>
}
 8000a80:	bf00      	nop
 8000a82:	3720      	adds	r7, #32
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	0801062c 	.word	0x0801062c
 8000a8c:	0801064c 	.word	0x0801064c
 8000a90:	0801066c 	.word	0x0801066c

08000a94 <I2S3_freqUpdate>:

/**
 * @brief update I2S peripheral with selected Sampling Frequency
 */
static bool I2S3_freqUpdate(uint32_t AudioFreq)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioI2S->Instance         = SPI3;
 8000a9c:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <I2S3_freqUpdate+0x80>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a1d      	ldr	r2, [pc, #116]	; (8000b18 <I2S3_freqUpdate+0x84>)
 8000aa2:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(hAudioI2S);
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <I2S3_freqUpdate+0x80>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	69da      	ldr	r2, [r3, #28]
 8000aac:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <I2S3_freqUpdate+0x80>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ab6:	61da      	str	r2, [r3, #28]

  /* I2S3 peripheral configuration */
  hAudioI2S->Init.AudioFreq   = AudioFreq;
 8000ab8:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <I2S3_freqUpdate+0x80>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	615a      	str	r2, [r3, #20]
  hAudioI2S->Init.ClockSource = I2S_CLOCK_PLL;
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <I2S3_freqUpdate+0x80>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	61da      	str	r2, [r3, #28]
  hAudioI2S->Init.CPOL        = I2S_CPOL_LOW;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <I2S3_freqUpdate+0x80>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  hAudioI2S->Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000ad0:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <I2S3_freqUpdate+0x80>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
  hAudioI2S->Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <I2S3_freqUpdate+0x80>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ae0:	611a      	str	r2, [r3, #16]
  hAudioI2S->Init.Mode        = I2S_MODE_MASTER_TX;
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <I2S3_freqUpdate+0x80>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aea:	605a      	str	r2, [r3, #4]
  hAudioI2S->Init.Standard    = I2S_STANDARD_PHILIPS;
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <I2S3_freqUpdate+0x80>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(hAudioI2S) != HAL_OK)
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <I2S3_freqUpdate+0x80>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f005 fc4b 	bl	8006394 <HAL_I2S_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <I2S3_freqUpdate+0x74>
  {
    return false;
 8000b04:	2300      	movs	r3, #0
 8000b06:	e000      	b.n	8000b0a <I2S3_freqUpdate+0x76>
  }
  else
  {
    return true;
 8000b08:	2301      	movs	r3, #1
  }
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000104 	.word	0x20000104
 8000b18:	40003c00 	.word	0x40003c00

08000b1c <audioI2S_setHandle>:

/**
 * @brief set I2S HAL handle
 */
void audioI2S_setHandle(I2S_HandleTypeDef *pI2Shandle)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  hAudioI2S = pI2Shandle;
 8000b24:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <audioI2S_setHandle+0x1c>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6013      	str	r3, [r2, #0]
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000104 	.word	0x20000104

08000b3c <audioI2S_init>:
 * @param audioFreq - WAV file Audio sampling rate (44.1KHz, 48KHz, ...)
 * @param volume - CS43L22 Codec volume settings (0 - 100)
 * @retval state - true: Successfully, false: Failed
 */
bool audioI2S_init(uint32_t audioFreq)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  //Update PLL Clock Frequency setting
  audioI2S_pllClockConfig(audioFreq);
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff ff59 	bl	80009fc <audioI2S_pllClockConfig>
  //Update I2S peripheral sampling frequency
  I2S3_freqUpdate(audioFreq);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff ffa2 	bl	8000a94 <I2S3_freqUpdate>
  return true;
 8000b50:	2301      	movs	r3, #1
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <audioI2S_play>:

/**
 * @brief Starts Playing Audio from buffer
 */
bool audioI2S_play(uint16_t* pDataBuf, uint32_t len)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
  //Start Codec
  CS43_Start();
 8000b66:	f7ff fee3 	bl	8000930 <CS43_Start>
  //Start I2S DMA transfer
  HAL_I2S_Transmit_DMA(hAudioI2S, pDataBuf, DMA_MAX(len/AUDIODATA_SIZE));
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <audioI2S_play+0x38>)
 8000b6c:	6818      	ldr	r0, [r3, #0]
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000b74:	d203      	bcs.n	8000b7e <audioI2S_play+0x22>
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	085b      	lsrs	r3, r3, #1
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	e001      	b.n	8000b82 <audioI2S_play+0x26>
 8000b7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b82:	461a      	mov	r2, r3
 8000b84:	6879      	ldr	r1, [r7, #4]
 8000b86:	f005 fd45 	bl	8006614 <HAL_I2S_Transmit_DMA>
  return true;
 8000b8a:	2301      	movs	r3, #1
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000104 	.word	0x20000104

08000b98 <audioI2S_stop>:

/**
 * @brief Stop audio
 */
void audioI2S_stop(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000b9c:	f7ff ff14 	bl	80009c8 <CS43_Stop>
  HAL_I2S_DMAStop(hAudioI2S);
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <audioI2S_stop+0x18>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f005 fddd 	bl	8006764 <HAL_I2S_DMAStop>
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000104 	.word	0x20000104

08000bb4 <HAL_I2S_TxCpltCallback>:
{

}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <HAL_I2S_TxCpltCallback+0x20>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d101      	bne.n	8000bca <HAL_I2S_TxCpltCallback+0x16>
  {
    audioI2S_fullTransfer_Callback();
 8000bc6:	f001 f923 	bl	8001e10 <audioI2S_fullTransfer_Callback>
  }
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40003c00 	.word	0x40003c00

08000bd8 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d101      	bne.n	8000bee <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    audioI2S_halfTransfer_Callback();
 8000bea:	f001 f905 	bl	8001df8 <audioI2S_halfTransfer_Callback>
  }
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40003c00 	.word	0x40003c00

08000bfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bfc:	b590      	push	{r4, r7, lr}
 8000bfe:	b095      	sub	sp, #84	; 0x54
 8000c00:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c02:	f001 f93b 	bl	8001e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c06:	f000 f99d 	bl	8000f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c0a:	f000 fb53 	bl	80012b4 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000c0e:	f000 fa03 	bl	8001018 <MX_CAN1_Init>
  MX_DMA_Init();
 8000c12:	f000 fb2f 	bl	8001274 <MX_DMA_Init>
  MX_I2C1_Init();
 8000c16:	f000 fa35 	bl	8001084 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000c1a:	f000 fa61 	bl	80010e0 <MX_I2S3_Init>
  MX_FATFS_Init();
 8000c1e:	f008 fdab 	bl	8009778 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000c22:	f00e f945 	bl	800eeb0 <MX_USB_HOST_Init>
  MX_TIM4_Init();
 8000c26:	f000 fad7 	bl	80011d8 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000c2a:	f000 fa87 	bl	800113c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  FilterConfig.FilterBank = 0;  //MASTER
 8000c2e:	4bab      	ldr	r3, [pc, #684]	; (8000edc <main+0x2e0>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	615a      	str	r2, [r3, #20]
  FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000c34:	4ba9      	ldr	r3, [pc, #676]	; (8000edc <main+0x2e0>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	619a      	str	r2, [r3, #24]
  FilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000c3a:	4ba8      	ldr	r3, [pc, #672]	; (8000edc <main+0x2e0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  FilterConfig.FilterIdHigh = 0x245<<5;
 8000c40:	4ba6      	ldr	r3, [pc, #664]	; (8000edc <main+0x2e0>)
 8000c42:	f644 02a0 	movw	r2, #18592	; 0x48a0
 8000c46:	601a      	str	r2, [r3, #0]
  FilterConfig.FilterIdLow = 0;
 8000c48:	4ba4      	ldr	r3, [pc, #656]	; (8000edc <main+0x2e0>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	605a      	str	r2, [r3, #4]
  FilterConfig.FilterMaskIdHigh = 0;
 8000c4e:	4ba3      	ldr	r3, [pc, #652]	; (8000edc <main+0x2e0>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  FilterConfig.FilterMaskIdLow = 0;
 8000c54:	4ba1      	ldr	r3, [pc, #644]	; (8000edc <main+0x2e0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  FilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8000c5a:	4ba0      	ldr	r3, [pc, #640]	; (8000edc <main+0x2e0>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	61da      	str	r2, [r3, #28]
  FilterConfig.FilterActivation= ENABLE;
 8000c60:	4b9e      	ldr	r3, [pc, #632]	; (8000edc <main+0x2e0>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	621a      	str	r2, [r3, #32]
  FilterConfig.SlaveStartFilterBank = 14;
 8000c66:	4b9d      	ldr	r3, [pc, #628]	; (8000edc <main+0x2e0>)
 8000c68:	220e      	movs	r2, #14
 8000c6a:	625a      	str	r2, [r3, #36]	; 0x24


  TxHeader.DLC = 8;            								// grote van bericht 1 - 8 in bytes
 8000c6c:	4b9c      	ldr	r3, [pc, #624]	; (8000ee0 <main+0x2e4>)
 8000c6e:	2208      	movs	r2, #8
 8000c70:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;   								// standaard berichten versturen geen debug mode
 8000c72:	4b9b      	ldr	r3, [pc, #620]	; (8000ee0 <main+0x2e4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000c78:	4b99      	ldr	r3, [pc, #612]	; (8000ee0 <main+0x2e4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x243;        							// identificatie nummer van de CAN deelnemer
 8000c7e:	4b98      	ldr	r3, [pc, #608]	; (8000ee0 <main+0x2e4>)
 8000c80:	f240 2243 	movw	r2, #579	; 0x243
 8000c84:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000c86:	4b96      	ldr	r3, [pc, #600]	; (8000ee0 <main+0x2e4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	751a      	strb	r2, [r3, #20]

  HAL_CAN_ConfigFilter(&hcan1,&FilterConfig);
 8000c8c:	4993      	ldr	r1, [pc, #588]	; (8000edc <main+0x2e0>)
 8000c8e:	4895      	ldr	r0, [pc, #596]	; (8000ee4 <main+0x2e8>)
 8000c90:	f001 fa56 	bl	8002140 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 8000c94:	4893      	ldr	r0, [pc, #588]	; (8000ee4 <main+0x2e8>)
 8000c96:	f001 fb33 	bl	8002300 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING);
 8000c9a:	2102      	movs	r1, #2
 8000c9c:	4891      	ldr	r0, [pc, #580]	; (8000ee4 <main+0x2e8>)
 8000c9e:	f001 fd60 	bl	8002762 <HAL_CAN_ActivateNotification>

  CS43_Init(hi2c1, MODE_I2S);
 8000ca2:	4c91      	ldr	r4, [pc, #580]	; (8000ee8 <main+0x2ec>)
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	9311      	str	r3, [sp, #68]	; 0x44
 8000ca8:	4668      	mov	r0, sp
 8000caa:	f104 0310 	add.w	r3, r4, #16
 8000cae:	2244      	movs	r2, #68	; 0x44
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f00e fc49 	bl	800f548 <memcpy>
 8000cb6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000cba:	f7ff fc8f 	bl	80005dc <CS43_Init>
  CS43_SetVolume(180);										//volume 0-255
 8000cbe:	20b4      	movs	r0, #180	; 0xb4
 8000cc0:	f7ff fddc 	bl	800087c <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	f7ff fd8f 	bl	80007e8 <CS43_Enable_RightLeft>
  audioI2S_setHandle(&hi2s3);
 8000cca:	4888      	ldr	r0, [pc, #544]	; (8000eec <main+0x2f0>)
 8000ccc:	f7ff ff26 	bl	8000b1c <audioI2S_setHandle>
  bool isSdCardMounted=0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	71fb      	strb	r3, [r7, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000cd4:	f00e f912 	bl	800eefc <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    if(start == 1)
 8000cd8:	4b85      	ldr	r3, [pc, #532]	; (8000ef0 <main+0x2f4>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d1f9      	bne.n	8000cd4 <main+0xd8>
    {
    	if(Appli_state == APPLICATION_START)
 8000ce0:	4b84      	ldr	r3, [pc, #528]	; (8000ef4 <main+0x2f8>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d00a      	beq.n	8000cfe <main+0x102>
    	        {
    	          //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);					// groene led aan (applicatie gestart)
    	        }
    	        else if(Appli_state == APPLICATION_DISCONNECT)
 8000ce8:	4b82      	ldr	r3, [pc, #520]	; (8000ef4 <main+0x2f8>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b03      	cmp	r3, #3
 8000cee:	d106      	bne.n	8000cfe <main+0x102>
    	        {
    	          f_mount(NULL, (TCHAR const*)"", 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	4981      	ldr	r1, [pc, #516]	; (8000ef8 <main+0x2fc>)
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f00d fa8b 	bl	800e210 <f_mount>
    	          isSdCardMounted = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	71fb      	strb	r3, [r7, #7]
    	        }
    	    if(Appli_state == APPLICATION_READY)
 8000cfe:	4b7d      	ldr	r3, [pc, #500]	; (8000ef4 <main+0x2f8>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	f040 80aa 	bne.w	8000e5c <main+0x260>
    	        {
    	          if(!isSdCardMounted)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	f083 0301 	eor.w	r3, r3, #1
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d006      	beq.n	8000d22 <main+0x126>
    	          {
    	            f_mount(&USBHFatFS, (const TCHAR*)USBHPath, 0);						//mount SD-card
 8000d14:	2200      	movs	r2, #0
 8000d16:	4979      	ldr	r1, [pc, #484]	; (8000efc <main+0x300>)
 8000d18:	4879      	ldr	r0, [pc, #484]	; (8000f00 <main+0x304>)
 8000d1a:	f00d fa79 	bl	800e210 <f_mount>
    	            isSdCardMounted = 1;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	71fb      	strb	r3, [r7, #7]
    	          }

    	          // Speel START geluid
    	          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);					// groene led aan (applicatie gestart)
 8000d22:	2201      	movs	r2, #1
 8000d24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d28:	4876      	ldr	r0, [pc, #472]	; (8000f04 <main+0x308>)
 8000d2a:	f002 fdef 	bl	800390c <HAL_GPIO_WritePin>
    	          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d34:	4873      	ldr	r0, [pc, #460]	; (8000f04 <main+0x308>)
 8000d36:	f002 fde9 	bl	800390c <HAL_GPIO_WritePin>
    	          HAL_Delay(100);
 8000d3a:	2064      	movs	r0, #100	; 0x64
 8000d3c:	f001 f8e0 	bl	8001f00 <HAL_Delay>

    	          wavPlayer_fileSelect(WAV_FILE10);
 8000d40:	4871      	ldr	r0, [pc, #452]	; (8000f08 <main+0x30c>)
 8000d42:	f000 ff73 	bl	8001c2c <wavPlayer_fileSelect>
    	          HAL_Delay(100);
 8000d46:	2064      	movs	r0, #100	; 0x64
 8000d48:	f001 f8da 	bl	8001f00 <HAL_Delay>
    	          wavPlayer_play();
 8000d4c:	f000 ff98 	bl	8001c80 <wavPlayer_play>
    	          while(!wavPlayer_isFinished())
 8000d50:	e001      	b.n	8000d56 <main+0x15a>
    	          {
    	        	  wavPlayer_process();
 8000d52:	f000 ffc7 	bl	8001ce4 <wavPlayer_process>
    	          while(!wavPlayer_isFinished())
 8000d56:	f001 f843 	bl	8001de0 <wavPlayer_isFinished>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	f083 0301 	eor.w	r3, r3, #1
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d1f5      	bne.n	8000d52 <main+0x156>
    	          }
    	          wavPlayer_stop();
 8000d66:	f001 f82f 	bl	8001dc8 <wavPlayer_stop>
    	          HAL_Delay((rand() % 50)*100);					// RANDOM wachttijd
 8000d6a:	f00e fcad 	bl	800f6c8 <rand>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	4b66      	ldr	r3, [pc, #408]	; (8000f0c <main+0x310>)
 8000d72:	fb83 1302 	smull	r1, r3, r3, r2
 8000d76:	1119      	asrs	r1, r3, #4
 8000d78:	17d3      	asrs	r3, r2, #31
 8000d7a:	1acb      	subs	r3, r1, r3
 8000d7c:	2132      	movs	r1, #50	; 0x32
 8000d7e:	fb01 f303 	mul.w	r3, r1, r3
 8000d82:	1ad3      	subs	r3, r2, r3
 8000d84:	2264      	movs	r2, #100	; 0x64
 8000d86:	fb02 f303 	mul.w	r3, r2, r3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f001 f8b8 	bl	8001f00 <HAL_Delay>
    	          tellerFijn = 0;                          		//teller fijn 0 - 1000 telt tijdens proces afspelen audiodata, teller start bij afspelen
 8000d90:	4b5f      	ldr	r3, [pc, #380]	; (8000f10 <main+0x314>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
    	          tellerGrof = 0;								//teller grof x * 1000
 8000d96:	4b5f      	ldr	r3, [pc, #380]	; (8000f14 <main+0x318>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
    	          reactieSnelheid = 0;							//Reactiesnelheid, tellerstand na start afspelen
 8000d9c:	4b5e      	ldr	r3, [pc, #376]	; (8000f18 <main+0x31c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]

    	          // Speel audiofile 1, 2, 3, 4 of 5 op verzoek van andere print (RxData bericht van ander bordje)
    	          if(RxData[1]==1)
 8000da2:	4b5e      	ldr	r3, [pc, #376]	; (8000f1c <main+0x320>)
 8000da4:	785b      	ldrb	r3, [r3, #1]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d102      	bne.n	8000db0 <main+0x1b4>
    	           	   {
    	        	  	  wavPlayer_fileSelect(WAV_FILE1);
 8000daa:	485d      	ldr	r0, [pc, #372]	; (8000f20 <main+0x324>)
 8000dac:	f000 ff3e 	bl	8001c2c <wavPlayer_fileSelect>
    	           	   }
    	          if(RxData[1]==2)
 8000db0:	4b5a      	ldr	r3, [pc, #360]	; (8000f1c <main+0x320>)
 8000db2:	785b      	ldrb	r3, [r3, #1]
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d102      	bne.n	8000dbe <main+0x1c2>
    	           	   {
    	        	  	  wavPlayer_fileSelect(WAV_FILE2);
 8000db8:	485a      	ldr	r0, [pc, #360]	; (8000f24 <main+0x328>)
 8000dba:	f000 ff37 	bl	8001c2c <wavPlayer_fileSelect>
    	           	   }
    	          if(RxData[1]==3)
 8000dbe:	4b57      	ldr	r3, [pc, #348]	; (8000f1c <main+0x320>)
 8000dc0:	785b      	ldrb	r3, [r3, #1]
 8000dc2:	2b03      	cmp	r3, #3
 8000dc4:	d102      	bne.n	8000dcc <main+0x1d0>
    	           	   {
    	              	   wavPlayer_fileSelect(WAV_FILE3);
 8000dc6:	4858      	ldr	r0, [pc, #352]	; (8000f28 <main+0x32c>)
 8000dc8:	f000 ff30 	bl	8001c2c <wavPlayer_fileSelect>
    	           	   }
    	          if(RxData[1]==4)
 8000dcc:	4b53      	ldr	r3, [pc, #332]	; (8000f1c <main+0x320>)
 8000dce:	785b      	ldrb	r3, [r3, #1]
 8000dd0:	2b04      	cmp	r3, #4
 8000dd2:	d102      	bne.n	8000dda <main+0x1de>
    	              {
    	              	  wavPlayer_fileSelect(WAV_FILE4);
 8000dd4:	4855      	ldr	r0, [pc, #340]	; (8000f2c <main+0x330>)
 8000dd6:	f000 ff29 	bl	8001c2c <wavPlayer_fileSelect>
    	              }
    	          if(RxData[1]==5)
 8000dda:	4b50      	ldr	r3, [pc, #320]	; (8000f1c <main+0x320>)
 8000ddc:	785b      	ldrb	r3, [r3, #1]
 8000dde:	2b05      	cmp	r3, #5
 8000de0:	d102      	bne.n	8000de8 <main+0x1ec>
    	              {
    	              	  wavPlayer_fileSelect(WAV_FILE5);
 8000de2:	4853      	ldr	r0, [pc, #332]	; (8000f30 <main+0x334>)
 8000de4:	f000 ff22 	bl	8001c2c <wavPlayer_fileSelect>
    	              }
    	          if(RxData[1]==0)
 8000de8:	4b4c      	ldr	r3, [pc, #304]	; (8000f1c <main+0x320>)
 8000dea:	785b      	ldrb	r3, [r3, #1]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d102      	bne.n	8000df6 <main+0x1fa>
    	              {
    	              	  wavPlayer_fileSelect(WAV_FILE5);
 8000df0:	484f      	ldr	r0, [pc, #316]	; (8000f30 <main+0x334>)
 8000df2:	f000 ff1b 	bl	8001c2c <wavPlayer_fileSelect>
    	              }
    	          wavPlayer_play();
 8000df6:	f000 ff43 	bl	8001c80 <wavPlayer_play>
    	          while(!wavPlayer_isFinished())						//afspelen audiofile in loop + start teller
 8000dfa:	e025      	b.n	8000e48 <main+0x24c>
    	            {

    	              if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15))			//drukknop geactiveerd => reactieTijd vastleggen
 8000dfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e00:	484c      	ldr	r0, [pc, #304]	; (8000f34 <main+0x338>)
 8000e02:	f002 fd6b 	bl	80038dc <HAL_GPIO_ReadPin>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d009      	beq.n	8000e20 <main+0x224>
    	              {
    	            	  reactieSnelheid=tellerGrof;
 8000e0c:	4b41      	ldr	r3, [pc, #260]	; (8000f14 <main+0x318>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a41      	ldr	r2, [pc, #260]	; (8000f18 <main+0x31c>)
 8000e12:	6013      	str	r3, [r2, #0]
    	            	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e1a:	483a      	ldr	r0, [pc, #232]	; (8000f04 <main+0x308>)
 8000e1c:	f002 fd76 	bl	800390c <HAL_GPIO_WritePin>
    	              }
    	              tellerFijn++;
 8000e20:	4b3b      	ldr	r3, [pc, #236]	; (8000f10 <main+0x314>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	3301      	adds	r3, #1
 8000e26:	4a3a      	ldr	r2, [pc, #232]	; (8000f10 <main+0x314>)
 8000e28:	6013      	str	r3, [r2, #0]
    	              if(tellerFijn>1000){
 8000e2a:	4b39      	ldr	r3, [pc, #228]	; (8000f10 <main+0x314>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e32:	d907      	bls.n	8000e44 <main+0x248>
    	            	  tellerGrof++;
 8000e34:	4b37      	ldr	r3, [pc, #220]	; (8000f14 <main+0x318>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	4a36      	ldr	r2, [pc, #216]	; (8000f14 <main+0x318>)
 8000e3c:	6013      	str	r3, [r2, #0]
    	            	  tellerFijn=0;
 8000e3e:	4b34      	ldr	r3, [pc, #208]	; (8000f10 <main+0x314>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
    	              }
    	              wavPlayer_process();								// speel audio data
 8000e44:	f000 ff4e 	bl	8001ce4 <wavPlayer_process>
    	          while(!wavPlayer_isFinished())						//afspelen audiofile in loop + start teller
 8000e48:	f000 ffca 	bl	8001de0 <wavPlayer_isFinished>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	f083 0301 	eor.w	r3, r3, #1
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d1d1      	bne.n	8000dfc <main+0x200>
    	            }
    	          wavPlayer_stop();
 8000e58:	f000 ffb6 	bl	8001dc8 <wavPlayer_stop>
    	          }
    	        	if(reactieSnelheid<score){							//speel muziekje "goed" als de score verbeterd is
 8000e5c:	4b2e      	ldr	r3, [pc, #184]	; (8000f18 <main+0x31c>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b35      	ldr	r3, [pc, #212]	; (8000f38 <main+0x33c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d216      	bcs.n	8000e96 <main+0x29a>
    	        		wavPlayer_fileSelect(WAV_FILE11);
 8000e68:	4834      	ldr	r0, [pc, #208]	; (8000f3c <main+0x340>)
 8000e6a:	f000 fedf 	bl	8001c2c <wavPlayer_fileSelect>
    	        		wavPlayer_play();
 8000e6e:	f000 ff07 	bl	8001c80 <wavPlayer_play>
    	        		while(!wavPlayer_isFinished()){wavPlayer_process();}
 8000e72:	e001      	b.n	8000e78 <main+0x27c>
 8000e74:	f000 ff36 	bl	8001ce4 <wavPlayer_process>
 8000e78:	f000 ffb2 	bl	8001de0 <wavPlayer_isFinished>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	f083 0301 	eor.w	r3, r3, #1
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d1f5      	bne.n	8000e74 <main+0x278>
    	        		wavPlayer_stop();
 8000e88:	f000 ff9e 	bl	8001dc8 <wavPlayer_stop>
    	        		score = reactieSnelheid;
 8000e8c:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <main+0x31c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a29      	ldr	r2, [pc, #164]	; (8000f38 <main+0x33c>)
 8000e92:	6013      	str	r3, [r2, #0]
 8000e94:	e011      	b.n	8000eba <main+0x2be>
    	        	}else{												//speel muziekje "fout" als de score niet verbeterd is
    	        		wavPlayer_fileSelect(WAV_FILE12);
 8000e96:	482a      	ldr	r0, [pc, #168]	; (8000f40 <main+0x344>)
 8000e98:	f000 fec8 	bl	8001c2c <wavPlayer_fileSelect>
    	        		wavPlayer_play();
 8000e9c:	f000 fef0 	bl	8001c80 <wavPlayer_play>
    	        		while(!wavPlayer_isFinished()){wavPlayer_process();}
 8000ea0:	e001      	b.n	8000ea6 <main+0x2aa>
 8000ea2:	f000 ff1f 	bl	8001ce4 <wavPlayer_process>
 8000ea6:	f000 ff9b 	bl	8001de0 <wavPlayer_isFinished>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	f083 0301 	eor.w	r3, r3, #1
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1f5      	bne.n	8000ea2 <main+0x2a6>
    	        		wavPlayer_stop();
 8000eb6:	f000 ff87 	bl	8001dc8 <wavPlayer_stop>
    	        	}
    	        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);		//zet groene led uit
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ec0:	4810      	ldr	r0, [pc, #64]	; (8000f04 <main+0x308>)
 8000ec2:	f002 fd23 	bl	800390c <HAL_GPIO_WritePin>
    	        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ecc:	480d      	ldr	r0, [pc, #52]	; (8000f04 <main+0x308>)
 8000ece:	f002 fd1d 	bl	800390c <HAL_GPIO_WritePin>
    	        	start = 0;													//reset start applicatie flag
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <main+0x2f4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
    MX_USB_HOST_Process();
 8000ed8:	e6fc      	b.n	8000cd4 <main+0xd8>
 8000eda:	bf00      	nop
 8000edc:	200014ac 	.word	0x200014ac
 8000ee0:	20001548 	.word	0x20001548
 8000ee4:	20001520 	.word	0x20001520
 8000ee8:	200013f8 	.word	0x200013f8
 8000eec:	2000157c 	.word	0x2000157c
 8000ef0:	20000118 	.word	0x20000118
 8000ef4:	200013a4 	.word	0x200013a4
 8000ef8:	08010580 	.word	0x08010580
 8000efc:	20001610 	.word	0x20001610
 8000f00:	20001844 	.word	0x20001844
 8000f04:	40020c00 	.word	0x40020c00
 8000f08:	08010584 	.word	0x08010584
 8000f0c:	51eb851f 	.word	0x51eb851f
 8000f10:	2000011c 	.word	0x2000011c
 8000f14:	20000120 	.word	0x20000120
 8000f18:	20000124 	.word	0x20000124
 8000f1c:	20000110 	.word	0x20000110
 8000f20:	08010590 	.word	0x08010590
 8000f24:	0801059c 	.word	0x0801059c
 8000f28:	080105a8 	.word	0x080105a8
 8000f2c:	080105b4 	.word	0x080105b4
 8000f30:	080105c0 	.word	0x080105c0
 8000f34:	40020800 	.word	0x40020800
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	080105cc 	.word	0x080105cc
 8000f40:	080105d8 	.word	0x080105d8

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b094      	sub	sp, #80	; 0x50
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	f107 0320 	add.w	r3, r7, #32
 8000f4e:	2230      	movs	r2, #48	; 0x30
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f00e fb06 	bl	800f564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	4b28      	ldr	r3, [pc, #160]	; (8001010 <SystemClock_Config+0xcc>)
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	4a27      	ldr	r2, [pc, #156]	; (8001010 <SystemClock_Config+0xcc>)
 8000f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f76:	6413      	str	r3, [r2, #64]	; 0x40
 8000f78:	4b25      	ldr	r3, [pc, #148]	; (8001010 <SystemClock_Config+0xcc>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	4b22      	ldr	r3, [pc, #136]	; (8001014 <SystemClock_Config+0xd0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a21      	ldr	r2, [pc, #132]	; (8001014 <SystemClock_Config+0xd0>)
 8000f8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <SystemClock_Config+0xd0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000faa:	2302      	movs	r3, #2
 8000fac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fb4:	2308      	movs	r3, #8
 8000fb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fb8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fbc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fc2:	2307      	movs	r3, #7
 8000fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc6:	f107 0320 	add.w	r3, r7, #32
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f006 f988 	bl	80072e0 <HAL_RCC_OscConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000fd6:	f000 fa27 	bl	8001428 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fda:	230f      	movs	r3, #15
 8000fdc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fe6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	2105      	movs	r1, #5
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f006 fbe9 	bl	80077d0 <HAL_RCC_ClockConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001004:	f000 fa10 	bl	8001428 <Error_Handler>
  }
}
 8001008:	bf00      	nop
 800100a:	3750      	adds	r7, #80	; 0x50
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40023800 	.word	0x40023800
 8001014:	40007000 	.word	0x40007000

08001018 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800101c:	4b17      	ldr	r3, [pc, #92]	; (800107c <MX_CAN1_Init+0x64>)
 800101e:	4a18      	ldr	r2, [pc, #96]	; (8001080 <MX_CAN1_Init+0x68>)
 8001020:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 14;
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <MX_CAN1_Init+0x64>)
 8001024:	220e      	movs	r2, #14
 8001026:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <MX_CAN1_Init+0x64>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800102e:	4b13      	ldr	r3, [pc, #76]	; (800107c <MX_CAN1_Init+0x64>)
 8001030:	2200      	movs	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_CAN1_Init+0x64>)
 8001036:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 800103a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <MX_CAN1_Init+0x64>)
 800103e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001042:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001044:	4b0d      	ldr	r3, [pc, #52]	; (800107c <MX_CAN1_Init+0x64>)
 8001046:	2200      	movs	r2, #0
 8001048:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <MX_CAN1_Init+0x64>)
 800104c:	2200      	movs	r2, #0
 800104e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <MX_CAN1_Init+0x64>)
 8001052:	2200      	movs	r2, #0
 8001054:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <MX_CAN1_Init+0x64>)
 8001058:	2200      	movs	r2, #0
 800105a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800105c:	4b07      	ldr	r3, [pc, #28]	; (800107c <MX_CAN1_Init+0x64>)
 800105e:	2200      	movs	r2, #0
 8001060:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <MX_CAN1_Init+0x64>)
 8001064:	2200      	movs	r2, #0
 8001066:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001068:	4804      	ldr	r0, [pc, #16]	; (800107c <MX_CAN1_Init+0x64>)
 800106a:	f000 ff6d 	bl	8001f48 <HAL_CAN_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001074:	f000 f9d8 	bl	8001428 <Error_Handler>
  /* USER CODE BEGIN CAN1_Init 2 */


  /* USER CODE END CAN1_Init 2 */

}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20001520 	.word	0x20001520
 8001080:	40006400 	.word	0x40006400

08001084 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <MX_I2C1_Init+0x50>)
 800108a:	4a13      	ldr	r2, [pc, #76]	; (80010d8 <MX_I2C1_Init+0x54>)
 800108c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_I2C1_Init+0x50>)
 8001090:	4a12      	ldr	r2, [pc, #72]	; (80010dc <MX_I2C1_Init+0x58>)
 8001092:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <MX_I2C1_Init+0x50>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_I2C1_Init+0x50>)
 800109c:	2200      	movs	r2, #0
 800109e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b4:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010bc:	2200      	movs	r2, #0
 80010be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010c2:	f004 f9d1 	bl	8005468 <HAL_I2C_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010cc:	f000 f9ac 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200013f8 	.word	0x200013f8
 80010d8:	40005400 	.word	0x40005400
 80010dc:	000186a0 	.word	0x000186a0

080010e0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <MX_I2S3_Init+0x54>)
 80010e6:	4a14      	ldr	r2, [pc, #80]	; (8001138 <MX_I2S3_Init+0x58>)
 80010e8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <MX_I2S3_Init+0x54>)
 80010ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <MX_I2S3_Init+0x54>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80010f8:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_I2S3_Init+0x54>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <MX_I2S3_Init+0x54>)
 8001100:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001104:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <MX_I2S3_Init+0x54>)
 8001108:	f64a 4244 	movw	r2, #44100	; 0xac44
 800110c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_I2S3_Init+0x54>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <MX_I2S3_Init+0x54>)
 8001116:	2200      	movs	r2, #0
 8001118:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_I2S3_Init+0x54>)
 800111c:	2200      	movs	r2, #0
 800111e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001120:	4804      	ldr	r0, [pc, #16]	; (8001134 <MX_I2S3_Init+0x54>)
 8001122:	f005 f937 	bl	8006394 <HAL_I2S_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 800112c:	f000 f97c 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	2000157c 	.word	0x2000157c
 8001138:	40003c00 	.word	0x40003c00

0800113c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001150:	463b      	mov	r3, r7
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001158:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <MX_TIM2_Init+0x98>)
 800115a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800115e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <MX_TIM2_Init+0x98>)
 8001162:	2200      	movs	r2, #0
 8001164:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001166:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <MX_TIM2_Init+0x98>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <MX_TIM2_Init+0x98>)
 800116e:	f04f 32ff 	mov.w	r2, #4294967295
 8001172:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001174:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <MX_TIM2_Init+0x98>)
 8001176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800117a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117c:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <MX_TIM2_Init+0x98>)
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001182:	4814      	ldr	r0, [pc, #80]	; (80011d4 <MX_TIM2_Init+0x98>)
 8001184:	f006 febe 	bl	8007f04 <HAL_TIM_Base_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800118e:	f000 f94b 	bl	8001428 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001196:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001198:	f107 0308 	add.w	r3, r7, #8
 800119c:	4619      	mov	r1, r3
 800119e:	480d      	ldr	r0, [pc, #52]	; (80011d4 <MX_TIM2_Init+0x98>)
 80011a0:	f007 f878 	bl	8008294 <HAL_TIM_ConfigClockSource>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80011aa:	f000 f93d 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011b6:	463b      	mov	r3, r7
 80011b8:	4619      	mov	r1, r3
 80011ba:	4806      	ldr	r0, [pc, #24]	; (80011d4 <MX_TIM2_Init+0x98>)
 80011bc:	f007 fa94 	bl	80086e8 <HAL_TIMEx_MasterConfigSynchronization>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80011c6:	f000 f92f 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200014d8 	.word	0x200014d8

080011d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011de:	f107 0308 	add.w	r3, r7, #8
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ec:	463b      	mov	r3, r7
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011f4:	4b1d      	ldr	r3, [pc, #116]	; (800126c <MX_TIM4_Init+0x94>)
 80011f6:	4a1e      	ldr	r2, [pc, #120]	; (8001270 <MX_TIM4_Init+0x98>)
 80011f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80011fa:	4b1c      	ldr	r3, [pc, #112]	; (800126c <MX_TIM4_Init+0x94>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001200:	4b1a      	ldr	r3, [pc, #104]	; (800126c <MX_TIM4_Init+0x94>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001206:	4b19      	ldr	r3, [pc, #100]	; (800126c <MX_TIM4_Init+0x94>)
 8001208:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800120c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <MX_TIM4_Init+0x94>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001214:	4b15      	ldr	r3, [pc, #84]	; (800126c <MX_TIM4_Init+0x94>)
 8001216:	2200      	movs	r2, #0
 8001218:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800121a:	4814      	ldr	r0, [pc, #80]	; (800126c <MX_TIM4_Init+0x94>)
 800121c:	f006 fe72 	bl	8007f04 <HAL_TIM_Base_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001226:	f000 f8ff 	bl	8001428 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	4619      	mov	r1, r3
 8001236:	480d      	ldr	r0, [pc, #52]	; (800126c <MX_TIM4_Init+0x94>)
 8001238:	f007 f82c 	bl	8008294 <HAL_TIM_ConfigClockSource>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001242:	f000 f8f1 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001246:	2300      	movs	r3, #0
 8001248:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800124e:	463b      	mov	r3, r7
 8001250:	4619      	mov	r1, r3
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <MX_TIM4_Init+0x94>)
 8001254:	f007 fa48 	bl	80086e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800125e:	f000 f8e3 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200013b0 	.word	0x200013b0
 8001270:	40000800 	.word	0x40000800

08001274 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <MX_DMA_Init+0x3c>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a0b      	ldr	r2, [pc, #44]	; (80012b0 <MX_DMA_Init+0x3c>)
 8001284:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <MX_DMA_Init+0x3c>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2100      	movs	r1, #0
 800129a:	2010      	movs	r0, #16
 800129c:	f001 fd78 	bl	8002d90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80012a0:	2010      	movs	r0, #16
 80012a2:	f001 fd91 	bl	8002dc8 <HAL_NVIC_EnableIRQ>

}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800

080012b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b49      	ldr	r3, [pc, #292]	; (80013f4 <MX_GPIO_Init+0x140>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a48      	ldr	r2, [pc, #288]	; (80013f4 <MX_GPIO_Init+0x140>)
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b46      	ldr	r3, [pc, #280]	; (80013f4 <MX_GPIO_Init+0x140>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b42      	ldr	r3, [pc, #264]	; (80013f4 <MX_GPIO_Init+0x140>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a41      	ldr	r2, [pc, #260]	; (80013f4 <MX_GPIO_Init+0x140>)
 80012f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b3f      	ldr	r3, [pc, #252]	; (80013f4 <MX_GPIO_Init+0x140>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	4b3b      	ldr	r3, [pc, #236]	; (80013f4 <MX_GPIO_Init+0x140>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a3a      	ldr	r2, [pc, #232]	; (80013f4 <MX_GPIO_Init+0x140>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b38      	ldr	r3, [pc, #224]	; (80013f4 <MX_GPIO_Init+0x140>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	4b34      	ldr	r3, [pc, #208]	; (80013f4 <MX_GPIO_Init+0x140>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a33      	ldr	r2, [pc, #204]	; (80013f4 <MX_GPIO_Init+0x140>)
 8001328:	f043 0308 	orr.w	r3, r3, #8
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <MX_GPIO_Init+0x140>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	603b      	str	r3, [r7, #0]
 800133e:	4b2d      	ldr	r3, [pc, #180]	; (80013f4 <MX_GPIO_Init+0x140>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a2c      	ldr	r2, [pc, #176]	; (80013f4 <MX_GPIO_Init+0x140>)
 8001344:	f043 0302 	orr.w	r3, r3, #2
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <MX_GPIO_Init+0x140>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	2101      	movs	r1, #1
 800135a:	4827      	ldr	r0, [pc, #156]	; (80013f8 <MX_GPIO_Init+0x144>)
 800135c:	f002 fad6 	bl	800390c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001360:	2200      	movs	r2, #0
 8001362:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001366:	4825      	ldr	r0, [pc, #148]	; (80013fc <MX_GPIO_Init+0x148>)
 8001368:	f002 fad0 	bl	800390c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800136c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	481d      	ldr	r0, [pc, #116]	; (80013f8 <MX_GPIO_Init+0x144>)
 8001382:	f002 f90f 	bl	80035a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001386:	2301      	movs	r3, #1
 8001388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	2301      	movs	r3, #1
 800138c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4619      	mov	r1, r3
 800139c:	4816      	ldr	r0, [pc, #88]	; (80013f8 <MX_GPIO_Init+0x144>)
 800139e:	f002 f901 	bl	80035a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013a2:	2301      	movs	r3, #1
 80013a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	4619      	mov	r1, r3
 80013b6:	4812      	ldr	r0, [pc, #72]	; (8001400 <MX_GPIO_Init+0x14c>)
 80013b8:	f002 f8f4 	bl	80035a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80013bc:	f24f 0310 	movw	r3, #61456	; 0xf010
 80013c0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c2:	2301      	movs	r3, #1
 80013c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	4809      	ldr	r0, [pc, #36]	; (80013fc <MX_GPIO_Init+0x148>)
 80013d6:	f002 f8e5 	bl	80035a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 1);
 80013da:	2201      	movs	r2, #1
 80013dc:	2100      	movs	r1, #0
 80013de:	2006      	movs	r0, #6
 80013e0:	f001 fcd6 	bl	8002d90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013e4:	2006      	movs	r0, #6
 80013e6:	f001 fcef 	bl	8002dc8 <HAL_NVIC_EnableIRQ>

}
 80013ea:	bf00      	nop
 80013ec:	3728      	adds	r7, #40	; 0x28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020800 	.word	0x40020800
 80013fc:	40020c00 	.word	0x40020c00
 8001400:	40020000 	.word	0x40020000

08001404 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a04      	ldr	r2, [pc, #16]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d101      	bne.n	800141a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001416:	f000 fd53 	bl	8001ec0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40010000 	.word	0x40010000

08001428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800142c:	b672      	cpsid	i
}
 800142e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001430:	e7fe      	b.n	8001430 <Error_Handler+0x8>
	...

08001434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <HAL_MspInit+0x4c>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	4a0f      	ldr	r2, [pc, #60]	; (8001480 <HAL_MspInit+0x4c>)
 8001444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001448:	6453      	str	r3, [r2, #68]	; 0x44
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <HAL_MspInit+0x4c>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	603b      	str	r3, [r7, #0]
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_MspInit+0x4c>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	4a08      	ldr	r2, [pc, #32]	; (8001480 <HAL_MspInit+0x4c>)
 8001460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001464:	6413      	str	r3, [r2, #64]	; 0x40
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_MspInit+0x4c>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146e:	603b      	str	r3, [r7, #0]
 8001470:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001472:	2007      	movs	r0, #7
 8001474:	f001 fc81 	bl	8002d7a <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40023800 	.word	0x40023800

08001484 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a1d      	ldr	r2, [pc, #116]	; (8001518 <HAL_CAN_MspInit+0x94>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d133      	bne.n	800150e <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	4b1c      	ldr	r3, [pc, #112]	; (800151c <HAL_CAN_MspInit+0x98>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	4a1b      	ldr	r2, [pc, #108]	; (800151c <HAL_CAN_MspInit+0x98>)
 80014b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014b4:	6413      	str	r3, [r2, #64]	; 0x40
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <HAL_CAN_MspInit+0x98>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <HAL_CAN_MspInit+0x98>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a14      	ldr	r2, [pc, #80]	; (800151c <HAL_CAN_MspInit+0x98>)
 80014cc:	f043 0308 	orr.w	r3, r3, #8
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_CAN_MspInit+0x98>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014de:	2303      	movs	r3, #3
 80014e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ea:	2303      	movs	r3, #3
 80014ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80014ee:	2309      	movs	r3, #9
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	4809      	ldr	r0, [pc, #36]	; (8001520 <HAL_CAN_MspInit+0x9c>)
 80014fa:	f002 f853 	bl	80035a4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 2);
 80014fe:	2202      	movs	r2, #2
 8001500:	2100      	movs	r1, #0
 8001502:	2014      	movs	r0, #20
 8001504:	f001 fc44 	bl	8002d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001508:	2014      	movs	r0, #20
 800150a:	f001 fc5d 	bl	8002dc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800150e:	bf00      	nop
 8001510:	3728      	adds	r7, #40	; 0x28
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40006400 	.word	0x40006400
 800151c:	40023800 	.word	0x40023800
 8001520:	40020c00 	.word	0x40020c00

08001524 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a19      	ldr	r2, [pc, #100]	; (80015a8 <HAL_I2C_MspInit+0x84>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d12c      	bne.n	80015a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	4b18      	ldr	r3, [pc, #96]	; (80015ac <HAL_I2C_MspInit+0x88>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a17      	ldr	r2, [pc, #92]	; (80015ac <HAL_I2C_MspInit+0x88>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <HAL_I2C_MspInit+0x88>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001562:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001568:	2312      	movs	r3, #18
 800156a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001570:	2303      	movs	r3, #3
 8001572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001574:	2304      	movs	r3, #4
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	4619      	mov	r1, r3
 800157e:	480c      	ldr	r0, [pc, #48]	; (80015b0 <HAL_I2C_MspInit+0x8c>)
 8001580:	f002 f810 	bl	80035a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <HAL_I2C_MspInit+0x88>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	4a07      	ldr	r2, [pc, #28]	; (80015ac <HAL_I2C_MspInit+0x88>)
 800158e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001592:	6413      	str	r3, [r2, #64]	; 0x40
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <HAL_I2C_MspInit+0x88>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015a0:	bf00      	nop
 80015a2:	3728      	adds	r7, #40	; 0x28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40005400 	.word	0x40005400
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40020400 	.word	0x40020400

080015b4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08e      	sub	sp, #56	; 0x38
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a4e      	ldr	r2, [pc, #312]	; (8001718 <HAL_I2S_MspInit+0x164>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	f040 8095 	bne.w	8001710 <HAL_I2S_MspInit+0x15c>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80015e6:	2301      	movs	r3, #1
 80015e8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 271;
 80015ea:	f240 130f 	movw	r3, #271	; 0x10f
 80015ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 80015f0:	2306      	movs	r3, #6
 80015f2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	4618      	mov	r0, r3
 80015fa:	f006 fb17 	bl	8007c2c <HAL_RCCEx_PeriphCLKConfig>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <HAL_I2S_MspInit+0x54>
    {
      Error_Handler();
 8001604:	f7ff ff10 	bl	8001428 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001608:	2300      	movs	r3, #0
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	4b43      	ldr	r3, [pc, #268]	; (800171c <HAL_I2S_MspInit+0x168>)
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	4a42      	ldr	r2, [pc, #264]	; (800171c <HAL_I2S_MspInit+0x168>)
 8001612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001616:	6413      	str	r3, [r2, #64]	; 0x40
 8001618:	4b40      	ldr	r3, [pc, #256]	; (800171c <HAL_I2S_MspInit+0x168>)
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	4b3c      	ldr	r3, [pc, #240]	; (800171c <HAL_I2S_MspInit+0x168>)
 800162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162c:	4a3b      	ldr	r2, [pc, #236]	; (800171c <HAL_I2S_MspInit+0x168>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6313      	str	r3, [r2, #48]	; 0x30
 8001634:	4b39      	ldr	r3, [pc, #228]	; (800171c <HAL_I2S_MspInit+0x168>)
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001640:	2300      	movs	r3, #0
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	4b35      	ldr	r3, [pc, #212]	; (800171c <HAL_I2S_MspInit+0x168>)
 8001646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001648:	4a34      	ldr	r2, [pc, #208]	; (800171c <HAL_I2S_MspInit+0x168>)
 800164a:	f043 0304 	orr.w	r3, r3, #4
 800164e:	6313      	str	r3, [r2, #48]	; 0x30
 8001650:	4b32      	ldr	r3, [pc, #200]	; (800171c <HAL_I2S_MspInit+0x168>)
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800165c:	2310      	movs	r3, #16
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800166c:	2306      	movs	r3, #6
 800166e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001674:	4619      	mov	r1, r3
 8001676:	482a      	ldr	r0, [pc, #168]	; (8001720 <HAL_I2S_MspInit+0x16c>)
 8001678:	f001 ff94 	bl	80035a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 800167c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800168e:	2306      	movs	r3, #6
 8001690:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001696:	4619      	mov	r1, r3
 8001698:	4822      	ldr	r0, [pc, #136]	; (8001724 <HAL_I2S_MspInit+0x170>)
 800169a:	f001 ff83 	bl	80035a4 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800169e:	4b22      	ldr	r3, [pc, #136]	; (8001728 <HAL_I2S_MspInit+0x174>)
 80016a0:	4a22      	ldr	r2, [pc, #136]	; (800172c <HAL_I2S_MspInit+0x178>)
 80016a2:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80016a4:	4b20      	ldr	r3, [pc, #128]	; (8001728 <HAL_I2S_MspInit+0x174>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016aa:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <HAL_I2S_MspInit+0x174>)
 80016ac:	2240      	movs	r2, #64	; 0x40
 80016ae:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016b0:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <HAL_I2S_MspInit+0x174>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016b6:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <HAL_I2S_MspInit+0x174>)
 80016b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016bc:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016be:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <HAL_I2S_MspInit+0x174>)
 80016c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016c4:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016c6:	4b18      	ldr	r3, [pc, #96]	; (8001728 <HAL_I2S_MspInit+0x174>)
 80016c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016cc:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80016ce:	4b16      	ldr	r3, [pc, #88]	; (8001728 <HAL_I2S_MspInit+0x174>)
 80016d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016d4:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016d6:	4b14      	ldr	r3, [pc, #80]	; (8001728 <HAL_I2S_MspInit+0x174>)
 80016d8:	2200      	movs	r2, #0
 80016da:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_I2S_MspInit+0x174>)
 80016de:	2204      	movs	r2, #4
 80016e0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <HAL_I2S_MspInit+0x174>)
 80016e4:	2203      	movs	r2, #3
 80016e6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80016e8:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <HAL_I2S_MspInit+0x174>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80016ee:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <HAL_I2S_MspInit+0x174>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80016f4:	480c      	ldr	r0, [pc, #48]	; (8001728 <HAL_I2S_MspInit+0x174>)
 80016f6:	f001 fb75 	bl	8002de4 <HAL_DMA_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <HAL_I2S_MspInit+0x150>
    {
      Error_Handler();
 8001700:	f7ff fe92 	bl	8001428 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a08      	ldr	r2, [pc, #32]	; (8001728 <HAL_I2S_MspInit+0x174>)
 8001708:	639a      	str	r2, [r3, #56]	; 0x38
 800170a:	4a07      	ldr	r2, [pc, #28]	; (8001728 <HAL_I2S_MspInit+0x174>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001710:	bf00      	nop
 8001712:	3738      	adds	r7, #56	; 0x38
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40003c00 	.word	0x40003c00
 800171c:	40023800 	.word	0x40023800
 8001720:	40020000 	.word	0x40020000
 8001724:	40020800 	.word	0x40020800
 8001728:	2000144c 	.word	0x2000144c
 800172c:	40026088 	.word	0x40026088

08001730 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001740:	d10e      	bne.n	8001760 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b13      	ldr	r3, [pc, #76]	; (8001794 <HAL_TIM_Base_MspInit+0x64>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	4a12      	ldr	r2, [pc, #72]	; (8001794 <HAL_TIM_Base_MspInit+0x64>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6413      	str	r3, [r2, #64]	; 0x40
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <HAL_TIM_Base_MspInit+0x64>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800175e:	e012      	b.n	8001786 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0c      	ldr	r2, [pc, #48]	; (8001798 <HAL_TIM_Base_MspInit+0x68>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d10d      	bne.n	8001786 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <HAL_TIM_Base_MspInit+0x64>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	4a08      	ldr	r2, [pc, #32]	; (8001794 <HAL_TIM_Base_MspInit+0x64>)
 8001774:	f043 0304 	orr.w	r3, r3, #4
 8001778:	6413      	str	r3, [r2, #64]	; 0x40
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_TIM_Base_MspInit+0x64>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	f003 0304 	and.w	r3, r3, #4
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
}
 8001786:	bf00      	nop
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800
 8001798:	40000800 	.word	0x40000800

0800179c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08c      	sub	sp, #48	; 0x30
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80017ac:	2200      	movs	r2, #0
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	2019      	movs	r0, #25
 80017b2:	f001 faed 	bl	8002d90 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80017b6:	2019      	movs	r0, #25
 80017b8:	f001 fb06 	bl	8002dc8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	4b1f      	ldr	r3, [pc, #124]	; (8001840 <HAL_InitTick+0xa4>)
 80017c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c4:	4a1e      	ldr	r2, [pc, #120]	; (8001840 <HAL_InitTick+0xa4>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	6453      	str	r3, [r2, #68]	; 0x44
 80017cc:	4b1c      	ldr	r3, [pc, #112]	; (8001840 <HAL_InitTick+0xa4>)
 80017ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017d8:	f107 0210 	add.w	r2, r7, #16
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f006 f9f0 	bl	8007bc8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80017e8:	f006 f9da 	bl	8007ba0 <HAL_RCC_GetPCLK2Freq>
 80017ec:	4603      	mov	r3, r0
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f4:	4a13      	ldr	r2, [pc, #76]	; (8001844 <HAL_InitTick+0xa8>)
 80017f6:	fba2 2303 	umull	r2, r3, r2, r3
 80017fa:	0c9b      	lsrs	r3, r3, #18
 80017fc:	3b01      	subs	r3, #1
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <HAL_InitTick+0xac>)
 8001802:	4a12      	ldr	r2, [pc, #72]	; (800184c <HAL_InitTick+0xb0>)
 8001804:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <HAL_InitTick+0xac>)
 8001808:	f240 32e7 	movw	r2, #999	; 0x3e7
 800180c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800180e:	4a0e      	ldr	r2, [pc, #56]	; (8001848 <HAL_InitTick+0xac>)
 8001810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001812:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <HAL_InitTick+0xac>)
 8001816:	2200      	movs	r2, #0
 8001818:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181a:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <HAL_InitTick+0xac>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001820:	4809      	ldr	r0, [pc, #36]	; (8001848 <HAL_InitTick+0xac>)
 8001822:	f006 fb6f 	bl	8007f04 <HAL_TIM_Base_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d104      	bne.n	8001836 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800182c:	4806      	ldr	r0, [pc, #24]	; (8001848 <HAL_InitTick+0xac>)
 800182e:	f006 fbb9 	bl	8007fa4 <HAL_TIM_Base_Start_IT>
 8001832:	4603      	mov	r3, r0
 8001834:	e000      	b.n	8001838 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
}
 8001838:	4618      	mov	r0, r3
 800183a:	3730      	adds	r7, #48	; 0x30
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40023800 	.word	0x40023800
 8001844:	431bde83 	.word	0x431bde83
 8001848:	200015c4 	.word	0x200015c4
 800184c:	40010000 	.word	0x40010000

08001850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <NMI_Handler+0x4>

08001856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800185a:	e7fe      	b.n	800185a <HardFault_Handler+0x4>

0800185c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <MemManage_Handler+0x4>

08001862 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001866:	e7fe      	b.n	8001866 <BusFault_Handler+0x4>

08001868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800186c:	e7fe      	b.n	800186c <UsageFault_Handler+0x4>

0800186e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	for(int n=0;n<1000000;n++);
 80018ae:	2300      	movs	r3, #0
 80018b0:	607b      	str	r3, [r7, #4]
 80018b2:	e002      	b.n	80018ba <EXTI0_IRQHandler+0x12>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3301      	adds	r3, #1
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a2e      	ldr	r2, [pc, #184]	; (8001978 <EXTI0_IRQHandler+0xd0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	ddf8      	ble.n	80018b4 <EXTI0_IRQHandler+0xc>
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))							// anti contact dender
 80018c2:	2101      	movs	r1, #1
 80018c4:	482d      	ldr	r0, [pc, #180]	; (800197c <EXTI0_IRQHandler+0xd4>)
 80018c6:	f002 f809 	bl	80038dc <HAL_GPIO_ReadPin>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d04b      	beq.n	8001968 <EXTI0_IRQHandler+0xc0>
	{
		//doe alleen wat als de applicatie niet is draait, anders geen reactie op blauwe drukknop
		if(start == 0){
 80018d0:	4b2b      	ldr	r3, [pc, #172]	; (8001980 <EXTI0_IRQHandler+0xd8>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d147      	bne.n	8001968 <EXTI0_IRQHandler+0xc0>
			uint8_t participant = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	70fb      	strb	r3, [r7, #3]
			uint8_t song = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	70bb      	strb	r3, [r7, #2]

			song = ((rand() % 5) + 1);					// RANDOM getal modulo % 4 => 0, 1, 2, 3 of 4,  +1 => 1 t/m 5 (keuze liedje)
 80018e0:	f00d fef2 	bl	800f6c8 <rand>
 80018e4:	4602      	mov	r2, r0
 80018e6:	4b27      	ldr	r3, [pc, #156]	; (8001984 <EXTI0_IRQHandler+0xdc>)
 80018e8:	fb83 1302 	smull	r1, r3, r3, r2
 80018ec:	1059      	asrs	r1, r3, #1
 80018ee:	17d3      	asrs	r3, r2, #31
 80018f0:	1ac9      	subs	r1, r1, r3
 80018f2:	460b      	mov	r3, r1
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	440b      	add	r3, r1
 80018f8:	1ad1      	subs	r1, r2, r3
 80018fa:	b2cb      	uxtb	r3, r1
 80018fc:	3301      	adds	r3, #1
 80018fe:	70bb      	strb	r3, [r7, #2]
			uint8_t par = ((rand() % 3) + 1);
 8001900:	f00d fee2 	bl	800f6c8 <rand>
 8001904:	4602      	mov	r2, r0
 8001906:	4b20      	ldr	r3, [pc, #128]	; (8001988 <EXTI0_IRQHandler+0xe0>)
 8001908:	fb83 3102 	smull	r3, r1, r3, r2
 800190c:	17d3      	asrs	r3, r2, #31
 800190e:	1ac9      	subs	r1, r1, r3
 8001910:	460b      	mov	r3, r1
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	440b      	add	r3, r1
 8001916:	1ad1      	subs	r1, r2, r3
 8001918:	b2cb      	uxtb	r3, r1
 800191a:	3301      	adds	r3, #1
 800191c:	707b      	strb	r3, [r7, #1]
			participant = ((rand() % 3) + 1);			// RANDOM getal modulo % 4 => 0, 1 of 2,  +1 => 1 t/m 3 (keuze naar welke deelnemer het bericht toe moet)
 800191e:	f00d fed3 	bl	800f6c8 <rand>
 8001922:	4602      	mov	r2, r0
 8001924:	4b18      	ldr	r3, [pc, #96]	; (8001988 <EXTI0_IRQHandler+0xe0>)
 8001926:	fb83 3102 	smull	r3, r1, r3, r2
 800192a:	17d3      	asrs	r3, r2, #31
 800192c:	1ac9      	subs	r1, r1, r3
 800192e:	460b      	mov	r3, r1
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	440b      	add	r3, r1
 8001934:	1ad1      	subs	r1, r2, r3
 8001936:	b2cb      	uxtb	r3, r1
 8001938:	3301      	adds	r3, #1
 800193a:	70fb      	strb	r3, [r7, #3]
			if (participant == 1 ){								// Start applicatie als de song op dit bordje moet worden afgespeeld
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d106      	bne.n	8001950 <EXTI0_IRQHandler+0xa8>
				start = 1;
 8001942:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <EXTI0_IRQHandler+0xd8>)
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
				RxData[1]=song;
 8001948:	4a10      	ldr	r2, [pc, #64]	; (800198c <EXTI0_IRQHandler+0xe4>)
 800194a:	78bb      	ldrb	r3, [r7, #2]
 800194c:	7053      	strb	r3, [r2, #1]
 800194e:	e00b      	b.n	8001968 <EXTI0_IRQHandler+0xc0>
			}else{
				TxData[0]=participant;									// Stuur bericht naar andere deelnemers met welke song er gestart moet worden
 8001950:	4a0f      	ldr	r2, [pc, #60]	; (8001990 <EXTI0_IRQHandler+0xe8>)
 8001952:	78fb      	ldrb	r3, [r7, #3]
 8001954:	7013      	strb	r3, [r2, #0]
				TxData[1]=song;
 8001956:	4a0e      	ldr	r2, [pc, #56]	; (8001990 <EXTI0_IRQHandler+0xe8>)
 8001958:	78bb      	ldrb	r3, [r7, #2]
 800195a:	7053      	strb	r3, [r2, #1]
				HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 800195c:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <EXTI0_IRQHandler+0xec>)
 800195e:	4a0c      	ldr	r2, [pc, #48]	; (8001990 <EXTI0_IRQHandler+0xe8>)
 8001960:	490d      	ldr	r1, [pc, #52]	; (8001998 <EXTI0_IRQHandler+0xf0>)
 8001962:	480e      	ldr	r0, [pc, #56]	; (800199c <EXTI0_IRQHandler+0xf4>)
 8001964:	f000 fd10 	bl	8002388 <HAL_CAN_AddTxMessage>
			}
		}
	}

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001968:	2001      	movs	r0, #1
 800196a:	f001 ffe9 	bl	8003940 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	000f423f 	.word	0x000f423f
 800197c:	40020000 	.word	0x40020000
 8001980:	20000118 	.word	0x20000118
 8001984:	66666667 	.word	0x66666667
 8001988:	55555556 	.word	0x55555556
 800198c:	20000110 	.word	0x20000110
 8001990:	20000108 	.word	0x20000108
 8001994:	200014d4 	.word	0x200014d4
 8001998:	20001548 	.word	0x20001548
 800199c:	20001520 	.word	0x20001520

080019a0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80019a4:	4802      	ldr	r0, [pc, #8]	; (80019b0 <DMA1_Stream5_IRQHandler+0x10>)
 80019a6:	f001 fb93 	bl	80030d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2000144c 	.word	0x2000144c

080019b4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */



  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80019ba:	4817      	ldr	r0, [pc, #92]	; (8001a18 <CAN1_RX0_IRQHandler+0x64>)
 80019bc:	f000 fef7 	bl	80027ae <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80019c0:	2201      	movs	r2, #1
 80019c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019c6:	4815      	ldr	r0, [pc, #84]	; (8001a1c <CAN1_RX0_IRQHandler+0x68>)
 80019c8:	f001 ffa0 	bl	800390c <HAL_GPIO_WritePin>
	  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 80019cc:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <CAN1_RX0_IRQHandler+0x6c>)
 80019ce:	4a15      	ldr	r2, [pc, #84]	; (8001a24 <CAN1_RX0_IRQHandler+0x70>)
 80019d0:	2100      	movs	r1, #0
 80019d2:	4811      	ldr	r0, [pc, #68]	; (8001a18 <CAN1_RX0_IRQHandler+0x64>)
 80019d4:	f000 fdb3 	bl	800253e <HAL_CAN_GetRxMessage>

	  if (RxData[0] == 1)
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <CAN1_RX0_IRQHandler+0x6c>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d103      	bne.n	80019e8 <CAN1_RX0_IRQHandler+0x34>
			  {
		  	  	  start = 1;
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <CAN1_RX0_IRQHandler+0x74>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	701a      	strb	r2, [r3, #0]
			  }



  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80019e6:	e012      	b.n	8001a0e <CAN1_RX0_IRQHandler+0x5a>
				  start=0;
 80019e8:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <CAN1_RX0_IRQHandler+0x74>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
				  for(int n=0;n<1000000;n++);
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	e002      	b.n	80019fa <CAN1_RX0_IRQHandler+0x46>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3301      	adds	r3, #1
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <CAN1_RX0_IRQHandler+0x78>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	ddf8      	ble.n	80019f4 <CAN1_RX0_IRQHandler+0x40>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a02:	2200      	movs	r2, #0
 8001a04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a08:	4804      	ldr	r0, [pc, #16]	; (8001a1c <CAN1_RX0_IRQHandler+0x68>)
 8001a0a:	f001 ff7f 	bl	800390c <HAL_GPIO_WritePin>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20001520 	.word	0x20001520
 8001a1c:	40020c00 	.word	0x40020c00
 8001a20:	20000110 	.word	0x20000110
 8001a24:	20001560 	.word	0x20001560
 8001a28:	20000118 	.word	0x20000118
 8001a2c:	000f423f 	.word	0x000f423f

08001a30 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a34:	4802      	ldr	r0, [pc, #8]	; (8001a40 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001a36:	f006 fb25 	bl	8008084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200015c4 	.word	0x200015c4

08001a44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001a48:	4802      	ldr	r0, [pc, #8]	; (8001a54 <OTG_FS_IRQHandler+0x10>)
 8001a4a:	f002 fa07 	bl	8003e5c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20001e50 	.word	0x20001e50

08001a58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
	return 1;
 8001a5c:	2301      	movs	r3, #1
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <_kill>:

int _kill(int pid, int sig)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a72:	f00d fd2f 	bl	800f4d4 <__errno>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2216      	movs	r2, #22
 8001a7a:	601a      	str	r2, [r3, #0]
	return -1;
 8001a7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <_exit>:

void _exit (int status)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a90:	f04f 31ff 	mov.w	r1, #4294967295
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff ffe7 	bl	8001a68 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a9a:	e7fe      	b.n	8001a9a <_exit+0x12>

08001a9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	e00a      	b.n	8001ac4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001aae:	f3af 8000 	nop.w
 8001ab2:	4601      	mov	r1, r0
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	60ba      	str	r2, [r7, #8]
 8001aba:	b2ca      	uxtb	r2, r1
 8001abc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	dbf0      	blt.n	8001aae <_read+0x12>
	}

return len;
 8001acc:	687b      	ldr	r3, [r7, #4]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	60f8      	str	r0, [r7, #12]
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	e009      	b.n	8001afc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	1c5a      	adds	r2, r3, #1
 8001aec:	60ba      	str	r2, [r7, #8]
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	3301      	adds	r3, #1
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	dbf1      	blt.n	8001ae8 <_write+0x12>
	}
	return len;
 8001b04:	687b      	ldr	r3, [r7, #4]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <_close>:

int _close(int file)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
	return -1;
 8001b16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b36:	605a      	str	r2, [r3, #4]
	return 0;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <_isatty>:

int _isatty(int file)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
	return 1;
 8001b4e:	2301      	movs	r3, #1
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
	return 0;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b80:	4a14      	ldr	r2, [pc, #80]	; (8001bd4 <_sbrk+0x5c>)
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <_sbrk+0x60>)
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b8c:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <_sbrk+0x64>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d102      	bne.n	8001b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b94:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <_sbrk+0x64>)
 8001b96:	4a12      	ldr	r2, [pc, #72]	; (8001be0 <_sbrk+0x68>)
 8001b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <_sbrk+0x64>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d207      	bcs.n	8001bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ba8:	f00d fc94 	bl	800f4d4 <__errno>
 8001bac:	4603      	mov	r3, r0
 8001bae:	220c      	movs	r2, #12
 8001bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb6:	e009      	b.n	8001bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <_sbrk+0x64>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bbe:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <_sbrk+0x64>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	4a05      	ldr	r2, [pc, #20]	; (8001bdc <_sbrk+0x64>)
 8001bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bca:	68fb      	ldr	r3, [r7, #12]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20020000 	.word	0x20020000
 8001bd8:	00002000 	.word	0x00002000
 8001bdc:	20000128 	.word	0x20000128
 8001be0:	20002168 	.word	0x20002168

08001be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <SystemInit+0x20>)
 8001bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bee:	4a05      	ldr	r2, [pc, #20]	; (8001c04 <SystemInit+0x20>)
 8001bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <wavPlayer_reset>:
  PLAYER_CONTROL_EndOfFile,
}PLAYER_CONTROL_e;
static volatile PLAYER_CONTROL_e playerControlSM = PLAYER_CONTROL_Idle;

static void wavPlayer_reset(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  audioRemainSize = 0;
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <wavPlayer_reset+0x1c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
  playerReadBytes = 0;
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <wavPlayer_reset+0x20>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	20001360 	.word	0x20001360
 8001c28:	20001368 	.word	0x20001368

08001c2c <wavPlayer_fileSelect>:
/**
 * @brief Select WAV file to play
 * @retval returns true when file is found in USB Drive
 */
bool wavPlayer_fileSelect(const char* filePath)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08e      	sub	sp, #56	; 0x38
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  WAV_HeaderTypeDef wavHeader;
  UINT readBytes = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60bb      	str	r3, [r7, #8]
  //Open WAV file
  if(f_open(&wavFile, filePath, FA_READ) != FR_OK)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	480d      	ldr	r0, [pc, #52]	; (8001c74 <wavPlayer_fileSelect+0x48>)
 8001c3e:	f00c fb2d 	bl	800e29c <f_open>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <wavPlayer_fileSelect+0x20>
  {
    return false;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	e00e      	b.n	8001c6a <wavPlayer_fileSelect+0x3e>
  }
  //Read WAV file Header
  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 8001c4c:	f107 0308 	add.w	r3, r7, #8
 8001c50:	f107 010c 	add.w	r1, r7, #12
 8001c54:	222c      	movs	r2, #44	; 0x2c
 8001c56:	4807      	ldr	r0, [pc, #28]	; (8001c74 <wavPlayer_fileSelect+0x48>)
 8001c58:	f00c fcde 	bl	800e618 <f_read>
  //Get audio data size
  fileLength = wavHeader.FileSize;
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4a06      	ldr	r2, [pc, #24]	; (8001c78 <wavPlayer_fileSelect+0x4c>)
 8001c60:	6013      	str	r3, [r2, #0]
  //Play the WAV file with frequency specified in header
  samplingFreq = wavHeader.SampleRate;
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	4a05      	ldr	r2, [pc, #20]	; (8001c7c <wavPlayer_fileSelect+0x50>)
 8001c66:	6013      	str	r3, [r2, #0]
  return true;
 8001c68:	2301      	movs	r3, #1
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3738      	adds	r7, #56	; 0x38
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	2000012c 	.word	0x2000012c
 8001c78:	2000035c 	.word	0x2000035c
 8001c7c:	20001364 	.word	0x20001364

08001c80 <wavPlayer_play>:

/**
 * @brief WAV File Play
 */
void wavPlayer_play(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  isFinished = false;
 8001c84:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <wavPlayer_play+0x48>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	701a      	strb	r2, [r3, #0]
  //Initialise I2S Audio Sampling settings
  audioI2S_init(samplingFreq);
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <wavPlayer_play+0x4c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe ff54 	bl	8000b3c <audioI2S_init>
  //Read Audio data from USB Disk
  f_lseek(&wavFile, 0);
 8001c94:	2100      	movs	r1, #0
 8001c96:	480e      	ldr	r0, [pc, #56]	; (8001cd0 <wavPlayer_play+0x50>)
 8001c98:	f00c fea5 	bl	800e9e6 <f_lseek>
  f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &playerReadBytes);
 8001c9c:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <wavPlayer_play+0x54>)
 8001c9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ca2:	490d      	ldr	r1, [pc, #52]	; (8001cd8 <wavPlayer_play+0x58>)
 8001ca4:	480a      	ldr	r0, [pc, #40]	; (8001cd0 <wavPlayer_play+0x50>)
 8001ca6:	f00c fcb7 	bl	800e618 <f_read>
  audioRemainSize = fileLength - playerReadBytes;
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <wavPlayer_play+0x5c>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <wavPlayer_play+0x54>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <wavPlayer_play+0x60>)
 8001cb6:	6013      	str	r3, [r2, #0]
  //Start playing the WAV
  audioI2S_play((uint16_t *)&audioBuffer[0], AUDIO_BUFFER_SIZE);
 8001cb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cbc:	4806      	ldr	r0, [pc, #24]	; (8001cd8 <wavPlayer_play+0x58>)
 8001cbe:	f7fe ff4d 	bl	8000b5c <audioI2S_play>
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	2000136c 	.word	0x2000136c
 8001ccc:	20001364 	.word	0x20001364
 8001cd0:	2000012c 	.word	0x2000012c
 8001cd4:	20001368 	.word	0x20001368
 8001cd8:	20000360 	.word	0x20000360
 8001cdc:	2000035c 	.word	0x2000035c
 8001ce0:	20001360 	.word	0x20001360

08001ce4 <wavPlayer_process>:

/**
 * @brief Process WAV
 */
void wavPlayer_process(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  switch(playerControlSM)
 8001ce8:	4b30      	ldr	r3, [pc, #192]	; (8001dac <wavPlayer_process+0xc8>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b03      	cmp	r3, #3
 8001cf0:	d859      	bhi.n	8001da6 <wavPlayer_process+0xc2>
 8001cf2:	a201      	add	r2, pc, #4	; (adr r2, 8001cf8 <wavPlayer_process+0x14>)
 8001cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf8:	08001da5 	.word	0x08001da5
 8001cfc:	08001d09 	.word	0x08001d09
 8001d00:	08001d4b 	.word	0x08001d4b
 8001d04:	08001d8d 	.word	0x08001d8d
  {
  case PLAYER_CONTROL_Idle:
    break;

  case PLAYER_CONTROL_HalfBuffer:
    playerReadBytes = 0;
 8001d08:	4b29      	ldr	r3, [pc, #164]	; (8001db0 <wavPlayer_process+0xcc>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8001d0e:	4b27      	ldr	r3, [pc, #156]	; (8001dac <wavPlayer_process+0xc8>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8001d14:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <wavPlayer_process+0xcc>)
 8001d16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d1a:	4926      	ldr	r1, [pc, #152]	; (8001db4 <wavPlayer_process+0xd0>)
 8001d1c:	4826      	ldr	r0, [pc, #152]	; (8001db8 <wavPlayer_process+0xd4>)
 8001d1e:	f00c fc7b 	bl	800e618 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8001d22:	4b26      	ldr	r3, [pc, #152]	; (8001dbc <wavPlayer_process+0xd8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d2a:	d907      	bls.n	8001d3c <wavPlayer_process+0x58>
    {
      audioRemainSize -= playerReadBytes;
 8001d2c:	4b23      	ldr	r3, [pc, #140]	; (8001dbc <wavPlayer_process+0xd8>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4b1f      	ldr	r3, [pc, #124]	; (8001db0 <wavPlayer_process+0xcc>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	4a21      	ldr	r2, [pc, #132]	; (8001dbc <wavPlayer_process+0xd8>)
 8001d38:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8001d3a:	e034      	b.n	8001da6 <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8001d3c:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <wavPlayer_process+0xd8>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8001d42:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <wavPlayer_process+0xc8>)
 8001d44:	2203      	movs	r2, #3
 8001d46:	701a      	strb	r2, [r3, #0]
    break;
 8001d48:	e02d      	b.n	8001da6 <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_FullBuffer:
    playerReadBytes = 0;
 8001d4a:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <wavPlayer_process+0xcc>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8001d50:	4b16      	ldr	r3, [pc, #88]	; (8001dac <wavPlayer_process+0xc8>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8001d56:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <wavPlayer_process+0xcc>)
 8001d58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d5c:	4918      	ldr	r1, [pc, #96]	; (8001dc0 <wavPlayer_process+0xdc>)
 8001d5e:	4816      	ldr	r0, [pc, #88]	; (8001db8 <wavPlayer_process+0xd4>)
 8001d60:	f00c fc5a 	bl	800e618 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8001d64:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <wavPlayer_process+0xd8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d6c:	d907      	bls.n	8001d7e <wavPlayer_process+0x9a>
    {
      audioRemainSize -= playerReadBytes;
 8001d6e:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <wavPlayer_process+0xd8>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <wavPlayer_process+0xcc>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	4a10      	ldr	r2, [pc, #64]	; (8001dbc <wavPlayer_process+0xd8>)
 8001d7a:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8001d7c:	e013      	b.n	8001da6 <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <wavPlayer_process+0xd8>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <wavPlayer_process+0xc8>)
 8001d86:	2203      	movs	r2, #3
 8001d88:	701a      	strb	r2, [r3, #0]
    break;
 8001d8a:	e00c      	b.n	8001da6 <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_EndOfFile:
    f_close(&wavFile);
 8001d8c:	480a      	ldr	r0, [pc, #40]	; (8001db8 <wavPlayer_process+0xd4>)
 8001d8e:	f00c fe00 	bl	800e992 <f_close>
    wavPlayer_reset();
 8001d92:	f7ff ff39 	bl	8001c08 <wavPlayer_reset>
    isFinished = true;
 8001d96:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <wavPlayer_process+0xe0>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	701a      	strb	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <wavPlayer_process+0xc8>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
    break;
 8001da2:	e000      	b.n	8001da6 <wavPlayer_process+0xc2>
    break;
 8001da4:	bf00      	nop
  }
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	2000136d 	.word	0x2000136d
 8001db0:	20001368 	.word	0x20001368
 8001db4:	20000360 	.word	0x20000360
 8001db8:	2000012c 	.word	0x2000012c
 8001dbc:	20001360 	.word	0x20001360
 8001dc0:	20000b60 	.word	0x20000b60
 8001dc4:	2000136c 	.word	0x2000136c

08001dc8 <wavPlayer_stop>:

/**
 * @brief WAV stop
 */
void wavPlayer_stop(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  audioI2S_stop();
 8001dcc:	f7fe fee4 	bl	8000b98 <audioI2S_stop>
  isFinished = true;
 8001dd0:	4b02      	ldr	r3, [pc, #8]	; (8001ddc <wavPlayer_stop+0x14>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	701a      	strb	r2, [r3, #0]
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	2000136c 	.word	0x2000136c

08001de0 <wavPlayer_isFinished>:

/**
 * @brief isEndofFile reached
 */
bool wavPlayer_isFinished(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return isFinished;
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <wavPlayer_isFinished+0x14>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	2000136c 	.word	0x2000136c

08001df8 <audioI2S_halfTransfer_Callback>:

/**
 * @brief Half/Full transfer Audio callback for buffer management
 */
void audioI2S_halfTransfer_Callback(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_HalfBuffer;
 8001dfc:	4b03      	ldr	r3, [pc, #12]	; (8001e0c <audioI2S_halfTransfer_Callback+0x14>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	701a      	strb	r2, [r3, #0]
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	2000136d 	.word	0x2000136d

08001e10 <audioI2S_fullTransfer_Callback>:
void audioI2S_fullTransfer_Callback(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_FullBuffer;
 8001e14:	4b03      	ldr	r3, [pc, #12]	; (8001e24 <audioI2S_fullTransfer_Callback+0x14>)
 8001e16:	2202      	movs	r2, #2
 8001e18:	701a      	strb	r2, [r3, #0]
//  audioI2S_changeBuffer((uint16_t*)&audioBuffer[0], AUDIO_BUFFER_SIZE / 2);
}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	2000136d 	.word	0x2000136d

08001e28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e2c:	480d      	ldr	r0, [pc, #52]	; (8001e64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e2e:	490e      	ldr	r1, [pc, #56]	; (8001e68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e30:	4a0e      	ldr	r2, [pc, #56]	; (8001e6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e34:	e002      	b.n	8001e3c <LoopCopyDataInit>

08001e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3a:	3304      	adds	r3, #4

08001e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e40:	d3f9      	bcc.n	8001e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e42:	4a0b      	ldr	r2, [pc, #44]	; (8001e70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e44:	4c0b      	ldr	r4, [pc, #44]	; (8001e74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e48:	e001      	b.n	8001e4e <LoopFillZerobss>

08001e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e4c:	3204      	adds	r2, #4

08001e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e50:	d3fb      	bcc.n	8001e4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e52:	f7ff fec7 	bl	8001be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e56:	f00d fb43 	bl	800f4e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e5a:	f7fe fecf 	bl	8000bfc <main>
  bx  lr    
 8001e5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e68:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001e6c:	0801089c 	.word	0x0801089c
  ldr r2, =_sbss
 8001e70:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001e74:	20002164 	.word	0x20002164

08001e78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e78:	e7fe      	b.n	8001e78 <ADC_IRQHandler>
	...

08001e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e80:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <HAL_Init+0x40>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a0d      	ldr	r2, [pc, #52]	; (8001ebc <HAL_Init+0x40>)
 8001e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_Init+0x40>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <HAL_Init+0x40>)
 8001e92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e98:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <HAL_Init+0x40>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a07      	ldr	r2, [pc, #28]	; (8001ebc <HAL_Init+0x40>)
 8001e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea4:	2003      	movs	r0, #3
 8001ea6:	f000 ff68 	bl	8002d7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eaa:	2000      	movs	r0, #0
 8001eac:	f7ff fc76 	bl	800179c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eb0:	f7ff fac0 	bl	8001434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40023c00 	.word	0x40023c00

08001ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_IncTick+0x20>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_IncTick+0x24>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4413      	add	r3, r2
 8001ed0:	4a04      	ldr	r2, [pc, #16]	; (8001ee4 <HAL_IncTick+0x24>)
 8001ed2:	6013      	str	r3, [r2, #0]
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	2000000c 	.word	0x2000000c
 8001ee4:	2000160c 	.word	0x2000160c

08001ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return uwTick;
 8001eec:	4b03      	ldr	r3, [pc, #12]	; (8001efc <HAL_GetTick+0x14>)
 8001eee:	681b      	ldr	r3, [r3, #0]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	2000160c 	.word	0x2000160c

08001f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f08:	f7ff ffee 	bl	8001ee8 <HAL_GetTick>
 8001f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f18:	d005      	beq.n	8001f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <HAL_Delay+0x44>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4413      	add	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f26:	bf00      	nop
 8001f28:	f7ff ffde 	bl	8001ee8 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d8f7      	bhi.n	8001f28 <HAL_Delay+0x28>
  {
  }
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	2000000c 	.word	0x2000000c

08001f48 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e0ed      	b.n	8002136 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d102      	bne.n	8001f6c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff fa8c 	bl	8001484 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0201 	orr.w	r2, r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f7c:	f7ff ffb4 	bl	8001ee8 <HAL_GetTick>
 8001f80:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f82:	e012      	b.n	8001faa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f84:	f7ff ffb0 	bl	8001ee8 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b0a      	cmp	r3, #10
 8001f90:	d90b      	bls.n	8001faa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2205      	movs	r2, #5
 8001fa2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e0c5      	b.n	8002136 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0e5      	beq.n	8001f84 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0202 	bic.w	r2, r2, #2
 8001fc6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fc8:	f7ff ff8e 	bl	8001ee8 <HAL_GetTick>
 8001fcc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001fce:	e012      	b.n	8001ff6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fd0:	f7ff ff8a 	bl	8001ee8 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b0a      	cmp	r3, #10
 8001fdc:	d90b      	bls.n	8001ff6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2205      	movs	r2, #5
 8001fee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e09f      	b.n	8002136 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1e5      	bne.n	8001fd0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	7e1b      	ldrb	r3, [r3, #24]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d108      	bne.n	800201e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	e007      	b.n	800202e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800202c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	7e5b      	ldrb	r3, [r3, #25]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d108      	bne.n	8002048 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	e007      	b.n	8002058 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002056:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	7e9b      	ldrb	r3, [r3, #26]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d108      	bne.n	8002072 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f042 0220 	orr.w	r2, r2, #32
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	e007      	b.n	8002082 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0220 	bic.w	r2, r2, #32
 8002080:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	7edb      	ldrb	r3, [r3, #27]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d108      	bne.n	800209c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 0210 	bic.w	r2, r2, #16
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	e007      	b.n	80020ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0210 	orr.w	r2, r2, #16
 80020aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	7f1b      	ldrb	r3, [r3, #28]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d108      	bne.n	80020c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0208 	orr.w	r2, r2, #8
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	e007      	b.n	80020d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0208 	bic.w	r2, r2, #8
 80020d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	7f5b      	ldrb	r3, [r3, #29]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d108      	bne.n	80020f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f042 0204 	orr.w	r2, r2, #4
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	e007      	b.n	8002100 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0204 	bic.w	r2, r2, #4
 80020fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	431a      	orrs	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	ea42 0103 	orr.w	r1, r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	1e5a      	subs	r2, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002140:	b480      	push	{r7}
 8002142:	b087      	sub	sp, #28
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002156:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002158:	7cfb      	ldrb	r3, [r7, #19]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d003      	beq.n	8002166 <HAL_CAN_ConfigFilter+0x26>
 800215e:	7cfb      	ldrb	r3, [r7, #19]
 8002160:	2b02      	cmp	r3, #2
 8002162:	f040 80be 	bne.w	80022e2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002166:	4b65      	ldr	r3, [pc, #404]	; (80022fc <HAL_CAN_ConfigFilter+0x1bc>)
 8002168:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002170:	f043 0201 	orr.w	r2, r3, #1
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002180:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	021b      	lsls	r3, r3, #8
 8002196:	431a      	orrs	r2, r3
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	f003 031f 	and.w	r3, r3, #31
 80021a6:	2201      	movs	r2, #1
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	43db      	mvns	r3, r3
 80021b8:	401a      	ands	r2, r3
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	69db      	ldr	r3, [r3, #28]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d123      	bne.n	8002210 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	43db      	mvns	r3, r3
 80021d2:	401a      	ands	r2, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80021ea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	3248      	adds	r2, #72	; 0x48
 80021f0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002204:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002206:	6979      	ldr	r1, [r7, #20]
 8002208:	3348      	adds	r3, #72	; 0x48
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	440b      	add	r3, r1
 800220e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d122      	bne.n	800225e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	431a      	orrs	r2, r3
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002238:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	3248      	adds	r2, #72	; 0x48
 800223e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002252:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002254:	6979      	ldr	r1, [r7, #20]
 8002256:	3348      	adds	r3, #72	; 0x48
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	440b      	add	r3, r1
 800225c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d109      	bne.n	800227a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	43db      	mvns	r3, r3
 8002270:	401a      	ands	r2, r3
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002278:	e007      	b.n	800228a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	431a      	orrs	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d109      	bne.n	80022a6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	43db      	mvns	r3, r3
 800229c:	401a      	ands	r2, r3
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80022a4:	e007      	b.n	80022b6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	431a      	orrs	r2, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d107      	bne.n	80022ce <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	431a      	orrs	r2, r3
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022d4:	f023 0201 	bic.w	r2, r3, #1
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	e006      	b.n	80022f0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
  }
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	371c      	adds	r7, #28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	40006400 	.word	0x40006400

08002300 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b01      	cmp	r3, #1
 8002312:	d12e      	bne.n	8002372 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2202      	movs	r2, #2
 8002318:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0201 	bic.w	r2, r2, #1
 800232a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800232c:	f7ff fddc 	bl	8001ee8 <HAL_GetTick>
 8002330:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002332:	e012      	b.n	800235a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002334:	f7ff fdd8 	bl	8001ee8 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b0a      	cmp	r3, #10
 8002340:	d90b      	bls.n	800235a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2205      	movs	r2, #5
 8002352:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e012      	b.n	8002380 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1e5      	bne.n	8002334 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	e006      	b.n	8002380 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
  }
}
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002388:	b480      	push	{r7}
 800238a:	b089      	sub	sp, #36	; 0x24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
 8002394:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f893 3020 	ldrb.w	r3, [r3, #32]
 800239c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80023a6:	7ffb      	ldrb	r3, [r7, #31]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d003      	beq.n	80023b4 <HAL_CAN_AddTxMessage+0x2c>
 80023ac:	7ffb      	ldrb	r3, [r7, #31]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	f040 80b8 	bne.w	8002524 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10a      	bne.n	80023d4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d105      	bne.n	80023d4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 80a0 	beq.w	8002514 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	0e1b      	lsrs	r3, r3, #24
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d907      	bls.n	80023f4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e09e      	b.n	8002532 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80023f4:	2201      	movs	r2, #1
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	409a      	lsls	r2, r3
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10d      	bne.n	8002422 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002410:	68f9      	ldr	r1, [r7, #12]
 8002412:	6809      	ldr	r1, [r1, #0]
 8002414:	431a      	orrs	r2, r3
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	3318      	adds	r3, #24
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	440b      	add	r3, r1
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	e00f      	b.n	8002442 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800242c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002432:	68f9      	ldr	r1, [r7, #12]
 8002434:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002436:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	3318      	adds	r3, #24
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	440b      	add	r3, r1
 8002440:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6819      	ldr	r1, [r3, #0]
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	691a      	ldr	r2, [r3, #16]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	3318      	adds	r3, #24
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	440b      	add	r3, r1
 8002452:	3304      	adds	r3, #4
 8002454:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	7d1b      	ldrb	r3, [r3, #20]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d111      	bne.n	8002482 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	3318      	adds	r3, #24
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	4413      	add	r3, r2
 800246a:	3304      	adds	r3, #4
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	6811      	ldr	r1, [r2, #0]
 8002472:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	3318      	adds	r3, #24
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	440b      	add	r3, r1
 800247e:	3304      	adds	r3, #4
 8002480:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3307      	adds	r3, #7
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	061a      	lsls	r2, r3, #24
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3306      	adds	r3, #6
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	041b      	lsls	r3, r3, #16
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3305      	adds	r3, #5
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	021b      	lsls	r3, r3, #8
 800249c:	4313      	orrs	r3, r2
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	3204      	adds	r2, #4
 80024a2:	7812      	ldrb	r2, [r2, #0]
 80024a4:	4610      	mov	r0, r2
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	6811      	ldr	r1, [r2, #0]
 80024aa:	ea43 0200 	orr.w	r2, r3, r0
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	440b      	add	r3, r1
 80024b4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80024b8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3303      	adds	r3, #3
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	061a      	lsls	r2, r3, #24
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3302      	adds	r3, #2
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	041b      	lsls	r3, r3, #16
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3301      	adds	r3, #1
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	021b      	lsls	r3, r3, #8
 80024d4:	4313      	orrs	r3, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	7812      	ldrb	r2, [r2, #0]
 80024da:	4610      	mov	r0, r2
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	6811      	ldr	r1, [r2, #0]
 80024e0:	ea43 0200 	orr.w	r2, r3, r0
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	440b      	add	r3, r1
 80024ea:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80024ee:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	3318      	adds	r3, #24
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	4413      	add	r3, r2
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	6811      	ldr	r1, [r2, #0]
 8002502:	f043 0201 	orr.w	r2, r3, #1
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	3318      	adds	r3, #24
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	440b      	add	r3, r1
 800250e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	e00e      	b.n	8002532 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e006      	b.n	8002532 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
  }
}
 8002532:	4618      	mov	r0, r3
 8002534:	3724      	adds	r7, #36	; 0x24
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800253e:	b480      	push	{r7}
 8002540:	b087      	sub	sp, #28
 8002542:	af00      	add	r7, sp, #0
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
 800254a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002552:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002554:	7dfb      	ldrb	r3, [r7, #23]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d003      	beq.n	8002562 <HAL_CAN_GetRxMessage+0x24>
 800255a:	7dfb      	ldrb	r3, [r7, #23]
 800255c:	2b02      	cmp	r3, #2
 800255e:	f040 80f3 	bne.w	8002748 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10e      	bne.n	8002586 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d116      	bne.n	80025a4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e0e7      	b.n	8002756 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	2b00      	cmp	r3, #0
 8002592:	d107      	bne.n	80025a4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0d8      	b.n	8002756 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	331b      	adds	r3, #27
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	4413      	add	r3, r2
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0204 	and.w	r2, r3, #4
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10c      	bne.n	80025dc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	331b      	adds	r3, #27
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	4413      	add	r3, r2
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	0d5b      	lsrs	r3, r3, #21
 80025d2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	e00b      	b.n	80025f4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	331b      	adds	r3, #27
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	4413      	add	r3, r2
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	08db      	lsrs	r3, r3, #3
 80025ec:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	331b      	adds	r3, #27
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	4413      	add	r3, r2
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0202 	and.w	r2, r3, #2
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	331b      	adds	r3, #27
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	4413      	add	r3, r2
 8002616:	3304      	adds	r3, #4
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 020f 	and.w	r2, r3, #15
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	331b      	adds	r3, #27
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	4413      	add	r3, r2
 800262e:	3304      	adds	r3, #4
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	0a1b      	lsrs	r3, r3, #8
 8002634:	b2da      	uxtb	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	331b      	adds	r3, #27
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	4413      	add	r3, r2
 8002646:	3304      	adds	r3, #4
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	0c1b      	lsrs	r3, r3, #16
 800264c:	b29a      	uxth	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	4413      	add	r3, r2
 800265c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	b2da      	uxtb	r2, r3
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	4413      	add	r3, r2
 8002672:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	0a1a      	lsrs	r2, r3, #8
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	3301      	adds	r3, #1
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	4413      	add	r3, r2
 800268c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	0c1a      	lsrs	r2, r3, #16
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	3302      	adds	r3, #2
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	0e1a      	lsrs	r2, r3, #24
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	3303      	adds	r3, #3
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	4413      	add	r3, r2
 80026c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	3304      	adds	r3, #4
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	0a1a      	lsrs	r2, r3, #8
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	3305      	adds	r3, #5
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	0c1a      	lsrs	r2, r3, #16
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	3306      	adds	r3, #6
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	4413      	add	r3, r2
 800270c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	0e1a      	lsrs	r2, r3, #24
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	3307      	adds	r3, #7
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d108      	bne.n	8002734 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0220 	orr.w	r2, r2, #32
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	e007      	b.n	8002744 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691a      	ldr	r2, [r3, #16]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0220 	orr.w	r2, r2, #32
 8002742:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	e006      	b.n	8002756 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
  }
}
 8002756:	4618      	mov	r0, r3
 8002758:	371c      	adds	r7, #28
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002762:	b480      	push	{r7}
 8002764:	b085      	sub	sp, #20
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002772:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d002      	beq.n	8002780 <HAL_CAN_ActivateNotification+0x1e>
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	2b02      	cmp	r3, #2
 800277e:	d109      	bne.n	8002794 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6959      	ldr	r1, [r3, #20]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002790:	2300      	movs	r3, #0
 8002792:	e006      	b.n	80027a2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
  }
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b08a      	sub	sp, #40	; 0x28
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80027b6:	2300      	movs	r3, #0
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d07c      	beq.n	80028ee <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d023      	beq.n	8002846 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2201      	movs	r2, #1
 8002804:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f983 	bl	8002b1c <HAL_CAN_TxMailbox0CompleteCallback>
 8002816:	e016      	b.n	8002846 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b00      	cmp	r3, #0
 8002820:	d004      	beq.n	800282c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
 800282a:	e00c      	b.n	8002846 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b00      	cmp	r3, #0
 8002834:	d004      	beq.n	8002840 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
 800283e:	e002      	b.n	8002846 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f989 	bl	8002b58 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284c:	2b00      	cmp	r3, #0
 800284e:	d024      	beq.n	800289a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002858:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f963 	bl	8002b30 <HAL_CAN_TxMailbox1CompleteCallback>
 800286a:	e016      	b.n	800289a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002872:	2b00      	cmp	r3, #0
 8002874:	d004      	beq.n	8002880 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
 800287e:	e00c      	b.n	800289a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002886:	2b00      	cmp	r3, #0
 8002888:	d004      	beq.n	8002894 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
 8002892:	e002      	b.n	800289a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f969 	bl	8002b6c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d024      	beq.n	80028ee <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f943 	bl	8002b44 <HAL_CAN_TxMailbox2CompleteCallback>
 80028be:	e016      	b.n	80028ee <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d004      	beq.n	80028d4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
 80028d2:	e00c      	b.n	80028ee <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d004      	beq.n	80028e8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
 80028e6:	e002      	b.n	80028ee <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f949 	bl	8002b80 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00c      	beq.n	8002912 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d007      	beq.n	8002912 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002908:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2210      	movs	r2, #16
 8002910:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00b      	beq.n	8002934 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b00      	cmp	r3, #0
 8002924:	d006      	beq.n	8002934 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2208      	movs	r2, #8
 800292c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f93a 	bl	8002ba8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d009      	beq.n	8002952 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f921 	bl	8002b94 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00c      	beq.n	8002976 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	f003 0310 	and.w	r3, r3, #16
 8002962:	2b00      	cmp	r3, #0
 8002964:	d007      	beq.n	8002976 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800296c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2210      	movs	r2, #16
 8002974:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	f003 0320 	and.w	r3, r3, #32
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00b      	beq.n	8002998 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d006      	beq.n	8002998 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2208      	movs	r2, #8
 8002990:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f91c 	bl	8002bd0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	f003 0310 	and.w	r3, r3, #16
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d009      	beq.n	80029b6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	f003 0303 	and.w	r3, r3, #3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 f903 	bl	8002bbc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00b      	beq.n	80029d8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f003 0310 	and.w	r3, r3, #16
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d006      	beq.n	80029d8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2210      	movs	r2, #16
 80029d0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f906 	bl	8002be4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00b      	beq.n	80029fa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d006      	beq.n	80029fa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2208      	movs	r2, #8
 80029f2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 f8ff 	bl	8002bf8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d07b      	beq.n	8002afc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d072      	beq.n	8002af4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	f043 0302 	orr.w	r3, r3, #2
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	f043 0304 	orr.w	r3, r3, #4
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d043      	beq.n	8002af4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d03e      	beq.n	8002af4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a7c:	2b60      	cmp	r3, #96	; 0x60
 8002a7e:	d02b      	beq.n	8002ad8 <HAL_CAN_IRQHandler+0x32a>
 8002a80:	2b60      	cmp	r3, #96	; 0x60
 8002a82:	d82e      	bhi.n	8002ae2 <HAL_CAN_IRQHandler+0x334>
 8002a84:	2b50      	cmp	r3, #80	; 0x50
 8002a86:	d022      	beq.n	8002ace <HAL_CAN_IRQHandler+0x320>
 8002a88:	2b50      	cmp	r3, #80	; 0x50
 8002a8a:	d82a      	bhi.n	8002ae2 <HAL_CAN_IRQHandler+0x334>
 8002a8c:	2b40      	cmp	r3, #64	; 0x40
 8002a8e:	d019      	beq.n	8002ac4 <HAL_CAN_IRQHandler+0x316>
 8002a90:	2b40      	cmp	r3, #64	; 0x40
 8002a92:	d826      	bhi.n	8002ae2 <HAL_CAN_IRQHandler+0x334>
 8002a94:	2b30      	cmp	r3, #48	; 0x30
 8002a96:	d010      	beq.n	8002aba <HAL_CAN_IRQHandler+0x30c>
 8002a98:	2b30      	cmp	r3, #48	; 0x30
 8002a9a:	d822      	bhi.n	8002ae2 <HAL_CAN_IRQHandler+0x334>
 8002a9c:	2b10      	cmp	r3, #16
 8002a9e:	d002      	beq.n	8002aa6 <HAL_CAN_IRQHandler+0x2f8>
 8002aa0:	2b20      	cmp	r3, #32
 8002aa2:	d005      	beq.n	8002ab0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002aa4:	e01d      	b.n	8002ae2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	f043 0308 	orr.w	r3, r3, #8
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002aae:	e019      	b.n	8002ae4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	f043 0310 	orr.w	r3, r3, #16
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ab8:	e014      	b.n	8002ae4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	f043 0320 	orr.w	r3, r3, #32
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ac2:	e00f      	b.n	8002ae4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002acc:	e00a      	b.n	8002ae4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ad6:	e005      	b.n	8002ae4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ae0:	e000      	b.n	8002ae4 <HAL_CAN_IRQHandler+0x336>
            break;
 8002ae2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699a      	ldr	r2, [r3, #24]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002af2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2204      	movs	r2, #4
 8002afa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d008      	beq.n	8002b14 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f87c 	bl	8002c0c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002b14:	bf00      	nop
 8002b16:	3728      	adds	r7, #40	; 0x28
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <__NVIC_SetPriorityGrouping+0x44>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c52:	4a04      	ldr	r2, [pc, #16]	; (8002c64 <__NVIC_SetPriorityGrouping+0x44>)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	60d3      	str	r3, [r2, #12]
}
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c6c:	4b04      	ldr	r3, [pc, #16]	; (8002c80 <__NVIC_GetPriorityGrouping+0x18>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	0a1b      	lsrs	r3, r3, #8
 8002c72:	f003 0307 	and.w	r3, r3, #7
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	db0b      	blt.n	8002cae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	f003 021f 	and.w	r2, r3, #31
 8002c9c:	4907      	ldr	r1, [pc, #28]	; (8002cbc <__NVIC_EnableIRQ+0x38>)
 8002c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca2:	095b      	lsrs	r3, r3, #5
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8002caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	e000e100 	.word	0xe000e100

08002cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	6039      	str	r1, [r7, #0]
 8002cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	db0a      	blt.n	8002cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	490c      	ldr	r1, [pc, #48]	; (8002d0c <__NVIC_SetPriority+0x4c>)
 8002cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cde:	0112      	lsls	r2, r2, #4
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ce8:	e00a      	b.n	8002d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	4908      	ldr	r1, [pc, #32]	; (8002d10 <__NVIC_SetPriority+0x50>)
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	3b04      	subs	r3, #4
 8002cf8:	0112      	lsls	r2, r2, #4
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	761a      	strb	r2, [r3, #24]
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	e000e100 	.word	0xe000e100
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b089      	sub	sp, #36	; 0x24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f1c3 0307 	rsb	r3, r3, #7
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	bf28      	it	cs
 8002d32:	2304      	movcs	r3, #4
 8002d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	2b06      	cmp	r3, #6
 8002d3c:	d902      	bls.n	8002d44 <NVIC_EncodePriority+0x30>
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	3b03      	subs	r3, #3
 8002d42:	e000      	b.n	8002d46 <NVIC_EncodePriority+0x32>
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d48:	f04f 32ff 	mov.w	r2, #4294967295
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	43da      	mvns	r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	401a      	ands	r2, r3
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	fa01 f303 	lsl.w	r3, r1, r3
 8002d66:	43d9      	mvns	r1, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d6c:	4313      	orrs	r3, r2
         );
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3724      	adds	r7, #36	; 0x24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b082      	sub	sp, #8
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7ff ff4c 	bl	8002c20 <__NVIC_SetPriorityGrouping>
}
 8002d88:	bf00      	nop
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002da2:	f7ff ff61 	bl	8002c68 <__NVIC_GetPriorityGrouping>
 8002da6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	68b9      	ldr	r1, [r7, #8]
 8002dac:	6978      	ldr	r0, [r7, #20]
 8002dae:	f7ff ffb1 	bl	8002d14 <NVIC_EncodePriority>
 8002db2:	4602      	mov	r2, r0
 8002db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002db8:	4611      	mov	r1, r2
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff ff80 	bl	8002cc0 <__NVIC_SetPriority>
}
 8002dc0:	bf00      	nop
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff ff54 	bl	8002c84 <__NVIC_EnableIRQ>
}
 8002ddc:	bf00      	nop
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002df0:	f7ff f87a 	bl	8001ee8 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e099      	b.n	8002f34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0201 	bic.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e20:	e00f      	b.n	8002e42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e22:	f7ff f861 	bl	8001ee8 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b05      	cmp	r3, #5
 8002e2e:	d908      	bls.n	8002e42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2203      	movs	r2, #3
 8002e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e078      	b.n	8002f34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1e8      	bne.n	8002e22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	4b38      	ldr	r3, [pc, #224]	; (8002f3c <HAL_DMA_Init+0x158>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d107      	bne.n	8002eac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f023 0307 	bic.w	r3, r3, #7
 8002ec2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d117      	bne.n	8002f06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00e      	beq.n	8002f06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 fadf 	bl	80034ac <DMA_CheckFifoParam>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d008      	beq.n	8002f06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2240      	movs	r2, #64	; 0x40
 8002ef8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f02:	2301      	movs	r3, #1
 8002f04:	e016      	b.n	8002f34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 fa96 	bl	8003440 <DMA_CalcBaseAndBitshift>
 8002f14:	4603      	mov	r3, r0
 8002f16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1c:	223f      	movs	r2, #63	; 0x3f
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	f010803f 	.word	0xf010803f

08002f40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
 8002f4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_DMA_Start_IT+0x26>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e040      	b.n	8002fe8 <HAL_DMA_Start_IT+0xa8>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d12f      	bne.n	8002fda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 fa28 	bl	80033e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f98:	223f      	movs	r2, #63	; 0x3f
 8002f9a:	409a      	lsls	r2, r3
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0216 	orr.w	r2, r2, #22
 8002fae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d007      	beq.n	8002fc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0208 	orr.w	r2, r2, #8
 8002fc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	e005      	b.n	8002fe6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ffe:	f7fe ff73 	bl	8001ee8 <HAL_GetTick>
 8003002:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d008      	beq.n	8003022 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2280      	movs	r2, #128	; 0x80
 8003014:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e052      	b.n	80030c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0216 	bic.w	r2, r2, #22
 8003030:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695a      	ldr	r2, [r3, #20]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003040:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	2b00      	cmp	r3, #0
 8003048:	d103      	bne.n	8003052 <HAL_DMA_Abort+0x62>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800304e:	2b00      	cmp	r3, #0
 8003050:	d007      	beq.n	8003062 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0208 	bic.w	r2, r2, #8
 8003060:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0201 	bic.w	r2, r2, #1
 8003070:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003072:	e013      	b.n	800309c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003074:	f7fe ff38 	bl	8001ee8 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b05      	cmp	r3, #5
 8003080:	d90c      	bls.n	800309c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2220      	movs	r2, #32
 8003086:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2203      	movs	r2, #3
 800308c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e015      	b.n	80030c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1e4      	bne.n	8003074 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ae:	223f      	movs	r2, #63	; 0x3f
 80030b0:	409a      	lsls	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030dc:	4b92      	ldr	r3, [pc, #584]	; (8003328 <HAL_DMA_IRQHandler+0x258>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a92      	ldr	r2, [pc, #584]	; (800332c <HAL_DMA_IRQHandler+0x25c>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	0a9b      	lsrs	r3, r3, #10
 80030e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fa:	2208      	movs	r2, #8
 80030fc:	409a      	lsls	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4013      	ands	r3, r2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d01a      	beq.n	800313c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	d013      	beq.n	800313c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0204 	bic.w	r2, r2, #4
 8003122:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003128:	2208      	movs	r2, #8
 800312a:	409a      	lsls	r2, r3
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003134:	f043 0201 	orr.w	r2, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003140:	2201      	movs	r2, #1
 8003142:	409a      	lsls	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4013      	ands	r3, r2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d012      	beq.n	8003172 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00b      	beq.n	8003172 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315e:	2201      	movs	r2, #1
 8003160:	409a      	lsls	r2, r3
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316a:	f043 0202 	orr.w	r2, r3, #2
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003176:	2204      	movs	r2, #4
 8003178:	409a      	lsls	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	4013      	ands	r3, r2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d012      	beq.n	80031a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00b      	beq.n	80031a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003194:	2204      	movs	r2, #4
 8003196:	409a      	lsls	r2, r3
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a0:	f043 0204 	orr.w	r2, r3, #4
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ac:	2210      	movs	r2, #16
 80031ae:	409a      	lsls	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d043      	beq.n	8003240 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d03c      	beq.n	8003240 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ca:	2210      	movs	r2, #16
 80031cc:	409a      	lsls	r2, r3
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d018      	beq.n	8003212 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d108      	bne.n	8003200 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d024      	beq.n	8003240 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	4798      	blx	r3
 80031fe:	e01f      	b.n	8003240 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003204:	2b00      	cmp	r3, #0
 8003206:	d01b      	beq.n	8003240 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	4798      	blx	r3
 8003210:	e016      	b.n	8003240 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321c:	2b00      	cmp	r3, #0
 800321e:	d107      	bne.n	8003230 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0208 	bic.w	r2, r2, #8
 800322e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003244:	2220      	movs	r2, #32
 8003246:	409a      	lsls	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4013      	ands	r3, r2
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 808e 	beq.w	800336e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0310 	and.w	r3, r3, #16
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 8086 	beq.w	800336e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003266:	2220      	movs	r2, #32
 8003268:	409a      	lsls	r2, r3
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b05      	cmp	r3, #5
 8003278:	d136      	bne.n	80032e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0216 	bic.w	r2, r2, #22
 8003288:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695a      	ldr	r2, [r3, #20]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003298:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d103      	bne.n	80032aa <HAL_DMA_IRQHandler+0x1da>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d007      	beq.n	80032ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0208 	bic.w	r2, r2, #8
 80032b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032be:	223f      	movs	r2, #63	; 0x3f
 80032c0:	409a      	lsls	r2, r3
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d07d      	beq.n	80033da <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	4798      	blx	r3
        }
        return;
 80032e6:	e078      	b.n	80033da <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d01c      	beq.n	8003330 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d108      	bne.n	8003316 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003308:	2b00      	cmp	r3, #0
 800330a:	d030      	beq.n	800336e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	4798      	blx	r3
 8003314:	e02b      	b.n	800336e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331a:	2b00      	cmp	r3, #0
 800331c:	d027      	beq.n	800336e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	4798      	blx	r3
 8003326:	e022      	b.n	800336e <HAL_DMA_IRQHandler+0x29e>
 8003328:	20000004 	.word	0x20000004
 800332c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10f      	bne.n	800335e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0210 	bic.w	r2, r2, #16
 800334c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003372:	2b00      	cmp	r3, #0
 8003374:	d032      	beq.n	80033dc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d022      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2205      	movs	r2, #5
 8003386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0201 	bic.w	r2, r2, #1
 8003398:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	3301      	adds	r3, #1
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d307      	bcc.n	80033b6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1f2      	bne.n	800339a <HAL_DMA_IRQHandler+0x2ca>
 80033b4:	e000      	b.n	80033b8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80033b6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d005      	beq.n	80033dc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	4798      	blx	r3
 80033d8:	e000      	b.n	80033dc <HAL_DMA_IRQHandler+0x30c>
        return;
 80033da:	bf00      	nop
    }
  }
}
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop

080033e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
 80033f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003400:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2b40      	cmp	r3, #64	; 0x40
 8003410:	d108      	bne.n	8003424 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003422:	e007      	b.n	8003434 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	60da      	str	r2, [r3, #12]
}
 8003434:	bf00      	nop
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	b2db      	uxtb	r3, r3
 800344e:	3b10      	subs	r3, #16
 8003450:	4a14      	ldr	r2, [pc, #80]	; (80034a4 <DMA_CalcBaseAndBitshift+0x64>)
 8003452:	fba2 2303 	umull	r2, r3, r2, r3
 8003456:	091b      	lsrs	r3, r3, #4
 8003458:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800345a:	4a13      	ldr	r2, [pc, #76]	; (80034a8 <DMA_CalcBaseAndBitshift+0x68>)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4413      	add	r3, r2
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2b03      	cmp	r3, #3
 800346c:	d909      	bls.n	8003482 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003476:	f023 0303 	bic.w	r3, r3, #3
 800347a:	1d1a      	adds	r2, r3, #4
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	659a      	str	r2, [r3, #88]	; 0x58
 8003480:	e007      	b.n	8003492 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800348a:	f023 0303 	bic.w	r3, r3, #3
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003496:	4618      	mov	r0, r3
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	aaaaaaab 	.word	0xaaaaaaab
 80034a8:	080106a4 	.word	0x080106a4

080034ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d11f      	bne.n	8003506 <DMA_CheckFifoParam+0x5a>
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d856      	bhi.n	800357a <DMA_CheckFifoParam+0xce>
 80034cc:	a201      	add	r2, pc, #4	; (adr r2, 80034d4 <DMA_CheckFifoParam+0x28>)
 80034ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d2:	bf00      	nop
 80034d4:	080034e5 	.word	0x080034e5
 80034d8:	080034f7 	.word	0x080034f7
 80034dc:	080034e5 	.word	0x080034e5
 80034e0:	0800357b 	.word	0x0800357b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d046      	beq.n	800357e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034f4:	e043      	b.n	800357e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034fe:	d140      	bne.n	8003582 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003504:	e03d      	b.n	8003582 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800350e:	d121      	bne.n	8003554 <DMA_CheckFifoParam+0xa8>
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2b03      	cmp	r3, #3
 8003514:	d837      	bhi.n	8003586 <DMA_CheckFifoParam+0xda>
 8003516:	a201      	add	r2, pc, #4	; (adr r2, 800351c <DMA_CheckFifoParam+0x70>)
 8003518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351c:	0800352d 	.word	0x0800352d
 8003520:	08003533 	.word	0x08003533
 8003524:	0800352d 	.word	0x0800352d
 8003528:	08003545 	.word	0x08003545
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	73fb      	strb	r3, [r7, #15]
      break;
 8003530:	e030      	b.n	8003594 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003536:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d025      	beq.n	800358a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003542:	e022      	b.n	800358a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003548:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800354c:	d11f      	bne.n	800358e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003552:	e01c      	b.n	800358e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	2b02      	cmp	r3, #2
 8003558:	d903      	bls.n	8003562 <DMA_CheckFifoParam+0xb6>
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2b03      	cmp	r3, #3
 800355e:	d003      	beq.n	8003568 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003560:	e018      	b.n	8003594 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	73fb      	strb	r3, [r7, #15]
      break;
 8003566:	e015      	b.n	8003594 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00e      	beq.n	8003592 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	73fb      	strb	r3, [r7, #15]
      break;
 8003578:	e00b      	b.n	8003592 <DMA_CheckFifoParam+0xe6>
      break;
 800357a:	bf00      	nop
 800357c:	e00a      	b.n	8003594 <DMA_CheckFifoParam+0xe8>
      break;
 800357e:	bf00      	nop
 8003580:	e008      	b.n	8003594 <DMA_CheckFifoParam+0xe8>
      break;
 8003582:	bf00      	nop
 8003584:	e006      	b.n	8003594 <DMA_CheckFifoParam+0xe8>
      break;
 8003586:	bf00      	nop
 8003588:	e004      	b.n	8003594 <DMA_CheckFifoParam+0xe8>
      break;
 800358a:	bf00      	nop
 800358c:	e002      	b.n	8003594 <DMA_CheckFifoParam+0xe8>
      break;   
 800358e:	bf00      	nop
 8003590:	e000      	b.n	8003594 <DMA_CheckFifoParam+0xe8>
      break;
 8003592:	bf00      	nop
    }
  } 
  
  return status; 
 8003594:	7bfb      	ldrb	r3, [r7, #15]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop

080035a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b089      	sub	sp, #36	; 0x24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ba:	2300      	movs	r3, #0
 80035bc:	61fb      	str	r3, [r7, #28]
 80035be:	e16b      	b.n	8003898 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035c0:	2201      	movs	r2, #1
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	4013      	ands	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	429a      	cmp	r2, r3
 80035da:	f040 815a 	bne.w	8003892 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d005      	beq.n	80035f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d130      	bne.n	8003658 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	2203      	movs	r2, #3
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	43db      	mvns	r3, r3
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4013      	ands	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4313      	orrs	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800362c:	2201      	movs	r2, #1
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	43db      	mvns	r3, r3
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4013      	ands	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	091b      	lsrs	r3, r3, #4
 8003642:	f003 0201 	and.w	r2, r3, #1
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4313      	orrs	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f003 0303 	and.w	r3, r3, #3
 8003660:	2b03      	cmp	r3, #3
 8003662:	d017      	beq.n	8003694 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	2203      	movs	r2, #3
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	43db      	mvns	r3, r3
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	4013      	ands	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4313      	orrs	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f003 0303 	and.w	r3, r3, #3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d123      	bne.n	80036e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	08da      	lsrs	r2, r3, #3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3208      	adds	r2, #8
 80036a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	220f      	movs	r2, #15
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	43db      	mvns	r3, r3
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4013      	ands	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	691a      	ldr	r2, [r3, #16]
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	08da      	lsrs	r2, r3, #3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3208      	adds	r2, #8
 80036e2:	69b9      	ldr	r1, [r7, #24]
 80036e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	2203      	movs	r2, #3
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4013      	ands	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 0203 	and.w	r2, r3, #3
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4313      	orrs	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 80b4 	beq.w	8003892 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800372a:	2300      	movs	r3, #0
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	4b60      	ldr	r3, [pc, #384]	; (80038b0 <HAL_GPIO_Init+0x30c>)
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	4a5f      	ldr	r2, [pc, #380]	; (80038b0 <HAL_GPIO_Init+0x30c>)
 8003734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003738:	6453      	str	r3, [r2, #68]	; 0x44
 800373a:	4b5d      	ldr	r3, [pc, #372]	; (80038b0 <HAL_GPIO_Init+0x30c>)
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003746:	4a5b      	ldr	r2, [pc, #364]	; (80038b4 <HAL_GPIO_Init+0x310>)
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	089b      	lsrs	r3, r3, #2
 800374c:	3302      	adds	r3, #2
 800374e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003752:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	220f      	movs	r2, #15
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43db      	mvns	r3, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4013      	ands	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a52      	ldr	r2, [pc, #328]	; (80038b8 <HAL_GPIO_Init+0x314>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d02b      	beq.n	80037ca <HAL_GPIO_Init+0x226>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a51      	ldr	r2, [pc, #324]	; (80038bc <HAL_GPIO_Init+0x318>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d025      	beq.n	80037c6 <HAL_GPIO_Init+0x222>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a50      	ldr	r2, [pc, #320]	; (80038c0 <HAL_GPIO_Init+0x31c>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d01f      	beq.n	80037c2 <HAL_GPIO_Init+0x21e>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a4f      	ldr	r2, [pc, #316]	; (80038c4 <HAL_GPIO_Init+0x320>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d019      	beq.n	80037be <HAL_GPIO_Init+0x21a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a4e      	ldr	r2, [pc, #312]	; (80038c8 <HAL_GPIO_Init+0x324>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d013      	beq.n	80037ba <HAL_GPIO_Init+0x216>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a4d      	ldr	r2, [pc, #308]	; (80038cc <HAL_GPIO_Init+0x328>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00d      	beq.n	80037b6 <HAL_GPIO_Init+0x212>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a4c      	ldr	r2, [pc, #304]	; (80038d0 <HAL_GPIO_Init+0x32c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d007      	beq.n	80037b2 <HAL_GPIO_Init+0x20e>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a4b      	ldr	r2, [pc, #300]	; (80038d4 <HAL_GPIO_Init+0x330>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d101      	bne.n	80037ae <HAL_GPIO_Init+0x20a>
 80037aa:	2307      	movs	r3, #7
 80037ac:	e00e      	b.n	80037cc <HAL_GPIO_Init+0x228>
 80037ae:	2308      	movs	r3, #8
 80037b0:	e00c      	b.n	80037cc <HAL_GPIO_Init+0x228>
 80037b2:	2306      	movs	r3, #6
 80037b4:	e00a      	b.n	80037cc <HAL_GPIO_Init+0x228>
 80037b6:	2305      	movs	r3, #5
 80037b8:	e008      	b.n	80037cc <HAL_GPIO_Init+0x228>
 80037ba:	2304      	movs	r3, #4
 80037bc:	e006      	b.n	80037cc <HAL_GPIO_Init+0x228>
 80037be:	2303      	movs	r3, #3
 80037c0:	e004      	b.n	80037cc <HAL_GPIO_Init+0x228>
 80037c2:	2302      	movs	r3, #2
 80037c4:	e002      	b.n	80037cc <HAL_GPIO_Init+0x228>
 80037c6:	2301      	movs	r3, #1
 80037c8:	e000      	b.n	80037cc <HAL_GPIO_Init+0x228>
 80037ca:	2300      	movs	r3, #0
 80037cc:	69fa      	ldr	r2, [r7, #28]
 80037ce:	f002 0203 	and.w	r2, r2, #3
 80037d2:	0092      	lsls	r2, r2, #2
 80037d4:	4093      	lsls	r3, r2
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4313      	orrs	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037dc:	4935      	ldr	r1, [pc, #212]	; (80038b4 <HAL_GPIO_Init+0x310>)
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	089b      	lsrs	r3, r3, #2
 80037e2:	3302      	adds	r3, #2
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037ea:	4b3b      	ldr	r3, [pc, #236]	; (80038d8 <HAL_GPIO_Init+0x334>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	43db      	mvns	r3, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4013      	ands	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	4313      	orrs	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800380e:	4a32      	ldr	r2, [pc, #200]	; (80038d8 <HAL_GPIO_Init+0x334>)
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003814:	4b30      	ldr	r3, [pc, #192]	; (80038d8 <HAL_GPIO_Init+0x334>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	43db      	mvns	r3, r3
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	4013      	ands	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003838:	4a27      	ldr	r2, [pc, #156]	; (80038d8 <HAL_GPIO_Init+0x334>)
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800383e:	4b26      	ldr	r3, [pc, #152]	; (80038d8 <HAL_GPIO_Init+0x334>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	43db      	mvns	r3, r3
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4013      	ands	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	4313      	orrs	r3, r2
 8003860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003862:	4a1d      	ldr	r2, [pc, #116]	; (80038d8 <HAL_GPIO_Init+0x334>)
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003868:	4b1b      	ldr	r3, [pc, #108]	; (80038d8 <HAL_GPIO_Init+0x334>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	43db      	mvns	r3, r3
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4013      	ands	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	4313      	orrs	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800388c:	4a12      	ldr	r2, [pc, #72]	; (80038d8 <HAL_GPIO_Init+0x334>)
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	3301      	adds	r3, #1
 8003896:	61fb      	str	r3, [r7, #28]
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	2b0f      	cmp	r3, #15
 800389c:	f67f ae90 	bls.w	80035c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038a0:	bf00      	nop
 80038a2:	bf00      	nop
 80038a4:	3724      	adds	r7, #36	; 0x24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	40023800 	.word	0x40023800
 80038b4:	40013800 	.word	0x40013800
 80038b8:	40020000 	.word	0x40020000
 80038bc:	40020400 	.word	0x40020400
 80038c0:	40020800 	.word	0x40020800
 80038c4:	40020c00 	.word	0x40020c00
 80038c8:	40021000 	.word	0x40021000
 80038cc:	40021400 	.word	0x40021400
 80038d0:	40021800 	.word	0x40021800
 80038d4:	40021c00 	.word	0x40021c00
 80038d8:	40013c00 	.word	0x40013c00

080038dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	460b      	mov	r3, r1
 80038e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	887b      	ldrh	r3, [r7, #2]
 80038ee:	4013      	ands	r3, r2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038f4:	2301      	movs	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
 80038f8:	e001      	b.n	80038fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038fa:	2300      	movs	r3, #0
 80038fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	460b      	mov	r3, r1
 8003916:	807b      	strh	r3, [r7, #2]
 8003918:	4613      	mov	r3, r2
 800391a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800391c:	787b      	ldrb	r3, [r7, #1]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003922:	887a      	ldrh	r2, [r7, #2]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003928:	e003      	b.n	8003932 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800392a:	887b      	ldrh	r3, [r7, #2]
 800392c:	041a      	lsls	r2, r3, #16
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	619a      	str	r2, [r3, #24]
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
	...

08003940 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800394a:	4b08      	ldr	r3, [pc, #32]	; (800396c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800394c:	695a      	ldr	r2, [r3, #20]
 800394e:	88fb      	ldrh	r3, [r7, #6]
 8003950:	4013      	ands	r3, r2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d006      	beq.n	8003964 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003956:	4a05      	ldr	r2, [pc, #20]	; (800396c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003958:	88fb      	ldrh	r3, [r7, #6]
 800395a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800395c:	88fb      	ldrh	r3, [r7, #6]
 800395e:	4618      	mov	r0, r3
 8003960:	f000 f806 	bl	8003970 <HAL_GPIO_EXTI_Callback>
  }
}
 8003964:	bf00      	nop
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40013c00 	.word	0x40013c00

08003970 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	4603      	mov	r3, r0
 8003978:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800397a:	bf00      	nop
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003986:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003988:	b08f      	sub	sp, #60	; 0x3c
 800398a:	af0a      	add	r7, sp, #40	; 0x28
 800398c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e054      	b.n	8003a42 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d106      	bne.n	80039b8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f00b fada 	bl	800ef6c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2203      	movs	r2, #3
 80039bc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d102      	bne.n	80039d2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f004 ff88 	bl	80088ec <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	603b      	str	r3, [r7, #0]
 80039e2:	687e      	ldr	r6, [r7, #4]
 80039e4:	466d      	mov	r5, sp
 80039e6:	f106 0410 	add.w	r4, r6, #16
 80039ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80039fa:	1d33      	adds	r3, r6, #4
 80039fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039fe:	6838      	ldr	r0, [r7, #0]
 8003a00:	f004 ff02 	bl	8008808 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2101      	movs	r1, #1
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f004 ff7f 	bl	800890e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	603b      	str	r3, [r7, #0]
 8003a16:	687e      	ldr	r6, [r7, #4]
 8003a18:	466d      	mov	r5, sp
 8003a1a:	f106 0410 	add.w	r4, r6, #16
 8003a1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a2e:	1d33      	adds	r3, r6, #4
 8003a30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a32:	6838      	ldr	r0, [r7, #0]
 8003a34:	f005 f8e6 	bl	8008c04 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a4a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003a4a:	b590      	push	{r4, r7, lr}
 8003a4c:	b089      	sub	sp, #36	; 0x24
 8003a4e:	af04      	add	r7, sp, #16
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	4608      	mov	r0, r1
 8003a54:	4611      	mov	r1, r2
 8003a56:	461a      	mov	r2, r3
 8003a58:	4603      	mov	r3, r0
 8003a5a:	70fb      	strb	r3, [r7, #3]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	70bb      	strb	r3, [r7, #2]
 8003a60:	4613      	mov	r3, r2
 8003a62:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d101      	bne.n	8003a72 <HAL_HCD_HC_Init+0x28>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	e076      	b.n	8003b60 <HAL_HCD_HC_Init+0x116>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003a7a:	78fb      	ldrb	r3, [r7, #3]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	212c      	movs	r1, #44	; 0x2c
 8003a80:	fb01 f303 	mul.w	r3, r1, r3
 8003a84:	4413      	add	r3, r2
 8003a86:	333d      	adds	r3, #61	; 0x3d
 8003a88:	2200      	movs	r2, #0
 8003a8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003a8c:	78fb      	ldrb	r3, [r7, #3]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	212c      	movs	r1, #44	; 0x2c
 8003a92:	fb01 f303 	mul.w	r3, r1, r3
 8003a96:	4413      	add	r3, r2
 8003a98:	3338      	adds	r3, #56	; 0x38
 8003a9a:	787a      	ldrb	r2, [r7, #1]
 8003a9c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003a9e:	78fb      	ldrb	r3, [r7, #3]
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	212c      	movs	r1, #44	; 0x2c
 8003aa4:	fb01 f303 	mul.w	r3, r1, r3
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3340      	adds	r3, #64	; 0x40
 8003aac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003aae:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	212c      	movs	r1, #44	; 0x2c
 8003ab6:	fb01 f303 	mul.w	r3, r1, r3
 8003aba:	4413      	add	r3, r2
 8003abc:	3339      	adds	r3, #57	; 0x39
 8003abe:	78fa      	ldrb	r2, [r7, #3]
 8003ac0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003ac2:	78fb      	ldrb	r3, [r7, #3]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	212c      	movs	r1, #44	; 0x2c
 8003ac8:	fb01 f303 	mul.w	r3, r1, r3
 8003acc:	4413      	add	r3, r2
 8003ace:	333f      	adds	r3, #63	; 0x3f
 8003ad0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003ad4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003ad6:	78fb      	ldrb	r3, [r7, #3]
 8003ad8:	78ba      	ldrb	r2, [r7, #2]
 8003ada:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ade:	b2d0      	uxtb	r0, r2
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	212c      	movs	r1, #44	; 0x2c
 8003ae4:	fb01 f303 	mul.w	r3, r1, r3
 8003ae8:	4413      	add	r3, r2
 8003aea:	333a      	adds	r3, #58	; 0x3a
 8003aec:	4602      	mov	r2, r0
 8003aee:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003af0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	da09      	bge.n	8003b0c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003af8:	78fb      	ldrb	r3, [r7, #3]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	212c      	movs	r1, #44	; 0x2c
 8003afe:	fb01 f303 	mul.w	r3, r1, r3
 8003b02:	4413      	add	r3, r2
 8003b04:	333b      	adds	r3, #59	; 0x3b
 8003b06:	2201      	movs	r2, #1
 8003b08:	701a      	strb	r2, [r3, #0]
 8003b0a:	e008      	b.n	8003b1e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003b0c:	78fb      	ldrb	r3, [r7, #3]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	212c      	movs	r1, #44	; 0x2c
 8003b12:	fb01 f303 	mul.w	r3, r1, r3
 8003b16:	4413      	add	r3, r2
 8003b18:	333b      	adds	r3, #59	; 0x3b
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003b1e:	78fb      	ldrb	r3, [r7, #3]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	212c      	movs	r1, #44	; 0x2c
 8003b24:	fb01 f303 	mul.w	r3, r1, r3
 8003b28:	4413      	add	r3, r2
 8003b2a:	333c      	adds	r3, #60	; 0x3c
 8003b2c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003b30:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	787c      	ldrb	r4, [r7, #1]
 8003b38:	78ba      	ldrb	r2, [r7, #2]
 8003b3a:	78f9      	ldrb	r1, [r7, #3]
 8003b3c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003b3e:	9302      	str	r3, [sp, #8]
 8003b40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003b44:	9301      	str	r3, [sp, #4]
 8003b46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	4623      	mov	r3, r4
 8003b4e:	f005 f9d3 	bl	8008ef8 <USB_HC_Init>
 8003b52:	4603      	mov	r3, r0
 8003b54:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3714      	adds	r7, #20
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd90      	pop	{r4, r7, pc}

08003b68 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003b74:	2300      	movs	r3, #0
 8003b76:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d101      	bne.n	8003b86 <HAL_HCD_HC_Halt+0x1e>
 8003b82:	2302      	movs	r3, #2
 8003b84:	e00f      	b.n	8003ba6 <HAL_HCD_HC_Halt+0x3e>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	78fa      	ldrb	r2, [r7, #3]
 8003b94:	4611      	mov	r1, r2
 8003b96:	4618      	mov	r0, r3
 8003b98:	f005 fc0f 	bl	80093ba <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	4608      	mov	r0, r1
 8003bba:	4611      	mov	r1, r2
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	70fb      	strb	r3, [r7, #3]
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	70bb      	strb	r3, [r7, #2]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003bca:	78fb      	ldrb	r3, [r7, #3]
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	212c      	movs	r1, #44	; 0x2c
 8003bd0:	fb01 f303 	mul.w	r3, r1, r3
 8003bd4:	4413      	add	r3, r2
 8003bd6:	333b      	adds	r3, #59	; 0x3b
 8003bd8:	78ba      	ldrb	r2, [r7, #2]
 8003bda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003bdc:	78fb      	ldrb	r3, [r7, #3]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	212c      	movs	r1, #44	; 0x2c
 8003be2:	fb01 f303 	mul.w	r3, r1, r3
 8003be6:	4413      	add	r3, r2
 8003be8:	333f      	adds	r3, #63	; 0x3f
 8003bea:	787a      	ldrb	r2, [r7, #1]
 8003bec:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003bee:	7c3b      	ldrb	r3, [r7, #16]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d112      	bne.n	8003c1a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003bf4:	78fb      	ldrb	r3, [r7, #3]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	212c      	movs	r1, #44	; 0x2c
 8003bfa:	fb01 f303 	mul.w	r3, r1, r3
 8003bfe:	4413      	add	r3, r2
 8003c00:	3342      	adds	r3, #66	; 0x42
 8003c02:	2203      	movs	r2, #3
 8003c04:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003c06:	78fb      	ldrb	r3, [r7, #3]
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	212c      	movs	r1, #44	; 0x2c
 8003c0c:	fb01 f303 	mul.w	r3, r1, r3
 8003c10:	4413      	add	r3, r2
 8003c12:	333d      	adds	r3, #61	; 0x3d
 8003c14:	7f3a      	ldrb	r2, [r7, #28]
 8003c16:	701a      	strb	r2, [r3, #0]
 8003c18:	e008      	b.n	8003c2c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c1a:	78fb      	ldrb	r3, [r7, #3]
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	212c      	movs	r1, #44	; 0x2c
 8003c20:	fb01 f303 	mul.w	r3, r1, r3
 8003c24:	4413      	add	r3, r2
 8003c26:	3342      	adds	r3, #66	; 0x42
 8003c28:	2202      	movs	r2, #2
 8003c2a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003c2c:	787b      	ldrb	r3, [r7, #1]
 8003c2e:	2b03      	cmp	r3, #3
 8003c30:	f200 80c6 	bhi.w	8003dc0 <HAL_HCD_HC_SubmitRequest+0x210>
 8003c34:	a201      	add	r2, pc, #4	; (adr r2, 8003c3c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3a:	bf00      	nop
 8003c3c:	08003c4d 	.word	0x08003c4d
 8003c40:	08003dad 	.word	0x08003dad
 8003c44:	08003cb1 	.word	0x08003cb1
 8003c48:	08003d2f 	.word	0x08003d2f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003c4c:	7c3b      	ldrb	r3, [r7, #16]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	f040 80b8 	bne.w	8003dc4 <HAL_HCD_HC_SubmitRequest+0x214>
 8003c54:	78bb      	ldrb	r3, [r7, #2]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f040 80b4 	bne.w	8003dc4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003c5c:	8b3b      	ldrh	r3, [r7, #24]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d108      	bne.n	8003c74 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003c62:	78fb      	ldrb	r3, [r7, #3]
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	212c      	movs	r1, #44	; 0x2c
 8003c68:	fb01 f303 	mul.w	r3, r1, r3
 8003c6c:	4413      	add	r3, r2
 8003c6e:	3355      	adds	r3, #85	; 0x55
 8003c70:	2201      	movs	r2, #1
 8003c72:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003c74:	78fb      	ldrb	r3, [r7, #3]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	212c      	movs	r1, #44	; 0x2c
 8003c7a:	fb01 f303 	mul.w	r3, r1, r3
 8003c7e:	4413      	add	r3, r2
 8003c80:	3355      	adds	r3, #85	; 0x55
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d109      	bne.n	8003c9c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	212c      	movs	r1, #44	; 0x2c
 8003c8e:	fb01 f303 	mul.w	r3, r1, r3
 8003c92:	4413      	add	r3, r2
 8003c94:	3342      	adds	r3, #66	; 0x42
 8003c96:	2200      	movs	r2, #0
 8003c98:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003c9a:	e093      	b.n	8003dc4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c9c:	78fb      	ldrb	r3, [r7, #3]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	212c      	movs	r1, #44	; 0x2c
 8003ca2:	fb01 f303 	mul.w	r3, r1, r3
 8003ca6:	4413      	add	r3, r2
 8003ca8:	3342      	adds	r3, #66	; 0x42
 8003caa:	2202      	movs	r2, #2
 8003cac:	701a      	strb	r2, [r3, #0]
      break;
 8003cae:	e089      	b.n	8003dc4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003cb0:	78bb      	ldrb	r3, [r7, #2]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d11d      	bne.n	8003cf2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003cb6:	78fb      	ldrb	r3, [r7, #3]
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	212c      	movs	r1, #44	; 0x2c
 8003cbc:	fb01 f303 	mul.w	r3, r1, r3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	3355      	adds	r3, #85	; 0x55
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d109      	bne.n	8003cde <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003cca:	78fb      	ldrb	r3, [r7, #3]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	212c      	movs	r1, #44	; 0x2c
 8003cd0:	fb01 f303 	mul.w	r3, r1, r3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	3342      	adds	r3, #66	; 0x42
 8003cd8:	2200      	movs	r2, #0
 8003cda:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003cdc:	e073      	b.n	8003dc6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003cde:	78fb      	ldrb	r3, [r7, #3]
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	212c      	movs	r1, #44	; 0x2c
 8003ce4:	fb01 f303 	mul.w	r3, r1, r3
 8003ce8:	4413      	add	r3, r2
 8003cea:	3342      	adds	r3, #66	; 0x42
 8003cec:	2202      	movs	r2, #2
 8003cee:	701a      	strb	r2, [r3, #0]
      break;
 8003cf0:	e069      	b.n	8003dc6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003cf2:	78fb      	ldrb	r3, [r7, #3]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	212c      	movs	r1, #44	; 0x2c
 8003cf8:	fb01 f303 	mul.w	r3, r1, r3
 8003cfc:	4413      	add	r3, r2
 8003cfe:	3354      	adds	r3, #84	; 0x54
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d109      	bne.n	8003d1a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d06:	78fb      	ldrb	r3, [r7, #3]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	212c      	movs	r1, #44	; 0x2c
 8003d0c:	fb01 f303 	mul.w	r3, r1, r3
 8003d10:	4413      	add	r3, r2
 8003d12:	3342      	adds	r3, #66	; 0x42
 8003d14:	2200      	movs	r2, #0
 8003d16:	701a      	strb	r2, [r3, #0]
      break;
 8003d18:	e055      	b.n	8003dc6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d1a:	78fb      	ldrb	r3, [r7, #3]
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	212c      	movs	r1, #44	; 0x2c
 8003d20:	fb01 f303 	mul.w	r3, r1, r3
 8003d24:	4413      	add	r3, r2
 8003d26:	3342      	adds	r3, #66	; 0x42
 8003d28:	2202      	movs	r2, #2
 8003d2a:	701a      	strb	r2, [r3, #0]
      break;
 8003d2c:	e04b      	b.n	8003dc6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003d2e:	78bb      	ldrb	r3, [r7, #2]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d11d      	bne.n	8003d70 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003d34:	78fb      	ldrb	r3, [r7, #3]
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	212c      	movs	r1, #44	; 0x2c
 8003d3a:	fb01 f303 	mul.w	r3, r1, r3
 8003d3e:	4413      	add	r3, r2
 8003d40:	3355      	adds	r3, #85	; 0x55
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d109      	bne.n	8003d5c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d48:	78fb      	ldrb	r3, [r7, #3]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	212c      	movs	r1, #44	; 0x2c
 8003d4e:	fb01 f303 	mul.w	r3, r1, r3
 8003d52:	4413      	add	r3, r2
 8003d54:	3342      	adds	r3, #66	; 0x42
 8003d56:	2200      	movs	r2, #0
 8003d58:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003d5a:	e034      	b.n	8003dc6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d5c:	78fb      	ldrb	r3, [r7, #3]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	212c      	movs	r1, #44	; 0x2c
 8003d62:	fb01 f303 	mul.w	r3, r1, r3
 8003d66:	4413      	add	r3, r2
 8003d68:	3342      	adds	r3, #66	; 0x42
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	701a      	strb	r2, [r3, #0]
      break;
 8003d6e:	e02a      	b.n	8003dc6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003d70:	78fb      	ldrb	r3, [r7, #3]
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	212c      	movs	r1, #44	; 0x2c
 8003d76:	fb01 f303 	mul.w	r3, r1, r3
 8003d7a:	4413      	add	r3, r2
 8003d7c:	3354      	adds	r3, #84	; 0x54
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d109      	bne.n	8003d98 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d84:	78fb      	ldrb	r3, [r7, #3]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	212c      	movs	r1, #44	; 0x2c
 8003d8a:	fb01 f303 	mul.w	r3, r1, r3
 8003d8e:	4413      	add	r3, r2
 8003d90:	3342      	adds	r3, #66	; 0x42
 8003d92:	2200      	movs	r2, #0
 8003d94:	701a      	strb	r2, [r3, #0]
      break;
 8003d96:	e016      	b.n	8003dc6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d98:	78fb      	ldrb	r3, [r7, #3]
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	212c      	movs	r1, #44	; 0x2c
 8003d9e:	fb01 f303 	mul.w	r3, r1, r3
 8003da2:	4413      	add	r3, r2
 8003da4:	3342      	adds	r3, #66	; 0x42
 8003da6:	2202      	movs	r2, #2
 8003da8:	701a      	strb	r2, [r3, #0]
      break;
 8003daa:	e00c      	b.n	8003dc6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003dac:	78fb      	ldrb	r3, [r7, #3]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	212c      	movs	r1, #44	; 0x2c
 8003db2:	fb01 f303 	mul.w	r3, r1, r3
 8003db6:	4413      	add	r3, r2
 8003db8:	3342      	adds	r3, #66	; 0x42
 8003dba:	2200      	movs	r2, #0
 8003dbc:	701a      	strb	r2, [r3, #0]
      break;
 8003dbe:	e002      	b.n	8003dc6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003dc0:	bf00      	nop
 8003dc2:	e000      	b.n	8003dc6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003dc4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003dc6:	78fb      	ldrb	r3, [r7, #3]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	212c      	movs	r1, #44	; 0x2c
 8003dcc:	fb01 f303 	mul.w	r3, r1, r3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	3344      	adds	r3, #68	; 0x44
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	8b3a      	ldrh	r2, [r7, #24]
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	202c      	movs	r0, #44	; 0x2c
 8003de0:	fb00 f303 	mul.w	r3, r0, r3
 8003de4:	440b      	add	r3, r1
 8003de6:	334c      	adds	r3, #76	; 0x4c
 8003de8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003dea:	78fb      	ldrb	r3, [r7, #3]
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	212c      	movs	r1, #44	; 0x2c
 8003df0:	fb01 f303 	mul.w	r3, r1, r3
 8003df4:	4413      	add	r3, r2
 8003df6:	3360      	adds	r3, #96	; 0x60
 8003df8:	2200      	movs	r2, #0
 8003dfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003dfc:	78fb      	ldrb	r3, [r7, #3]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	212c      	movs	r1, #44	; 0x2c
 8003e02:	fb01 f303 	mul.w	r3, r1, r3
 8003e06:	4413      	add	r3, r2
 8003e08:	3350      	adds	r3, #80	; 0x50
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003e0e:	78fb      	ldrb	r3, [r7, #3]
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	212c      	movs	r1, #44	; 0x2c
 8003e14:	fb01 f303 	mul.w	r3, r1, r3
 8003e18:	4413      	add	r3, r2
 8003e1a:	3339      	adds	r3, #57	; 0x39
 8003e1c:	78fa      	ldrb	r2, [r7, #3]
 8003e1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003e20:	78fb      	ldrb	r3, [r7, #3]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	212c      	movs	r1, #44	; 0x2c
 8003e26:	fb01 f303 	mul.w	r3, r1, r3
 8003e2a:	4413      	add	r3, r2
 8003e2c:	3361      	adds	r3, #97	; 0x61
 8003e2e:	2200      	movs	r2, #0
 8003e30:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6818      	ldr	r0, [r3, #0]
 8003e36:	78fb      	ldrb	r3, [r7, #3]
 8003e38:	222c      	movs	r2, #44	; 0x2c
 8003e3a:	fb02 f303 	mul.w	r3, r2, r3
 8003e3e:	3338      	adds	r3, #56	; 0x38
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	18d1      	adds	r1, r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	f005 f962 	bl	8009114 <USB_HC_StartXfer>
 8003e50:	4603      	mov	r3, r0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop

08003e5c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f004 fe85 	bl	8008b82 <USB_GetMode>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	f040 80f6 	bne.w	800406c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f004 fe69 	bl	8008b5c <USB_ReadInterrupts>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 80ec 	beq.w	800406a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f004 fe60 	bl	8008b5c <USB_ReadInterrupts>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ea2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ea6:	d104      	bne.n	8003eb2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003eb0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f004 fe50 	bl	8008b5c <USB_ReadInterrupts>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ec6:	d104      	bne.n	8003ed2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ed0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f004 fe40 	bl	8008b5c <USB_ReadInterrupts>
 8003edc:	4603      	mov	r3, r0
 8003ede:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ee2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ee6:	d104      	bne.n	8003ef2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003ef0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f004 fe30 	bl	8008b5c <USB_ReadInterrupts>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d103      	bne.n	8003f0e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f004 fe22 	bl	8008b5c <USB_ReadInterrupts>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f22:	d11c      	bne.n	8003f5e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003f2c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10f      	bne.n	8003f5e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003f3e:	2110      	movs	r1, #16
 8003f40:	6938      	ldr	r0, [r7, #16]
 8003f42:	f004 fd31 	bl	80089a8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003f46:	6938      	ldr	r0, [r7, #16]
 8003f48:	f004 fd52 	bl	80089f0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2101      	movs	r1, #1
 8003f52:	4618      	mov	r0, r3
 8003f54:	f004 ff0a 	bl	8008d6c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f00b f885 	bl	800f068 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f004 fdfa 	bl	8008b5c <USB_ReadInterrupts>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f72:	d102      	bne.n	8003f7a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f001 fa03 	bl	8005380 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f004 fdec 	bl	8008b5c <USB_ReadInterrupts>
 8003f84:	4603      	mov	r3, r0
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b08      	cmp	r3, #8
 8003f8c:	d106      	bne.n	8003f9c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f00b f84e 	bl	800f030 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2208      	movs	r2, #8
 8003f9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f004 fddb 	bl	8008b5c <USB_ReadInterrupts>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	f003 0310 	and.w	r3, r3, #16
 8003fac:	2b10      	cmp	r3, #16
 8003fae:	d101      	bne.n	8003fb4 <HAL_HCD_IRQHandler+0x158>
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e000      	b.n	8003fb6 <HAL_HCD_IRQHandler+0x15a>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d012      	beq.n	8003fe0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	699a      	ldr	r2, [r3, #24]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0210 	bic.w	r2, r2, #16
 8003fc8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f001 f906 	bl	80051dc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	699a      	ldr	r2, [r3, #24]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0210 	orr.w	r2, r2, #16
 8003fde:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f004 fdb9 	bl	8008b5c <USB_ReadInterrupts>
 8003fea:	4603      	mov	r3, r0
 8003fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ff4:	d13a      	bne.n	800406c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f005 f9cc 	bl	8009398 <USB_HC_ReadInterrupt>
 8004000:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004002:	2300      	movs	r3, #0
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	e025      	b.n	8004054 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f003 030f 	and.w	r3, r3, #15
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	fa22 f303 	lsr.w	r3, r2, r3
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b00      	cmp	r3, #0
 800401a:	d018      	beq.n	800404e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4413      	add	r3, r2
 8004024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800402e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004032:	d106      	bne.n	8004042 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	4619      	mov	r1, r3
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f8ab 	bl	8004196 <HCD_HC_IN_IRQHandler>
 8004040:	e005      	b.n	800404e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	b2db      	uxtb	r3, r3
 8004046:	4619      	mov	r1, r3
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 fcc6 	bl	80049da <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	3301      	adds	r3, #1
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	429a      	cmp	r2, r3
 800405c:	d3d4      	bcc.n	8004008 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004066:	615a      	str	r2, [r3, #20]
 8004068:	e000      	b.n	800406c <HAL_HCD_IRQHandler+0x210>
      return;
 800406a:	bf00      	nop
    }
  }
}
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b082      	sub	sp, #8
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_HCD_Start+0x16>
 8004084:	2302      	movs	r3, #2
 8004086:	e013      	b.n	80040b0 <HAL_HCD_Start+0x3e>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2101      	movs	r1, #1
 8004096:	4618      	mov	r0, r3
 8004098:	f004 fecc 	bl	8008e34 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f004 fc12 	bl	80088ca <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <HAL_HCD_Stop+0x16>
 80040ca:	2302      	movs	r3, #2
 80040cc:	e00d      	b.n	80040ea <HAL_HCD_Stop+0x32>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f005 fac6 	bl	800966c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b082      	sub	sp, #8
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f004 fe6e 	bl	8008de0 <USB_ResetPort>
 8004104:	4603      	mov	r3, r0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	460b      	mov	r3, r1
 8004118:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800411a:	78fb      	ldrb	r3, [r7, #3]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	212c      	movs	r1, #44	; 0x2c
 8004120:	fb01 f303 	mul.w	r3, r1, r3
 8004124:	4413      	add	r3, r2
 8004126:	3360      	adds	r3, #96	; 0x60
 8004128:	781b      	ldrb	r3, [r3, #0]
}
 800412a:	4618      	mov	r0, r3
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	460b      	mov	r3, r1
 8004140:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004142:	78fb      	ldrb	r3, [r7, #3]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	212c      	movs	r1, #44	; 0x2c
 8004148:	fb01 f303 	mul.w	r3, r1, r3
 800414c:	4413      	add	r3, r2
 800414e:	3350      	adds	r3, #80	; 0x50
 8004150:	681b      	ldr	r3, [r3, #0]
}
 8004152:	4618      	mov	r0, r3
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b082      	sub	sp, #8
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f004 feb2 	bl	8008ed4 <USB_GetCurrentFrame>
 8004170:	4603      	mov	r3, r0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b082      	sub	sp, #8
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f004 fe8d 	bl	8008ea6 <USB_GetHostSpeed>
 800418c:	4603      	mov	r3, r0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b086      	sub	sp, #24
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	460b      	mov	r3, r1
 80041a0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80041ac:	78fb      	ldrb	r3, [r7, #3]
 80041ae:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d119      	bne.n	80041fa <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d2:	461a      	mov	r2, r3
 80041d4:	2304      	movs	r3, #4
 80041d6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	0151      	lsls	r1, r2, #5
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	440a      	add	r2, r1
 80041ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041f2:	f043 0302 	orr.w	r3, r3, #2
 80041f6:	60d3      	str	r3, [r2, #12]
 80041f8:	e101      	b.n	80043fe <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	015a      	lsls	r2, r3, #5
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	4413      	add	r3, r2
 8004202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004210:	d12b      	bne.n	800426a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	4413      	add	r3, r2
 800421a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800421e:	461a      	mov	r2, r3
 8004220:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004224:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	212c      	movs	r1, #44	; 0x2c
 800422c:	fb01 f303 	mul.w	r3, r1, r3
 8004230:	4413      	add	r3, r2
 8004232:	3361      	adds	r3, #97	; 0x61
 8004234:	2207      	movs	r2, #7
 8004236:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	4413      	add	r3, r2
 8004240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	0151      	lsls	r1, r2, #5
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	440a      	add	r2, r1
 800424e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004252:	f043 0302 	orr.w	r3, r3, #2
 8004256:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	4611      	mov	r1, r2
 8004262:	4618      	mov	r0, r3
 8004264:	f005 f8a9 	bl	80093ba <USB_HC_Halt>
 8004268:	e0c9      	b.n	80043fe <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	015a      	lsls	r2, r3, #5
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	4413      	add	r3, r2
 8004272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 0320 	and.w	r3, r3, #32
 800427c:	2b20      	cmp	r3, #32
 800427e:	d109      	bne.n	8004294 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	4413      	add	r3, r2
 8004288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800428c:	461a      	mov	r2, r3
 800428e:	2320      	movs	r3, #32
 8004290:	6093      	str	r3, [r2, #8]
 8004292:	e0b4      	b.n	80043fe <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	4413      	add	r3, r2
 800429c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 0308 	and.w	r3, r3, #8
 80042a6:	2b08      	cmp	r3, #8
 80042a8:	d133      	bne.n	8004312 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	015a      	lsls	r2, r3, #5
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	0151      	lsls	r1, r2, #5
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	440a      	add	r2, r1
 80042c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042c4:	f043 0302 	orr.w	r3, r3, #2
 80042c8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	212c      	movs	r1, #44	; 0x2c
 80042d0:	fb01 f303 	mul.w	r3, r1, r3
 80042d4:	4413      	add	r3, r2
 80042d6:	3361      	adds	r3, #97	; 0x61
 80042d8:	2205      	movs	r2, #5
 80042da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e8:	461a      	mov	r2, r3
 80042ea:	2310      	movs	r3, #16
 80042ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	015a      	lsls	r2, r3, #5
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	4413      	add	r3, r2
 80042f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042fa:	461a      	mov	r2, r3
 80042fc:	2308      	movs	r3, #8
 80042fe:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	4611      	mov	r1, r2
 800430a:	4618      	mov	r0, r3
 800430c:	f005 f855 	bl	80093ba <USB_HC_Halt>
 8004310:	e075      	b.n	80043fe <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	4413      	add	r3, r2
 800431a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004328:	d134      	bne.n	8004394 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	015a      	lsls	r2, r3, #5
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	4413      	add	r3, r2
 8004332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	0151      	lsls	r1, r2, #5
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	440a      	add	r2, r1
 8004340:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004344:	f043 0302 	orr.w	r3, r3, #2
 8004348:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	212c      	movs	r1, #44	; 0x2c
 8004350:	fb01 f303 	mul.w	r3, r1, r3
 8004354:	4413      	add	r3, r2
 8004356:	3361      	adds	r3, #97	; 0x61
 8004358:	2208      	movs	r2, #8
 800435a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	4413      	add	r3, r2
 8004364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004368:	461a      	mov	r2, r3
 800436a:	2310      	movs	r3, #16
 800436c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	015a      	lsls	r2, r3, #5
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	4413      	add	r3, r2
 8004376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800437a:	461a      	mov	r2, r3
 800437c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004380:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	4611      	mov	r1, r2
 800438c:	4618      	mov	r0, r3
 800438e:	f005 f814 	bl	80093ba <USB_HC_Halt>
 8004392:	e034      	b.n	80043fe <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	4413      	add	r3, r2
 800439c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a6:	2b80      	cmp	r3, #128	; 0x80
 80043a8:	d129      	bne.n	80043fe <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	0151      	lsls	r1, r2, #5
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	440a      	add	r2, r1
 80043c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043c4:	f043 0302 	orr.w	r3, r3, #2
 80043c8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	212c      	movs	r1, #44	; 0x2c
 80043d0:	fb01 f303 	mul.w	r3, r1, r3
 80043d4:	4413      	add	r3, r2
 80043d6:	3361      	adds	r3, #97	; 0x61
 80043d8:	2206      	movs	r2, #6
 80043da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	4611      	mov	r1, r2
 80043e6:	4618      	mov	r0, r3
 80043e8:	f004 ffe7 	bl	80093ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043f8:	461a      	mov	r2, r3
 80043fa:	2380      	movs	r3, #128	; 0x80
 80043fc:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	4413      	add	r3, r2
 8004406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004414:	d122      	bne.n	800445c <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	4413      	add	r3, r2
 800441e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	0151      	lsls	r1, r2, #5
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	440a      	add	r2, r1
 800442c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004430:	f043 0302 	orr.w	r3, r3, #2
 8004434:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	4611      	mov	r1, r2
 8004440:	4618      	mov	r0, r3
 8004442:	f004 ffba 	bl	80093ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	4413      	add	r3, r2
 800444e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004452:	461a      	mov	r2, r3
 8004454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004458:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800445a:	e2ba      	b.n	80049d2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	4413      	add	r3, r2
 8004464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b01      	cmp	r3, #1
 8004470:	f040 811b 	bne.w	80046aa <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d019      	beq.n	80044b0 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	212c      	movs	r1, #44	; 0x2c
 8004482:	fb01 f303 	mul.w	r3, r1, r3
 8004486:	4413      	add	r3, r2
 8004488:	3348      	adds	r3, #72	; 0x48
 800448a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	0159      	lsls	r1, r3, #5
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	440b      	add	r3, r1
 8004494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800449e:	1ad2      	subs	r2, r2, r3
 80044a0:	6879      	ldr	r1, [r7, #4]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	202c      	movs	r0, #44	; 0x2c
 80044a6:	fb00 f303 	mul.w	r3, r0, r3
 80044aa:	440b      	add	r3, r1
 80044ac:	3350      	adds	r3, #80	; 0x50
 80044ae:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	212c      	movs	r1, #44	; 0x2c
 80044b6:	fb01 f303 	mul.w	r3, r1, r3
 80044ba:	4413      	add	r3, r2
 80044bc:	3361      	adds	r3, #97	; 0x61
 80044be:	2201      	movs	r2, #1
 80044c0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	212c      	movs	r1, #44	; 0x2c
 80044c8:	fb01 f303 	mul.w	r3, r1, r3
 80044cc:	4413      	add	r3, r2
 80044ce:	335c      	adds	r3, #92	; 0x5c
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044e0:	461a      	mov	r2, r3
 80044e2:	2301      	movs	r3, #1
 80044e4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	212c      	movs	r1, #44	; 0x2c
 80044ec:	fb01 f303 	mul.w	r3, r1, r3
 80044f0:	4413      	add	r3, r2
 80044f2:	333f      	adds	r3, #63	; 0x3f
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d009      	beq.n	800450e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	212c      	movs	r1, #44	; 0x2c
 8004500:	fb01 f303 	mul.w	r3, r1, r3
 8004504:	4413      	add	r3, r2
 8004506:	333f      	adds	r3, #63	; 0x3f
 8004508:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800450a:	2b02      	cmp	r3, #2
 800450c:	d121      	bne.n	8004552 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	4413      	add	r3, r2
 8004516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	0151      	lsls	r1, r2, #5
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	440a      	add	r2, r1
 8004524:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004528:	f043 0302 	orr.w	r3, r3, #2
 800452c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	b2d2      	uxtb	r2, r2
 8004536:	4611      	mov	r1, r2
 8004538:	4618      	mov	r0, r3
 800453a:	f004 ff3e 	bl	80093ba <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	015a      	lsls	r2, r3, #5
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	4413      	add	r3, r2
 8004546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800454a:	461a      	mov	r2, r3
 800454c:	2310      	movs	r3, #16
 800454e:	6093      	str	r3, [r2, #8]
 8004550:	e066      	b.n	8004620 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	212c      	movs	r1, #44	; 0x2c
 8004558:	fb01 f303 	mul.w	r3, r1, r3
 800455c:	4413      	add	r3, r2
 800455e:	333f      	adds	r3, #63	; 0x3f
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	2b03      	cmp	r3, #3
 8004564:	d127      	bne.n	80045b6 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	015a      	lsls	r2, r3, #5
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	4413      	add	r3, r2
 800456e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	0151      	lsls	r1, r2, #5
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	440a      	add	r2, r1
 800457c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004580:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004584:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	212c      	movs	r1, #44	; 0x2c
 800458c:	fb01 f303 	mul.w	r3, r1, r3
 8004590:	4413      	add	r3, r2
 8004592:	3360      	adds	r3, #96	; 0x60
 8004594:	2201      	movs	r2, #1
 8004596:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	b2d9      	uxtb	r1, r3
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	202c      	movs	r0, #44	; 0x2c
 80045a2:	fb00 f303 	mul.w	r3, r0, r3
 80045a6:	4413      	add	r3, r2
 80045a8:	3360      	adds	r3, #96	; 0x60
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	461a      	mov	r2, r3
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f00a fd68 	bl	800f084 <HAL_HCD_HC_NotifyURBChange_Callback>
 80045b4:	e034      	b.n	8004620 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	212c      	movs	r1, #44	; 0x2c
 80045bc:	fb01 f303 	mul.w	r3, r1, r3
 80045c0:	4413      	add	r3, r2
 80045c2:	333f      	adds	r3, #63	; 0x3f
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d12a      	bne.n	8004620 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	212c      	movs	r1, #44	; 0x2c
 80045d0:	fb01 f303 	mul.w	r3, r1, r3
 80045d4:	4413      	add	r3, r2
 80045d6:	3360      	adds	r3, #96	; 0x60
 80045d8:	2201      	movs	r2, #1
 80045da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	212c      	movs	r1, #44	; 0x2c
 80045e2:	fb01 f303 	mul.w	r3, r1, r3
 80045e6:	4413      	add	r3, r2
 80045e8:	3354      	adds	r3, #84	; 0x54
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	f083 0301 	eor.w	r3, r3, #1
 80045f0:	b2d8      	uxtb	r0, r3
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	212c      	movs	r1, #44	; 0x2c
 80045f8:	fb01 f303 	mul.w	r3, r1, r3
 80045fc:	4413      	add	r3, r2
 80045fe:	3354      	adds	r3, #84	; 0x54
 8004600:	4602      	mov	r2, r0
 8004602:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	b2d9      	uxtb	r1, r3
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	202c      	movs	r0, #44	; 0x2c
 800460e:	fb00 f303 	mul.w	r3, r0, r3
 8004612:	4413      	add	r3, r2
 8004614:	3360      	adds	r3, #96	; 0x60
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	461a      	mov	r2, r3
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f00a fd32 	bl	800f084 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d12b      	bne.n	8004680 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	212c      	movs	r1, #44	; 0x2c
 800462e:	fb01 f303 	mul.w	r3, r1, r3
 8004632:	4413      	add	r3, r2
 8004634:	3348      	adds	r3, #72	; 0x48
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6879      	ldr	r1, [r7, #4]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	202c      	movs	r0, #44	; 0x2c
 800463e:	fb00 f202 	mul.w	r2, r0, r2
 8004642:	440a      	add	r2, r1
 8004644:	3240      	adds	r2, #64	; 0x40
 8004646:	8812      	ldrh	r2, [r2, #0]
 8004648:	fbb3 f3f2 	udiv	r3, r3, r2
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 81be 	beq.w	80049d2 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	212c      	movs	r1, #44	; 0x2c
 800465c:	fb01 f303 	mul.w	r3, r1, r3
 8004660:	4413      	add	r3, r2
 8004662:	3354      	adds	r3, #84	; 0x54
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	f083 0301 	eor.w	r3, r3, #1
 800466a:	b2d8      	uxtb	r0, r3
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	212c      	movs	r1, #44	; 0x2c
 8004672:	fb01 f303 	mul.w	r3, r1, r3
 8004676:	4413      	add	r3, r2
 8004678:	3354      	adds	r3, #84	; 0x54
 800467a:	4602      	mov	r2, r0
 800467c:	701a      	strb	r2, [r3, #0]
}
 800467e:	e1a8      	b.n	80049d2 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	212c      	movs	r1, #44	; 0x2c
 8004686:	fb01 f303 	mul.w	r3, r1, r3
 800468a:	4413      	add	r3, r2
 800468c:	3354      	adds	r3, #84	; 0x54
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	f083 0301 	eor.w	r3, r3, #1
 8004694:	b2d8      	uxtb	r0, r3
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	212c      	movs	r1, #44	; 0x2c
 800469c:	fb01 f303 	mul.w	r3, r1, r3
 80046a0:	4413      	add	r3, r2
 80046a2:	3354      	adds	r3, #84	; 0x54
 80046a4:	4602      	mov	r2, r0
 80046a6:	701a      	strb	r2, [r3, #0]
}
 80046a8:	e193      	b.n	80049d2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b02      	cmp	r3, #2
 80046be:	f040 8106 	bne.w	80048ce <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	0151      	lsls	r1, r2, #5
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	440a      	add	r2, r1
 80046d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046dc:	f023 0302 	bic.w	r3, r3, #2
 80046e0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	212c      	movs	r1, #44	; 0x2c
 80046e8:	fb01 f303 	mul.w	r3, r1, r3
 80046ec:	4413      	add	r3, r2
 80046ee:	3361      	adds	r3, #97	; 0x61
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d109      	bne.n	800470a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	212c      	movs	r1, #44	; 0x2c
 80046fc:	fb01 f303 	mul.w	r3, r1, r3
 8004700:	4413      	add	r3, r2
 8004702:	3360      	adds	r3, #96	; 0x60
 8004704:	2201      	movs	r2, #1
 8004706:	701a      	strb	r2, [r3, #0]
 8004708:	e0c9      	b.n	800489e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	212c      	movs	r1, #44	; 0x2c
 8004710:	fb01 f303 	mul.w	r3, r1, r3
 8004714:	4413      	add	r3, r2
 8004716:	3361      	adds	r3, #97	; 0x61
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b05      	cmp	r3, #5
 800471c:	d109      	bne.n	8004732 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	212c      	movs	r1, #44	; 0x2c
 8004724:	fb01 f303 	mul.w	r3, r1, r3
 8004728:	4413      	add	r3, r2
 800472a:	3360      	adds	r3, #96	; 0x60
 800472c:	2205      	movs	r2, #5
 800472e:	701a      	strb	r2, [r3, #0]
 8004730:	e0b5      	b.n	800489e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	212c      	movs	r1, #44	; 0x2c
 8004738:	fb01 f303 	mul.w	r3, r1, r3
 800473c:	4413      	add	r3, r2
 800473e:	3361      	adds	r3, #97	; 0x61
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2b06      	cmp	r3, #6
 8004744:	d009      	beq.n	800475a <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	212c      	movs	r1, #44	; 0x2c
 800474c:	fb01 f303 	mul.w	r3, r1, r3
 8004750:	4413      	add	r3, r2
 8004752:	3361      	adds	r3, #97	; 0x61
 8004754:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004756:	2b08      	cmp	r3, #8
 8004758:	d150      	bne.n	80047fc <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	212c      	movs	r1, #44	; 0x2c
 8004760:	fb01 f303 	mul.w	r3, r1, r3
 8004764:	4413      	add	r3, r2
 8004766:	335c      	adds	r3, #92	; 0x5c
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	1c5a      	adds	r2, r3, #1
 800476c:	6879      	ldr	r1, [r7, #4]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	202c      	movs	r0, #44	; 0x2c
 8004772:	fb00 f303 	mul.w	r3, r0, r3
 8004776:	440b      	add	r3, r1
 8004778:	335c      	adds	r3, #92	; 0x5c
 800477a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	212c      	movs	r1, #44	; 0x2c
 8004782:	fb01 f303 	mul.w	r3, r1, r3
 8004786:	4413      	add	r3, r2
 8004788:	335c      	adds	r3, #92	; 0x5c
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b02      	cmp	r3, #2
 800478e:	d912      	bls.n	80047b6 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	212c      	movs	r1, #44	; 0x2c
 8004796:	fb01 f303 	mul.w	r3, r1, r3
 800479a:	4413      	add	r3, r2
 800479c:	335c      	adds	r3, #92	; 0x5c
 800479e:	2200      	movs	r2, #0
 80047a0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	212c      	movs	r1, #44	; 0x2c
 80047a8:	fb01 f303 	mul.w	r3, r1, r3
 80047ac:	4413      	add	r3, r2
 80047ae:	3360      	adds	r3, #96	; 0x60
 80047b0:	2204      	movs	r2, #4
 80047b2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80047b4:	e073      	b.n	800489e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	212c      	movs	r1, #44	; 0x2c
 80047bc:	fb01 f303 	mul.w	r3, r1, r3
 80047c0:	4413      	add	r3, r2
 80047c2:	3360      	adds	r3, #96	; 0x60
 80047c4:	2202      	movs	r2, #2
 80047c6:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047de:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047e6:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f4:	461a      	mov	r2, r3
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80047fa:	e050      	b.n	800489e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	212c      	movs	r1, #44	; 0x2c
 8004802:	fb01 f303 	mul.w	r3, r1, r3
 8004806:	4413      	add	r3, r2
 8004808:	3361      	adds	r3, #97	; 0x61
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b03      	cmp	r3, #3
 800480e:	d122      	bne.n	8004856 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	212c      	movs	r1, #44	; 0x2c
 8004816:	fb01 f303 	mul.w	r3, r1, r3
 800481a:	4413      	add	r3, r2
 800481c:	3360      	adds	r3, #96	; 0x60
 800481e:	2202      	movs	r2, #2
 8004820:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	015a      	lsls	r2, r3, #5
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	4413      	add	r3, r2
 800482a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004838:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004840:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	4413      	add	r3, r2
 800484a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800484e:	461a      	mov	r2, r3
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	e023      	b.n	800489e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	212c      	movs	r1, #44	; 0x2c
 800485c:	fb01 f303 	mul.w	r3, r1, r3
 8004860:	4413      	add	r3, r2
 8004862:	3361      	adds	r3, #97	; 0x61
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	2b07      	cmp	r3, #7
 8004868:	d119      	bne.n	800489e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	212c      	movs	r1, #44	; 0x2c
 8004870:	fb01 f303 	mul.w	r3, r1, r3
 8004874:	4413      	add	r3, r2
 8004876:	335c      	adds	r3, #92	; 0x5c
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	1c5a      	adds	r2, r3, #1
 800487c:	6879      	ldr	r1, [r7, #4]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	202c      	movs	r0, #44	; 0x2c
 8004882:	fb00 f303 	mul.w	r3, r0, r3
 8004886:	440b      	add	r3, r1
 8004888:	335c      	adds	r3, #92	; 0x5c
 800488a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	212c      	movs	r1, #44	; 0x2c
 8004892:	fb01 f303 	mul.w	r3, r1, r3
 8004896:	4413      	add	r3, r2
 8004898:	3360      	adds	r3, #96	; 0x60
 800489a:	2204      	movs	r2, #4
 800489c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048aa:	461a      	mov	r2, r3
 80048ac:	2302      	movs	r3, #2
 80048ae:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	b2d9      	uxtb	r1, r3
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	202c      	movs	r0, #44	; 0x2c
 80048ba:	fb00 f303 	mul.w	r3, r0, r3
 80048be:	4413      	add	r3, r2
 80048c0:	3360      	adds	r3, #96	; 0x60
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	461a      	mov	r2, r3
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f00a fbdc 	bl	800f084 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80048cc:	e081      	b.n	80049d2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	015a      	lsls	r2, r3, #5
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f003 0310 	and.w	r3, r3, #16
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d176      	bne.n	80049d2 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	212c      	movs	r1, #44	; 0x2c
 80048ea:	fb01 f303 	mul.w	r3, r1, r3
 80048ee:	4413      	add	r3, r2
 80048f0:	333f      	adds	r3, #63	; 0x3f
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b03      	cmp	r3, #3
 80048f6:	d121      	bne.n	800493c <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	212c      	movs	r1, #44	; 0x2c
 80048fe:	fb01 f303 	mul.w	r3, r1, r3
 8004902:	4413      	add	r3, r2
 8004904:	335c      	adds	r3, #92	; 0x5c
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	4413      	add	r3, r2
 8004912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	0151      	lsls	r1, r2, #5
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	440a      	add	r2, r1
 8004920:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004924:	f043 0302 	orr.w	r3, r3, #2
 8004928:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	b2d2      	uxtb	r2, r2
 8004932:	4611      	mov	r1, r2
 8004934:	4618      	mov	r0, r3
 8004936:	f004 fd40 	bl	80093ba <USB_HC_Halt>
 800493a:	e041      	b.n	80049c0 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	212c      	movs	r1, #44	; 0x2c
 8004942:	fb01 f303 	mul.w	r3, r1, r3
 8004946:	4413      	add	r3, r2
 8004948:	333f      	adds	r3, #63	; 0x3f
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d009      	beq.n	8004964 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	212c      	movs	r1, #44	; 0x2c
 8004956:	fb01 f303 	mul.w	r3, r1, r3
 800495a:	4413      	add	r3, r2
 800495c:	333f      	adds	r3, #63	; 0x3f
 800495e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004960:	2b02      	cmp	r3, #2
 8004962:	d12d      	bne.n	80049c0 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	212c      	movs	r1, #44	; 0x2c
 800496a:	fb01 f303 	mul.w	r3, r1, r3
 800496e:	4413      	add	r3, r2
 8004970:	335c      	adds	r3, #92	; 0x5c
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d120      	bne.n	80049c0 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	212c      	movs	r1, #44	; 0x2c
 8004984:	fb01 f303 	mul.w	r3, r1, r3
 8004988:	4413      	add	r3, r2
 800498a:	3361      	adds	r3, #97	; 0x61
 800498c:	2203      	movs	r2, #3
 800498e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	015a      	lsls	r2, r3, #5
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	4413      	add	r3, r2
 8004998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	0151      	lsls	r1, r2, #5
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	440a      	add	r2, r1
 80049a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049aa:	f043 0302 	orr.w	r3, r3, #2
 80049ae:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	4611      	mov	r1, r2
 80049ba:	4618      	mov	r0, r3
 80049bc:	f004 fcfd 	bl	80093ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049cc:	461a      	mov	r2, r3
 80049ce:	2310      	movs	r3, #16
 80049d0:	6093      	str	r3, [r2, #8]
}
 80049d2:	bf00      	nop
 80049d4:	3718      	adds	r7, #24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b088      	sub	sp, #32
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
 80049e2:	460b      	mov	r3, r1
 80049e4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80049f0:	78fb      	ldrb	r3, [r7, #3]
 80049f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 0304 	and.w	r3, r3, #4
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d119      	bne.n	8004a3e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a16:	461a      	mov	r2, r3
 8004a18:	2304      	movs	r3, #4
 8004a1a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	0151      	lsls	r1, r2, #5
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	440a      	add	r2, r1
 8004a32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a36:	f043 0302 	orr.w	r3, r3, #2
 8004a3a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004a3c:	e3ca      	b.n	80051d4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	015a      	lsls	r2, r3, #5
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f003 0320 	and.w	r3, r3, #32
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	d13e      	bne.n	8004ad2 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a60:	461a      	mov	r2, r3
 8004a62:	2320      	movs	r3, #32
 8004a64:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	212c      	movs	r1, #44	; 0x2c
 8004a6c:	fb01 f303 	mul.w	r3, r1, r3
 8004a70:	4413      	add	r3, r2
 8004a72:	333d      	adds	r3, #61	; 0x3d
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	f040 83ac 	bne.w	80051d4 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	212c      	movs	r1, #44	; 0x2c
 8004a82:	fb01 f303 	mul.w	r3, r1, r3
 8004a86:	4413      	add	r3, r2
 8004a88:	333d      	adds	r3, #61	; 0x3d
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	212c      	movs	r1, #44	; 0x2c
 8004a94:	fb01 f303 	mul.w	r3, r1, r3
 8004a98:	4413      	add	r3, r2
 8004a9a:	3360      	adds	r3, #96	; 0x60
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	0151      	lsls	r1, r2, #5
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	440a      	add	r2, r1
 8004ab6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004aba:	f043 0302 	orr.w	r3, r3, #2
 8004abe:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	4611      	mov	r1, r2
 8004aca:	4618      	mov	r0, r3
 8004acc:	f004 fc75 	bl	80093ba <USB_HC_Halt>
}
 8004ad0:	e380      	b.n	80051d4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ae8:	d122      	bne.n	8004b30 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	015a      	lsls	r2, r3, #5
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	0151      	lsls	r1, r2, #5
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	440a      	add	r2, r1
 8004b00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b04:	f043 0302 	orr.w	r3, r3, #2
 8004b08:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	b2d2      	uxtb	r2, r2
 8004b12:	4611      	mov	r1, r2
 8004b14:	4618      	mov	r0, r3
 8004b16:	f004 fc50 	bl	80093ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b26:	461a      	mov	r2, r3
 8004b28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b2c:	6093      	str	r3, [r2, #8]
}
 8004b2e:	e351      	b.n	80051d4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d150      	bne.n	8004be8 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	212c      	movs	r1, #44	; 0x2c
 8004b4c:	fb01 f303 	mul.w	r3, r1, r3
 8004b50:	4413      	add	r3, r2
 8004b52:	335c      	adds	r3, #92	; 0x5c
 8004b54:	2200      	movs	r2, #0
 8004b56:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6a:	2b40      	cmp	r3, #64	; 0x40
 8004b6c:	d111      	bne.n	8004b92 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	212c      	movs	r1, #44	; 0x2c
 8004b74:	fb01 f303 	mul.w	r3, r1, r3
 8004b78:	4413      	add	r3, r2
 8004b7a:	333d      	adds	r3, #61	; 0x3d
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	2340      	movs	r3, #64	; 0x40
 8004b90:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	0151      	lsls	r1, r2, #5
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	440a      	add	r2, r1
 8004ba8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bac:	f043 0302 	orr.w	r3, r3, #2
 8004bb0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	b2d2      	uxtb	r2, r2
 8004bba:	4611      	mov	r1, r2
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f004 fbfc 	bl	80093ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bce:	461a      	mov	r2, r3
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	212c      	movs	r1, #44	; 0x2c
 8004bda:	fb01 f303 	mul.w	r3, r1, r3
 8004bde:	4413      	add	r3, r2
 8004be0:	3361      	adds	r3, #97	; 0x61
 8004be2:	2201      	movs	r2, #1
 8004be4:	701a      	strb	r2, [r3, #0]
}
 8004be6:	e2f5      	b.n	80051d4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfa:	2b40      	cmp	r3, #64	; 0x40
 8004bfc:	d13c      	bne.n	8004c78 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	212c      	movs	r1, #44	; 0x2c
 8004c04:	fb01 f303 	mul.w	r3, r1, r3
 8004c08:	4413      	add	r3, r2
 8004c0a:	3361      	adds	r3, #97	; 0x61
 8004c0c:	2204      	movs	r2, #4
 8004c0e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	212c      	movs	r1, #44	; 0x2c
 8004c16:	fb01 f303 	mul.w	r3, r1, r3
 8004c1a:	4413      	add	r3, r2
 8004c1c:	333d      	adds	r3, #61	; 0x3d
 8004c1e:	2201      	movs	r2, #1
 8004c20:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	212c      	movs	r1, #44	; 0x2c
 8004c28:	fb01 f303 	mul.w	r3, r1, r3
 8004c2c:	4413      	add	r3, r2
 8004c2e:	335c      	adds	r3, #92	; 0x5c
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	0151      	lsls	r1, r2, #5
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	440a      	add	r2, r1
 8004c4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c4e:	f043 0302 	orr.w	r3, r3, #2
 8004c52:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	b2d2      	uxtb	r2, r2
 8004c5c:	4611      	mov	r1, r2
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f004 fbab 	bl	80093ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c70:	461a      	mov	r2, r3
 8004c72:	2340      	movs	r3, #64	; 0x40
 8004c74:	6093      	str	r3, [r2, #8]
}
 8004c76:	e2ad      	b.n	80051d4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	015a      	lsls	r2, r3, #5
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	4413      	add	r3, r2
 8004c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f003 0308 	and.w	r3, r3, #8
 8004c8a:	2b08      	cmp	r3, #8
 8004c8c:	d12a      	bne.n	8004ce4 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	2308      	movs	r3, #8
 8004c9e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	015a      	lsls	r2, r3, #5
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	0151      	lsls	r1, r2, #5
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	440a      	add	r2, r1
 8004cb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cba:	f043 0302 	orr.w	r3, r3, #2
 8004cbe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	4611      	mov	r1, r2
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f004 fb75 	bl	80093ba <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	212c      	movs	r1, #44	; 0x2c
 8004cd6:	fb01 f303 	mul.w	r3, r1, r3
 8004cda:	4413      	add	r3, r2
 8004cdc:	3361      	adds	r3, #97	; 0x61
 8004cde:	2205      	movs	r2, #5
 8004ce0:	701a      	strb	r2, [r3, #0]
}
 8004ce2:	e277      	b.n	80051d4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	015a      	lsls	r2, r3, #5
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	4413      	add	r3, r2
 8004cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f003 0310 	and.w	r3, r3, #16
 8004cf6:	2b10      	cmp	r3, #16
 8004cf8:	d150      	bne.n	8004d9c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	212c      	movs	r1, #44	; 0x2c
 8004d00:	fb01 f303 	mul.w	r3, r1, r3
 8004d04:	4413      	add	r3, r2
 8004d06:	335c      	adds	r3, #92	; 0x5c
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	212c      	movs	r1, #44	; 0x2c
 8004d12:	fb01 f303 	mul.w	r3, r1, r3
 8004d16:	4413      	add	r3, r2
 8004d18:	3361      	adds	r3, #97	; 0x61
 8004d1a:	2203      	movs	r2, #3
 8004d1c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	212c      	movs	r1, #44	; 0x2c
 8004d24:	fb01 f303 	mul.w	r3, r1, r3
 8004d28:	4413      	add	r3, r2
 8004d2a:	333d      	adds	r3, #61	; 0x3d
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d112      	bne.n	8004d58 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	212c      	movs	r1, #44	; 0x2c
 8004d38:	fb01 f303 	mul.w	r3, r1, r3
 8004d3c:	4413      	add	r3, r2
 8004d3e:	333c      	adds	r3, #60	; 0x3c
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d108      	bne.n	8004d58 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	212c      	movs	r1, #44	; 0x2c
 8004d4c:	fb01 f303 	mul.w	r3, r1, r3
 8004d50:	4413      	add	r3, r2
 8004d52:	333d      	adds	r3, #61	; 0x3d
 8004d54:	2201      	movs	r2, #1
 8004d56:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	0151      	lsls	r1, r2, #5
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	440a      	add	r2, r1
 8004d6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d72:	f043 0302 	orr.w	r3, r3, #2
 8004d76:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	4611      	mov	r1, r2
 8004d82:	4618      	mov	r0, r3
 8004d84:	f004 fb19 	bl	80093ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d94:	461a      	mov	r2, r3
 8004d96:	2310      	movs	r3, #16
 8004d98:	6093      	str	r3, [r2, #8]
}
 8004d9a:	e21b      	b.n	80051d4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dae:	2b80      	cmp	r3, #128	; 0x80
 8004db0:	d174      	bne.n	8004e9c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d121      	bne.n	8004dfe <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	212c      	movs	r1, #44	; 0x2c
 8004dc0:	fb01 f303 	mul.w	r3, r1, r3
 8004dc4:	4413      	add	r3, r2
 8004dc6:	3361      	adds	r3, #97	; 0x61
 8004dc8:	2206      	movs	r2, #6
 8004dca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	0151      	lsls	r1, r2, #5
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	440a      	add	r2, r1
 8004de2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004de6:	f043 0302 	orr.w	r3, r3, #2
 8004dea:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	4611      	mov	r1, r2
 8004df6:	4618      	mov	r0, r3
 8004df8:	f004 fadf 	bl	80093ba <USB_HC_Halt>
 8004dfc:	e044      	b.n	8004e88 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	212c      	movs	r1, #44	; 0x2c
 8004e04:	fb01 f303 	mul.w	r3, r1, r3
 8004e08:	4413      	add	r3, r2
 8004e0a:	335c      	adds	r3, #92	; 0x5c
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	202c      	movs	r0, #44	; 0x2c
 8004e16:	fb00 f303 	mul.w	r3, r0, r3
 8004e1a:	440b      	add	r3, r1
 8004e1c:	335c      	adds	r3, #92	; 0x5c
 8004e1e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	212c      	movs	r1, #44	; 0x2c
 8004e26:	fb01 f303 	mul.w	r3, r1, r3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	335c      	adds	r3, #92	; 0x5c
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d920      	bls.n	8004e76 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	212c      	movs	r1, #44	; 0x2c
 8004e3a:	fb01 f303 	mul.w	r3, r1, r3
 8004e3e:	4413      	add	r3, r2
 8004e40:	335c      	adds	r3, #92	; 0x5c
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	212c      	movs	r1, #44	; 0x2c
 8004e4c:	fb01 f303 	mul.w	r3, r1, r3
 8004e50:	4413      	add	r3, r2
 8004e52:	3360      	adds	r3, #96	; 0x60
 8004e54:	2204      	movs	r2, #4
 8004e56:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	b2d9      	uxtb	r1, r3
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	202c      	movs	r0, #44	; 0x2c
 8004e62:	fb00 f303 	mul.w	r3, r0, r3
 8004e66:	4413      	add	r3, r2
 8004e68:	3360      	adds	r3, #96	; 0x60
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f00a f908 	bl	800f084 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004e74:	e008      	b.n	8004e88 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	212c      	movs	r1, #44	; 0x2c
 8004e7c:	fb01 f303 	mul.w	r3, r1, r3
 8004e80:	4413      	add	r3, r2
 8004e82:	3360      	adds	r3, #96	; 0x60
 8004e84:	2202      	movs	r2, #2
 8004e86:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e94:	461a      	mov	r2, r3
 8004e96:	2380      	movs	r3, #128	; 0x80
 8004e98:	6093      	str	r3, [r2, #8]
}
 8004e9a:	e19b      	b.n	80051d4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eb2:	d134      	bne.n	8004f1e <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	0151      	lsls	r1, r2, #5
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	440a      	add	r2, r1
 8004eca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ece:	f043 0302 	orr.w	r3, r3, #2
 8004ed2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	b2d2      	uxtb	r2, r2
 8004edc:	4611      	mov	r1, r2
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f004 fa6b 	bl	80093ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	2310      	movs	r3, #16
 8004ef4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f02:	461a      	mov	r2, r3
 8004f04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f08:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	212c      	movs	r1, #44	; 0x2c
 8004f10:	fb01 f303 	mul.w	r3, r1, r3
 8004f14:	4413      	add	r3, r2
 8004f16:	3361      	adds	r3, #97	; 0x61
 8004f18:	2208      	movs	r2, #8
 8004f1a:	701a      	strb	r2, [r3, #0]
}
 8004f1c:	e15a      	b.n	80051d4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	f040 814f 	bne.w	80051d4 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	0151      	lsls	r1, r2, #5
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	440a      	add	r2, r1
 8004f4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f50:	f023 0302 	bic.w	r3, r3, #2
 8004f54:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	212c      	movs	r1, #44	; 0x2c
 8004f5c:	fb01 f303 	mul.w	r3, r1, r3
 8004f60:	4413      	add	r3, r2
 8004f62:	3361      	adds	r3, #97	; 0x61
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d17d      	bne.n	8005066 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	212c      	movs	r1, #44	; 0x2c
 8004f70:	fb01 f303 	mul.w	r3, r1, r3
 8004f74:	4413      	add	r3, r2
 8004f76:	3360      	adds	r3, #96	; 0x60
 8004f78:	2201      	movs	r2, #1
 8004f7a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	212c      	movs	r1, #44	; 0x2c
 8004f82:	fb01 f303 	mul.w	r3, r1, r3
 8004f86:	4413      	add	r3, r2
 8004f88:	333f      	adds	r3, #63	; 0x3f
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d00a      	beq.n	8004fa6 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	212c      	movs	r1, #44	; 0x2c
 8004f96:	fb01 f303 	mul.w	r3, r1, r3
 8004f9a:	4413      	add	r3, r2
 8004f9c:	333f      	adds	r3, #63	; 0x3f
 8004f9e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004fa0:	2b03      	cmp	r3, #3
 8004fa2:	f040 8100 	bne.w	80051a6 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d113      	bne.n	8004fd6 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	212c      	movs	r1, #44	; 0x2c
 8004fb4:	fb01 f303 	mul.w	r3, r1, r3
 8004fb8:	4413      	add	r3, r2
 8004fba:	3355      	adds	r3, #85	; 0x55
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	f083 0301 	eor.w	r3, r3, #1
 8004fc2:	b2d8      	uxtb	r0, r3
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	212c      	movs	r1, #44	; 0x2c
 8004fca:	fb01 f303 	mul.w	r3, r1, r3
 8004fce:	4413      	add	r3, r2
 8004fd0:	3355      	adds	r3, #85	; 0x55
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	f040 80e3 	bne.w	80051a6 <HCD_HC_OUT_IRQHandler+0x7cc>
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	212c      	movs	r1, #44	; 0x2c
 8004fe6:	fb01 f303 	mul.w	r3, r1, r3
 8004fea:	4413      	add	r3, r2
 8004fec:	334c      	adds	r3, #76	; 0x4c
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 80d8 	beq.w	80051a6 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	212c      	movs	r1, #44	; 0x2c
 8004ffc:	fb01 f303 	mul.w	r3, r1, r3
 8005000:	4413      	add	r3, r2
 8005002:	334c      	adds	r3, #76	; 0x4c
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	202c      	movs	r0, #44	; 0x2c
 800500c:	fb00 f202 	mul.w	r2, r0, r2
 8005010:	440a      	add	r2, r1
 8005012:	3240      	adds	r2, #64	; 0x40
 8005014:	8812      	ldrh	r2, [r2, #0]
 8005016:	4413      	add	r3, r2
 8005018:	3b01      	subs	r3, #1
 800501a:	6879      	ldr	r1, [r7, #4]
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	202c      	movs	r0, #44	; 0x2c
 8005020:	fb00 f202 	mul.w	r2, r0, r2
 8005024:	440a      	add	r2, r1
 8005026:	3240      	adds	r2, #64	; 0x40
 8005028:	8812      	ldrh	r2, [r2, #0]
 800502a:	fbb3 f3f2 	udiv	r3, r3, r2
 800502e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	f000 80b5 	beq.w	80051a6 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	212c      	movs	r1, #44	; 0x2c
 8005042:	fb01 f303 	mul.w	r3, r1, r3
 8005046:	4413      	add	r3, r2
 8005048:	3355      	adds	r3, #85	; 0x55
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	f083 0301 	eor.w	r3, r3, #1
 8005050:	b2d8      	uxtb	r0, r3
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	212c      	movs	r1, #44	; 0x2c
 8005058:	fb01 f303 	mul.w	r3, r1, r3
 800505c:	4413      	add	r3, r2
 800505e:	3355      	adds	r3, #85	; 0x55
 8005060:	4602      	mov	r2, r0
 8005062:	701a      	strb	r2, [r3, #0]
 8005064:	e09f      	b.n	80051a6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	212c      	movs	r1, #44	; 0x2c
 800506c:	fb01 f303 	mul.w	r3, r1, r3
 8005070:	4413      	add	r3, r2
 8005072:	3361      	adds	r3, #97	; 0x61
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	2b03      	cmp	r3, #3
 8005078:	d109      	bne.n	800508e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	212c      	movs	r1, #44	; 0x2c
 8005080:	fb01 f303 	mul.w	r3, r1, r3
 8005084:	4413      	add	r3, r2
 8005086:	3360      	adds	r3, #96	; 0x60
 8005088:	2202      	movs	r2, #2
 800508a:	701a      	strb	r2, [r3, #0]
 800508c:	e08b      	b.n	80051a6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	212c      	movs	r1, #44	; 0x2c
 8005094:	fb01 f303 	mul.w	r3, r1, r3
 8005098:	4413      	add	r3, r2
 800509a:	3361      	adds	r3, #97	; 0x61
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d109      	bne.n	80050b6 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	212c      	movs	r1, #44	; 0x2c
 80050a8:	fb01 f303 	mul.w	r3, r1, r3
 80050ac:	4413      	add	r3, r2
 80050ae:	3360      	adds	r3, #96	; 0x60
 80050b0:	2202      	movs	r2, #2
 80050b2:	701a      	strb	r2, [r3, #0]
 80050b4:	e077      	b.n	80051a6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	212c      	movs	r1, #44	; 0x2c
 80050bc:	fb01 f303 	mul.w	r3, r1, r3
 80050c0:	4413      	add	r3, r2
 80050c2:	3361      	adds	r3, #97	; 0x61
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	2b05      	cmp	r3, #5
 80050c8:	d109      	bne.n	80050de <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	212c      	movs	r1, #44	; 0x2c
 80050d0:	fb01 f303 	mul.w	r3, r1, r3
 80050d4:	4413      	add	r3, r2
 80050d6:	3360      	adds	r3, #96	; 0x60
 80050d8:	2205      	movs	r2, #5
 80050da:	701a      	strb	r2, [r3, #0]
 80050dc:	e063      	b.n	80051a6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	212c      	movs	r1, #44	; 0x2c
 80050e4:	fb01 f303 	mul.w	r3, r1, r3
 80050e8:	4413      	add	r3, r2
 80050ea:	3361      	adds	r3, #97	; 0x61
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	2b06      	cmp	r3, #6
 80050f0:	d009      	beq.n	8005106 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	212c      	movs	r1, #44	; 0x2c
 80050f8:	fb01 f303 	mul.w	r3, r1, r3
 80050fc:	4413      	add	r3, r2
 80050fe:	3361      	adds	r3, #97	; 0x61
 8005100:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005102:	2b08      	cmp	r3, #8
 8005104:	d14f      	bne.n	80051a6 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	212c      	movs	r1, #44	; 0x2c
 800510c:	fb01 f303 	mul.w	r3, r1, r3
 8005110:	4413      	add	r3, r2
 8005112:	335c      	adds	r3, #92	; 0x5c
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	6879      	ldr	r1, [r7, #4]
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	202c      	movs	r0, #44	; 0x2c
 800511e:	fb00 f303 	mul.w	r3, r0, r3
 8005122:	440b      	add	r3, r1
 8005124:	335c      	adds	r3, #92	; 0x5c
 8005126:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	212c      	movs	r1, #44	; 0x2c
 800512e:	fb01 f303 	mul.w	r3, r1, r3
 8005132:	4413      	add	r3, r2
 8005134:	335c      	adds	r3, #92	; 0x5c
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b02      	cmp	r3, #2
 800513a:	d912      	bls.n	8005162 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	212c      	movs	r1, #44	; 0x2c
 8005142:	fb01 f303 	mul.w	r3, r1, r3
 8005146:	4413      	add	r3, r2
 8005148:	335c      	adds	r3, #92	; 0x5c
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	212c      	movs	r1, #44	; 0x2c
 8005154:	fb01 f303 	mul.w	r3, r1, r3
 8005158:	4413      	add	r3, r2
 800515a:	3360      	adds	r3, #96	; 0x60
 800515c:	2204      	movs	r2, #4
 800515e:	701a      	strb	r2, [r3, #0]
 8005160:	e021      	b.n	80051a6 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	212c      	movs	r1, #44	; 0x2c
 8005168:	fb01 f303 	mul.w	r3, r1, r3
 800516c:	4413      	add	r3, r2
 800516e:	3360      	adds	r3, #96	; 0x60
 8005170:	2202      	movs	r2, #2
 8005172:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	4413      	add	r3, r2
 800517c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800518a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005192:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	4413      	add	r3, r2
 800519c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a0:	461a      	mov	r2, r3
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b2:	461a      	mov	r2, r3
 80051b4:	2302      	movs	r3, #2
 80051b6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	b2d9      	uxtb	r1, r3
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	202c      	movs	r0, #44	; 0x2c
 80051c2:	fb00 f303 	mul.w	r3, r0, r3
 80051c6:	4413      	add	r3, r2
 80051c8:	3360      	adds	r3, #96	; 0x60
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	461a      	mov	r2, r3
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f009 ff58 	bl	800f084 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80051d4:	bf00      	nop
 80051d6:	3720      	adds	r7, #32
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b08a      	sub	sp, #40	; 0x28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	f003 030f 	and.w	r3, r3, #15
 80051fc:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	0c5b      	lsrs	r3, r3, #17
 8005202:	f003 030f 	and.w	r3, r3, #15
 8005206:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	091b      	lsrs	r3, r3, #4
 800520c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005210:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	2b02      	cmp	r3, #2
 8005216:	d004      	beq.n	8005222 <HCD_RXQLVL_IRQHandler+0x46>
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	2b05      	cmp	r3, #5
 800521c:	f000 80a9 	beq.w	8005372 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005220:	e0aa      	b.n	8005378 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 80a6 	beq.w	8005376 <HCD_RXQLVL_IRQHandler+0x19a>
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	212c      	movs	r1, #44	; 0x2c
 8005230:	fb01 f303 	mul.w	r3, r1, r3
 8005234:	4413      	add	r3, r2
 8005236:	3344      	adds	r3, #68	; 0x44
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 809b 	beq.w	8005376 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	212c      	movs	r1, #44	; 0x2c
 8005246:	fb01 f303 	mul.w	r3, r1, r3
 800524a:	4413      	add	r3, r2
 800524c:	3350      	adds	r3, #80	; 0x50
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	441a      	add	r2, r3
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	202c      	movs	r0, #44	; 0x2c
 800525a:	fb00 f303 	mul.w	r3, r0, r3
 800525e:	440b      	add	r3, r1
 8005260:	334c      	adds	r3, #76	; 0x4c
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	429a      	cmp	r2, r3
 8005266:	d87a      	bhi.n	800535e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6818      	ldr	r0, [r3, #0]
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	212c      	movs	r1, #44	; 0x2c
 8005272:	fb01 f303 	mul.w	r3, r1, r3
 8005276:	4413      	add	r3, r2
 8005278:	3344      	adds	r3, #68	; 0x44
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	b292      	uxth	r2, r2
 8005280:	4619      	mov	r1, r3
 8005282:	f003 fc13 	bl	8008aac <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	212c      	movs	r1, #44	; 0x2c
 800528c:	fb01 f303 	mul.w	r3, r1, r3
 8005290:	4413      	add	r3, r2
 8005292:	3344      	adds	r3, #68	; 0x44
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	441a      	add	r2, r3
 800529a:	6879      	ldr	r1, [r7, #4]
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	202c      	movs	r0, #44	; 0x2c
 80052a0:	fb00 f303 	mul.w	r3, r0, r3
 80052a4:	440b      	add	r3, r1
 80052a6:	3344      	adds	r3, #68	; 0x44
 80052a8:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	212c      	movs	r1, #44	; 0x2c
 80052b0:	fb01 f303 	mul.w	r3, r1, r3
 80052b4:	4413      	add	r3, r2
 80052b6:	3350      	adds	r3, #80	; 0x50
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	441a      	add	r2, r3
 80052be:	6879      	ldr	r1, [r7, #4]
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	202c      	movs	r0, #44	; 0x2c
 80052c4:	fb00 f303 	mul.w	r3, r0, r3
 80052c8:	440b      	add	r3, r1
 80052ca:	3350      	adds	r3, #80	; 0x50
 80052cc:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	015a      	lsls	r2, r3, #5
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	4413      	add	r3, r2
 80052d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	0cdb      	lsrs	r3, r3, #19
 80052de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052e2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	212c      	movs	r1, #44	; 0x2c
 80052ea:	fb01 f303 	mul.w	r3, r1, r3
 80052ee:	4413      	add	r3, r2
 80052f0:	3340      	adds	r3, #64	; 0x40
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	461a      	mov	r2, r3
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d13c      	bne.n	8005376 <HCD_RXQLVL_IRQHandler+0x19a>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d039      	beq.n	8005376 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	4413      	add	r3, r2
 800530a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005318:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005320:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	4413      	add	r3, r2
 800532a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532e:	461a      	mov	r2, r3
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	212c      	movs	r1, #44	; 0x2c
 800533a:	fb01 f303 	mul.w	r3, r1, r3
 800533e:	4413      	add	r3, r2
 8005340:	3354      	adds	r3, #84	; 0x54
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	f083 0301 	eor.w	r3, r3, #1
 8005348:	b2d8      	uxtb	r0, r3
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	212c      	movs	r1, #44	; 0x2c
 8005350:	fb01 f303 	mul.w	r3, r1, r3
 8005354:	4413      	add	r3, r2
 8005356:	3354      	adds	r3, #84	; 0x54
 8005358:	4602      	mov	r2, r0
 800535a:	701a      	strb	r2, [r3, #0]
      break;
 800535c:	e00b      	b.n	8005376 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	212c      	movs	r1, #44	; 0x2c
 8005364:	fb01 f303 	mul.w	r3, r1, r3
 8005368:	4413      	add	r3, r2
 800536a:	3360      	adds	r3, #96	; 0x60
 800536c:	2204      	movs	r2, #4
 800536e:	701a      	strb	r2, [r3, #0]
      break;
 8005370:	e001      	b.n	8005376 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005372:	bf00      	nop
 8005374:	e000      	b.n	8005378 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005376:	bf00      	nop
  }
}
 8005378:	bf00      	nop
 800537a:	3728      	adds	r7, #40	; 0x28
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80053ac:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d10b      	bne.n	80053d0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d102      	bne.n	80053c8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f009 fe42 	bl	800f04c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	f043 0302 	orr.w	r3, r3, #2
 80053ce:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f003 0308 	and.w	r3, r3, #8
 80053d6:	2b08      	cmp	r3, #8
 80053d8:	d132      	bne.n	8005440 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	f043 0308 	orr.w	r3, r3, #8
 80053e0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b04      	cmp	r3, #4
 80053ea:	d126      	bne.n	800543a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d113      	bne.n	800541c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80053fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053fe:	d106      	bne.n	800540e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2102      	movs	r1, #2
 8005406:	4618      	mov	r0, r3
 8005408:	f003 fcb0 	bl	8008d6c <USB_InitFSLSPClkSel>
 800540c:	e011      	b.n	8005432 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2101      	movs	r1, #1
 8005414:	4618      	mov	r0, r3
 8005416:	f003 fca9 	bl	8008d6c <USB_InitFSLSPClkSel>
 800541a:	e00a      	b.n	8005432 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d106      	bne.n	8005432 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800542a:	461a      	mov	r2, r3
 800542c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005430:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f009 fe34 	bl	800f0a0 <HAL_HCD_PortEnabled_Callback>
 8005438:	e002      	b.n	8005440 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f009 fe3e 	bl	800f0bc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f003 0320 	and.w	r3, r3, #32
 8005446:	2b20      	cmp	r3, #32
 8005448:	d103      	bne.n	8005452 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	f043 0320 	orr.w	r3, r3, #32
 8005450:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005458:	461a      	mov	r2, r3
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	6013      	str	r3, [r2, #0]
}
 800545e:	bf00      	nop
 8005460:	3718      	adds	r7, #24
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
	...

08005468 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e12b      	b.n	80056d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d106      	bne.n	8005494 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7fc f848 	bl	8001524 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2224      	movs	r2, #36	; 0x24
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0201 	bic.w	r2, r2, #1
 80054aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80054cc:	f002 fb54 	bl	8007b78 <HAL_RCC_GetPCLK1Freq>
 80054d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	4a81      	ldr	r2, [pc, #516]	; (80056dc <HAL_I2C_Init+0x274>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d807      	bhi.n	80054ec <HAL_I2C_Init+0x84>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4a80      	ldr	r2, [pc, #512]	; (80056e0 <HAL_I2C_Init+0x278>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	bf94      	ite	ls
 80054e4:	2301      	movls	r3, #1
 80054e6:	2300      	movhi	r3, #0
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	e006      	b.n	80054fa <HAL_I2C_Init+0x92>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4a7d      	ldr	r2, [pc, #500]	; (80056e4 <HAL_I2C_Init+0x27c>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	bf94      	ite	ls
 80054f4:	2301      	movls	r3, #1
 80054f6:	2300      	movhi	r3, #0
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e0e7      	b.n	80056d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	4a78      	ldr	r2, [pc, #480]	; (80056e8 <HAL_I2C_Init+0x280>)
 8005506:	fba2 2303 	umull	r2, r3, r2, r3
 800550a:	0c9b      	lsrs	r3, r3, #18
 800550c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	430a      	orrs	r2, r1
 8005520:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	4a6a      	ldr	r2, [pc, #424]	; (80056dc <HAL_I2C_Init+0x274>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d802      	bhi.n	800553c <HAL_I2C_Init+0xd4>
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	3301      	adds	r3, #1
 800553a:	e009      	b.n	8005550 <HAL_I2C_Init+0xe8>
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005542:	fb02 f303 	mul.w	r3, r2, r3
 8005546:	4a69      	ldr	r2, [pc, #420]	; (80056ec <HAL_I2C_Init+0x284>)
 8005548:	fba2 2303 	umull	r2, r3, r2, r3
 800554c:	099b      	lsrs	r3, r3, #6
 800554e:	3301      	adds	r3, #1
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	6812      	ldr	r2, [r2, #0]
 8005554:	430b      	orrs	r3, r1
 8005556:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005562:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	495c      	ldr	r1, [pc, #368]	; (80056dc <HAL_I2C_Init+0x274>)
 800556c:	428b      	cmp	r3, r1
 800556e:	d819      	bhi.n	80055a4 <HAL_I2C_Init+0x13c>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	1e59      	subs	r1, r3, #1
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	005b      	lsls	r3, r3, #1
 800557a:	fbb1 f3f3 	udiv	r3, r1, r3
 800557e:	1c59      	adds	r1, r3, #1
 8005580:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005584:	400b      	ands	r3, r1
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00a      	beq.n	80055a0 <HAL_I2C_Init+0x138>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	1e59      	subs	r1, r3, #1
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	fbb1 f3f3 	udiv	r3, r1, r3
 8005598:	3301      	adds	r3, #1
 800559a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800559e:	e051      	b.n	8005644 <HAL_I2C_Init+0x1dc>
 80055a0:	2304      	movs	r3, #4
 80055a2:	e04f      	b.n	8005644 <HAL_I2C_Init+0x1dc>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d111      	bne.n	80055d0 <HAL_I2C_Init+0x168>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	1e58      	subs	r0, r3, #1
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6859      	ldr	r1, [r3, #4]
 80055b4:	460b      	mov	r3, r1
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	440b      	add	r3, r1
 80055ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80055be:	3301      	adds	r3, #1
 80055c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	bf0c      	ite	eq
 80055c8:	2301      	moveq	r3, #1
 80055ca:	2300      	movne	r3, #0
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	e012      	b.n	80055f6 <HAL_I2C_Init+0x18e>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	1e58      	subs	r0, r3, #1
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6859      	ldr	r1, [r3, #4]
 80055d8:	460b      	mov	r3, r1
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	440b      	add	r3, r1
 80055de:	0099      	lsls	r1, r3, #2
 80055e0:	440b      	add	r3, r1
 80055e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80055e6:	3301      	adds	r3, #1
 80055e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	bf0c      	ite	eq
 80055f0:	2301      	moveq	r3, #1
 80055f2:	2300      	movne	r3, #0
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <HAL_I2C_Init+0x196>
 80055fa:	2301      	movs	r3, #1
 80055fc:	e022      	b.n	8005644 <HAL_I2C_Init+0x1dc>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10e      	bne.n	8005624 <HAL_I2C_Init+0x1bc>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	1e58      	subs	r0, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6859      	ldr	r1, [r3, #4]
 800560e:	460b      	mov	r3, r1
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	440b      	add	r3, r1
 8005614:	fbb0 f3f3 	udiv	r3, r0, r3
 8005618:	3301      	adds	r3, #1
 800561a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800561e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005622:	e00f      	b.n	8005644 <HAL_I2C_Init+0x1dc>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	1e58      	subs	r0, r3, #1
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6859      	ldr	r1, [r3, #4]
 800562c:	460b      	mov	r3, r1
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	440b      	add	r3, r1
 8005632:	0099      	lsls	r1, r3, #2
 8005634:	440b      	add	r3, r1
 8005636:	fbb0 f3f3 	udiv	r3, r0, r3
 800563a:	3301      	adds	r3, #1
 800563c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005640:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005644:	6879      	ldr	r1, [r7, #4]
 8005646:	6809      	ldr	r1, [r1, #0]
 8005648:	4313      	orrs	r3, r2
 800564a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	69da      	ldr	r2, [r3, #28]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	431a      	orrs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005672:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	6911      	ldr	r1, [r2, #16]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	68d2      	ldr	r2, [r2, #12]
 800567e:	4311      	orrs	r1, r2
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	6812      	ldr	r2, [r2, #0]
 8005684:	430b      	orrs	r3, r1
 8005686:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	695a      	ldr	r2, [r3, #20]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	431a      	orrs	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f042 0201 	orr.w	r2, r2, #1
 80056b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2220      	movs	r2, #32
 80056be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	000186a0 	.word	0x000186a0
 80056e0:	001e847f 	.word	0x001e847f
 80056e4:	003d08ff 	.word	0x003d08ff
 80056e8:	431bde83 	.word	0x431bde83
 80056ec:	10624dd3 	.word	0x10624dd3

080056f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b088      	sub	sp, #32
 80056f4:	af02      	add	r7, sp, #8
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	607a      	str	r2, [r7, #4]
 80056fa:	461a      	mov	r2, r3
 80056fc:	460b      	mov	r3, r1
 80056fe:	817b      	strh	r3, [r7, #10]
 8005700:	4613      	mov	r3, r2
 8005702:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005704:	f7fc fbf0 	bl	8001ee8 <HAL_GetTick>
 8005708:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b20      	cmp	r3, #32
 8005714:	f040 80e0 	bne.w	80058d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	2319      	movs	r3, #25
 800571e:	2201      	movs	r2, #1
 8005720:	4970      	ldr	r1, [pc, #448]	; (80058e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 fc58 	bl	8005fd8 <I2C_WaitOnFlagUntilTimeout>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800572e:	2302      	movs	r3, #2
 8005730:	e0d3      	b.n	80058da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005738:	2b01      	cmp	r3, #1
 800573a:	d101      	bne.n	8005740 <HAL_I2C_Master_Transmit+0x50>
 800573c:	2302      	movs	r3, #2
 800573e:	e0cc      	b.n	80058da <HAL_I2C_Master_Transmit+0x1ea>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b01      	cmp	r3, #1
 8005754:	d007      	beq.n	8005766 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f042 0201 	orr.w	r2, r2, #1
 8005764:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005774:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2221      	movs	r2, #33	; 0x21
 800577a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2210      	movs	r2, #16
 8005782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	893a      	ldrh	r2, [r7, #8]
 8005796:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800579c:	b29a      	uxth	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	4a50      	ldr	r2, [pc, #320]	; (80058e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80057a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80057a8:	8979      	ldrh	r1, [r7, #10]
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	6a3a      	ldr	r2, [r7, #32]
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f000 fac2 	bl	8005d38 <I2C_MasterRequestWrite>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e08d      	b.n	80058da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057be:	2300      	movs	r3, #0
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	613b      	str	r3, [r7, #16]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	613b      	str	r3, [r7, #16]
 80057d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80057d4:	e066      	b.n	80058a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	6a39      	ldr	r1, [r7, #32]
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	f000 fcd2 	bl	8006184 <I2C_WaitOnTXEFlagUntilTimeout>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00d      	beq.n	8005802 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	2b04      	cmp	r3, #4
 80057ec:	d107      	bne.n	80057fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e06b      	b.n	80058da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005806:	781a      	ldrb	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	1c5a      	adds	r2, r3, #1
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800581c:	b29b      	uxth	r3, r3
 800581e:	3b01      	subs	r3, #1
 8005820:	b29a      	uxth	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800582a:	3b01      	subs	r3, #1
 800582c:	b29a      	uxth	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	f003 0304 	and.w	r3, r3, #4
 800583c:	2b04      	cmp	r3, #4
 800583e:	d11b      	bne.n	8005878 <HAL_I2C_Master_Transmit+0x188>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005844:	2b00      	cmp	r3, #0
 8005846:	d017      	beq.n	8005878 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584c:	781a      	ldrb	r2, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005858:	1c5a      	adds	r2, r3, #1
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005862:	b29b      	uxth	r3, r3
 8005864:	3b01      	subs	r3, #1
 8005866:	b29a      	uxth	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005870:	3b01      	subs	r3, #1
 8005872:	b29a      	uxth	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	6a39      	ldr	r1, [r7, #32]
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 fcc2 	bl	8006206 <I2C_WaitOnBTFFlagUntilTimeout>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00d      	beq.n	80058a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588c:	2b04      	cmp	r3, #4
 800588e:	d107      	bne.n	80058a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800589e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e01a      	b.n	80058da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d194      	bne.n	80057d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2220      	movs	r2, #32
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80058d4:	2300      	movs	r3, #0
 80058d6:	e000      	b.n	80058da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80058d8:	2302      	movs	r3, #2
  }
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3718      	adds	r7, #24
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	00100002 	.word	0x00100002
 80058e8:	ffff0000 	.word	0xffff0000

080058ec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b08c      	sub	sp, #48	; 0x30
 80058f0:	af02      	add	r7, sp, #8
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	607a      	str	r2, [r7, #4]
 80058f6:	461a      	mov	r2, r3
 80058f8:	460b      	mov	r3, r1
 80058fa:	817b      	strh	r3, [r7, #10]
 80058fc:	4613      	mov	r3, r2
 80058fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005900:	f7fc faf2 	bl	8001ee8 <HAL_GetTick>
 8005904:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b20      	cmp	r3, #32
 8005910:	f040 820b 	bne.w	8005d2a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	2319      	movs	r3, #25
 800591a:	2201      	movs	r2, #1
 800591c:	497c      	ldr	r1, [pc, #496]	; (8005b10 <HAL_I2C_Master_Receive+0x224>)
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f000 fb5a 	bl	8005fd8 <I2C_WaitOnFlagUntilTimeout>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800592a:	2302      	movs	r3, #2
 800592c:	e1fe      	b.n	8005d2c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005934:	2b01      	cmp	r3, #1
 8005936:	d101      	bne.n	800593c <HAL_I2C_Master_Receive+0x50>
 8005938:	2302      	movs	r3, #2
 800593a:	e1f7      	b.n	8005d2c <HAL_I2C_Master_Receive+0x440>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b01      	cmp	r3, #1
 8005950:	d007      	beq.n	8005962 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f042 0201 	orr.w	r2, r2, #1
 8005960:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005970:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2222      	movs	r2, #34	; 0x22
 8005976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2210      	movs	r2, #16
 800597e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	893a      	ldrh	r2, [r7, #8]
 8005992:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005998:	b29a      	uxth	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	4a5c      	ldr	r2, [pc, #368]	; (8005b14 <HAL_I2C_Master_Receive+0x228>)
 80059a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80059a4:	8979      	ldrh	r1, [r7, #10]
 80059a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 fa46 	bl	8005e3c <I2C_MasterRequestRead>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e1b8      	b.n	8005d2c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d113      	bne.n	80059ea <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059c2:	2300      	movs	r3, #0
 80059c4:	623b      	str	r3, [r7, #32]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	623b      	str	r3, [r7, #32]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	623b      	str	r3, [r7, #32]
 80059d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059e6:	601a      	str	r2, [r3, #0]
 80059e8:	e18c      	b.n	8005d04 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d11b      	bne.n	8005a2a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a02:	2300      	movs	r3, #0
 8005a04:	61fb      	str	r3, [r7, #28]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	61fb      	str	r3, [r7, #28]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	61fb      	str	r3, [r7, #28]
 8005a16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	e16c      	b.n	8005d04 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d11b      	bne.n	8005a6a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a40:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a52:	2300      	movs	r3, #0
 8005a54:	61bb      	str	r3, [r7, #24]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	61bb      	str	r3, [r7, #24]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	61bb      	str	r3, [r7, #24]
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	e14c      	b.n	8005d04 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	617b      	str	r3, [r7, #20]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	617b      	str	r3, [r7, #20]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005a90:	e138      	b.n	8005d04 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a96:	2b03      	cmp	r3, #3
 8005a98:	f200 80f1 	bhi.w	8005c7e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d123      	bne.n	8005aec <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 fbed 	bl	8006288 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d001      	beq.n	8005ab8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e139      	b.n	8005d2c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	691a      	ldr	r2, [r3, #16]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	b2d2      	uxtb	r2, r2
 8005ac4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005aea:	e10b      	b.n	8005d04 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d14e      	bne.n	8005b92 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afa:	2200      	movs	r2, #0
 8005afc:	4906      	ldr	r1, [pc, #24]	; (8005b18 <HAL_I2C_Master_Receive+0x22c>)
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 fa6a 	bl	8005fd8 <I2C_WaitOnFlagUntilTimeout>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d008      	beq.n	8005b1c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e10e      	b.n	8005d2c <HAL_I2C_Master_Receive+0x440>
 8005b0e:	bf00      	nop
 8005b10:	00100002 	.word	0x00100002
 8005b14:	ffff0000 	.word	0xffff0000
 8005b18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	691a      	ldr	r2, [r3, #16]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b36:	b2d2      	uxtb	r2, r2
 8005b38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3e:	1c5a      	adds	r2, r3, #1
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	3b01      	subs	r3, #1
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	691a      	ldr	r2, [r3, #16]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b90:	e0b8      	b.n	8005d04 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b98:	2200      	movs	r2, #0
 8005b9a:	4966      	ldr	r1, [pc, #408]	; (8005d34 <HAL_I2C_Master_Receive+0x448>)
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 fa1b 	bl	8005fd8 <I2C_WaitOnFlagUntilTimeout>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e0bf      	b.n	8005d2c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	691a      	ldr	r2, [r3, #16]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc6:	b2d2      	uxtb	r2, r2
 8005bc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bce:	1c5a      	adds	r2, r3, #1
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	3b01      	subs	r3, #1
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	494f      	ldr	r1, [pc, #316]	; (8005d34 <HAL_I2C_Master_Receive+0x448>)
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 f9ed 	bl	8005fd8 <I2C_WaitOnFlagUntilTimeout>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d001      	beq.n	8005c08 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e091      	b.n	8005d2c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	691a      	ldr	r2, [r3, #16]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c34:	3b01      	subs	r3, #1
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	3b01      	subs	r3, #1
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	691a      	ldr	r2, [r3, #16]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	b2d2      	uxtb	r2, r2
 8005c56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	1c5a      	adds	r2, r3, #1
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c66:	3b01      	subs	r3, #1
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	3b01      	subs	r3, #1
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c7c:	e042      	b.n	8005d04 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 fb00 	bl	8006288 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e04c      	b.n	8005d2c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	691a      	ldr	r2, [r3, #16]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	b2d2      	uxtb	r2, r2
 8005c9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	f003 0304 	and.w	r3, r3, #4
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d118      	bne.n	8005d04 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	691a      	ldr	r2, [r3, #16]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cdc:	b2d2      	uxtb	r2, r2
 8005cde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f47f aec2 	bne.w	8005a92 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2220      	movs	r2, #32
 8005d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	e000      	b.n	8005d2c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005d2a:	2302      	movs	r3, #2
  }
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3728      	adds	r7, #40	; 0x28
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	00010004 	.word	0x00010004

08005d38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b088      	sub	sp, #32
 8005d3c:	af02      	add	r7, sp, #8
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	607a      	str	r2, [r7, #4]
 8005d42:	603b      	str	r3, [r7, #0]
 8005d44:	460b      	mov	r3, r1
 8005d46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	2b08      	cmp	r3, #8
 8005d52:	d006      	beq.n	8005d62 <I2C_MasterRequestWrite+0x2a>
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d003      	beq.n	8005d62 <I2C_MasterRequestWrite+0x2a>
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d60:	d108      	bne.n	8005d74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d70:	601a      	str	r2, [r3, #0]
 8005d72:	e00b      	b.n	8005d8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d78:	2b12      	cmp	r3, #18
 8005d7a:	d107      	bne.n	8005d8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f000 f91d 	bl	8005fd8 <I2C_WaitOnFlagUntilTimeout>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00d      	beq.n	8005dc0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005db2:	d103      	bne.n	8005dbc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e035      	b.n	8005e2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dc8:	d108      	bne.n	8005ddc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005dca:	897b      	ldrh	r3, [r7, #10]
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	461a      	mov	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005dd8:	611a      	str	r2, [r3, #16]
 8005dda:	e01b      	b.n	8005e14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ddc:	897b      	ldrh	r3, [r7, #10]
 8005dde:	11db      	asrs	r3, r3, #7
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	f003 0306 	and.w	r3, r3, #6
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	f063 030f 	orn	r3, r3, #15
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	490e      	ldr	r1, [pc, #56]	; (8005e34 <I2C_MasterRequestWrite+0xfc>)
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f000 f943 	bl	8006086 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e010      	b.n	8005e2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005e0a:	897b      	ldrh	r3, [r7, #10]
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	4907      	ldr	r1, [pc, #28]	; (8005e38 <I2C_MasterRequestWrite+0x100>)
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 f933 	bl	8006086 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d001      	beq.n	8005e2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e000      	b.n	8005e2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3718      	adds	r7, #24
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	00010008 	.word	0x00010008
 8005e38:	00010002 	.word	0x00010002

08005e3c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b088      	sub	sp, #32
 8005e40:	af02      	add	r7, sp, #8
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	607a      	str	r2, [r7, #4]
 8005e46:	603b      	str	r3, [r7, #0]
 8005e48:	460b      	mov	r3, r1
 8005e4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e50:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e60:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d006      	beq.n	8005e76 <I2C_MasterRequestRead+0x3a>
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d003      	beq.n	8005e76 <I2C_MasterRequestRead+0x3a>
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e74:	d108      	bne.n	8005e88 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	e00b      	b.n	8005ea0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8c:	2b11      	cmp	r3, #17
 8005e8e:	d107      	bne.n	8005ea0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	9300      	str	r3, [sp, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 f893 	bl	8005fd8 <I2C_WaitOnFlagUntilTimeout>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00d      	beq.n	8005ed4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ec6:	d103      	bne.n	8005ed0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ece:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e079      	b.n	8005fc8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005edc:	d108      	bne.n	8005ef0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ede:	897b      	ldrh	r3, [r7, #10]
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	f043 0301 	orr.w	r3, r3, #1
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	611a      	str	r2, [r3, #16]
 8005eee:	e05f      	b.n	8005fb0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ef0:	897b      	ldrh	r3, [r7, #10]
 8005ef2:	11db      	asrs	r3, r3, #7
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	f003 0306 	and.w	r3, r3, #6
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	f063 030f 	orn	r3, r3, #15
 8005f00:	b2da      	uxtb	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	4930      	ldr	r1, [pc, #192]	; (8005fd0 <I2C_MasterRequestRead+0x194>)
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f000 f8b9 	bl	8006086 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e054      	b.n	8005fc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005f1e:	897b      	ldrh	r3, [r7, #10]
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	4929      	ldr	r1, [pc, #164]	; (8005fd4 <I2C_MasterRequestRead+0x198>)
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f000 f8a9 	bl	8006086 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e044      	b.n	8005fc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f3e:	2300      	movs	r3, #0
 8005f40:	613b      	str	r3, [r7, #16]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	613b      	str	r3, [r7, #16]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	613b      	str	r3, [r7, #16]
 8005f52:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f62:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f000 f831 	bl	8005fd8 <I2C_WaitOnFlagUntilTimeout>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00d      	beq.n	8005f98 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f8a:	d103      	bne.n	8005f94 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f92:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e017      	b.n	8005fc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005f98:	897b      	ldrh	r3, [r7, #10]
 8005f9a:	11db      	asrs	r3, r3, #7
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	f003 0306 	and.w	r3, r3, #6
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	f063 030e 	orn	r3, r3, #14
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	4907      	ldr	r1, [pc, #28]	; (8005fd4 <I2C_MasterRequestRead+0x198>)
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f000 f865 	bl	8006086 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e000      	b.n	8005fc8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3718      	adds	r7, #24
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	00010008 	.word	0x00010008
 8005fd4:	00010002 	.word	0x00010002

08005fd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	603b      	str	r3, [r7, #0]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fe8:	e025      	b.n	8006036 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff0:	d021      	beq.n	8006036 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ff2:	f7fb ff79 	bl	8001ee8 <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d302      	bcc.n	8006008 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d116      	bne.n	8006036 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2220      	movs	r2, #32
 8006012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006022:	f043 0220 	orr.w	r2, r3, #32
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e023      	b.n	800607e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	0c1b      	lsrs	r3, r3, #16
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b01      	cmp	r3, #1
 800603e:	d10d      	bne.n	800605c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	43da      	mvns	r2, r3
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4013      	ands	r3, r2
 800604c:	b29b      	uxth	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	bf0c      	ite	eq
 8006052:	2301      	moveq	r3, #1
 8006054:	2300      	movne	r3, #0
 8006056:	b2db      	uxtb	r3, r3
 8006058:	461a      	mov	r2, r3
 800605a:	e00c      	b.n	8006076 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	43da      	mvns	r2, r3
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	4013      	ands	r3, r2
 8006068:	b29b      	uxth	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	bf0c      	ite	eq
 800606e:	2301      	moveq	r3, #1
 8006070:	2300      	movne	r3, #0
 8006072:	b2db      	uxtb	r3, r3
 8006074:	461a      	mov	r2, r3
 8006076:	79fb      	ldrb	r3, [r7, #7]
 8006078:	429a      	cmp	r2, r3
 800607a:	d0b6      	beq.n	8005fea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b084      	sub	sp, #16
 800608a:	af00      	add	r7, sp, #0
 800608c:	60f8      	str	r0, [r7, #12]
 800608e:	60b9      	str	r1, [r7, #8]
 8006090:	607a      	str	r2, [r7, #4]
 8006092:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006094:	e051      	b.n	800613a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a4:	d123      	bne.n	80060ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2220      	movs	r2, #32
 80060ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060da:	f043 0204 	orr.w	r2, r3, #4
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e046      	b.n	800617c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f4:	d021      	beq.n	800613a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060f6:	f7fb fef7 	bl	8001ee8 <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	429a      	cmp	r2, r3
 8006104:	d302      	bcc.n	800610c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d116      	bne.n	800613a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2220      	movs	r2, #32
 8006116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006126:	f043 0220 	orr.w	r2, r3, #32
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e020      	b.n	800617c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	0c1b      	lsrs	r3, r3, #16
 800613e:	b2db      	uxtb	r3, r3
 8006140:	2b01      	cmp	r3, #1
 8006142:	d10c      	bne.n	800615e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	43da      	mvns	r2, r3
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	4013      	ands	r3, r2
 8006150:	b29b      	uxth	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	bf14      	ite	ne
 8006156:	2301      	movne	r3, #1
 8006158:	2300      	moveq	r3, #0
 800615a:	b2db      	uxtb	r3, r3
 800615c:	e00b      	b.n	8006176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	43da      	mvns	r2, r3
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	4013      	ands	r3, r2
 800616a:	b29b      	uxth	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	bf14      	ite	ne
 8006170:	2301      	movne	r3, #1
 8006172:	2300      	moveq	r3, #0
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d18d      	bne.n	8006096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006190:	e02d      	b.n	80061ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f000 f8ce 	bl	8006334 <I2C_IsAcknowledgeFailed>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e02d      	b.n	80061fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a8:	d021      	beq.n	80061ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061aa:	f7fb fe9d 	bl	8001ee8 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d302      	bcc.n	80061c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d116      	bne.n	80061ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2220      	movs	r2, #32
 80061ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	f043 0220 	orr.w	r2, r3, #32
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e007      	b.n	80061fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f8:	2b80      	cmp	r3, #128	; 0x80
 80061fa:	d1ca      	bne.n	8006192 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b084      	sub	sp, #16
 800620a:	af00      	add	r7, sp, #0
 800620c:	60f8      	str	r0, [r7, #12]
 800620e:	60b9      	str	r1, [r7, #8]
 8006210:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006212:	e02d      	b.n	8006270 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 f88d 	bl	8006334 <I2C_IsAcknowledgeFailed>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e02d      	b.n	8006280 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622a:	d021      	beq.n	8006270 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800622c:	f7fb fe5c 	bl	8001ee8 <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	429a      	cmp	r2, r3
 800623a:	d302      	bcc.n	8006242 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d116      	bne.n	8006270 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2220      	movs	r2, #32
 800624c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625c:	f043 0220 	orr.w	r2, r3, #32
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e007      	b.n	8006280 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	f003 0304 	and.w	r3, r3, #4
 800627a:	2b04      	cmp	r3, #4
 800627c:	d1ca      	bne.n	8006214 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006294:	e042      	b.n	800631c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	f003 0310 	and.w	r3, r3, #16
 80062a0:	2b10      	cmp	r3, #16
 80062a2:	d119      	bne.n	80062d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f06f 0210 	mvn.w	r2, #16
 80062ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e029      	b.n	800632c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062d8:	f7fb fe06 	bl	8001ee8 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d302      	bcc.n	80062ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d116      	bne.n	800631c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2220      	movs	r2, #32
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006308:	f043 0220 	orr.w	r2, r3, #32
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e007      	b.n	800632c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006326:	2b40      	cmp	r3, #64	; 0x40
 8006328:	d1b5      	bne.n	8006296 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800634a:	d11b      	bne.n	8006384 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006354:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2220      	movs	r2, #32
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006370:	f043 0204 	orr.w	r2, r3, #4
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e000      	b.n	8006386 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
	...

08006394 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b088      	sub	sp, #32
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e128      	b.n	80065f8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d109      	bne.n	80063c6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a90      	ldr	r2, [pc, #576]	; (8006600 <HAL_I2S_Init+0x26c>)
 80063be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f7fb f8f7 	bl	80015b4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2202      	movs	r2, #2
 80063ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	69db      	ldr	r3, [r3, #28]
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	6812      	ldr	r2, [r2, #0]
 80063d8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80063dc:	f023 030f 	bic.w	r3, r3, #15
 80063e0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2202      	movs	r2, #2
 80063e8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d060      	beq.n	80064b4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d102      	bne.n	8006400 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80063fa:	2310      	movs	r3, #16
 80063fc:	617b      	str	r3, [r7, #20]
 80063fe:	e001      	b.n	8006404 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006400:	2320      	movs	r3, #32
 8006402:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	2b20      	cmp	r3, #32
 800640a:	d802      	bhi.n	8006412 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	005b      	lsls	r3, r3, #1
 8006410:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006412:	2001      	movs	r0, #1
 8006414:	f001 fd18 	bl	8007e48 <HAL_RCCEx_GetPeriphCLKFreq>
 8006418:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006422:	d125      	bne.n	8006470 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d010      	beq.n	800644e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	fbb2 f2f3 	udiv	r2, r2, r3
 8006436:	4613      	mov	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	005b      	lsls	r3, r3, #1
 800643e:	461a      	mov	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	fbb2 f3f3 	udiv	r3, r2, r3
 8006448:	3305      	adds	r3, #5
 800644a:	613b      	str	r3, [r7, #16]
 800644c:	e01f      	b.n	800648e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	00db      	lsls	r3, r3, #3
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	fbb2 f2f3 	udiv	r2, r2, r3
 8006458:	4613      	mov	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	005b      	lsls	r3, r3, #1
 8006460:	461a      	mov	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	fbb2 f3f3 	udiv	r3, r2, r3
 800646a:	3305      	adds	r3, #5
 800646c:	613b      	str	r3, [r7, #16]
 800646e:	e00e      	b.n	800648e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	fbb2 f2f3 	udiv	r2, r2, r3
 8006478:	4613      	mov	r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4413      	add	r3, r2
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	461a      	mov	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	fbb2 f3f3 	udiv	r3, r2, r3
 800648a:	3305      	adds	r3, #5
 800648c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	4a5c      	ldr	r2, [pc, #368]	; (8006604 <HAL_I2S_Init+0x270>)
 8006492:	fba2 2303 	umull	r2, r3, r2, r3
 8006496:	08db      	lsrs	r3, r3, #3
 8006498:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	f003 0301 	and.w	r3, r3, #1
 80064a0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	085b      	lsrs	r3, r3, #1
 80064aa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	021b      	lsls	r3, r3, #8
 80064b0:	61bb      	str	r3, [r7, #24]
 80064b2:	e003      	b.n	80064bc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80064b4:	2302      	movs	r3, #2
 80064b6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80064b8:	2300      	movs	r3, #0
 80064ba:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d902      	bls.n	80064c8 <HAL_I2S_Init+0x134>
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	2bff      	cmp	r3, #255	; 0xff
 80064c6:	d907      	bls.n	80064d8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064cc:	f043 0210 	orr.w	r2, r3, #16
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e08f      	b.n	80065f8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	691a      	ldr	r2, [r3, #16]
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	ea42 0103 	orr.w	r1, r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	69fa      	ldr	r2, [r7, #28]
 80064e8:	430a      	orrs	r2, r1
 80064ea:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	69db      	ldr	r3, [r3, #28]
 80064f2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80064f6:	f023 030f 	bic.w	r3, r3, #15
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	6851      	ldr	r1, [r2, #4]
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	6892      	ldr	r2, [r2, #8]
 8006502:	4311      	orrs	r1, r2
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	68d2      	ldr	r2, [r2, #12]
 8006508:	4311      	orrs	r1, r2
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	6992      	ldr	r2, [r2, #24]
 800650e:	430a      	orrs	r2, r1
 8006510:	431a      	orrs	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800651a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a1b      	ldr	r3, [r3, #32]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d161      	bne.n	80065e8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a38      	ldr	r2, [pc, #224]	; (8006608 <HAL_I2S_Init+0x274>)
 8006528:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a37      	ldr	r2, [pc, #220]	; (800660c <HAL_I2S_Init+0x278>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d101      	bne.n	8006538 <HAL_I2S_Init+0x1a4>
 8006534:	4b36      	ldr	r3, [pc, #216]	; (8006610 <HAL_I2S_Init+0x27c>)
 8006536:	e001      	b.n	800653c <HAL_I2S_Init+0x1a8>
 8006538:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	6812      	ldr	r2, [r2, #0]
 8006542:	4932      	ldr	r1, [pc, #200]	; (800660c <HAL_I2S_Init+0x278>)
 8006544:	428a      	cmp	r2, r1
 8006546:	d101      	bne.n	800654c <HAL_I2S_Init+0x1b8>
 8006548:	4a31      	ldr	r2, [pc, #196]	; (8006610 <HAL_I2S_Init+0x27c>)
 800654a:	e001      	b.n	8006550 <HAL_I2S_Init+0x1bc>
 800654c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006550:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006554:	f023 030f 	bic.w	r3, r3, #15
 8006558:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a2b      	ldr	r2, [pc, #172]	; (800660c <HAL_I2S_Init+0x278>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d101      	bne.n	8006568 <HAL_I2S_Init+0x1d4>
 8006564:	4b2a      	ldr	r3, [pc, #168]	; (8006610 <HAL_I2S_Init+0x27c>)
 8006566:	e001      	b.n	800656c <HAL_I2S_Init+0x1d8>
 8006568:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800656c:	2202      	movs	r2, #2
 800656e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a25      	ldr	r2, [pc, #148]	; (800660c <HAL_I2S_Init+0x278>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d101      	bne.n	800657e <HAL_I2S_Init+0x1ea>
 800657a:	4b25      	ldr	r3, [pc, #148]	; (8006610 <HAL_I2S_Init+0x27c>)
 800657c:	e001      	b.n	8006582 <HAL_I2S_Init+0x1ee>
 800657e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006582:	69db      	ldr	r3, [r3, #28]
 8006584:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800658e:	d003      	beq.n	8006598 <HAL_I2S_Init+0x204>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d103      	bne.n	80065a0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006598:	f44f 7380 	mov.w	r3, #256	; 0x100
 800659c:	613b      	str	r3, [r7, #16]
 800659e:	e001      	b.n	80065a4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80065a0:	2300      	movs	r3, #0
 80065a2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80065ae:	4313      	orrs	r3, r2
 80065b0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80065b8:	4313      	orrs	r3, r2
 80065ba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80065c2:	4313      	orrs	r3, r2
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	897b      	ldrh	r3, [r7, #10]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80065d0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a0d      	ldr	r2, [pc, #52]	; (800660c <HAL_I2S_Init+0x278>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d101      	bne.n	80065e0 <HAL_I2S_Init+0x24c>
 80065dc:	4b0c      	ldr	r3, [pc, #48]	; (8006610 <HAL_I2S_Init+0x27c>)
 80065de:	e001      	b.n	80065e4 <HAL_I2S_Init+0x250>
 80065e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065e4:	897a      	ldrh	r2, [r7, #10]
 80065e6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3720      	adds	r7, #32
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	08006ca5 	.word	0x08006ca5
 8006604:	cccccccd 	.word	0xcccccccd
 8006608:	08006e2d 	.word	0x08006e2d
 800660c:	40003800 	.word	0x40003800
 8006610:	40003400 	.word	0x40003400

08006614 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	4613      	mov	r3, r2
 8006620:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d002      	beq.n	800662e <HAL_I2S_Transmit_DMA+0x1a>
 8006628:	88fb      	ldrh	r3, [r7, #6]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d101      	bne.n	8006632 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e08e      	b.n	8006750 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b01      	cmp	r3, #1
 800663c:	d101      	bne.n	8006642 <HAL_I2S_Transmit_DMA+0x2e>
 800663e:	2302      	movs	r3, #2
 8006640:	e086      	b.n	8006750 <HAL_I2S_Transmit_DMA+0x13c>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b01      	cmp	r3, #1
 8006654:	d005      	beq.n	8006662 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800665e:	2302      	movs	r3, #2
 8006660:	e076      	b.n	8006750 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2203      	movs	r2, #3
 8006666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	69db      	ldr	r3, [r3, #28]
 800667c:	f003 0307 	and.w	r3, r3, #7
 8006680:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	2b03      	cmp	r3, #3
 8006686:	d002      	beq.n	800668e <HAL_I2S_Transmit_DMA+0x7a>
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	2b05      	cmp	r3, #5
 800668c:	d10a      	bne.n	80066a4 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 800668e:	88fb      	ldrh	r3, [r7, #6]
 8006690:	005b      	lsls	r3, r3, #1
 8006692:	b29a      	uxth	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8006698:	88fb      	ldrh	r3, [r7, #6]
 800669a:	005b      	lsls	r3, r3, #1
 800669c:	b29a      	uxth	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066a2:	e005      	b.n	80066b0 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	88fa      	ldrh	r2, [r7, #6]
 80066a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	88fa      	ldrh	r2, [r7, #6]
 80066ae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b4:	4a28      	ldr	r2, [pc, #160]	; (8006758 <HAL_I2S_Transmit_DMA+0x144>)
 80066b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066bc:	4a27      	ldr	r2, [pc, #156]	; (800675c <HAL_I2S_Transmit_DMA+0x148>)
 80066be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c4:	4a26      	ldr	r2, [pc, #152]	; (8006760 <HAL_I2S_Transmit_DMA+0x14c>)
 80066c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80066d0:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80066d8:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066de:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80066e0:	f7fc fc2e 	bl	8002f40 <HAL_DMA_Start_IT>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00f      	beq.n	800670a <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ee:	f043 0208 	orr.w	r2, r3, #8
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e022      	b.n	8006750 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	69db      	ldr	r3, [r3, #28]
 8006710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006714:	2b00      	cmp	r3, #0
 8006716:	d107      	bne.n	8006728 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	69da      	ldr	r2, [r3, #28]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006726:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f003 0302 	and.w	r3, r3, #2
 8006732:	2b00      	cmp	r3, #0
 8006734:	d107      	bne.n	8006746 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f042 0202 	orr.w	r2, r2, #2
 8006744:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3718      	adds	r7, #24
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	08006b83 	.word	0x08006b83
 800675c:	08006b41 	.word	0x08006b41
 8006760:	08006b9f 	.word	0x08006b9f

08006764 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b088      	sub	sp, #32
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 800676c:	2300      	movs	r3, #0
 800676e:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006778:	d004      	beq.n	8006784 <HAL_I2S_DMAStop+0x20>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	f040 80d1 	bne.w	8006926 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00f      	beq.n	80067ac <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006790:	4618      	mov	r0, r3
 8006792:	f7fc fc2d 	bl	8002ff0 <HAL_DMA_Abort>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d007      	beq.n	80067ac <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a0:	f043 0208 	orr.w	r2, r3, #8
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80067ac:	2364      	movs	r3, #100	; 0x64
 80067ae:	2201      	movs	r2, #1
 80067b0:	2102      	movs	r1, #2
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fb00 	bl	8006db8 <I2S_WaitFlagStateUntilTimeout>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00b      	beq.n	80067d6 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c2:	f043 0201 	orr.w	r2, r3, #1
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80067d6:	2364      	movs	r3, #100	; 0x64
 80067d8:	2200      	movs	r2, #0
 80067da:	2180      	movs	r1, #128	; 0x80
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 faeb 	bl	8006db8 <I2S_WaitFlagStateUntilTimeout>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00b      	beq.n	8006800 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ec:	f043 0201 	orr.w	r2, r3, #1
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	69da      	ldr	r2, [r3, #28]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800680e:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006810:	2300      	movs	r3, #0
 8006812:	617b      	str	r3, [r7, #20]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	617b      	str	r3, [r7, #20]
 800681c:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f022 0202 	bic.w	r2, r2, #2
 800682c:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006834:	b2db      	uxtb	r3, r3
 8006836:	2b05      	cmp	r3, #5
 8006838:	f040 8165 	bne.w	8006b06 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00f      	beq.n	8006864 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006848:	4618      	mov	r0, r3
 800684a:	f7fc fbd1 	bl	8002ff0 <HAL_DMA_Abort>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d007      	beq.n	8006864 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006858:	f043 0208 	orr.w	r2, r3, #8
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a8a      	ldr	r2, [pc, #552]	; (8006a94 <HAL_I2S_DMAStop+0x330>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d101      	bne.n	8006872 <HAL_I2S_DMAStop+0x10e>
 800686e:	4b8a      	ldr	r3, [pc, #552]	; (8006a98 <HAL_I2S_DMAStop+0x334>)
 8006870:	e001      	b.n	8006876 <HAL_I2S_DMAStop+0x112>
 8006872:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006876:	69da      	ldr	r2, [r3, #28]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4985      	ldr	r1, [pc, #532]	; (8006a94 <HAL_I2S_DMAStop+0x330>)
 800687e:	428b      	cmp	r3, r1
 8006880:	d101      	bne.n	8006886 <HAL_I2S_DMAStop+0x122>
 8006882:	4b85      	ldr	r3, [pc, #532]	; (8006a98 <HAL_I2S_DMAStop+0x334>)
 8006884:	e001      	b.n	800688a <HAL_I2S_DMAStop+0x126>
 8006886:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800688a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800688e:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8006890:	2300      	movs	r3, #0
 8006892:	613b      	str	r3, [r7, #16]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a7e      	ldr	r2, [pc, #504]	; (8006a94 <HAL_I2S_DMAStop+0x330>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d101      	bne.n	80068a2 <HAL_I2S_DMAStop+0x13e>
 800689e:	4b7e      	ldr	r3, [pc, #504]	; (8006a98 <HAL_I2S_DMAStop+0x334>)
 80068a0:	e001      	b.n	80068a6 <HAL_I2S_DMAStop+0x142>
 80068a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	613b      	str	r3, [r7, #16]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a79      	ldr	r2, [pc, #484]	; (8006a94 <HAL_I2S_DMAStop+0x330>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d101      	bne.n	80068b8 <HAL_I2S_DMAStop+0x154>
 80068b4:	4b78      	ldr	r3, [pc, #480]	; (8006a98 <HAL_I2S_DMAStop+0x334>)
 80068b6:	e001      	b.n	80068bc <HAL_I2S_DMAStop+0x158>
 80068b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	613b      	str	r3, [r7, #16]
 80068c0:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a73      	ldr	r2, [pc, #460]	; (8006a94 <HAL_I2S_DMAStop+0x330>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d101      	bne.n	80068d0 <HAL_I2S_DMAStop+0x16c>
 80068cc:	4b72      	ldr	r3, [pc, #456]	; (8006a98 <HAL_I2S_DMAStop+0x334>)
 80068ce:	e001      	b.n	80068d4 <HAL_I2S_DMAStop+0x170>
 80068d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	496e      	ldr	r1, [pc, #440]	; (8006a94 <HAL_I2S_DMAStop+0x330>)
 80068dc:	428b      	cmp	r3, r1
 80068de:	d101      	bne.n	80068e4 <HAL_I2S_DMAStop+0x180>
 80068e0:	4b6d      	ldr	r3, [pc, #436]	; (8006a98 <HAL_I2S_DMAStop+0x334>)
 80068e2:	e001      	b.n	80068e8 <HAL_I2S_DMAStop+0x184>
 80068e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068e8:	f022 0201 	bic.w	r2, r2, #1
 80068ec:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10c      	bne.n	8006910 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800690e:	e0fa      	b.n	8006b06 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a5f      	ldr	r2, [pc, #380]	; (8006a94 <HAL_I2S_DMAStop+0x330>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d101      	bne.n	800691e <HAL_I2S_DMAStop+0x1ba>
 800691a:	4b5f      	ldr	r3, [pc, #380]	; (8006a98 <HAL_I2S_DMAStop+0x334>)
 800691c:	e001      	b.n	8006922 <HAL_I2S_DMAStop+0x1be>
 800691e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006922:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006924:	e0ef      	b.n	8006b06 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800692e:	d005      	beq.n	800693c <HAL_I2S_DMAStop+0x1d8>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006938:	f040 80e5 	bne.w	8006b06 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00f      	beq.n	8006964 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006948:	4618      	mov	r0, r3
 800694a:	f7fc fb51 	bl	8002ff0 <HAL_DMA_Abort>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d007      	beq.n	8006964 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006958:	f043 0208 	orr.w	r2, r3, #8
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b05      	cmp	r3, #5
 800696e:	f040 809a 	bne.w	8006aa6 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00f      	beq.n	800699a <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697e:	4618      	mov	r0, r3
 8006980:	f7fc fb36 	bl	8002ff0 <HAL_DMA_Abort>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d007      	beq.n	800699a <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800698e:	f043 0208 	orr.w	r2, r3, #8
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 800699a:	f7fb faa5 	bl	8001ee8 <HAL_GetTick>
 800699e:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80069a0:	e012      	b.n	80069c8 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80069a2:	f7fb faa1 	bl	8001ee8 <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	2b64      	cmp	r3, #100	; 0x64
 80069ae:	d90b      	bls.n	80069c8 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b4:	f043 0201 	orr.w	r2, r3, #1
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a31      	ldr	r2, [pc, #196]	; (8006a94 <HAL_I2S_DMAStop+0x330>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d101      	bne.n	80069d6 <HAL_I2S_DMAStop+0x272>
 80069d2:	4b31      	ldr	r3, [pc, #196]	; (8006a98 <HAL_I2S_DMAStop+0x334>)
 80069d4:	e001      	b.n	80069da <HAL_I2S_DMAStop+0x276>
 80069d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d1de      	bne.n	80069a2 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80069e4:	e012      	b.n	8006a0c <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80069e6:	f7fb fa7f 	bl	8001ee8 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	2b64      	cmp	r3, #100	; 0x64
 80069f2:	d90b      	bls.n	8006a0c <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f8:	f043 0201 	orr.w	r2, r3, #1
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a20      	ldr	r2, [pc, #128]	; (8006a94 <HAL_I2S_DMAStop+0x330>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d101      	bne.n	8006a1a <HAL_I2S_DMAStop+0x2b6>
 8006a16:	4b20      	ldr	r3, [pc, #128]	; (8006a98 <HAL_I2S_DMAStop+0x334>)
 8006a18:	e001      	b.n	8006a1e <HAL_I2S_DMAStop+0x2ba>
 8006a1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a24:	2b80      	cmp	r3, #128	; 0x80
 8006a26:	d0de      	beq.n	80069e6 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a19      	ldr	r2, [pc, #100]	; (8006a94 <HAL_I2S_DMAStop+0x330>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d101      	bne.n	8006a36 <HAL_I2S_DMAStop+0x2d2>
 8006a32:	4b19      	ldr	r3, [pc, #100]	; (8006a98 <HAL_I2S_DMAStop+0x334>)
 8006a34:	e001      	b.n	8006a3a <HAL_I2S_DMAStop+0x2d6>
 8006a36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a3a:	69da      	ldr	r2, [r3, #28]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4914      	ldr	r1, [pc, #80]	; (8006a94 <HAL_I2S_DMAStop+0x330>)
 8006a42:	428b      	cmp	r3, r1
 8006a44:	d101      	bne.n	8006a4a <HAL_I2S_DMAStop+0x2e6>
 8006a46:	4b14      	ldr	r3, [pc, #80]	; (8006a98 <HAL_I2S_DMAStop+0x334>)
 8006a48:	e001      	b.n	8006a4e <HAL_I2S_DMAStop+0x2ea>
 8006a4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a52:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8006a54:	2300      	movs	r3, #0
 8006a56:	60fb      	str	r3, [r7, #12]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a0d      	ldr	r2, [pc, #52]	; (8006a94 <HAL_I2S_DMAStop+0x330>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d101      	bne.n	8006a66 <HAL_I2S_DMAStop+0x302>
 8006a62:	4b0d      	ldr	r3, [pc, #52]	; (8006a98 <HAL_I2S_DMAStop+0x334>)
 8006a64:	e001      	b.n	8006a6a <HAL_I2S_DMAStop+0x306>
 8006a66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	60fb      	str	r3, [r7, #12]
 8006a6e:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a07      	ldr	r2, [pc, #28]	; (8006a94 <HAL_I2S_DMAStop+0x330>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d101      	bne.n	8006a7e <HAL_I2S_DMAStop+0x31a>
 8006a7a:	4b07      	ldr	r3, [pc, #28]	; (8006a98 <HAL_I2S_DMAStop+0x334>)
 8006a7c:	e001      	b.n	8006a82 <HAL_I2S_DMAStop+0x31e>
 8006a7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4902      	ldr	r1, [pc, #8]	; (8006a94 <HAL_I2S_DMAStop+0x330>)
 8006a8a:	428b      	cmp	r3, r1
 8006a8c:	d106      	bne.n	8006a9c <HAL_I2S_DMAStop+0x338>
 8006a8e:	4b02      	ldr	r3, [pc, #8]	; (8006a98 <HAL_I2S_DMAStop+0x334>)
 8006a90:	e006      	b.n	8006aa0 <HAL_I2S_DMAStop+0x33c>
 8006a92:	bf00      	nop
 8006a94:	40003800 	.word	0x40003800
 8006a98:	40003400 	.word	0x40003400
 8006a9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006aa0:	f022 0202 	bic.w	r2, r2, #2
 8006aa4:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	69da      	ldr	r2, [r3, #28]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ab4:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	60bb      	str	r3, [r7, #8]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	60bb      	str	r3, [r7, #8]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	60bb      	str	r3, [r7, #8]
 8006aca:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685a      	ldr	r2, [r3, #4]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f022 0201 	bic.w	r2, r2, #1
 8006ada:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ae4:	d10c      	bne.n	8006b00 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	77fb      	strb	r3, [r7, #31]
 8006afe:	e002      	b.n	8006b06 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8006b0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3720      	adds	r7, #32
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10e      	bne.n	8006b74 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f022 0202 	bic.w	r2, r2, #2
 8006b64:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f7fa f81d 	bl	8000bb4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006b7a:	bf00      	nop
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b084      	sub	sp, #16
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f7fa f821 	bl	8000bd8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006b96:	bf00      	nop
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b084      	sub	sp, #16
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	685a      	ldr	r2, [r3, #4]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 0203 	bic.w	r2, r2, #3
 8006bba:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bd4:	f043 0208 	orr.w	r2, r3, #8
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f7ff ffa5 	bl	8006b2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006be2:	bf00      	nop
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b082      	sub	sp, #8
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf6:	881a      	ldrh	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c02:	1c9a      	adds	r2, r3, #2
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10e      	bne.n	8006c3e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006c2e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f7f9 ffbb 	bl	8000bb4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006c3e:	bf00      	nop
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b082      	sub	sp, #8
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68da      	ldr	r2, [r3, #12]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c58:	b292      	uxth	r2, r2
 8006c5a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c60:	1c9a      	adds	r2, r3, #2
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10e      	bne.n	8006c9c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	685a      	ldr	r2, [r3, #4]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006c8c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7ff ff3e 	bl	8006b18 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006c9c:	bf00      	nop
 8006c9e:	3708      	adds	r7, #8
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b04      	cmp	r3, #4
 8006cbe:	d13a      	bne.n	8006d36 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d109      	bne.n	8006cde <I2S_IRQHandler+0x3a>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd4:	2b40      	cmp	r3, #64	; 0x40
 8006cd6:	d102      	bne.n	8006cde <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f7ff ffb4 	bl	8006c46 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce4:	2b40      	cmp	r3, #64	; 0x40
 8006ce6:	d126      	bne.n	8006d36 <I2S_IRQHandler+0x92>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f003 0320 	and.w	r3, r3, #32
 8006cf2:	2b20      	cmp	r3, #32
 8006cf4:	d11f      	bne.n	8006d36 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006d04:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006d06:	2300      	movs	r3, #0
 8006d08:	613b      	str	r3, [r7, #16]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	613b      	str	r3, [r7, #16]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	613b      	str	r3, [r7, #16]
 8006d1a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d28:	f043 0202 	orr.w	r2, r3, #2
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7ff fefb 	bl	8006b2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	d136      	bne.n	8006db0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	f003 0302 	and.w	r3, r3, #2
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d109      	bne.n	8006d60 <I2S_IRQHandler+0xbc>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d56:	2b80      	cmp	r3, #128	; 0x80
 8006d58:	d102      	bne.n	8006d60 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f7ff ff45 	bl	8006bea <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	f003 0308 	and.w	r3, r3, #8
 8006d66:	2b08      	cmp	r3, #8
 8006d68:	d122      	bne.n	8006db0 <I2S_IRQHandler+0x10c>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f003 0320 	and.w	r3, r3, #32
 8006d74:	2b20      	cmp	r3, #32
 8006d76:	d11b      	bne.n	8006db0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006d86:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006d88:	2300      	movs	r3, #0
 8006d8a:	60fb      	str	r3, [r7, #12]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	60fb      	str	r3, [r7, #12]
 8006d94:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006da2:	f043 0204 	orr.w	r2, r3, #4
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7ff febe 	bl	8006b2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006db0:	bf00      	nop
 8006db2:	3718      	adds	r7, #24
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	603b      	str	r3, [r7, #0]
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006dc8:	f7fb f88e 	bl	8001ee8 <HAL_GetTick>
 8006dcc:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006dce:	e018      	b.n	8006e02 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd6:	d014      	beq.n	8006e02 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8006dd8:	f7fb f886 	bl	8001ee8 <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d902      	bls.n	8006dee <I2S_WaitFlagStateUntilTimeout+0x36>
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d109      	bne.n	8006e02 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e00f      	b.n	8006e22 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	bf0c      	ite	eq
 8006e12:	2301      	moveq	r3, #1
 8006e14:	2300      	movne	r3, #0
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	461a      	mov	r2, r3
 8006e1a:	79fb      	ldrb	r3, [r7, #7]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d1d7      	bne.n	8006dd0 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3718      	adds	r7, #24
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
	...

08006e2c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b088      	sub	sp, #32
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4aa2      	ldr	r2, [pc, #648]	; (80070cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d101      	bne.n	8006e4a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006e46:	4ba2      	ldr	r3, [pc, #648]	; (80070d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006e48:	e001      	b.n	8006e4e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006e4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a9b      	ldr	r2, [pc, #620]	; (80070cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d101      	bne.n	8006e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006e64:	4b9a      	ldr	r3, [pc, #616]	; (80070d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006e66:	e001      	b.n	8006e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006e68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e78:	d004      	beq.n	8006e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f040 8099 	bne.w	8006fb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d107      	bne.n	8006e9e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d002      	beq.n	8006e9e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 f925 	bl	80070e8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d107      	bne.n	8006eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d002      	beq.n	8006eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f9c8 	bl	8007248 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ebe:	2b40      	cmp	r3, #64	; 0x40
 8006ec0:	d13a      	bne.n	8006f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f003 0320 	and.w	r3, r3, #32
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d035      	beq.n	8006f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a7e      	ldr	r2, [pc, #504]	; (80070cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d101      	bne.n	8006eda <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006ed6:	4b7e      	ldr	r3, [pc, #504]	; (80070d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006ed8:	e001      	b.n	8006ede <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006eda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4979      	ldr	r1, [pc, #484]	; (80070cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006ee6:	428b      	cmp	r3, r1
 8006ee8:	d101      	bne.n	8006eee <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006eea:	4b79      	ldr	r3, [pc, #484]	; (80070d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006eec:	e001      	b.n	8006ef2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006eee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ef2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006ef6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006f06:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006f08:	2300      	movs	r3, #0
 8006f0a:	60fb      	str	r3, [r7, #12]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	60fb      	str	r3, [r7, #12]
 8006f1c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f2a:	f043 0202 	orr.w	r2, r3, #2
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7ff fdfa 	bl	8006b2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	f003 0308 	and.w	r3, r3, #8
 8006f3e:	2b08      	cmp	r3, #8
 8006f40:	f040 80be 	bne.w	80070c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f003 0320 	and.w	r3, r3, #32
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f000 80b8 	beq.w	80070c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006f5e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a59      	ldr	r2, [pc, #356]	; (80070cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d101      	bne.n	8006f6e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006f6a:	4b59      	ldr	r3, [pc, #356]	; (80070d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006f6c:	e001      	b.n	8006f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006f6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f72:	685a      	ldr	r2, [r3, #4]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4954      	ldr	r1, [pc, #336]	; (80070cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006f7a:	428b      	cmp	r3, r1
 8006f7c:	d101      	bne.n	8006f82 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006f7e:	4b54      	ldr	r3, [pc, #336]	; (80070d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006f80:	e001      	b.n	8006f86 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006f82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006f8a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	60bb      	str	r3, [r7, #8]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	60bb      	str	r3, [r7, #8]
 8006f98:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fa6:	f043 0204 	orr.w	r2, r3, #4
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f7ff fdbc 	bl	8006b2c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006fb4:	e084      	b.n	80070c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	f003 0302 	and.w	r3, r3, #2
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d107      	bne.n	8006fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d002      	beq.n	8006fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f8be 	bl	800714c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	f003 0301 	and.w	r3, r3, #1
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d107      	bne.n	8006fea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d002      	beq.n	8006fea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 f8fd 	bl	80071e4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff0:	2b40      	cmp	r3, #64	; 0x40
 8006ff2:	d12f      	bne.n	8007054 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	f003 0320 	and.w	r3, r3, #32
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d02a      	beq.n	8007054 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	685a      	ldr	r2, [r3, #4]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800700c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a2e      	ldr	r2, [pc, #184]	; (80070cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d101      	bne.n	800701c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007018:	4b2d      	ldr	r3, [pc, #180]	; (80070d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800701a:	e001      	b.n	8007020 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800701c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007020:	685a      	ldr	r2, [r3, #4]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4929      	ldr	r1, [pc, #164]	; (80070cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007028:	428b      	cmp	r3, r1
 800702a:	d101      	bne.n	8007030 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800702c:	4b28      	ldr	r3, [pc, #160]	; (80070d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800702e:	e001      	b.n	8007034 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007030:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007034:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007038:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007046:	f043 0202 	orr.w	r2, r3, #2
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7ff fd6c 	bl	8006b2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	f003 0308 	and.w	r3, r3, #8
 800705a:	2b08      	cmp	r3, #8
 800705c:	d131      	bne.n	80070c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	f003 0320 	and.w	r3, r3, #32
 8007064:	2b00      	cmp	r3, #0
 8007066:	d02c      	beq.n	80070c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a17      	ldr	r2, [pc, #92]	; (80070cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d101      	bne.n	8007076 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007072:	4b17      	ldr	r3, [pc, #92]	; (80070d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007074:	e001      	b.n	800707a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007076:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4912      	ldr	r1, [pc, #72]	; (80070cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007082:	428b      	cmp	r3, r1
 8007084:	d101      	bne.n	800708a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8007086:	4b12      	ldr	r3, [pc, #72]	; (80070d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007088:	e001      	b.n	800708e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800708a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800708e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007092:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80070a2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b0:	f043 0204 	orr.w	r2, r3, #4
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f7ff fd37 	bl	8006b2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80070be:	e000      	b.n	80070c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80070c0:	bf00      	nop
}
 80070c2:	bf00      	nop
 80070c4:	3720      	adds	r7, #32
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	40003800 	.word	0x40003800
 80070d0:	40003400 	.word	0x40003400

080070d4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f4:	1c99      	adds	r1, r3, #2
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	6251      	str	r1, [r2, #36]	; 0x24
 80070fa:	881a      	ldrh	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007106:	b29b      	uxth	r3, r3
 8007108:	3b01      	subs	r3, #1
 800710a:	b29a      	uxth	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007114:	b29b      	uxth	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d113      	bne.n	8007142 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	685a      	ldr	r2, [r3, #4]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007128:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800712e:	b29b      	uxth	r3, r3
 8007130:	2b00      	cmp	r3, #0
 8007132:	d106      	bne.n	8007142 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f7ff ffc9 	bl	80070d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007142:	bf00      	nop
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
	...

0800714c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007158:	1c99      	adds	r1, r3, #2
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	6251      	str	r1, [r2, #36]	; 0x24
 800715e:	8819      	ldrh	r1, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a1d      	ldr	r2, [pc, #116]	; (80071dc <I2SEx_TxISR_I2SExt+0x90>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d101      	bne.n	800716e <I2SEx_TxISR_I2SExt+0x22>
 800716a:	4b1d      	ldr	r3, [pc, #116]	; (80071e0 <I2SEx_TxISR_I2SExt+0x94>)
 800716c:	e001      	b.n	8007172 <I2SEx_TxISR_I2SExt+0x26>
 800716e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007172:	460a      	mov	r2, r1
 8007174:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800717a:	b29b      	uxth	r3, r3
 800717c:	3b01      	subs	r3, #1
 800717e:	b29a      	uxth	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007188:	b29b      	uxth	r3, r3
 800718a:	2b00      	cmp	r3, #0
 800718c:	d121      	bne.n	80071d2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a12      	ldr	r2, [pc, #72]	; (80071dc <I2SEx_TxISR_I2SExt+0x90>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d101      	bne.n	800719c <I2SEx_TxISR_I2SExt+0x50>
 8007198:	4b11      	ldr	r3, [pc, #68]	; (80071e0 <I2SEx_TxISR_I2SExt+0x94>)
 800719a:	e001      	b.n	80071a0 <I2SEx_TxISR_I2SExt+0x54>
 800719c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071a0:	685a      	ldr	r2, [r3, #4]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	490d      	ldr	r1, [pc, #52]	; (80071dc <I2SEx_TxISR_I2SExt+0x90>)
 80071a8:	428b      	cmp	r3, r1
 80071aa:	d101      	bne.n	80071b0 <I2SEx_TxISR_I2SExt+0x64>
 80071ac:	4b0c      	ldr	r3, [pc, #48]	; (80071e0 <I2SEx_TxISR_I2SExt+0x94>)
 80071ae:	e001      	b.n	80071b4 <I2SEx_TxISR_I2SExt+0x68>
 80071b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80071b8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80071be:	b29b      	uxth	r3, r3
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d106      	bne.n	80071d2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f7ff ff81 	bl	80070d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80071d2:	bf00      	nop
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	40003800 	.word	0x40003800
 80071e0:	40003400 	.word	0x40003400

080071e4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68d8      	ldr	r0, [r3, #12]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f6:	1c99      	adds	r1, r3, #2
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	62d1      	str	r1, [r2, #44]	; 0x2c
 80071fc:	b282      	uxth	r2, r0
 80071fe:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007204:	b29b      	uxth	r3, r3
 8007206:	3b01      	subs	r3, #1
 8007208:	b29a      	uxth	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007212:	b29b      	uxth	r3, r3
 8007214:	2b00      	cmp	r3, #0
 8007216:	d113      	bne.n	8007240 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	685a      	ldr	r2, [r3, #4]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007226:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800722c:	b29b      	uxth	r3, r3
 800722e:	2b00      	cmp	r3, #0
 8007230:	d106      	bne.n	8007240 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f7ff ff4a 	bl	80070d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007240:	bf00      	nop
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a20      	ldr	r2, [pc, #128]	; (80072d8 <I2SEx_RxISR_I2SExt+0x90>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d101      	bne.n	800725e <I2SEx_RxISR_I2SExt+0x16>
 800725a:	4b20      	ldr	r3, [pc, #128]	; (80072dc <I2SEx_RxISR_I2SExt+0x94>)
 800725c:	e001      	b.n	8007262 <I2SEx_RxISR_I2SExt+0x1a>
 800725e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007262:	68d8      	ldr	r0, [r3, #12]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007268:	1c99      	adds	r1, r3, #2
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800726e:	b282      	uxth	r2, r0
 8007270:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007276:	b29b      	uxth	r3, r3
 8007278:	3b01      	subs	r3, #1
 800727a:	b29a      	uxth	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007284:	b29b      	uxth	r3, r3
 8007286:	2b00      	cmp	r3, #0
 8007288:	d121      	bne.n	80072ce <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a12      	ldr	r2, [pc, #72]	; (80072d8 <I2SEx_RxISR_I2SExt+0x90>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d101      	bne.n	8007298 <I2SEx_RxISR_I2SExt+0x50>
 8007294:	4b11      	ldr	r3, [pc, #68]	; (80072dc <I2SEx_RxISR_I2SExt+0x94>)
 8007296:	e001      	b.n	800729c <I2SEx_RxISR_I2SExt+0x54>
 8007298:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	490d      	ldr	r1, [pc, #52]	; (80072d8 <I2SEx_RxISR_I2SExt+0x90>)
 80072a4:	428b      	cmp	r3, r1
 80072a6:	d101      	bne.n	80072ac <I2SEx_RxISR_I2SExt+0x64>
 80072a8:	4b0c      	ldr	r3, [pc, #48]	; (80072dc <I2SEx_RxISR_I2SExt+0x94>)
 80072aa:	e001      	b.n	80072b0 <I2SEx_RxISR_I2SExt+0x68>
 80072ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80072b4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d106      	bne.n	80072ce <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7ff ff03 	bl	80070d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80072ce:	bf00      	nop
 80072d0:	3708      	adds	r7, #8
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	40003800 	.word	0x40003800
 80072dc:	40003400 	.word	0x40003400

080072e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b086      	sub	sp, #24
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d101      	bne.n	80072f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e264      	b.n	80077bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0301 	and.w	r3, r3, #1
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d075      	beq.n	80073ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80072fe:	4ba3      	ldr	r3, [pc, #652]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f003 030c 	and.w	r3, r3, #12
 8007306:	2b04      	cmp	r3, #4
 8007308:	d00c      	beq.n	8007324 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800730a:	4ba0      	ldr	r3, [pc, #640]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007312:	2b08      	cmp	r3, #8
 8007314:	d112      	bne.n	800733c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007316:	4b9d      	ldr	r3, [pc, #628]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800731e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007322:	d10b      	bne.n	800733c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007324:	4b99      	ldr	r3, [pc, #612]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d05b      	beq.n	80073e8 <HAL_RCC_OscConfig+0x108>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d157      	bne.n	80073e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e23f      	b.n	80077bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007344:	d106      	bne.n	8007354 <HAL_RCC_OscConfig+0x74>
 8007346:	4b91      	ldr	r3, [pc, #580]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a90      	ldr	r2, [pc, #576]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 800734c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007350:	6013      	str	r3, [r2, #0]
 8007352:	e01d      	b.n	8007390 <HAL_RCC_OscConfig+0xb0>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800735c:	d10c      	bne.n	8007378 <HAL_RCC_OscConfig+0x98>
 800735e:	4b8b      	ldr	r3, [pc, #556]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a8a      	ldr	r2, [pc, #552]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 8007364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	4b88      	ldr	r3, [pc, #544]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a87      	ldr	r2, [pc, #540]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 8007370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007374:	6013      	str	r3, [r2, #0]
 8007376:	e00b      	b.n	8007390 <HAL_RCC_OscConfig+0xb0>
 8007378:	4b84      	ldr	r3, [pc, #528]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a83      	ldr	r2, [pc, #524]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 800737e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007382:	6013      	str	r3, [r2, #0]
 8007384:	4b81      	ldr	r3, [pc, #516]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a80      	ldr	r2, [pc, #512]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 800738a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800738e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d013      	beq.n	80073c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007398:	f7fa fda6 	bl	8001ee8 <HAL_GetTick>
 800739c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800739e:	e008      	b.n	80073b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073a0:	f7fa fda2 	bl	8001ee8 <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	2b64      	cmp	r3, #100	; 0x64
 80073ac:	d901      	bls.n	80073b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e204      	b.n	80077bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073b2:	4b76      	ldr	r3, [pc, #472]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d0f0      	beq.n	80073a0 <HAL_RCC_OscConfig+0xc0>
 80073be:	e014      	b.n	80073ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073c0:	f7fa fd92 	bl	8001ee8 <HAL_GetTick>
 80073c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073c6:	e008      	b.n	80073da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073c8:	f7fa fd8e 	bl	8001ee8 <HAL_GetTick>
 80073cc:	4602      	mov	r2, r0
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	2b64      	cmp	r3, #100	; 0x64
 80073d4:	d901      	bls.n	80073da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e1f0      	b.n	80077bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073da:	4b6c      	ldr	r3, [pc, #432]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1f0      	bne.n	80073c8 <HAL_RCC_OscConfig+0xe8>
 80073e6:	e000      	b.n	80073ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0302 	and.w	r3, r3, #2
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d063      	beq.n	80074be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073f6:	4b65      	ldr	r3, [pc, #404]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f003 030c 	and.w	r3, r3, #12
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00b      	beq.n	800741a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007402:	4b62      	ldr	r3, [pc, #392]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800740a:	2b08      	cmp	r3, #8
 800740c:	d11c      	bne.n	8007448 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800740e:	4b5f      	ldr	r3, [pc, #380]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d116      	bne.n	8007448 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800741a:	4b5c      	ldr	r3, [pc, #368]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0302 	and.w	r3, r3, #2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d005      	beq.n	8007432 <HAL_RCC_OscConfig+0x152>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d001      	beq.n	8007432 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e1c4      	b.n	80077bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007432:	4b56      	ldr	r3, [pc, #344]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	00db      	lsls	r3, r3, #3
 8007440:	4952      	ldr	r1, [pc, #328]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 8007442:	4313      	orrs	r3, r2
 8007444:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007446:	e03a      	b.n	80074be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d020      	beq.n	8007492 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007450:	4b4f      	ldr	r3, [pc, #316]	; (8007590 <HAL_RCC_OscConfig+0x2b0>)
 8007452:	2201      	movs	r2, #1
 8007454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007456:	f7fa fd47 	bl	8001ee8 <HAL_GetTick>
 800745a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800745c:	e008      	b.n	8007470 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800745e:	f7fa fd43 	bl	8001ee8 <HAL_GetTick>
 8007462:	4602      	mov	r2, r0
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	2b02      	cmp	r3, #2
 800746a:	d901      	bls.n	8007470 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	e1a5      	b.n	80077bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007470:	4b46      	ldr	r3, [pc, #280]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0302 	and.w	r3, r3, #2
 8007478:	2b00      	cmp	r3, #0
 800747a:	d0f0      	beq.n	800745e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800747c:	4b43      	ldr	r3, [pc, #268]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	00db      	lsls	r3, r3, #3
 800748a:	4940      	ldr	r1, [pc, #256]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 800748c:	4313      	orrs	r3, r2
 800748e:	600b      	str	r3, [r1, #0]
 8007490:	e015      	b.n	80074be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007492:	4b3f      	ldr	r3, [pc, #252]	; (8007590 <HAL_RCC_OscConfig+0x2b0>)
 8007494:	2200      	movs	r2, #0
 8007496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007498:	f7fa fd26 	bl	8001ee8 <HAL_GetTick>
 800749c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800749e:	e008      	b.n	80074b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074a0:	f7fa fd22 	bl	8001ee8 <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d901      	bls.n	80074b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e184      	b.n	80077bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074b2:	4b36      	ldr	r3, [pc, #216]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 0302 	and.w	r3, r3, #2
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1f0      	bne.n	80074a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0308 	and.w	r3, r3, #8
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d030      	beq.n	800752c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d016      	beq.n	8007500 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074d2:	4b30      	ldr	r3, [pc, #192]	; (8007594 <HAL_RCC_OscConfig+0x2b4>)
 80074d4:	2201      	movs	r2, #1
 80074d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074d8:	f7fa fd06 	bl	8001ee8 <HAL_GetTick>
 80074dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074de:	e008      	b.n	80074f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074e0:	f7fa fd02 	bl	8001ee8 <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d901      	bls.n	80074f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e164      	b.n	80077bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074f2:	4b26      	ldr	r3, [pc, #152]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 80074f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074f6:	f003 0302 	and.w	r3, r3, #2
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d0f0      	beq.n	80074e0 <HAL_RCC_OscConfig+0x200>
 80074fe:	e015      	b.n	800752c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007500:	4b24      	ldr	r3, [pc, #144]	; (8007594 <HAL_RCC_OscConfig+0x2b4>)
 8007502:	2200      	movs	r2, #0
 8007504:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007506:	f7fa fcef 	bl	8001ee8 <HAL_GetTick>
 800750a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800750c:	e008      	b.n	8007520 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800750e:	f7fa fceb 	bl	8001ee8 <HAL_GetTick>
 8007512:	4602      	mov	r2, r0
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	2b02      	cmp	r3, #2
 800751a:	d901      	bls.n	8007520 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e14d      	b.n	80077bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007520:	4b1a      	ldr	r3, [pc, #104]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 8007522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007524:	f003 0302 	and.w	r3, r3, #2
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1f0      	bne.n	800750e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0304 	and.w	r3, r3, #4
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 80a0 	beq.w	800767a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800753a:	2300      	movs	r3, #0
 800753c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800753e:	4b13      	ldr	r3, [pc, #76]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 8007540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10f      	bne.n	800756a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800754a:	2300      	movs	r3, #0
 800754c:	60bb      	str	r3, [r7, #8]
 800754e:	4b0f      	ldr	r3, [pc, #60]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 8007550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007552:	4a0e      	ldr	r2, [pc, #56]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 8007554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007558:	6413      	str	r3, [r2, #64]	; 0x40
 800755a:	4b0c      	ldr	r3, [pc, #48]	; (800758c <HAL_RCC_OscConfig+0x2ac>)
 800755c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007562:	60bb      	str	r3, [r7, #8]
 8007564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007566:	2301      	movs	r3, #1
 8007568:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800756a:	4b0b      	ldr	r3, [pc, #44]	; (8007598 <HAL_RCC_OscConfig+0x2b8>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007572:	2b00      	cmp	r3, #0
 8007574:	d121      	bne.n	80075ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007576:	4b08      	ldr	r3, [pc, #32]	; (8007598 <HAL_RCC_OscConfig+0x2b8>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a07      	ldr	r2, [pc, #28]	; (8007598 <HAL_RCC_OscConfig+0x2b8>)
 800757c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007582:	f7fa fcb1 	bl	8001ee8 <HAL_GetTick>
 8007586:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007588:	e011      	b.n	80075ae <HAL_RCC_OscConfig+0x2ce>
 800758a:	bf00      	nop
 800758c:	40023800 	.word	0x40023800
 8007590:	42470000 	.word	0x42470000
 8007594:	42470e80 	.word	0x42470e80
 8007598:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800759c:	f7fa fca4 	bl	8001ee8 <HAL_GetTick>
 80075a0:	4602      	mov	r2, r0
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d901      	bls.n	80075ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80075aa:	2303      	movs	r3, #3
 80075ac:	e106      	b.n	80077bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075ae:	4b85      	ldr	r3, [pc, #532]	; (80077c4 <HAL_RCC_OscConfig+0x4e4>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d0f0      	beq.n	800759c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d106      	bne.n	80075d0 <HAL_RCC_OscConfig+0x2f0>
 80075c2:	4b81      	ldr	r3, [pc, #516]	; (80077c8 <HAL_RCC_OscConfig+0x4e8>)
 80075c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c6:	4a80      	ldr	r2, [pc, #512]	; (80077c8 <HAL_RCC_OscConfig+0x4e8>)
 80075c8:	f043 0301 	orr.w	r3, r3, #1
 80075cc:	6713      	str	r3, [r2, #112]	; 0x70
 80075ce:	e01c      	b.n	800760a <HAL_RCC_OscConfig+0x32a>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	2b05      	cmp	r3, #5
 80075d6:	d10c      	bne.n	80075f2 <HAL_RCC_OscConfig+0x312>
 80075d8:	4b7b      	ldr	r3, [pc, #492]	; (80077c8 <HAL_RCC_OscConfig+0x4e8>)
 80075da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075dc:	4a7a      	ldr	r2, [pc, #488]	; (80077c8 <HAL_RCC_OscConfig+0x4e8>)
 80075de:	f043 0304 	orr.w	r3, r3, #4
 80075e2:	6713      	str	r3, [r2, #112]	; 0x70
 80075e4:	4b78      	ldr	r3, [pc, #480]	; (80077c8 <HAL_RCC_OscConfig+0x4e8>)
 80075e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e8:	4a77      	ldr	r2, [pc, #476]	; (80077c8 <HAL_RCC_OscConfig+0x4e8>)
 80075ea:	f043 0301 	orr.w	r3, r3, #1
 80075ee:	6713      	str	r3, [r2, #112]	; 0x70
 80075f0:	e00b      	b.n	800760a <HAL_RCC_OscConfig+0x32a>
 80075f2:	4b75      	ldr	r3, [pc, #468]	; (80077c8 <HAL_RCC_OscConfig+0x4e8>)
 80075f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075f6:	4a74      	ldr	r2, [pc, #464]	; (80077c8 <HAL_RCC_OscConfig+0x4e8>)
 80075f8:	f023 0301 	bic.w	r3, r3, #1
 80075fc:	6713      	str	r3, [r2, #112]	; 0x70
 80075fe:	4b72      	ldr	r3, [pc, #456]	; (80077c8 <HAL_RCC_OscConfig+0x4e8>)
 8007600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007602:	4a71      	ldr	r2, [pc, #452]	; (80077c8 <HAL_RCC_OscConfig+0x4e8>)
 8007604:	f023 0304 	bic.w	r3, r3, #4
 8007608:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d015      	beq.n	800763e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007612:	f7fa fc69 	bl	8001ee8 <HAL_GetTick>
 8007616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007618:	e00a      	b.n	8007630 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800761a:	f7fa fc65 	bl	8001ee8 <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	f241 3288 	movw	r2, #5000	; 0x1388
 8007628:	4293      	cmp	r3, r2
 800762a:	d901      	bls.n	8007630 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800762c:	2303      	movs	r3, #3
 800762e:	e0c5      	b.n	80077bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007630:	4b65      	ldr	r3, [pc, #404]	; (80077c8 <HAL_RCC_OscConfig+0x4e8>)
 8007632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007634:	f003 0302 	and.w	r3, r3, #2
 8007638:	2b00      	cmp	r3, #0
 800763a:	d0ee      	beq.n	800761a <HAL_RCC_OscConfig+0x33a>
 800763c:	e014      	b.n	8007668 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800763e:	f7fa fc53 	bl	8001ee8 <HAL_GetTick>
 8007642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007644:	e00a      	b.n	800765c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007646:	f7fa fc4f 	bl	8001ee8 <HAL_GetTick>
 800764a:	4602      	mov	r2, r0
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	1ad3      	subs	r3, r2, r3
 8007650:	f241 3288 	movw	r2, #5000	; 0x1388
 8007654:	4293      	cmp	r3, r2
 8007656:	d901      	bls.n	800765c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e0af      	b.n	80077bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800765c:	4b5a      	ldr	r3, [pc, #360]	; (80077c8 <HAL_RCC_OscConfig+0x4e8>)
 800765e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007660:	f003 0302 	and.w	r3, r3, #2
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1ee      	bne.n	8007646 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007668:	7dfb      	ldrb	r3, [r7, #23]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d105      	bne.n	800767a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800766e:	4b56      	ldr	r3, [pc, #344]	; (80077c8 <HAL_RCC_OscConfig+0x4e8>)
 8007670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007672:	4a55      	ldr	r2, [pc, #340]	; (80077c8 <HAL_RCC_OscConfig+0x4e8>)
 8007674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007678:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	2b00      	cmp	r3, #0
 8007680:	f000 809b 	beq.w	80077ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007684:	4b50      	ldr	r3, [pc, #320]	; (80077c8 <HAL_RCC_OscConfig+0x4e8>)
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f003 030c 	and.w	r3, r3, #12
 800768c:	2b08      	cmp	r3, #8
 800768e:	d05c      	beq.n	800774a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	2b02      	cmp	r3, #2
 8007696:	d141      	bne.n	800771c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007698:	4b4c      	ldr	r3, [pc, #304]	; (80077cc <HAL_RCC_OscConfig+0x4ec>)
 800769a:	2200      	movs	r2, #0
 800769c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800769e:	f7fa fc23 	bl	8001ee8 <HAL_GetTick>
 80076a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076a4:	e008      	b.n	80076b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076a6:	f7fa fc1f 	bl	8001ee8 <HAL_GetTick>
 80076aa:	4602      	mov	r2, r0
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d901      	bls.n	80076b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80076b4:	2303      	movs	r3, #3
 80076b6:	e081      	b.n	80077bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076b8:	4b43      	ldr	r3, [pc, #268]	; (80077c8 <HAL_RCC_OscConfig+0x4e8>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d1f0      	bne.n	80076a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	69da      	ldr	r2, [r3, #28]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a1b      	ldr	r3, [r3, #32]
 80076cc:	431a      	orrs	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d2:	019b      	lsls	r3, r3, #6
 80076d4:	431a      	orrs	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076da:	085b      	lsrs	r3, r3, #1
 80076dc:	3b01      	subs	r3, #1
 80076de:	041b      	lsls	r3, r3, #16
 80076e0:	431a      	orrs	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e6:	061b      	lsls	r3, r3, #24
 80076e8:	4937      	ldr	r1, [pc, #220]	; (80077c8 <HAL_RCC_OscConfig+0x4e8>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076ee:	4b37      	ldr	r3, [pc, #220]	; (80077cc <HAL_RCC_OscConfig+0x4ec>)
 80076f0:	2201      	movs	r2, #1
 80076f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076f4:	f7fa fbf8 	bl	8001ee8 <HAL_GetTick>
 80076f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076fa:	e008      	b.n	800770e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076fc:	f7fa fbf4 	bl	8001ee8 <HAL_GetTick>
 8007700:	4602      	mov	r2, r0
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	2b02      	cmp	r3, #2
 8007708:	d901      	bls.n	800770e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	e056      	b.n	80077bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800770e:	4b2e      	ldr	r3, [pc, #184]	; (80077c8 <HAL_RCC_OscConfig+0x4e8>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d0f0      	beq.n	80076fc <HAL_RCC_OscConfig+0x41c>
 800771a:	e04e      	b.n	80077ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800771c:	4b2b      	ldr	r3, [pc, #172]	; (80077cc <HAL_RCC_OscConfig+0x4ec>)
 800771e:	2200      	movs	r2, #0
 8007720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007722:	f7fa fbe1 	bl	8001ee8 <HAL_GetTick>
 8007726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007728:	e008      	b.n	800773c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800772a:	f7fa fbdd 	bl	8001ee8 <HAL_GetTick>
 800772e:	4602      	mov	r2, r0
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	2b02      	cmp	r3, #2
 8007736:	d901      	bls.n	800773c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007738:	2303      	movs	r3, #3
 800773a:	e03f      	b.n	80077bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800773c:	4b22      	ldr	r3, [pc, #136]	; (80077c8 <HAL_RCC_OscConfig+0x4e8>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1f0      	bne.n	800772a <HAL_RCC_OscConfig+0x44a>
 8007748:	e037      	b.n	80077ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d101      	bne.n	8007756 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e032      	b.n	80077bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007756:	4b1c      	ldr	r3, [pc, #112]	; (80077c8 <HAL_RCC_OscConfig+0x4e8>)
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d028      	beq.n	80077b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800776e:	429a      	cmp	r2, r3
 8007770:	d121      	bne.n	80077b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800777c:	429a      	cmp	r2, r3
 800777e:	d11a      	bne.n	80077b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007786:	4013      	ands	r3, r2
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800778c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800778e:	4293      	cmp	r3, r2
 8007790:	d111      	bne.n	80077b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779c:	085b      	lsrs	r3, r3, #1
 800779e:	3b01      	subs	r3, #1
 80077a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d107      	bne.n	80077b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d001      	beq.n	80077ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e000      	b.n	80077bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3718      	adds	r7, #24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	40007000 	.word	0x40007000
 80077c8:	40023800 	.word	0x40023800
 80077cc:	42470060 	.word	0x42470060

080077d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d101      	bne.n	80077e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e0cc      	b.n	800797e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077e4:	4b68      	ldr	r3, [pc, #416]	; (8007988 <HAL_RCC_ClockConfig+0x1b8>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 0307 	and.w	r3, r3, #7
 80077ec:	683a      	ldr	r2, [r7, #0]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d90c      	bls.n	800780c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077f2:	4b65      	ldr	r3, [pc, #404]	; (8007988 <HAL_RCC_ClockConfig+0x1b8>)
 80077f4:	683a      	ldr	r2, [r7, #0]
 80077f6:	b2d2      	uxtb	r2, r2
 80077f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077fa:	4b63      	ldr	r3, [pc, #396]	; (8007988 <HAL_RCC_ClockConfig+0x1b8>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0307 	and.w	r3, r3, #7
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	429a      	cmp	r2, r3
 8007806:	d001      	beq.n	800780c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e0b8      	b.n	800797e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0302 	and.w	r3, r3, #2
 8007814:	2b00      	cmp	r3, #0
 8007816:	d020      	beq.n	800785a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0304 	and.w	r3, r3, #4
 8007820:	2b00      	cmp	r3, #0
 8007822:	d005      	beq.n	8007830 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007824:	4b59      	ldr	r3, [pc, #356]	; (800798c <HAL_RCC_ClockConfig+0x1bc>)
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	4a58      	ldr	r2, [pc, #352]	; (800798c <HAL_RCC_ClockConfig+0x1bc>)
 800782a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800782e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0308 	and.w	r3, r3, #8
 8007838:	2b00      	cmp	r3, #0
 800783a:	d005      	beq.n	8007848 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800783c:	4b53      	ldr	r3, [pc, #332]	; (800798c <HAL_RCC_ClockConfig+0x1bc>)
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	4a52      	ldr	r2, [pc, #328]	; (800798c <HAL_RCC_ClockConfig+0x1bc>)
 8007842:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007846:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007848:	4b50      	ldr	r3, [pc, #320]	; (800798c <HAL_RCC_ClockConfig+0x1bc>)
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	494d      	ldr	r1, [pc, #308]	; (800798c <HAL_RCC_ClockConfig+0x1bc>)
 8007856:	4313      	orrs	r3, r2
 8007858:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	2b00      	cmp	r3, #0
 8007864:	d044      	beq.n	80078f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d107      	bne.n	800787e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800786e:	4b47      	ldr	r3, [pc, #284]	; (800798c <HAL_RCC_ClockConfig+0x1bc>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d119      	bne.n	80078ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e07f      	b.n	800797e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	2b02      	cmp	r3, #2
 8007884:	d003      	beq.n	800788e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800788a:	2b03      	cmp	r3, #3
 800788c:	d107      	bne.n	800789e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800788e:	4b3f      	ldr	r3, [pc, #252]	; (800798c <HAL_RCC_ClockConfig+0x1bc>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007896:	2b00      	cmp	r3, #0
 8007898:	d109      	bne.n	80078ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e06f      	b.n	800797e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800789e:	4b3b      	ldr	r3, [pc, #236]	; (800798c <HAL_RCC_ClockConfig+0x1bc>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0302 	and.w	r3, r3, #2
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d101      	bne.n	80078ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e067      	b.n	800797e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078ae:	4b37      	ldr	r3, [pc, #220]	; (800798c <HAL_RCC_ClockConfig+0x1bc>)
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	f023 0203 	bic.w	r2, r3, #3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	4934      	ldr	r1, [pc, #208]	; (800798c <HAL_RCC_ClockConfig+0x1bc>)
 80078bc:	4313      	orrs	r3, r2
 80078be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078c0:	f7fa fb12 	bl	8001ee8 <HAL_GetTick>
 80078c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078c6:	e00a      	b.n	80078de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078c8:	f7fa fb0e 	bl	8001ee8 <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d901      	bls.n	80078de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	e04f      	b.n	800797e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078de:	4b2b      	ldr	r3, [pc, #172]	; (800798c <HAL_RCC_ClockConfig+0x1bc>)
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	f003 020c 	and.w	r2, r3, #12
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d1eb      	bne.n	80078c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80078f0:	4b25      	ldr	r3, [pc, #148]	; (8007988 <HAL_RCC_ClockConfig+0x1b8>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0307 	and.w	r3, r3, #7
 80078f8:	683a      	ldr	r2, [r7, #0]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d20c      	bcs.n	8007918 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078fe:	4b22      	ldr	r3, [pc, #136]	; (8007988 <HAL_RCC_ClockConfig+0x1b8>)
 8007900:	683a      	ldr	r2, [r7, #0]
 8007902:	b2d2      	uxtb	r2, r2
 8007904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007906:	4b20      	ldr	r3, [pc, #128]	; (8007988 <HAL_RCC_ClockConfig+0x1b8>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 0307 	and.w	r3, r3, #7
 800790e:	683a      	ldr	r2, [r7, #0]
 8007910:	429a      	cmp	r2, r3
 8007912:	d001      	beq.n	8007918 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e032      	b.n	800797e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0304 	and.w	r3, r3, #4
 8007920:	2b00      	cmp	r3, #0
 8007922:	d008      	beq.n	8007936 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007924:	4b19      	ldr	r3, [pc, #100]	; (800798c <HAL_RCC_ClockConfig+0x1bc>)
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	4916      	ldr	r1, [pc, #88]	; (800798c <HAL_RCC_ClockConfig+0x1bc>)
 8007932:	4313      	orrs	r3, r2
 8007934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 0308 	and.w	r3, r3, #8
 800793e:	2b00      	cmp	r3, #0
 8007940:	d009      	beq.n	8007956 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007942:	4b12      	ldr	r3, [pc, #72]	; (800798c <HAL_RCC_ClockConfig+0x1bc>)
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	00db      	lsls	r3, r3, #3
 8007950:	490e      	ldr	r1, [pc, #56]	; (800798c <HAL_RCC_ClockConfig+0x1bc>)
 8007952:	4313      	orrs	r3, r2
 8007954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007956:	f000 f821 	bl	800799c <HAL_RCC_GetSysClockFreq>
 800795a:	4602      	mov	r2, r0
 800795c:	4b0b      	ldr	r3, [pc, #44]	; (800798c <HAL_RCC_ClockConfig+0x1bc>)
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	091b      	lsrs	r3, r3, #4
 8007962:	f003 030f 	and.w	r3, r3, #15
 8007966:	490a      	ldr	r1, [pc, #40]	; (8007990 <HAL_RCC_ClockConfig+0x1c0>)
 8007968:	5ccb      	ldrb	r3, [r1, r3]
 800796a:	fa22 f303 	lsr.w	r3, r2, r3
 800796e:	4a09      	ldr	r2, [pc, #36]	; (8007994 <HAL_RCC_ClockConfig+0x1c4>)
 8007970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007972:	4b09      	ldr	r3, [pc, #36]	; (8007998 <HAL_RCC_ClockConfig+0x1c8>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4618      	mov	r0, r3
 8007978:	f7f9 ff10 	bl	800179c <HAL_InitTick>

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	40023c00 	.word	0x40023c00
 800798c:	40023800 	.word	0x40023800
 8007990:	0801068c 	.word	0x0801068c
 8007994:	20000004 	.word	0x20000004
 8007998:	20000008 	.word	0x20000008

0800799c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800799c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80079a0:	b084      	sub	sp, #16
 80079a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80079a4:	2300      	movs	r3, #0
 80079a6:	607b      	str	r3, [r7, #4]
 80079a8:	2300      	movs	r3, #0
 80079aa:	60fb      	str	r3, [r7, #12]
 80079ac:	2300      	movs	r3, #0
 80079ae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80079b0:	2300      	movs	r3, #0
 80079b2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079b4:	4b67      	ldr	r3, [pc, #412]	; (8007b54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	f003 030c 	and.w	r3, r3, #12
 80079bc:	2b08      	cmp	r3, #8
 80079be:	d00d      	beq.n	80079dc <HAL_RCC_GetSysClockFreq+0x40>
 80079c0:	2b08      	cmp	r3, #8
 80079c2:	f200 80bd 	bhi.w	8007b40 <HAL_RCC_GetSysClockFreq+0x1a4>
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d002      	beq.n	80079d0 <HAL_RCC_GetSysClockFreq+0x34>
 80079ca:	2b04      	cmp	r3, #4
 80079cc:	d003      	beq.n	80079d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80079ce:	e0b7      	b.n	8007b40 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079d0:	4b61      	ldr	r3, [pc, #388]	; (8007b58 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80079d2:	60bb      	str	r3, [r7, #8]
       break;
 80079d4:	e0b7      	b.n	8007b46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079d6:	4b61      	ldr	r3, [pc, #388]	; (8007b5c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80079d8:	60bb      	str	r3, [r7, #8]
      break;
 80079da:	e0b4      	b.n	8007b46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079dc:	4b5d      	ldr	r3, [pc, #372]	; (8007b54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80079e6:	4b5b      	ldr	r3, [pc, #364]	; (8007b54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d04d      	beq.n	8007a8e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079f2:	4b58      	ldr	r3, [pc, #352]	; (8007b54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	099b      	lsrs	r3, r3, #6
 80079f8:	461a      	mov	r2, r3
 80079fa:	f04f 0300 	mov.w	r3, #0
 80079fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007a02:	f04f 0100 	mov.w	r1, #0
 8007a06:	ea02 0800 	and.w	r8, r2, r0
 8007a0a:	ea03 0901 	and.w	r9, r3, r1
 8007a0e:	4640      	mov	r0, r8
 8007a10:	4649      	mov	r1, r9
 8007a12:	f04f 0200 	mov.w	r2, #0
 8007a16:	f04f 0300 	mov.w	r3, #0
 8007a1a:	014b      	lsls	r3, r1, #5
 8007a1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007a20:	0142      	lsls	r2, r0, #5
 8007a22:	4610      	mov	r0, r2
 8007a24:	4619      	mov	r1, r3
 8007a26:	ebb0 0008 	subs.w	r0, r0, r8
 8007a2a:	eb61 0109 	sbc.w	r1, r1, r9
 8007a2e:	f04f 0200 	mov.w	r2, #0
 8007a32:	f04f 0300 	mov.w	r3, #0
 8007a36:	018b      	lsls	r3, r1, #6
 8007a38:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007a3c:	0182      	lsls	r2, r0, #6
 8007a3e:	1a12      	subs	r2, r2, r0
 8007a40:	eb63 0301 	sbc.w	r3, r3, r1
 8007a44:	f04f 0000 	mov.w	r0, #0
 8007a48:	f04f 0100 	mov.w	r1, #0
 8007a4c:	00d9      	lsls	r1, r3, #3
 8007a4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a52:	00d0      	lsls	r0, r2, #3
 8007a54:	4602      	mov	r2, r0
 8007a56:	460b      	mov	r3, r1
 8007a58:	eb12 0208 	adds.w	r2, r2, r8
 8007a5c:	eb43 0309 	adc.w	r3, r3, r9
 8007a60:	f04f 0000 	mov.w	r0, #0
 8007a64:	f04f 0100 	mov.w	r1, #0
 8007a68:	0259      	lsls	r1, r3, #9
 8007a6a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007a6e:	0250      	lsls	r0, r2, #9
 8007a70:	4602      	mov	r2, r0
 8007a72:	460b      	mov	r3, r1
 8007a74:	4610      	mov	r0, r2
 8007a76:	4619      	mov	r1, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	f04f 0300 	mov.w	r3, #0
 8007a80:	f7f8 fbf6 	bl	8000270 <__aeabi_uldivmod>
 8007a84:	4602      	mov	r2, r0
 8007a86:	460b      	mov	r3, r1
 8007a88:	4613      	mov	r3, r2
 8007a8a:	60fb      	str	r3, [r7, #12]
 8007a8c:	e04a      	b.n	8007b24 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a8e:	4b31      	ldr	r3, [pc, #196]	; (8007b54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	099b      	lsrs	r3, r3, #6
 8007a94:	461a      	mov	r2, r3
 8007a96:	f04f 0300 	mov.w	r3, #0
 8007a9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007a9e:	f04f 0100 	mov.w	r1, #0
 8007aa2:	ea02 0400 	and.w	r4, r2, r0
 8007aa6:	ea03 0501 	and.w	r5, r3, r1
 8007aaa:	4620      	mov	r0, r4
 8007aac:	4629      	mov	r1, r5
 8007aae:	f04f 0200 	mov.w	r2, #0
 8007ab2:	f04f 0300 	mov.w	r3, #0
 8007ab6:	014b      	lsls	r3, r1, #5
 8007ab8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007abc:	0142      	lsls	r2, r0, #5
 8007abe:	4610      	mov	r0, r2
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	1b00      	subs	r0, r0, r4
 8007ac4:	eb61 0105 	sbc.w	r1, r1, r5
 8007ac8:	f04f 0200 	mov.w	r2, #0
 8007acc:	f04f 0300 	mov.w	r3, #0
 8007ad0:	018b      	lsls	r3, r1, #6
 8007ad2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007ad6:	0182      	lsls	r2, r0, #6
 8007ad8:	1a12      	subs	r2, r2, r0
 8007ada:	eb63 0301 	sbc.w	r3, r3, r1
 8007ade:	f04f 0000 	mov.w	r0, #0
 8007ae2:	f04f 0100 	mov.w	r1, #0
 8007ae6:	00d9      	lsls	r1, r3, #3
 8007ae8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007aec:	00d0      	lsls	r0, r2, #3
 8007aee:	4602      	mov	r2, r0
 8007af0:	460b      	mov	r3, r1
 8007af2:	1912      	adds	r2, r2, r4
 8007af4:	eb45 0303 	adc.w	r3, r5, r3
 8007af8:	f04f 0000 	mov.w	r0, #0
 8007afc:	f04f 0100 	mov.w	r1, #0
 8007b00:	0299      	lsls	r1, r3, #10
 8007b02:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007b06:	0290      	lsls	r0, r2, #10
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	4610      	mov	r0, r2
 8007b0e:	4619      	mov	r1, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	461a      	mov	r2, r3
 8007b14:	f04f 0300 	mov.w	r3, #0
 8007b18:	f7f8 fbaa 	bl	8000270 <__aeabi_uldivmod>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4613      	mov	r3, r2
 8007b22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007b24:	4b0b      	ldr	r3, [pc, #44]	; (8007b54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	0c1b      	lsrs	r3, r3, #16
 8007b2a:	f003 0303 	and.w	r3, r3, #3
 8007b2e:	3301      	adds	r3, #1
 8007b30:	005b      	lsls	r3, r3, #1
 8007b32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007b34:	68fa      	ldr	r2, [r7, #12]
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b3c:	60bb      	str	r3, [r7, #8]
      break;
 8007b3e:	e002      	b.n	8007b46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b40:	4b05      	ldr	r3, [pc, #20]	; (8007b58 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007b42:	60bb      	str	r3, [r7, #8]
      break;
 8007b44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b46:	68bb      	ldr	r3, [r7, #8]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007b52:	bf00      	nop
 8007b54:	40023800 	.word	0x40023800
 8007b58:	00f42400 	.word	0x00f42400
 8007b5c:	007a1200 	.word	0x007a1200

08007b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b60:	b480      	push	{r7}
 8007b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b64:	4b03      	ldr	r3, [pc, #12]	; (8007b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b66:	681b      	ldr	r3, [r3, #0]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	20000004 	.word	0x20000004

08007b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007b7c:	f7ff fff0 	bl	8007b60 <HAL_RCC_GetHCLKFreq>
 8007b80:	4602      	mov	r2, r0
 8007b82:	4b05      	ldr	r3, [pc, #20]	; (8007b98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	0a9b      	lsrs	r3, r3, #10
 8007b88:	f003 0307 	and.w	r3, r3, #7
 8007b8c:	4903      	ldr	r1, [pc, #12]	; (8007b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b8e:	5ccb      	ldrb	r3, [r1, r3]
 8007b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	40023800 	.word	0x40023800
 8007b9c:	0801069c 	.word	0x0801069c

08007ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007ba4:	f7ff ffdc 	bl	8007b60 <HAL_RCC_GetHCLKFreq>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	4b05      	ldr	r3, [pc, #20]	; (8007bc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	0b5b      	lsrs	r3, r3, #13
 8007bb0:	f003 0307 	and.w	r3, r3, #7
 8007bb4:	4903      	ldr	r1, [pc, #12]	; (8007bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007bb6:	5ccb      	ldrb	r3, [r1, r3]
 8007bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	40023800 	.word	0x40023800
 8007bc4:	0801069c 	.word	0x0801069c

08007bc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	220f      	movs	r2, #15
 8007bd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007bd8:	4b12      	ldr	r3, [pc, #72]	; (8007c24 <HAL_RCC_GetClockConfig+0x5c>)
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	f003 0203 	and.w	r2, r3, #3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007be4:	4b0f      	ldr	r3, [pc, #60]	; (8007c24 <HAL_RCC_GetClockConfig+0x5c>)
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007bf0:	4b0c      	ldr	r3, [pc, #48]	; (8007c24 <HAL_RCC_GetClockConfig+0x5c>)
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007bfc:	4b09      	ldr	r3, [pc, #36]	; (8007c24 <HAL_RCC_GetClockConfig+0x5c>)
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	08db      	lsrs	r3, r3, #3
 8007c02:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007c0a:	4b07      	ldr	r3, [pc, #28]	; (8007c28 <HAL_RCC_GetClockConfig+0x60>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 0207 	and.w	r2, r3, #7
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	601a      	str	r2, [r3, #0]
}
 8007c16:	bf00      	nop
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	40023800 	.word	0x40023800
 8007c28:	40023c00 	.word	0x40023c00

08007c2c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b086      	sub	sp, #24
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007c34:	2300      	movs	r3, #0
 8007c36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 0301 	and.w	r3, r3, #1
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d105      	bne.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d035      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007c54:	4b62      	ldr	r3, [pc, #392]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007c56:	2200      	movs	r2, #0
 8007c58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c5a:	f7fa f945 	bl	8001ee8 <HAL_GetTick>
 8007c5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007c60:	e008      	b.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007c62:	f7fa f941 	bl	8001ee8 <HAL_GetTick>
 8007c66:	4602      	mov	r2, r0
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	1ad3      	subs	r3, r2, r3
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	d901      	bls.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c70:	2303      	movs	r3, #3
 8007c72:	e0b0      	b.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007c74:	4b5b      	ldr	r3, [pc, #364]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1f0      	bne.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	019a      	lsls	r2, r3, #6
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	071b      	lsls	r3, r3, #28
 8007c8c:	4955      	ldr	r1, [pc, #340]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007c94:	4b52      	ldr	r3, [pc, #328]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007c96:	2201      	movs	r2, #1
 8007c98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c9a:	f7fa f925 	bl	8001ee8 <HAL_GetTick>
 8007c9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007ca0:	e008      	b.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007ca2:	f7fa f921 	bl	8001ee8 <HAL_GetTick>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	d901      	bls.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	e090      	b.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007cb4:	4b4b      	ldr	r3, [pc, #300]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d0f0      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 0302 	and.w	r3, r3, #2
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f000 8083 	beq.w	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007cce:	2300      	movs	r3, #0
 8007cd0:	60fb      	str	r3, [r7, #12]
 8007cd2:	4b44      	ldr	r3, [pc, #272]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd6:	4a43      	ldr	r2, [pc, #268]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8007cde:	4b41      	ldr	r3, [pc, #260]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ce6:	60fb      	str	r3, [r7, #12]
 8007ce8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007cea:	4b3f      	ldr	r3, [pc, #252]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a3e      	ldr	r2, [pc, #248]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cf4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007cf6:	f7fa f8f7 	bl	8001ee8 <HAL_GetTick>
 8007cfa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007cfc:	e008      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007cfe:	f7fa f8f3 	bl	8001ee8 <HAL_GetTick>
 8007d02:	4602      	mov	r2, r0
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d901      	bls.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	e062      	b.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007d10:	4b35      	ldr	r3, [pc, #212]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d0f0      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007d1c:	4b31      	ldr	r3, [pc, #196]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d24:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d02f      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d028      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d3a:	4b2a      	ldr	r3, [pc, #168]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d42:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d44:	4b29      	ldr	r3, [pc, #164]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007d46:	2201      	movs	r2, #1
 8007d48:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d4a:	4b28      	ldr	r3, [pc, #160]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007d50:	4a24      	ldr	r2, [pc, #144]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007d56:	4b23      	ldr	r3, [pc, #140]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d114      	bne.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007d62:	f7fa f8c1 	bl	8001ee8 <HAL_GetTick>
 8007d66:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d68:	e00a      	b.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d6a:	f7fa f8bd 	bl	8001ee8 <HAL_GetTick>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d901      	bls.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	e02a      	b.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d80:	4b18      	ldr	r3, [pc, #96]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d84:	f003 0302 	and.w	r3, r3, #2
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d0ee      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d98:	d10d      	bne.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007d9a:	4b12      	ldr	r3, [pc, #72]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dae:	490d      	ldr	r1, [pc, #52]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007db0:	4313      	orrs	r3, r2
 8007db2:	608b      	str	r3, [r1, #8]
 8007db4:	e005      	b.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007db6:	4b0b      	ldr	r3, [pc, #44]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	4a0a      	ldr	r2, [pc, #40]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007dbc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007dc0:	6093      	str	r3, [r2, #8]
 8007dc2:	4b08      	ldr	r3, [pc, #32]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007dc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dce:	4905      	ldr	r1, [pc, #20]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3718      	adds	r7, #24
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	42470068 	.word	0x42470068
 8007de4:	40023800 	.word	0x40023800
 8007de8:	40007000 	.word	0x40007000
 8007dec:	42470e40 	.word	0x42470e40

08007df0 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2203      	movs	r2, #3
 8007dfc:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8007dfe:	4b11      	ldr	r3, [pc, #68]	; (8007e44 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e04:	099b      	lsrs	r3, r3, #6
 8007e06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007e0e:	4b0d      	ldr	r3, [pc, #52]	; (8007e44 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e14:	0f1b      	lsrs	r3, r3, #28
 8007e16:	f003 0207 	and.w	r2, r3, #7
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8007e1e:	4b09      	ldr	r3, [pc, #36]	; (8007e44 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007e26:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8007e28:	4b06      	ldr	r3, [pc, #24]	; (8007e44 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e2c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	431a      	orrs	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8007e38:	bf00      	nop
 8007e3a:	3714      	adds	r7, #20
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr
 8007e44:	40023800 	.word	0x40023800

08007e48 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b087      	sub	sp, #28
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007e50:	2300      	movs	r3, #0
 8007e52:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007e54:	2300      	movs	r3, #0
 8007e56:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d13e      	bne.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007e66:	4b23      	ldr	r3, [pc, #140]	; (8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e6e:	60fb      	str	r3, [r7, #12]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d005      	beq.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d12f      	bne.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007e7c:	4b1e      	ldr	r3, [pc, #120]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007e7e:	617b      	str	r3, [r7, #20]
          break;
 8007e80:	e02f      	b.n	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007e82:	4b1c      	ldr	r3, [pc, #112]	; (8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e8e:	d108      	bne.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007e90:	4b18      	ldr	r3, [pc, #96]	; (8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e98:	4a18      	ldr	r2, [pc, #96]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e9e:	613b      	str	r3, [r7, #16]
 8007ea0:	e007      	b.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007ea2:	4b14      	ldr	r3, [pc, #80]	; (8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007eaa:	4a15      	ldr	r2, [pc, #84]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eb0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007eb2:	4b10      	ldr	r3, [pc, #64]	; (8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eb8:	099b      	lsrs	r3, r3, #6
 8007eba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	fb02 f303 	mul.w	r3, r2, r3
 8007ec4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007ec6:	4b0b      	ldr	r3, [pc, #44]	; (8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ecc:	0f1b      	lsrs	r3, r3, #28
 8007ece:	f003 0307 	and.w	r3, r3, #7
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ed8:	617b      	str	r3, [r7, #20]
          break;
 8007eda:	e002      	b.n	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007edc:	2300      	movs	r3, #0
 8007ede:	617b      	str	r3, [r7, #20]
          break;
 8007ee0:	bf00      	nop
        }
      }
      break;
 8007ee2:	bf00      	nop
    }
  }
  return frequency;
 8007ee4:	697b      	ldr	r3, [r7, #20]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	371c      	adds	r7, #28
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	40023800 	.word	0x40023800
 8007ef8:	00bb8000 	.word	0x00bb8000
 8007efc:	007a1200 	.word	0x007a1200
 8007f00:	00f42400 	.word	0x00f42400

08007f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d101      	bne.n	8007f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e041      	b.n	8007f9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d106      	bne.n	8007f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f7f9 fc00 	bl	8001730 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2202      	movs	r2, #2
 8007f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	3304      	adds	r3, #4
 8007f40:	4619      	mov	r1, r3
 8007f42:	4610      	mov	r0, r2
 8007f44:	f000 fa96 	bl	8008474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
	...

08007fa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d001      	beq.n	8007fbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e04e      	b.n	800805a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68da      	ldr	r2, [r3, #12]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f042 0201 	orr.w	r2, r2, #1
 8007fd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a23      	ldr	r2, [pc, #140]	; (8008068 <HAL_TIM_Base_Start_IT+0xc4>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d022      	beq.n	8008024 <HAL_TIM_Base_Start_IT+0x80>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fe6:	d01d      	beq.n	8008024 <HAL_TIM_Base_Start_IT+0x80>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a1f      	ldr	r2, [pc, #124]	; (800806c <HAL_TIM_Base_Start_IT+0xc8>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d018      	beq.n	8008024 <HAL_TIM_Base_Start_IT+0x80>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a1e      	ldr	r2, [pc, #120]	; (8008070 <HAL_TIM_Base_Start_IT+0xcc>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d013      	beq.n	8008024 <HAL_TIM_Base_Start_IT+0x80>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a1c      	ldr	r2, [pc, #112]	; (8008074 <HAL_TIM_Base_Start_IT+0xd0>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d00e      	beq.n	8008024 <HAL_TIM_Base_Start_IT+0x80>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a1b      	ldr	r2, [pc, #108]	; (8008078 <HAL_TIM_Base_Start_IT+0xd4>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d009      	beq.n	8008024 <HAL_TIM_Base_Start_IT+0x80>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a19      	ldr	r2, [pc, #100]	; (800807c <HAL_TIM_Base_Start_IT+0xd8>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d004      	beq.n	8008024 <HAL_TIM_Base_Start_IT+0x80>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a18      	ldr	r2, [pc, #96]	; (8008080 <HAL_TIM_Base_Start_IT+0xdc>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d111      	bne.n	8008048 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	f003 0307 	and.w	r3, r3, #7
 800802e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2b06      	cmp	r3, #6
 8008034:	d010      	beq.n	8008058 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f042 0201 	orr.w	r2, r2, #1
 8008044:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008046:	e007      	b.n	8008058 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f042 0201 	orr.w	r2, r2, #1
 8008056:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3714      	adds	r7, #20
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	40010000 	.word	0x40010000
 800806c:	40000400 	.word	0x40000400
 8008070:	40000800 	.word	0x40000800
 8008074:	40000c00 	.word	0x40000c00
 8008078:	40010400 	.word	0x40010400
 800807c:	40014000 	.word	0x40014000
 8008080:	40001800 	.word	0x40001800

08008084 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	f003 0302 	and.w	r3, r3, #2
 8008096:	2b02      	cmp	r3, #2
 8008098:	d122      	bne.n	80080e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	f003 0302 	and.w	r3, r3, #2
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d11b      	bne.n	80080e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f06f 0202 	mvn.w	r2, #2
 80080b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	f003 0303 	and.w	r3, r3, #3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d003      	beq.n	80080ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f9b5 	bl	8008436 <HAL_TIM_IC_CaptureCallback>
 80080cc:	e005      	b.n	80080da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f9a7 	bl	8008422 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f9b8 	bl	800844a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	f003 0304 	and.w	r3, r3, #4
 80080ea:	2b04      	cmp	r3, #4
 80080ec:	d122      	bne.n	8008134 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	f003 0304 	and.w	r3, r3, #4
 80080f8:	2b04      	cmp	r3, #4
 80080fa:	d11b      	bne.n	8008134 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f06f 0204 	mvn.w	r2, #4
 8008104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2202      	movs	r2, #2
 800810a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	699b      	ldr	r3, [r3, #24]
 8008112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008116:	2b00      	cmp	r3, #0
 8008118:	d003      	beq.n	8008122 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f98b 	bl	8008436 <HAL_TIM_IC_CaptureCallback>
 8008120:	e005      	b.n	800812e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f97d 	bl	8008422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 f98e 	bl	800844a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	f003 0308 	and.w	r3, r3, #8
 800813e:	2b08      	cmp	r3, #8
 8008140:	d122      	bne.n	8008188 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	f003 0308 	and.w	r3, r3, #8
 800814c:	2b08      	cmp	r3, #8
 800814e:	d11b      	bne.n	8008188 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f06f 0208 	mvn.w	r2, #8
 8008158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2204      	movs	r2, #4
 800815e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	f003 0303 	and.w	r3, r3, #3
 800816a:	2b00      	cmp	r3, #0
 800816c:	d003      	beq.n	8008176 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f961 	bl	8008436 <HAL_TIM_IC_CaptureCallback>
 8008174:	e005      	b.n	8008182 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f953 	bl	8008422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 f964 	bl	800844a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	691b      	ldr	r3, [r3, #16]
 800818e:	f003 0310 	and.w	r3, r3, #16
 8008192:	2b10      	cmp	r3, #16
 8008194:	d122      	bne.n	80081dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	f003 0310 	and.w	r3, r3, #16
 80081a0:	2b10      	cmp	r3, #16
 80081a2:	d11b      	bne.n	80081dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f06f 0210 	mvn.w	r2, #16
 80081ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2208      	movs	r2, #8
 80081b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	69db      	ldr	r3, [r3, #28]
 80081ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d003      	beq.n	80081ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f937 	bl	8008436 <HAL_TIM_IC_CaptureCallback>
 80081c8:	e005      	b.n	80081d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f929 	bl	8008422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 f93a 	bl	800844a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	f003 0301 	and.w	r3, r3, #1
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d10e      	bne.n	8008208 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	f003 0301 	and.w	r3, r3, #1
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d107      	bne.n	8008208 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f06f 0201 	mvn.w	r2, #1
 8008200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f7f9 f8fe 	bl	8001404 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008212:	2b80      	cmp	r3, #128	; 0x80
 8008214:	d10e      	bne.n	8008234 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008220:	2b80      	cmp	r3, #128	; 0x80
 8008222:	d107      	bne.n	8008234 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800822c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fae0 	bl	80087f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	691b      	ldr	r3, [r3, #16]
 800823a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800823e:	2b40      	cmp	r3, #64	; 0x40
 8008240:	d10e      	bne.n	8008260 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800824c:	2b40      	cmp	r3, #64	; 0x40
 800824e:	d107      	bne.n	8008260 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f8ff 	bl	800845e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	f003 0320 	and.w	r3, r3, #32
 800826a:	2b20      	cmp	r3, #32
 800826c:	d10e      	bne.n	800828c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	f003 0320 	and.w	r3, r3, #32
 8008278:	2b20      	cmp	r3, #32
 800827a:	d107      	bne.n	800828c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f06f 0220 	mvn.w	r2, #32
 8008284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 faaa 	bl	80087e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800828c:	bf00      	nop
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800829e:	2300      	movs	r3, #0
 80082a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d101      	bne.n	80082b0 <HAL_TIM_ConfigClockSource+0x1c>
 80082ac:	2302      	movs	r3, #2
 80082ae:	e0b4      	b.n	800841a <HAL_TIM_ConfigClockSource+0x186>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2202      	movs	r2, #2
 80082bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80082ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68ba      	ldr	r2, [r7, #8]
 80082de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082e8:	d03e      	beq.n	8008368 <HAL_TIM_ConfigClockSource+0xd4>
 80082ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082ee:	f200 8087 	bhi.w	8008400 <HAL_TIM_ConfigClockSource+0x16c>
 80082f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082f6:	f000 8086 	beq.w	8008406 <HAL_TIM_ConfigClockSource+0x172>
 80082fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082fe:	d87f      	bhi.n	8008400 <HAL_TIM_ConfigClockSource+0x16c>
 8008300:	2b70      	cmp	r3, #112	; 0x70
 8008302:	d01a      	beq.n	800833a <HAL_TIM_ConfigClockSource+0xa6>
 8008304:	2b70      	cmp	r3, #112	; 0x70
 8008306:	d87b      	bhi.n	8008400 <HAL_TIM_ConfigClockSource+0x16c>
 8008308:	2b60      	cmp	r3, #96	; 0x60
 800830a:	d050      	beq.n	80083ae <HAL_TIM_ConfigClockSource+0x11a>
 800830c:	2b60      	cmp	r3, #96	; 0x60
 800830e:	d877      	bhi.n	8008400 <HAL_TIM_ConfigClockSource+0x16c>
 8008310:	2b50      	cmp	r3, #80	; 0x50
 8008312:	d03c      	beq.n	800838e <HAL_TIM_ConfigClockSource+0xfa>
 8008314:	2b50      	cmp	r3, #80	; 0x50
 8008316:	d873      	bhi.n	8008400 <HAL_TIM_ConfigClockSource+0x16c>
 8008318:	2b40      	cmp	r3, #64	; 0x40
 800831a:	d058      	beq.n	80083ce <HAL_TIM_ConfigClockSource+0x13a>
 800831c:	2b40      	cmp	r3, #64	; 0x40
 800831e:	d86f      	bhi.n	8008400 <HAL_TIM_ConfigClockSource+0x16c>
 8008320:	2b30      	cmp	r3, #48	; 0x30
 8008322:	d064      	beq.n	80083ee <HAL_TIM_ConfigClockSource+0x15a>
 8008324:	2b30      	cmp	r3, #48	; 0x30
 8008326:	d86b      	bhi.n	8008400 <HAL_TIM_ConfigClockSource+0x16c>
 8008328:	2b20      	cmp	r3, #32
 800832a:	d060      	beq.n	80083ee <HAL_TIM_ConfigClockSource+0x15a>
 800832c:	2b20      	cmp	r3, #32
 800832e:	d867      	bhi.n	8008400 <HAL_TIM_ConfigClockSource+0x16c>
 8008330:	2b00      	cmp	r3, #0
 8008332:	d05c      	beq.n	80083ee <HAL_TIM_ConfigClockSource+0x15a>
 8008334:	2b10      	cmp	r3, #16
 8008336:	d05a      	beq.n	80083ee <HAL_TIM_ConfigClockSource+0x15a>
 8008338:	e062      	b.n	8008400 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6818      	ldr	r0, [r3, #0]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	6899      	ldr	r1, [r3, #8]
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	685a      	ldr	r2, [r3, #4]
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	f000 f9ad 	bl	80086a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800835c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	609a      	str	r2, [r3, #8]
      break;
 8008366:	e04f      	b.n	8008408 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6818      	ldr	r0, [r3, #0]
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	6899      	ldr	r1, [r3, #8]
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	685a      	ldr	r2, [r3, #4]
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	f000 f996 	bl	80086a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	689a      	ldr	r2, [r3, #8]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800838a:	609a      	str	r2, [r3, #8]
      break;
 800838c:	e03c      	b.n	8008408 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6818      	ldr	r0, [r3, #0]
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	6859      	ldr	r1, [r3, #4]
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	461a      	mov	r2, r3
 800839c:	f000 f90a 	bl	80085b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2150      	movs	r1, #80	; 0x50
 80083a6:	4618      	mov	r0, r3
 80083a8:	f000 f963 	bl	8008672 <TIM_ITRx_SetConfig>
      break;
 80083ac:	e02c      	b.n	8008408 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6818      	ldr	r0, [r3, #0]
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	6859      	ldr	r1, [r3, #4]
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	461a      	mov	r2, r3
 80083bc:	f000 f929 	bl	8008612 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2160      	movs	r1, #96	; 0x60
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 f953 	bl	8008672 <TIM_ITRx_SetConfig>
      break;
 80083cc:	e01c      	b.n	8008408 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6818      	ldr	r0, [r3, #0]
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	6859      	ldr	r1, [r3, #4]
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	461a      	mov	r2, r3
 80083dc:	f000 f8ea 	bl	80085b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2140      	movs	r1, #64	; 0x40
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 f943 	bl	8008672 <TIM_ITRx_SetConfig>
      break;
 80083ec:	e00c      	b.n	8008408 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4619      	mov	r1, r3
 80083f8:	4610      	mov	r0, r2
 80083fa:	f000 f93a 	bl	8008672 <TIM_ITRx_SetConfig>
      break;
 80083fe:	e003      	b.n	8008408 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	73fb      	strb	r3, [r7, #15]
      break;
 8008404:	e000      	b.n	8008408 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008406:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008418:	7bfb      	ldrb	r3, [r7, #15]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008422:	b480      	push	{r7}
 8008424:	b083      	sub	sp, #12
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800842a:	bf00      	nop
 800842c:	370c      	adds	r7, #12
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr

08008436 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008436:	b480      	push	{r7}
 8008438:	b083      	sub	sp, #12
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800843e:	bf00      	nop
 8008440:	370c      	adds	r7, #12
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800844a:	b480      	push	{r7}
 800844c:	b083      	sub	sp, #12
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008452:	bf00      	nop
 8008454:	370c      	adds	r7, #12
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr

0800845e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800845e:	b480      	push	{r7}
 8008460:	b083      	sub	sp, #12
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008466:	bf00      	nop
 8008468:	370c      	adds	r7, #12
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr
	...

08008474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a40      	ldr	r2, [pc, #256]	; (8008588 <TIM_Base_SetConfig+0x114>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d013      	beq.n	80084b4 <TIM_Base_SetConfig+0x40>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008492:	d00f      	beq.n	80084b4 <TIM_Base_SetConfig+0x40>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a3d      	ldr	r2, [pc, #244]	; (800858c <TIM_Base_SetConfig+0x118>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d00b      	beq.n	80084b4 <TIM_Base_SetConfig+0x40>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a3c      	ldr	r2, [pc, #240]	; (8008590 <TIM_Base_SetConfig+0x11c>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d007      	beq.n	80084b4 <TIM_Base_SetConfig+0x40>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a3b      	ldr	r2, [pc, #236]	; (8008594 <TIM_Base_SetConfig+0x120>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d003      	beq.n	80084b4 <TIM_Base_SetConfig+0x40>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a3a      	ldr	r2, [pc, #232]	; (8008598 <TIM_Base_SetConfig+0x124>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d108      	bne.n	80084c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a2f      	ldr	r2, [pc, #188]	; (8008588 <TIM_Base_SetConfig+0x114>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d02b      	beq.n	8008526 <TIM_Base_SetConfig+0xb2>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084d4:	d027      	beq.n	8008526 <TIM_Base_SetConfig+0xb2>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a2c      	ldr	r2, [pc, #176]	; (800858c <TIM_Base_SetConfig+0x118>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d023      	beq.n	8008526 <TIM_Base_SetConfig+0xb2>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a2b      	ldr	r2, [pc, #172]	; (8008590 <TIM_Base_SetConfig+0x11c>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d01f      	beq.n	8008526 <TIM_Base_SetConfig+0xb2>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a2a      	ldr	r2, [pc, #168]	; (8008594 <TIM_Base_SetConfig+0x120>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d01b      	beq.n	8008526 <TIM_Base_SetConfig+0xb2>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a29      	ldr	r2, [pc, #164]	; (8008598 <TIM_Base_SetConfig+0x124>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d017      	beq.n	8008526 <TIM_Base_SetConfig+0xb2>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a28      	ldr	r2, [pc, #160]	; (800859c <TIM_Base_SetConfig+0x128>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d013      	beq.n	8008526 <TIM_Base_SetConfig+0xb2>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a27      	ldr	r2, [pc, #156]	; (80085a0 <TIM_Base_SetConfig+0x12c>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d00f      	beq.n	8008526 <TIM_Base_SetConfig+0xb2>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a26      	ldr	r2, [pc, #152]	; (80085a4 <TIM_Base_SetConfig+0x130>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d00b      	beq.n	8008526 <TIM_Base_SetConfig+0xb2>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a25      	ldr	r2, [pc, #148]	; (80085a8 <TIM_Base_SetConfig+0x134>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d007      	beq.n	8008526 <TIM_Base_SetConfig+0xb2>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a24      	ldr	r2, [pc, #144]	; (80085ac <TIM_Base_SetConfig+0x138>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d003      	beq.n	8008526 <TIM_Base_SetConfig+0xb2>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a23      	ldr	r2, [pc, #140]	; (80085b0 <TIM_Base_SetConfig+0x13c>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d108      	bne.n	8008538 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800852c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	4313      	orrs	r3, r2
 8008536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	695b      	ldr	r3, [r3, #20]
 8008542:	4313      	orrs	r3, r2
 8008544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	689a      	ldr	r2, [r3, #8]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4a0a      	ldr	r2, [pc, #40]	; (8008588 <TIM_Base_SetConfig+0x114>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d003      	beq.n	800856c <TIM_Base_SetConfig+0xf8>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a0c      	ldr	r2, [pc, #48]	; (8008598 <TIM_Base_SetConfig+0x124>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d103      	bne.n	8008574 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	691a      	ldr	r2, [r3, #16]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	615a      	str	r2, [r3, #20]
}
 800857a:	bf00      	nop
 800857c:	3714      	adds	r7, #20
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	40010000 	.word	0x40010000
 800858c:	40000400 	.word	0x40000400
 8008590:	40000800 	.word	0x40000800
 8008594:	40000c00 	.word	0x40000c00
 8008598:	40010400 	.word	0x40010400
 800859c:	40014000 	.word	0x40014000
 80085a0:	40014400 	.word	0x40014400
 80085a4:	40014800 	.word	0x40014800
 80085a8:	40001800 	.word	0x40001800
 80085ac:	40001c00 	.word	0x40001c00
 80085b0:	40002000 	.word	0x40002000

080085b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b087      	sub	sp, #28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6a1b      	ldr	r3, [r3, #32]
 80085c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6a1b      	ldr	r3, [r3, #32]
 80085ca:	f023 0201 	bic.w	r2, r3, #1
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	011b      	lsls	r3, r3, #4
 80085e4:	693a      	ldr	r2, [r7, #16]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	f023 030a 	bic.w	r3, r3, #10
 80085f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	693a      	ldr	r2, [r7, #16]
 80085fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	697a      	ldr	r2, [r7, #20]
 8008604:	621a      	str	r2, [r3, #32]
}
 8008606:	bf00      	nop
 8008608:	371c      	adds	r7, #28
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr

08008612 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008612:	b480      	push	{r7}
 8008614:	b087      	sub	sp, #28
 8008616:	af00      	add	r7, sp, #0
 8008618:	60f8      	str	r0, [r7, #12]
 800861a:	60b9      	str	r1, [r7, #8]
 800861c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	f023 0210 	bic.w	r2, r3, #16
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6a1b      	ldr	r3, [r3, #32]
 8008634:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800863c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	031b      	lsls	r3, r3, #12
 8008642:	697a      	ldr	r2, [r7, #20]
 8008644:	4313      	orrs	r3, r2
 8008646:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800864e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	011b      	lsls	r3, r3, #4
 8008654:	693a      	ldr	r2, [r7, #16]
 8008656:	4313      	orrs	r3, r2
 8008658:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	697a      	ldr	r2, [r7, #20]
 800865e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	693a      	ldr	r2, [r7, #16]
 8008664:	621a      	str	r2, [r3, #32]
}
 8008666:	bf00      	nop
 8008668:	371c      	adds	r7, #28
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008672:	b480      	push	{r7}
 8008674:	b085      	sub	sp, #20
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
 800867a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008688:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800868a:	683a      	ldr	r2, [r7, #0]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	4313      	orrs	r3, r2
 8008690:	f043 0307 	orr.w	r3, r3, #7
 8008694:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	609a      	str	r2, [r3, #8]
}
 800869c:	bf00      	nop
 800869e:	3714      	adds	r7, #20
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b087      	sub	sp, #28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
 80086b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	021a      	lsls	r2, r3, #8
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	431a      	orrs	r2, r3
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	697a      	ldr	r2, [r7, #20]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	697a      	ldr	r2, [r7, #20]
 80086da:	609a      	str	r2, [r3, #8]
}
 80086dc:	bf00      	nop
 80086de:	371c      	adds	r7, #28
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d101      	bne.n	8008700 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086fc:	2302      	movs	r3, #2
 80086fe:	e05a      	b.n	80087b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2202      	movs	r2, #2
 800870c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008726:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	4313      	orrs	r3, r2
 8008730:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a21      	ldr	r2, [pc, #132]	; (80087c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d022      	beq.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800874c:	d01d      	beq.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a1d      	ldr	r2, [pc, #116]	; (80087c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d018      	beq.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a1b      	ldr	r2, [pc, #108]	; (80087cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d013      	beq.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a1a      	ldr	r2, [pc, #104]	; (80087d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d00e      	beq.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a18      	ldr	r2, [pc, #96]	; (80087d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d009      	beq.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a17      	ldr	r2, [pc, #92]	; (80087d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d004      	beq.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a15      	ldr	r2, [pc, #84]	; (80087dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d10c      	bne.n	80087a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008790:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	4313      	orrs	r3, r2
 800879a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	68ba      	ldr	r2, [r7, #8]
 80087a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3714      	adds	r7, #20
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	40010000 	.word	0x40010000
 80087c8:	40000400 	.word	0x40000400
 80087cc:	40000800 	.word	0x40000800
 80087d0:	40000c00 	.word	0x40000c00
 80087d4:	40010400 	.word	0x40010400
 80087d8:	40014000 	.word	0x40014000
 80087dc:	40001800 	.word	0x40001800

080087e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087e8:	bf00      	nop
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087fc:	bf00      	nop
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008808:	b084      	sub	sp, #16
 800880a:	b580      	push	{r7, lr}
 800880c:	b084      	sub	sp, #16
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
 8008812:	f107 001c 	add.w	r0, r7, #28
 8008816:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800881a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881c:	2b01      	cmp	r3, #1
 800881e:	d122      	bne.n	8008866 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008824:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800884a:	2b01      	cmp	r3, #1
 800884c:	d105      	bne.n	800885a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 f9a0 	bl	8008ba0 <USB_CoreReset>
 8008860:	4603      	mov	r3, r0
 8008862:	73fb      	strb	r3, [r7, #15]
 8008864:	e01a      	b.n	800889c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 f994 	bl	8008ba0 <USB_CoreReset>
 8008878:	4603      	mov	r3, r0
 800887a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800887c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800887e:	2b00      	cmp	r3, #0
 8008880:	d106      	bne.n	8008890 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008886:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	639a      	str	r2, [r3, #56]	; 0x38
 800888e:	e005      	b.n	800889c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008894:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800889c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d10b      	bne.n	80088ba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	f043 0206 	orr.w	r2, r3, #6
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	f043 0220 	orr.w	r2, r3, #32
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80088ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3710      	adds	r7, #16
 80088c0:	46bd      	mov	sp, r7
 80088c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088c6:	b004      	add	sp, #16
 80088c8:	4770      	bx	lr

080088ca <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80088ca:	b480      	push	{r7}
 80088cc:	b083      	sub	sp, #12
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	f043 0201 	orr.w	r2, r3, #1
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	370c      	adds	r7, #12
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	f023 0201 	bic.w	r2, r3, #1
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008900:	2300      	movs	r3, #0
}
 8008902:	4618      	mov	r0, r3
 8008904:	370c      	adds	r7, #12
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr

0800890e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b084      	sub	sp, #16
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
 8008916:	460b      	mov	r3, r1
 8008918:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800891a:	2300      	movs	r3, #0
 800891c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800892a:	78fb      	ldrb	r3, [r7, #3]
 800892c:	2b01      	cmp	r3, #1
 800892e:	d115      	bne.n	800895c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800893c:	2001      	movs	r0, #1
 800893e:	f7f9 fadf 	bl	8001f00 <HAL_Delay>
      ms++;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	3301      	adds	r3, #1
 8008946:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 f91a 	bl	8008b82 <USB_GetMode>
 800894e:	4603      	mov	r3, r0
 8008950:	2b01      	cmp	r3, #1
 8008952:	d01e      	beq.n	8008992 <USB_SetCurrentMode+0x84>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2b31      	cmp	r3, #49	; 0x31
 8008958:	d9f0      	bls.n	800893c <USB_SetCurrentMode+0x2e>
 800895a:	e01a      	b.n	8008992 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800895c:	78fb      	ldrb	r3, [r7, #3]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d115      	bne.n	800898e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800896e:	2001      	movs	r0, #1
 8008970:	f7f9 fac6 	bl	8001f00 <HAL_Delay>
      ms++;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	3301      	adds	r3, #1
 8008978:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 f901 	bl	8008b82 <USB_GetMode>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d005      	beq.n	8008992 <USB_SetCurrentMode+0x84>
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2b31      	cmp	r3, #49	; 0x31
 800898a:	d9f0      	bls.n	800896e <USB_SetCurrentMode+0x60>
 800898c:	e001      	b.n	8008992 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	e005      	b.n	800899e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2b32      	cmp	r3, #50	; 0x32
 8008996:	d101      	bne.n	800899c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e000      	b.n	800899e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
	...

080089a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80089b2:	2300      	movs	r3, #0
 80089b4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	019b      	lsls	r3, r3, #6
 80089ba:	f043 0220 	orr.w	r2, r3, #32
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	3301      	adds	r3, #1
 80089c6:	60fb      	str	r3, [r7, #12]
 80089c8:	4a08      	ldr	r2, [pc, #32]	; (80089ec <USB_FlushTxFifo+0x44>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d901      	bls.n	80089d2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80089ce:	2303      	movs	r3, #3
 80089d0:	e006      	b.n	80089e0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	f003 0320 	and.w	r3, r3, #32
 80089da:	2b20      	cmp	r3, #32
 80089dc:	d0f1      	beq.n	80089c2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80089de:	2300      	movs	r3, #0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3714      	adds	r7, #20
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr
 80089ec:	00030d40 	.word	0x00030d40

080089f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80089f8:	2300      	movs	r3, #0
 80089fa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2210      	movs	r2, #16
 8008a00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	3301      	adds	r3, #1
 8008a06:	60fb      	str	r3, [r7, #12]
 8008a08:	4a08      	ldr	r2, [pc, #32]	; (8008a2c <USB_FlushRxFifo+0x3c>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d901      	bls.n	8008a12 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	e006      	b.n	8008a20 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	f003 0310 	and.w	r3, r3, #16
 8008a1a:	2b10      	cmp	r3, #16
 8008a1c:	d0f1      	beq.n	8008a02 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3714      	adds	r7, #20
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr
 8008a2c:	00030d40 	.word	0x00030d40

08008a30 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b089      	sub	sp, #36	; 0x24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	4611      	mov	r1, r2
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	460b      	mov	r3, r1
 8008a40:	71fb      	strb	r3, [r7, #7]
 8008a42:	4613      	mov	r3, r2
 8008a44:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008a4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d123      	bne.n	8008a9e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008a56:	88bb      	ldrh	r3, [r7, #4]
 8008a58:	3303      	adds	r3, #3
 8008a5a:	089b      	lsrs	r3, r3, #2
 8008a5c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008a5e:	2300      	movs	r3, #0
 8008a60:	61bb      	str	r3, [r7, #24]
 8008a62:	e018      	b.n	8008a96 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008a64:	79fb      	ldrb	r3, [r7, #7]
 8008a66:	031a      	lsls	r2, r3, #12
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a70:	461a      	mov	r2, r3
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	3301      	adds	r3, #1
 8008a82:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	3301      	adds	r3, #1
 8008a88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	3301      	adds	r3, #1
 8008a94:	61bb      	str	r3, [r7, #24]
 8008a96:	69ba      	ldr	r2, [r7, #24]
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d3e2      	bcc.n	8008a64 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3724      	adds	r7, #36	; 0x24
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b08b      	sub	sp, #44	; 0x2c
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008ac2:	88fb      	ldrh	r3, [r7, #6]
 8008ac4:	089b      	lsrs	r3, r3, #2
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008aca:	88fb      	ldrh	r3, [r7, #6]
 8008acc:	f003 0303 	and.w	r3, r3, #3
 8008ad0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	623b      	str	r3, [r7, #32]
 8008ad6:	e014      	b.n	8008b02 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae2:	601a      	str	r2, [r3, #0]
    pDest++;
 8008ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aec:	3301      	adds	r3, #1
 8008aee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af2:	3301      	adds	r3, #1
 8008af4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af8:	3301      	adds	r3, #1
 8008afa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008afc:	6a3b      	ldr	r3, [r7, #32]
 8008afe:	3301      	adds	r3, #1
 8008b00:	623b      	str	r3, [r7, #32]
 8008b02:	6a3a      	ldr	r2, [r7, #32]
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d3e6      	bcc.n	8008ad8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008b0a:	8bfb      	ldrh	r3, [r7, #30]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d01e      	beq.n	8008b4e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008b10:	2300      	movs	r3, #0
 8008b12:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	f107 0310 	add.w	r3, r7, #16
 8008b20:	6812      	ldr	r2, [r2, #0]
 8008b22:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	6a3b      	ldr	r3, [r7, #32]
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	00db      	lsls	r3, r3, #3
 8008b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b30:	b2da      	uxtb	r2, r3
 8008b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b34:	701a      	strb	r2, [r3, #0]
      i++;
 8008b36:	6a3b      	ldr	r3, [r7, #32]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	623b      	str	r3, [r7, #32]
      pDest++;
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3e:	3301      	adds	r3, #1
 8008b40:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008b42:	8bfb      	ldrh	r3, [r7, #30]
 8008b44:	3b01      	subs	r3, #1
 8008b46:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008b48:	8bfb      	ldrh	r3, [r7, #30]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1ea      	bne.n	8008b24 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	372c      	adds	r7, #44	; 0x2c
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b085      	sub	sp, #20
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	695b      	ldr	r3, [r3, #20]
 8008b68:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	699b      	ldr	r3, [r3, #24]
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	4013      	ands	r3, r2
 8008b72:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008b74:	68fb      	ldr	r3, [r7, #12]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3714      	adds	r7, #20
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr

08008b82 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008b82:	b480      	push	{r7}
 8008b84:	b083      	sub	sp, #12
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	695b      	ldr	r3, [r3, #20]
 8008b8e:	f003 0301 	and.w	r3, r3, #1
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	370c      	adds	r7, #12
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
	...

08008ba0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b085      	sub	sp, #20
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	60fb      	str	r3, [r7, #12]
 8008bb2:	4a13      	ldr	r2, [pc, #76]	; (8008c00 <USB_CoreReset+0x60>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d901      	bls.n	8008bbc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008bb8:	2303      	movs	r3, #3
 8008bba:	e01a      	b.n	8008bf2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	691b      	ldr	r3, [r3, #16]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	daf3      	bge.n	8008bac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	f043 0201 	orr.w	r2, r3, #1
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	60fb      	str	r3, [r7, #12]
 8008bda:	4a09      	ldr	r2, [pc, #36]	; (8008c00 <USB_CoreReset+0x60>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d901      	bls.n	8008be4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008be0:	2303      	movs	r3, #3
 8008be2:	e006      	b.n	8008bf2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	691b      	ldr	r3, [r3, #16]
 8008be8:	f003 0301 	and.w	r3, r3, #1
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d0f1      	beq.n	8008bd4 <USB_CoreReset+0x34>

  return HAL_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3714      	adds	r7, #20
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	00030d40 	.word	0x00030d40

08008c04 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c04:	b084      	sub	sp, #16
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b084      	sub	sp, #16
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
 8008c0e:	f107 001c 	add.w	r0, r7, #28
 8008c12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c20:	461a      	mov	r2, r3
 8008c22:	2300      	movs	r3, #0
 8008c24:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c2a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c36:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c42:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d018      	beq.n	8008c88 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d10a      	bne.n	8008c72 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68ba      	ldr	r2, [r7, #8]
 8008c66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c6a:	f043 0304 	orr.w	r3, r3, #4
 8008c6e:	6013      	str	r3, [r2, #0]
 8008c70:	e014      	b.n	8008c9c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	68ba      	ldr	r2, [r7, #8]
 8008c7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c80:	f023 0304 	bic.w	r3, r3, #4
 8008c84:	6013      	str	r3, [r2, #0]
 8008c86:	e009      	b.n	8008c9c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	68ba      	ldr	r2, [r7, #8]
 8008c92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c96:	f023 0304 	bic.w	r3, r3, #4
 8008c9a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008c9c:	2110      	movs	r1, #16
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f7ff fe82 	bl	80089a8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f7ff fea3 	bl	80089f0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008caa:	2300      	movs	r3, #0
 8008cac:	60fb      	str	r3, [r7, #12]
 8008cae:	e015      	b.n	8008cdc <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	015a      	lsls	r2, r3, #5
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8008cc2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	015a      	lsls	r2, r3, #5
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	4413      	add	r3, r2
 8008ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	60fb      	str	r3, [r7, #12]
 8008cdc:	6a3b      	ldr	r3, [r7, #32]
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d3e5      	bcc.n	8008cb0 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f04f 32ff 	mov.w	r2, #4294967295
 8008cf0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00b      	beq.n	8008d16 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d04:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a13      	ldr	r2, [pc, #76]	; (8008d58 <USB_HostInit+0x154>)
 8008d0a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a13      	ldr	r2, [pc, #76]	; (8008d5c <USB_HostInit+0x158>)
 8008d10:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008d14:	e009      	b.n	8008d2a <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2280      	movs	r2, #128	; 0x80
 8008d1a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a10      	ldr	r2, [pc, #64]	; (8008d60 <USB_HostInit+0x15c>)
 8008d20:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a0f      	ldr	r2, [pc, #60]	; (8008d64 <USB_HostInit+0x160>)
 8008d26:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d105      	bne.n	8008d3c <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	699b      	ldr	r3, [r3, #24]
 8008d34:	f043 0210 	orr.w	r2, r3, #16
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	699a      	ldr	r2, [r3, #24]
 8008d40:	4b09      	ldr	r3, [pc, #36]	; (8008d68 <USB_HostInit+0x164>)
 8008d42:	4313      	orrs	r3, r2
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d54:	b004      	add	sp, #16
 8008d56:	4770      	bx	lr
 8008d58:	01000200 	.word	0x01000200
 8008d5c:	00e00300 	.word	0x00e00300
 8008d60:	00600080 	.word	0x00600080
 8008d64:	004000e0 	.word	0x004000e0
 8008d68:	a3200008 	.word	0xa3200008

08008d6c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	460b      	mov	r3, r1
 8008d76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	68fa      	ldr	r2, [r7, #12]
 8008d86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d8a:	f023 0303 	bic.w	r3, r3, #3
 8008d8e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	78fb      	ldrb	r3, [r7, #3]
 8008d9a:	f003 0303 	and.w	r3, r3, #3
 8008d9e:	68f9      	ldr	r1, [r7, #12]
 8008da0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008da4:	4313      	orrs	r3, r2
 8008da6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008da8:	78fb      	ldrb	r3, [r7, #3]
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d107      	bne.n	8008dbe <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008db4:	461a      	mov	r2, r3
 8008db6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008dba:	6053      	str	r3, [r2, #4]
 8008dbc:	e009      	b.n	8008dd2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008dbe:	78fb      	ldrb	r3, [r7, #3]
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	d106      	bne.n	8008dd2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dca:	461a      	mov	r2, r3
 8008dcc:	f241 7370 	movw	r3, #6000	; 0x1770
 8008dd0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008dd2:	2300      	movs	r3, #0
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3714      	adds	r7, #20
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008dec:	2300      	movs	r3, #0
 8008dee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008e00:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e0e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008e10:	2064      	movs	r0, #100	; 0x64
 8008e12:	f7f9 f875 	bl	8001f00 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008e1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e22:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008e24:	200a      	movs	r0, #10
 8008e26:	f7f9 f86b 	bl	8001f00 <HAL_Delay>

  return HAL_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008e44:	2300      	movs	r3, #0
 8008e46:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008e58:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d109      	bne.n	8008e78 <USB_DriveVbus+0x44>
 8008e64:	78fb      	ldrb	r3, [r7, #3]
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d106      	bne.n	8008e78 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008e72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008e76:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e82:	d109      	bne.n	8008e98 <USB_DriveVbus+0x64>
 8008e84:	78fb      	ldrb	r3, [r7, #3]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d106      	bne.n	8008e98 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008e92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e96:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3714      	adds	r7, #20
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr

08008ea6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008ea6:	b480      	push	{r7}
 8008ea8:	b085      	sub	sp, #20
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	0c5b      	lsrs	r3, r3, #17
 8008ec4:	f003 0303 	and.w	r3, r3, #3
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3714      	adds	r7, #20
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	b29b      	uxth	r3, r3
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3714      	adds	r7, #20
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
	...

08008ef8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b088      	sub	sp, #32
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	4608      	mov	r0, r1
 8008f02:	4611      	mov	r1, r2
 8008f04:	461a      	mov	r2, r3
 8008f06:	4603      	mov	r3, r0
 8008f08:	70fb      	strb	r3, [r7, #3]
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	70bb      	strb	r3, [r7, #2]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008f12:	2300      	movs	r3, #0
 8008f14:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008f1a:	78fb      	ldrb	r3, [r7, #3]
 8008f1c:	015a      	lsls	r2, r3, #5
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	4413      	add	r3, r2
 8008f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f26:	461a      	mov	r2, r3
 8008f28:	f04f 33ff 	mov.w	r3, #4294967295
 8008f2c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008f2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008f32:	2b03      	cmp	r3, #3
 8008f34:	d87e      	bhi.n	8009034 <USB_HC_Init+0x13c>
 8008f36:	a201      	add	r2, pc, #4	; (adr r2, 8008f3c <USB_HC_Init+0x44>)
 8008f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3c:	08008f4d 	.word	0x08008f4d
 8008f40:	08008ff7 	.word	0x08008ff7
 8008f44:	08008f4d 	.word	0x08008f4d
 8008f48:	08008fb9 	.word	0x08008fb9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008f4c:	78fb      	ldrb	r3, [r7, #3]
 8008f4e:	015a      	lsls	r2, r3, #5
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	4413      	add	r3, r2
 8008f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f58:	461a      	mov	r2, r3
 8008f5a:	f240 439d 	movw	r3, #1181	; 0x49d
 8008f5e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008f60:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	da10      	bge.n	8008f8a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008f68:	78fb      	ldrb	r3, [r7, #3]
 8008f6a:	015a      	lsls	r2, r3, #5
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	4413      	add	r3, r2
 8008f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	78fa      	ldrb	r2, [r7, #3]
 8008f78:	0151      	lsls	r1, r2, #5
 8008f7a:	693a      	ldr	r2, [r7, #16]
 8008f7c:	440a      	add	r2, r1
 8008f7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f86:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008f88:	e057      	b.n	800903a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d051      	beq.n	800903a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008f96:	78fb      	ldrb	r3, [r7, #3]
 8008f98:	015a      	lsls	r2, r3, #5
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	78fa      	ldrb	r2, [r7, #3]
 8008fa6:	0151      	lsls	r1, r2, #5
 8008fa8:	693a      	ldr	r2, [r7, #16]
 8008faa:	440a      	add	r2, r1
 8008fac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fb0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008fb4:	60d3      	str	r3, [r2, #12]
      break;
 8008fb6:	e040      	b.n	800903a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008fb8:	78fb      	ldrb	r3, [r7, #3]
 8008fba:	015a      	lsls	r2, r3, #5
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	f240 639d 	movw	r3, #1693	; 0x69d
 8008fca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008fcc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	da34      	bge.n	800903e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008fd4:	78fb      	ldrb	r3, [r7, #3]
 8008fd6:	015a      	lsls	r2, r3, #5
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	4413      	add	r3, r2
 8008fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	78fa      	ldrb	r2, [r7, #3]
 8008fe4:	0151      	lsls	r1, r2, #5
 8008fe6:	693a      	ldr	r2, [r7, #16]
 8008fe8:	440a      	add	r2, r1
 8008fea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ff2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008ff4:	e023      	b.n	800903e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008ff6:	78fb      	ldrb	r3, [r7, #3]
 8008ff8:	015a      	lsls	r2, r3, #5
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009002:	461a      	mov	r2, r3
 8009004:	f240 2325 	movw	r3, #549	; 0x225
 8009008:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800900a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800900e:	2b00      	cmp	r3, #0
 8009010:	da17      	bge.n	8009042 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009012:	78fb      	ldrb	r3, [r7, #3]
 8009014:	015a      	lsls	r2, r3, #5
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	4413      	add	r3, r2
 800901a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	78fa      	ldrb	r2, [r7, #3]
 8009022:	0151      	lsls	r1, r2, #5
 8009024:	693a      	ldr	r2, [r7, #16]
 8009026:	440a      	add	r2, r1
 8009028:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800902c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009030:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009032:	e006      	b.n	8009042 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	77fb      	strb	r3, [r7, #31]
      break;
 8009038:	e004      	b.n	8009044 <USB_HC_Init+0x14c>
      break;
 800903a:	bf00      	nop
 800903c:	e002      	b.n	8009044 <USB_HC_Init+0x14c>
      break;
 800903e:	bf00      	nop
 8009040:	e000      	b.n	8009044 <USB_HC_Init+0x14c>
      break;
 8009042:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800904a:	699a      	ldr	r2, [r3, #24]
 800904c:	78fb      	ldrb	r3, [r7, #3]
 800904e:	f003 030f 	and.w	r3, r3, #15
 8009052:	2101      	movs	r1, #1
 8009054:	fa01 f303 	lsl.w	r3, r1, r3
 8009058:	6939      	ldr	r1, [r7, #16]
 800905a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800905e:	4313      	orrs	r3, r2
 8009060:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	699b      	ldr	r3, [r3, #24]
 8009066:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800906e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009072:	2b00      	cmp	r3, #0
 8009074:	da03      	bge.n	800907e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800907a:	61bb      	str	r3, [r7, #24]
 800907c:	e001      	b.n	8009082 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800907e:	2300      	movs	r3, #0
 8009080:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f7ff ff0f 	bl	8008ea6 <USB_GetHostSpeed>
 8009088:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800908a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800908e:	2b02      	cmp	r3, #2
 8009090:	d106      	bne.n	80090a0 <USB_HC_Init+0x1a8>
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2b02      	cmp	r3, #2
 8009096:	d003      	beq.n	80090a0 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009098:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800909c:	617b      	str	r3, [r7, #20]
 800909e:	e001      	b.n	80090a4 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80090a0:	2300      	movs	r3, #0
 80090a2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80090a4:	787b      	ldrb	r3, [r7, #1]
 80090a6:	059b      	lsls	r3, r3, #22
 80090a8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80090ac:	78bb      	ldrb	r3, [r7, #2]
 80090ae:	02db      	lsls	r3, r3, #11
 80090b0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80090b4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80090b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80090ba:	049b      	lsls	r3, r3, #18
 80090bc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80090c0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80090c2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80090c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80090c8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80090ce:	78fb      	ldrb	r3, [r7, #3]
 80090d0:	0159      	lsls	r1, r3, #5
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	440b      	add	r3, r1
 80090d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090da:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80090e0:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80090e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80090e6:	2b03      	cmp	r3, #3
 80090e8:	d10f      	bne.n	800910a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80090ea:	78fb      	ldrb	r3, [r7, #3]
 80090ec:	015a      	lsls	r2, r3, #5
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	4413      	add	r3, r2
 80090f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	78fa      	ldrb	r2, [r7, #3]
 80090fa:	0151      	lsls	r1, r2, #5
 80090fc:	693a      	ldr	r2, [r7, #16]
 80090fe:	440a      	add	r2, r1
 8009100:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009104:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009108:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800910a:	7ffb      	ldrb	r3, [r7, #31]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3720      	adds	r7, #32
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b08c      	sub	sp, #48	; 0x30
 8009118:	af02      	add	r7, sp, #8
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	4613      	mov	r3, r2
 8009120:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	785b      	ldrb	r3, [r3, #1]
 800912a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800912c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009130:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800913a:	2b00      	cmp	r3, #0
 800913c:	d02d      	beq.n	800919a <USB_HC_StartXfer+0x86>
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	791b      	ldrb	r3, [r3, #4]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d129      	bne.n	800919a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8009146:	79fb      	ldrb	r3, [r7, #7]
 8009148:	2b01      	cmp	r3, #1
 800914a:	d117      	bne.n	800917c <USB_HC_StartXfer+0x68>
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	79db      	ldrb	r3, [r3, #7]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d003      	beq.n	800915c <USB_HC_StartXfer+0x48>
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	79db      	ldrb	r3, [r3, #7]
 8009158:	2b02      	cmp	r3, #2
 800915a:	d10f      	bne.n	800917c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	015a      	lsls	r2, r3, #5
 8009160:	6a3b      	ldr	r3, [r7, #32]
 8009162:	4413      	add	r3, r2
 8009164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	69fa      	ldr	r2, [r7, #28]
 800916c:	0151      	lsls	r1, r2, #5
 800916e:	6a3a      	ldr	r2, [r7, #32]
 8009170:	440a      	add	r2, r1
 8009172:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800917a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800917c:	79fb      	ldrb	r3, [r7, #7]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d10b      	bne.n	800919a <USB_HC_StartXfer+0x86>
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	795b      	ldrb	r3, [r3, #5]
 8009186:	2b01      	cmp	r3, #1
 8009188:	d107      	bne.n	800919a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	785b      	ldrb	r3, [r3, #1]
 800918e:	4619      	mov	r1, r3
 8009190:	68f8      	ldr	r0, [r7, #12]
 8009192:	f000 fa2f 	bl	80095f4 <USB_DoPing>
      return HAL_OK;
 8009196:	2300      	movs	r3, #0
 8009198:	e0f8      	b.n	800938c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	695b      	ldr	r3, [r3, #20]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d018      	beq.n	80091d4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	695b      	ldr	r3, [r3, #20]
 80091a6:	68ba      	ldr	r2, [r7, #8]
 80091a8:	8912      	ldrh	r2, [r2, #8]
 80091aa:	4413      	add	r3, r2
 80091ac:	3b01      	subs	r3, #1
 80091ae:	68ba      	ldr	r2, [r7, #8]
 80091b0:	8912      	ldrh	r2, [r2, #8]
 80091b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80091b6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80091b8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80091ba:	8b7b      	ldrh	r3, [r7, #26]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d90b      	bls.n	80091d8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80091c0:	8b7b      	ldrh	r3, [r7, #26]
 80091c2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80091c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80091c6:	68ba      	ldr	r2, [r7, #8]
 80091c8:	8912      	ldrh	r2, [r2, #8]
 80091ca:	fb02 f203 	mul.w	r2, r2, r3
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	611a      	str	r2, [r3, #16]
 80091d2:	e001      	b.n	80091d8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80091d4:	2301      	movs	r3, #1
 80091d6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	78db      	ldrb	r3, [r3, #3]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d007      	beq.n	80091f0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80091e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80091e2:	68ba      	ldr	r2, [r7, #8]
 80091e4:	8912      	ldrh	r2, [r2, #8]
 80091e6:	fb02 f203 	mul.w	r2, r2, r3
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	611a      	str	r2, [r3, #16]
 80091ee:	e003      	b.n	80091f8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	695a      	ldr	r2, [r3, #20]
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009200:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009202:	04d9      	lsls	r1, r3, #19
 8009204:	4b63      	ldr	r3, [pc, #396]	; (8009394 <USB_HC_StartXfer+0x280>)
 8009206:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009208:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	7a9b      	ldrb	r3, [r3, #10]
 800920e:	075b      	lsls	r3, r3, #29
 8009210:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009214:	69f9      	ldr	r1, [r7, #28]
 8009216:	0148      	lsls	r0, r1, #5
 8009218:	6a39      	ldr	r1, [r7, #32]
 800921a:	4401      	add	r1, r0
 800921c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009220:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009222:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009224:	79fb      	ldrb	r3, [r7, #7]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d009      	beq.n	800923e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	68d9      	ldr	r1, [r3, #12]
 800922e:	69fb      	ldr	r3, [r7, #28]
 8009230:	015a      	lsls	r2, r3, #5
 8009232:	6a3b      	ldr	r3, [r7, #32]
 8009234:	4413      	add	r3, r2
 8009236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800923a:	460a      	mov	r2, r1
 800923c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800923e:	6a3b      	ldr	r3, [r7, #32]
 8009240:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	f003 0301 	and.w	r3, r3, #1
 800924a:	2b00      	cmp	r3, #0
 800924c:	bf0c      	ite	eq
 800924e:	2301      	moveq	r3, #1
 8009250:	2300      	movne	r3, #0
 8009252:	b2db      	uxtb	r3, r3
 8009254:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	015a      	lsls	r2, r3, #5
 800925a:	6a3b      	ldr	r3, [r7, #32]
 800925c:	4413      	add	r3, r2
 800925e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	69fa      	ldr	r2, [r7, #28]
 8009266:	0151      	lsls	r1, r2, #5
 8009268:	6a3a      	ldr	r2, [r7, #32]
 800926a:	440a      	add	r2, r1
 800926c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009270:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009274:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	015a      	lsls	r2, r3, #5
 800927a:	6a3b      	ldr	r3, [r7, #32]
 800927c:	4413      	add	r3, r2
 800927e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	7e7b      	ldrb	r3, [r7, #25]
 8009286:	075b      	lsls	r3, r3, #29
 8009288:	69f9      	ldr	r1, [r7, #28]
 800928a:	0148      	lsls	r0, r1, #5
 800928c:	6a39      	ldr	r1, [r7, #32]
 800928e:	4401      	add	r1, r0
 8009290:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009294:	4313      	orrs	r3, r2
 8009296:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	015a      	lsls	r2, r3, #5
 800929c:	6a3b      	ldr	r3, [r7, #32]
 800929e:	4413      	add	r3, r2
 80092a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80092ae:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	78db      	ldrb	r3, [r3, #3]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d004      	beq.n	80092c2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092be:	613b      	str	r3, [r7, #16]
 80092c0:	e003      	b.n	80092ca <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80092c8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80092d0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	015a      	lsls	r2, r3, #5
 80092d6:	6a3b      	ldr	r3, [r7, #32]
 80092d8:	4413      	add	r3, r2
 80092da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092de:	461a      	mov	r2, r3
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80092e4:	79fb      	ldrb	r3, [r7, #7]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d001      	beq.n	80092ee <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	e04e      	b.n	800938c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	78db      	ldrb	r3, [r3, #3]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d149      	bne.n	800938a <USB_HC_StartXfer+0x276>
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	695b      	ldr	r3, [r3, #20]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d045      	beq.n	800938a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	79db      	ldrb	r3, [r3, #7]
 8009302:	2b03      	cmp	r3, #3
 8009304:	d830      	bhi.n	8009368 <USB_HC_StartXfer+0x254>
 8009306:	a201      	add	r2, pc, #4	; (adr r2, 800930c <USB_HC_StartXfer+0x1f8>)
 8009308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930c:	0800931d 	.word	0x0800931d
 8009310:	08009341 	.word	0x08009341
 8009314:	0800931d 	.word	0x0800931d
 8009318:	08009341 	.word	0x08009341
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	695b      	ldr	r3, [r3, #20]
 8009320:	3303      	adds	r3, #3
 8009322:	089b      	lsrs	r3, r3, #2
 8009324:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009326:	8afa      	ldrh	r2, [r7, #22]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932c:	b29b      	uxth	r3, r3
 800932e:	429a      	cmp	r2, r3
 8009330:	d91c      	bls.n	800936c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	699b      	ldr	r3, [r3, #24]
 8009336:	f043 0220 	orr.w	r2, r3, #32
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	619a      	str	r2, [r3, #24]
        }
        break;
 800933e:	e015      	b.n	800936c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	695b      	ldr	r3, [r3, #20]
 8009344:	3303      	adds	r3, #3
 8009346:	089b      	lsrs	r3, r3, #2
 8009348:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800934a:	8afa      	ldrh	r2, [r7, #22]
 800934c:	6a3b      	ldr	r3, [r7, #32]
 800934e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009352:	691b      	ldr	r3, [r3, #16]
 8009354:	b29b      	uxth	r3, r3
 8009356:	429a      	cmp	r2, r3
 8009358:	d90a      	bls.n	8009370 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	699b      	ldr	r3, [r3, #24]
 800935e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	619a      	str	r2, [r3, #24]
        }
        break;
 8009366:	e003      	b.n	8009370 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009368:	bf00      	nop
 800936a:	e002      	b.n	8009372 <USB_HC_StartXfer+0x25e>
        break;
 800936c:	bf00      	nop
 800936e:	e000      	b.n	8009372 <USB_HC_StartXfer+0x25e>
        break;
 8009370:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	68d9      	ldr	r1, [r3, #12]
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	785a      	ldrb	r2, [r3, #1]
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	695b      	ldr	r3, [r3, #20]
 800937e:	b29b      	uxth	r3, r3
 8009380:	2000      	movs	r0, #0
 8009382:	9000      	str	r0, [sp, #0]
 8009384:	68f8      	ldr	r0, [r7, #12]
 8009386:	f7ff fb53 	bl	8008a30 <USB_WritePacket>
  }

  return HAL_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3728      	adds	r7, #40	; 0x28
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	1ff80000 	.word	0x1ff80000

08009398 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093aa:	695b      	ldr	r3, [r3, #20]
 80093ac:	b29b      	uxth	r3, r3
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3714      	adds	r7, #20
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr

080093ba <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80093ba:	b480      	push	{r7}
 80093bc:	b089      	sub	sp, #36	; 0x24
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
 80093c2:	460b      	mov	r3, r1
 80093c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80093ca:	78fb      	ldrb	r3, [r7, #3]
 80093cc:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80093ce:	2300      	movs	r3, #0
 80093d0:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	015a      	lsls	r2, r3, #5
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	4413      	add	r3, r2
 80093da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	0c9b      	lsrs	r3, r3, #18
 80093e2:	f003 0303 	and.w	r3, r3, #3
 80093e6:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	015a      	lsls	r2, r3, #5
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	4413      	add	r3, r2
 80093f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	0fdb      	lsrs	r3, r3, #31
 80093f8:	f003 0301 	and.w	r3, r3, #1
 80093fc:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	f003 0320 	and.w	r3, r3, #32
 8009406:	2b20      	cmp	r3, #32
 8009408:	d104      	bne.n	8009414 <USB_HC_Halt+0x5a>
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d101      	bne.n	8009414 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009410:	2300      	movs	r3, #0
 8009412:	e0e8      	b.n	80095e6 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d002      	beq.n	8009420 <USB_HC_Halt+0x66>
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	2b02      	cmp	r3, #2
 800941e:	d173      	bne.n	8009508 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	015a      	lsls	r2, r3, #5
 8009424:	69bb      	ldr	r3, [r7, #24]
 8009426:	4413      	add	r3, r2
 8009428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	697a      	ldr	r2, [r7, #20]
 8009430:	0151      	lsls	r1, r2, #5
 8009432:	69ba      	ldr	r2, [r7, #24]
 8009434:	440a      	add	r2, r1
 8009436:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800943a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800943e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	f003 0320 	and.w	r3, r3, #32
 8009448:	2b00      	cmp	r3, #0
 800944a:	f040 80cb 	bne.w	80095e4 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009452:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009456:	2b00      	cmp	r3, #0
 8009458:	d143      	bne.n	80094e2 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	015a      	lsls	r2, r3, #5
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	4413      	add	r3, r2
 8009462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	697a      	ldr	r2, [r7, #20]
 800946a:	0151      	lsls	r1, r2, #5
 800946c:	69ba      	ldr	r2, [r7, #24]
 800946e:	440a      	add	r2, r1
 8009470:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009474:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009478:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	015a      	lsls	r2, r3, #5
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	4413      	add	r3, r2
 8009482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	697a      	ldr	r2, [r7, #20]
 800948a:	0151      	lsls	r1, r2, #5
 800948c:	69ba      	ldr	r2, [r7, #24]
 800948e:	440a      	add	r2, r1
 8009490:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009494:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009498:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	015a      	lsls	r2, r3, #5
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	4413      	add	r3, r2
 80094a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	697a      	ldr	r2, [r7, #20]
 80094aa:	0151      	lsls	r1, r2, #5
 80094ac:	69ba      	ldr	r2, [r7, #24]
 80094ae:	440a      	add	r2, r1
 80094b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80094b8:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	3301      	adds	r3, #1
 80094be:	61fb      	str	r3, [r7, #28]
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094c6:	d81d      	bhi.n	8009504 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	015a      	lsls	r2, r3, #5
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	4413      	add	r3, r2
 80094d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094de:	d0ec      	beq.n	80094ba <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80094e0:	e080      	b.n	80095e4 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	015a      	lsls	r2, r3, #5
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	4413      	add	r3, r2
 80094ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	697a      	ldr	r2, [r7, #20]
 80094f2:	0151      	lsls	r1, r2, #5
 80094f4:	69ba      	ldr	r2, [r7, #24]
 80094f6:	440a      	add	r2, r1
 80094f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009500:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009502:	e06f      	b.n	80095e4 <USB_HC_Halt+0x22a>
            break;
 8009504:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009506:	e06d      	b.n	80095e4 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	015a      	lsls	r2, r3, #5
 800950c:	69bb      	ldr	r3, [r7, #24]
 800950e:	4413      	add	r3, r2
 8009510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	0151      	lsls	r1, r2, #5
 800951a:	69ba      	ldr	r2, [r7, #24]
 800951c:	440a      	add	r2, r1
 800951e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009522:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009526:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009534:	2b00      	cmp	r3, #0
 8009536:	d143      	bne.n	80095c0 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	015a      	lsls	r2, r3, #5
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	4413      	add	r3, r2
 8009540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	697a      	ldr	r2, [r7, #20]
 8009548:	0151      	lsls	r1, r2, #5
 800954a:	69ba      	ldr	r2, [r7, #24]
 800954c:	440a      	add	r2, r1
 800954e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009552:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009556:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	015a      	lsls	r2, r3, #5
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	4413      	add	r3, r2
 8009560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	697a      	ldr	r2, [r7, #20]
 8009568:	0151      	lsls	r1, r2, #5
 800956a:	69ba      	ldr	r2, [r7, #24]
 800956c:	440a      	add	r2, r1
 800956e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009572:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009576:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	015a      	lsls	r2, r3, #5
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	4413      	add	r3, r2
 8009580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	697a      	ldr	r2, [r7, #20]
 8009588:	0151      	lsls	r1, r2, #5
 800958a:	69ba      	ldr	r2, [r7, #24]
 800958c:	440a      	add	r2, r1
 800958e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009592:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009596:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	3301      	adds	r3, #1
 800959c:	61fb      	str	r3, [r7, #28]
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095a4:	d81d      	bhi.n	80095e2 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	015a      	lsls	r2, r3, #5
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	4413      	add	r3, r2
 80095ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095bc:	d0ec      	beq.n	8009598 <USB_HC_Halt+0x1de>
 80095be:	e011      	b.n	80095e4 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	015a      	lsls	r2, r3, #5
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	4413      	add	r3, r2
 80095c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	697a      	ldr	r2, [r7, #20]
 80095d0:	0151      	lsls	r1, r2, #5
 80095d2:	69ba      	ldr	r2, [r7, #24]
 80095d4:	440a      	add	r2, r1
 80095d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80095de:	6013      	str	r3, [r2, #0]
 80095e0:	e000      	b.n	80095e4 <USB_HC_Halt+0x22a>
          break;
 80095e2:	bf00      	nop
    }
  }

  return HAL_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3724      	adds	r7, #36	; 0x24
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr
	...

080095f4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b087      	sub	sp, #28
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	460b      	mov	r3, r1
 80095fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009604:	78fb      	ldrb	r3, [r7, #3]
 8009606:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009608:	2301      	movs	r3, #1
 800960a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	04da      	lsls	r2, r3, #19
 8009610:	4b15      	ldr	r3, [pc, #84]	; (8009668 <USB_DoPing+0x74>)
 8009612:	4013      	ands	r3, r2
 8009614:	693a      	ldr	r2, [r7, #16]
 8009616:	0151      	lsls	r1, r2, #5
 8009618:	697a      	ldr	r2, [r7, #20]
 800961a:	440a      	add	r2, r1
 800961c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009624:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	015a      	lsls	r2, r3, #5
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	4413      	add	r3, r2
 800962e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800963c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009644:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	015a      	lsls	r2, r3, #5
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	4413      	add	r3, r2
 800964e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009652:	461a      	mov	r2, r3
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	371c      	adds	r7, #28
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr
 8009666:	bf00      	nop
 8009668:	1ff80000 	.word	0x1ff80000

0800966c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b086      	sub	sp, #24
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009678:	2300      	movs	r3, #0
 800967a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f7ff f935 	bl	80088ec <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8009682:	2110      	movs	r1, #16
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f7ff f98f 	bl	80089a8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f7ff f9b0 	bl	80089f0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009690:	2300      	movs	r3, #0
 8009692:	613b      	str	r3, [r7, #16]
 8009694:	e01f      	b.n	80096d6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	015a      	lsls	r2, r3, #5
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	4413      	add	r3, r2
 800969e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096ac:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096b4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80096bc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	015a      	lsls	r2, r3, #5
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	4413      	add	r3, r2
 80096c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096ca:	461a      	mov	r2, r3
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	3301      	adds	r3, #1
 80096d4:	613b      	str	r3, [r7, #16]
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	2b0f      	cmp	r3, #15
 80096da:	d9dc      	bls.n	8009696 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80096dc:	2300      	movs	r3, #0
 80096de:	613b      	str	r3, [r7, #16]
 80096e0:	e034      	b.n	800974c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	015a      	lsls	r2, r3, #5
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	4413      	add	r3, r2
 80096ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096f8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009700:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009708:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	015a      	lsls	r2, r3, #5
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	4413      	add	r3, r2
 8009712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009716:	461a      	mov	r2, r3
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	3301      	adds	r3, #1
 8009720:	617b      	str	r3, [r7, #20]
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009728:	d80c      	bhi.n	8009744 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	015a      	lsls	r2, r3, #5
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	4413      	add	r3, r2
 8009732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800973c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009740:	d0ec      	beq.n	800971c <USB_StopHost+0xb0>
 8009742:	e000      	b.n	8009746 <USB_StopHost+0xda>
        break;
 8009744:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	3301      	adds	r3, #1
 800974a:	613b      	str	r3, [r7, #16]
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	2b0f      	cmp	r3, #15
 8009750:	d9c7      	bls.n	80096e2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009758:	461a      	mov	r2, r3
 800975a:	f04f 33ff 	mov.w	r3, #4294967295
 800975e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f04f 32ff 	mov.w	r2, #4294967295
 8009766:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f7ff f8ae 	bl	80088ca <USB_EnableGlobalInt>

  return HAL_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3718      	adds	r7, #24
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800977c:	4904      	ldr	r1, [pc, #16]	; (8009790 <MX_FATFS_Init+0x18>)
 800977e:	4805      	ldr	r0, [pc, #20]	; (8009794 <MX_FATFS_Init+0x1c>)
 8009780:	f005 fb86 	bl	800ee90 <FATFS_LinkDriver>
 8009784:	4603      	mov	r3, r0
 8009786:	461a      	mov	r2, r3
 8009788:	4b03      	ldr	r3, [pc, #12]	; (8009798 <MX_FATFS_Init+0x20>)
 800978a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800978c:	bf00      	nop
 800978e:	bd80      	pop	{r7, pc}
 8009790:	20001610 	.word	0x20001610
 8009794:	080106ac 	.word	0x080106ac
 8009798:	20001a74 	.word	0x20001a74

0800979c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800979c:	b480      	push	{r7}
 800979e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80097a0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr

080097ac <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	4603      	mov	r3, r0
 80097b4:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80097b6:	2300      	movs	r3, #0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	370c      	adds	r7, #12
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	4603      	mov	r3, r0
 80097cc:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80097d2:	79fb      	ldrb	r3, [r7, #7]
 80097d4:	4619      	mov	r1, r3
 80097d6:	4808      	ldr	r0, [pc, #32]	; (80097f8 <USBH_status+0x34>)
 80097d8:	f000 fe1a 	bl	800a410 <USBH_MSC_UnitIsReady>
 80097dc:	4603      	mov	r3, r0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d002      	beq.n	80097e8 <USBH_status+0x24>
  {
    res = RES_OK;
 80097e2:	2300      	movs	r3, #0
 80097e4:	73fb      	strb	r3, [r7, #15]
 80097e6:	e001      	b.n	80097ec <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80097ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	20001a78 	.word	0x20001a78

080097fc <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b094      	sub	sp, #80	; 0x50
 8009800:	af02      	add	r7, sp, #8
 8009802:	60b9      	str	r1, [r7, #8]
 8009804:	607a      	str	r2, [r7, #4]
 8009806:	603b      	str	r3, [r7, #0]
 8009808:	4603      	mov	r3, r0
 800980a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800980c:	2301      	movs	r3, #1
 800980e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8009812:	7bf9      	ldrb	r1, [r7, #15]
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	9300      	str	r3, [sp, #0]
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	4813      	ldr	r0, [pc, #76]	; (800986c <USBH_read+0x70>)
 800981e:	f000 fe41 	bl	800a4a4 <USBH_MSC_Read>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d103      	bne.n	8009830 <USBH_read+0x34>
  {
    res = RES_OK;
 8009828:	2300      	movs	r3, #0
 800982a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800982e:	e017      	b.n	8009860 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009830:	f107 0210 	add.w	r2, r7, #16
 8009834:	7bfb      	ldrb	r3, [r7, #15]
 8009836:	4619      	mov	r1, r3
 8009838:	480c      	ldr	r0, [pc, #48]	; (800986c <USBH_read+0x70>)
 800983a:	f000 fe0f 	bl	800a45c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800983e:	7f7b      	ldrb	r3, [r7, #29]
 8009840:	2b3a      	cmp	r3, #58	; 0x3a
 8009842:	d005      	beq.n	8009850 <USBH_read+0x54>
 8009844:	2b3a      	cmp	r3, #58	; 0x3a
 8009846:	dc07      	bgt.n	8009858 <USBH_read+0x5c>
 8009848:	2b04      	cmp	r3, #4
 800984a:	d001      	beq.n	8009850 <USBH_read+0x54>
 800984c:	2b28      	cmp	r3, #40	; 0x28
 800984e:	d103      	bne.n	8009858 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009850:	2303      	movs	r3, #3
 8009852:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009856:	e003      	b.n	8009860 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800985e:	bf00      	nop
    }
  }

  return res;
 8009860:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009864:	4618      	mov	r0, r3
 8009866:	3748      	adds	r7, #72	; 0x48
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	20001a78 	.word	0x20001a78

08009870 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b094      	sub	sp, #80	; 0x50
 8009874:	af02      	add	r7, sp, #8
 8009876:	60b9      	str	r1, [r7, #8]
 8009878:	607a      	str	r2, [r7, #4]
 800987a:	603b      	str	r3, [r7, #0]
 800987c:	4603      	mov	r3, r0
 800987e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009880:	2301      	movs	r3, #1
 8009882:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8009886:	7bf9      	ldrb	r1, [r7, #15]
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	9300      	str	r3, [sp, #0]
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	4817      	ldr	r0, [pc, #92]	; (80098f0 <USBH_write+0x80>)
 8009892:	f000 fe70 	bl	800a576 <USBH_MSC_Write>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d103      	bne.n	80098a4 <USBH_write+0x34>
  {
    res = RES_OK;
 800989c:	2300      	movs	r3, #0
 800989e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80098a2:	e01f      	b.n	80098e4 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80098a4:	f107 0210 	add.w	r2, r7, #16
 80098a8:	7bfb      	ldrb	r3, [r7, #15]
 80098aa:	4619      	mov	r1, r3
 80098ac:	4810      	ldr	r0, [pc, #64]	; (80098f0 <USBH_write+0x80>)
 80098ae:	f000 fdd5 	bl	800a45c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80098b2:	7f7b      	ldrb	r3, [r7, #29]
 80098b4:	2b3a      	cmp	r3, #58	; 0x3a
 80098b6:	d00d      	beq.n	80098d4 <USBH_write+0x64>
 80098b8:	2b3a      	cmp	r3, #58	; 0x3a
 80098ba:	dc0f      	bgt.n	80098dc <USBH_write+0x6c>
 80098bc:	2b28      	cmp	r3, #40	; 0x28
 80098be:	d009      	beq.n	80098d4 <USBH_write+0x64>
 80098c0:	2b28      	cmp	r3, #40	; 0x28
 80098c2:	dc0b      	bgt.n	80098dc <USBH_write+0x6c>
 80098c4:	2b04      	cmp	r3, #4
 80098c6:	d005      	beq.n	80098d4 <USBH_write+0x64>
 80098c8:	2b27      	cmp	r3, #39	; 0x27
 80098ca:	d107      	bne.n	80098dc <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80098cc:	2302      	movs	r3, #2
 80098ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80098d2:	e007      	b.n	80098e4 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80098d4:	2303      	movs	r3, #3
 80098d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80098da:	e003      	b.n	80098e4 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80098dc:	2301      	movs	r3, #1
 80098de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80098e2:	bf00      	nop
    }
  }

  return res;
 80098e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3748      	adds	r7, #72	; 0x48
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	20001a78 	.word	0x20001a78

080098f4 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b090      	sub	sp, #64	; 0x40
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	4603      	mov	r3, r0
 80098fc:	603a      	str	r2, [r7, #0]
 80098fe:	71fb      	strb	r3, [r7, #7]
 8009900:	460b      	mov	r3, r1
 8009902:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800990a:	79bb      	ldrb	r3, [r7, #6]
 800990c:	2b03      	cmp	r3, #3
 800990e:	d852      	bhi.n	80099b6 <USBH_ioctl+0xc2>
 8009910:	a201      	add	r2, pc, #4	; (adr r2, 8009918 <USBH_ioctl+0x24>)
 8009912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009916:	bf00      	nop
 8009918:	08009929 	.word	0x08009929
 800991c:	08009931 	.word	0x08009931
 8009920:	0800995b 	.word	0x0800995b
 8009924:	08009987 	.word	0x08009987
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8009928:	2300      	movs	r3, #0
 800992a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800992e:	e045      	b.n	80099bc <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009930:	f107 0208 	add.w	r2, r7, #8
 8009934:	79fb      	ldrb	r3, [r7, #7]
 8009936:	4619      	mov	r1, r3
 8009938:	4823      	ldr	r0, [pc, #140]	; (80099c8 <USBH_ioctl+0xd4>)
 800993a:	f000 fd8f 	bl	800a45c <USBH_MSC_GetLUNInfo>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d106      	bne.n	8009952 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8009944:	68fa      	ldr	r2, [r7, #12]
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800994a:	2300      	movs	r3, #0
 800994c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009950:	e034      	b.n	80099bc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009958:	e030      	b.n	80099bc <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800995a:	f107 0208 	add.w	r2, r7, #8
 800995e:	79fb      	ldrb	r3, [r7, #7]
 8009960:	4619      	mov	r1, r3
 8009962:	4819      	ldr	r0, [pc, #100]	; (80099c8 <USBH_ioctl+0xd4>)
 8009964:	f000 fd7a 	bl	800a45c <USBH_MSC_GetLUNInfo>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d107      	bne.n	800997e <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800996e:	8a3b      	ldrh	r3, [r7, #16]
 8009970:	461a      	mov	r2, r3
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009976:	2300      	movs	r3, #0
 8009978:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800997c:	e01e      	b.n	80099bc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009984:	e01a      	b.n	80099bc <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009986:	f107 0208 	add.w	r2, r7, #8
 800998a:	79fb      	ldrb	r3, [r7, #7]
 800998c:	4619      	mov	r1, r3
 800998e:	480e      	ldr	r0, [pc, #56]	; (80099c8 <USBH_ioctl+0xd4>)
 8009990:	f000 fd64 	bl	800a45c <USBH_MSC_GetLUNInfo>
 8009994:	4603      	mov	r3, r0
 8009996:	2b00      	cmp	r3, #0
 8009998:	d109      	bne.n	80099ae <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800999a:	8a3b      	ldrh	r3, [r7, #16]
 800999c:	0a5b      	lsrs	r3, r3, #9
 800999e:	b29b      	uxth	r3, r3
 80099a0:	461a      	mov	r2, r3
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80099a6:	2300      	movs	r3, #0
 80099a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80099ac:	e006      	b.n	80099bc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80099b4:	e002      	b.n	80099bc <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80099b6:	2304      	movs	r3, #4
 80099b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 80099bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3740      	adds	r7, #64	; 0x40
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	20001a78 	.word	0x20001a78

080099cc <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80099cc:	b590      	push	{r4, r7, lr}
 80099ce:	b089      	sub	sp, #36	; 0x24
 80099d0:	af04      	add	r7, sp, #16
 80099d2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099da:	7919      	ldrb	r1, [r3, #4]
 80099dc:	2350      	movs	r3, #80	; 0x50
 80099de:	2206      	movs	r2, #6
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f001 fc53 	bl	800b28c <USBH_FindInterface>
 80099e6:	4603      	mov	r3, r0
 80099e8:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80099ea:	7bfb      	ldrb	r3, [r7, #15]
 80099ec:	2bff      	cmp	r3, #255	; 0xff
 80099ee:	d002      	beq.n	80099f6 <USBH_MSC_InterfaceInit+0x2a>
 80099f0:	7bfb      	ldrb	r3, [r7, #15]
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d901      	bls.n	80099fa <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80099f6:	2302      	movs	r3, #2
 80099f8:	e0ef      	b.n	8009bda <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 80099fa:	7bfb      	ldrb	r3, [r7, #15]
 80099fc:	4619      	mov	r1, r3
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f001 fc28 	bl	800b254 <USBH_SelectInterface>
 8009a04:	4603      	mov	r3, r0
 8009a06:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009a08:	7bbb      	ldrb	r3, [r7, #14]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d001      	beq.n	8009a12 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8009a0e:	2302      	movs	r3, #2
 8009a10:	e0e3      	b.n	8009bda <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009a18:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009a1c:	f005 fd84 	bl	800f528 <malloc>
 8009a20:	4603      	mov	r3, r0
 8009a22:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a2a:	69db      	ldr	r3, [r3, #28]
 8009a2c:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d101      	bne.n	8009a38 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8009a34:	2302      	movs	r3, #2
 8009a36:	e0d0      	b.n	8009bda <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8009a38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a3c:	2100      	movs	r1, #0
 8009a3e:	68b8      	ldr	r0, [r7, #8]
 8009a40:	f005 fd90 	bl	800f564 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009a44:	7bfb      	ldrb	r3, [r7, #15]
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	211a      	movs	r1, #26
 8009a4a:	fb01 f303 	mul.w	r3, r1, r3
 8009a4e:	4413      	add	r3, r2
 8009a50:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	b25b      	sxtb	r3, r3
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	da16      	bge.n	8009a8a <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009a5c:	7bfb      	ldrb	r3, [r7, #15]
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	211a      	movs	r1, #26
 8009a62:	fb01 f303 	mul.w	r3, r1, r3
 8009a66:	4413      	add	r3, r2
 8009a68:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009a6c:	781a      	ldrb	r2, [r3, #0]
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009a72:	7bfb      	ldrb	r3, [r7, #15]
 8009a74:	687a      	ldr	r2, [r7, #4]
 8009a76:	211a      	movs	r1, #26
 8009a78:	fb01 f303 	mul.w	r3, r1, r3
 8009a7c:	4413      	add	r3, r2
 8009a7e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009a82:	881a      	ldrh	r2, [r3, #0]
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	815a      	strh	r2, [r3, #10]
 8009a88:	e015      	b.n	8009ab6 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009a8a:	7bfb      	ldrb	r3, [r7, #15]
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	211a      	movs	r1, #26
 8009a90:	fb01 f303 	mul.w	r3, r1, r3
 8009a94:	4413      	add	r3, r2
 8009a96:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009a9a:	781a      	ldrb	r2, [r3, #0]
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009aa0:	7bfb      	ldrb	r3, [r7, #15]
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	211a      	movs	r1, #26
 8009aa6:	fb01 f303 	mul.w	r3, r1, r3
 8009aaa:	4413      	add	r3, r2
 8009aac:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009ab0:	881a      	ldrh	r2, [r3, #0]
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009ab6:	7bfb      	ldrb	r3, [r7, #15]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	211a      	movs	r1, #26
 8009abc:	fb01 f303 	mul.w	r3, r1, r3
 8009ac0:	4413      	add	r3, r2
 8009ac2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	b25b      	sxtb	r3, r3
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	da16      	bge.n	8009afc <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009ace:	7bfb      	ldrb	r3, [r7, #15]
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	211a      	movs	r1, #26
 8009ad4:	fb01 f303 	mul.w	r3, r1, r3
 8009ad8:	4413      	add	r3, r2
 8009ada:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009ade:	781a      	ldrb	r2, [r3, #0]
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009ae4:	7bfb      	ldrb	r3, [r7, #15]
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	211a      	movs	r1, #26
 8009aea:	fb01 f303 	mul.w	r3, r1, r3
 8009aee:	4413      	add	r3, r2
 8009af0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009af4:	881a      	ldrh	r2, [r3, #0]
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	815a      	strh	r2, [r3, #10]
 8009afa:	e015      	b.n	8009b28 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009afc:	7bfb      	ldrb	r3, [r7, #15]
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	211a      	movs	r1, #26
 8009b02:	fb01 f303 	mul.w	r3, r1, r3
 8009b06:	4413      	add	r3, r2
 8009b08:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009b0c:	781a      	ldrb	r2, [r3, #0]
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009b12:	7bfb      	ldrb	r3, [r7, #15]
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	211a      	movs	r1, #26
 8009b18:	fb01 f303 	mul.w	r3, r1, r3
 8009b1c:	4413      	add	r3, r2
 8009b1e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009b22:	881a      	ldrh	r2, [r3, #0]
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	2200      	movs	r2, #0
 8009b32:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	2200      	movs	r2, #0
 8009b38:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	799b      	ldrb	r3, [r3, #6]
 8009b3e:	4619      	mov	r1, r3
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f002 fdc4 	bl	800c6ce <USBH_AllocPipe>
 8009b46:	4603      	mov	r3, r0
 8009b48:	461a      	mov	r2, r3
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	79db      	ldrb	r3, [r3, #7]
 8009b52:	4619      	mov	r1, r3
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f002 fdba 	bl	800c6ce <USBH_AllocPipe>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 fdac 	bl	800a6c0 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	7959      	ldrb	r1, [r3, #5]
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	7998      	ldrb	r0, [r3, #6]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b7c:	68ba      	ldr	r2, [r7, #8]
 8009b7e:	8912      	ldrh	r2, [r2, #8]
 8009b80:	9202      	str	r2, [sp, #8]
 8009b82:	2202      	movs	r2, #2
 8009b84:	9201      	str	r2, [sp, #4]
 8009b86:	9300      	str	r3, [sp, #0]
 8009b88:	4623      	mov	r3, r4
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f002 fd6f 	bl	800c670 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	7919      	ldrb	r1, [r3, #4]
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	79d8      	ldrb	r0, [r3, #7]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009ba6:	68ba      	ldr	r2, [r7, #8]
 8009ba8:	8952      	ldrh	r2, [r2, #10]
 8009baa:	9202      	str	r2, [sp, #8]
 8009bac:	2202      	movs	r2, #2
 8009bae:	9201      	str	r2, [sp, #4]
 8009bb0:	9300      	str	r3, [sp, #0]
 8009bb2:	4623      	mov	r3, r4
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f002 fd5a 	bl	800c670 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	791b      	ldrb	r3, [r3, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f005 fbee 	bl	800f3a6 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	795b      	ldrb	r3, [r3, #5]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f005 fbe7 	bl	800f3a6 <USBH_LL_SetToggle>

  return USBH_OK;
 8009bd8:	2300      	movs	r3, #0
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3714      	adds	r7, #20
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd90      	pop	{r4, r7, pc}

08009be2 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009be2:	b580      	push	{r7, lr}
 8009be4:	b084      	sub	sp, #16
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bf0:	69db      	ldr	r3, [r3, #28]
 8009bf2:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	795b      	ldrb	r3, [r3, #5]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d00e      	beq.n	8009c1a <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	795b      	ldrb	r3, [r3, #5]
 8009c00:	4619      	mov	r1, r3
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f002 fd53 	bl	800c6ae <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	795b      	ldrb	r3, [r3, #5]
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f002 fd7e 	bl	800c710 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2200      	movs	r2, #0
 8009c18:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	791b      	ldrb	r3, [r3, #4]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00e      	beq.n	8009c40 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	791b      	ldrb	r3, [r3, #4]
 8009c26:	4619      	mov	r1, r3
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f002 fd40 	bl	800c6ae <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	791b      	ldrb	r3, [r3, #4]
 8009c32:	4619      	mov	r1, r3
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f002 fd6b 	bl	800c710 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c46:	69db      	ldr	r3, [r3, #28]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d00b      	beq.n	8009c64 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c52:	69db      	ldr	r3, [r3, #28]
 8009c54:	4618      	mov	r0, r3
 8009c56:	f005 fc6f 	bl	800f538 <free>
    phost->pActiveClass->pData = 0U;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c60:	2200      	movs	r2, #0
 8009c62:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3710      	adds	r7, #16
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009c6e:	b580      	push	{r7, lr}
 8009c70:	b084      	sub	sp, #16
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c7c:	69db      	ldr	r3, [r3, #28]
 8009c7e:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009c80:	2301      	movs	r3, #1
 8009c82:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	7b9b      	ldrb	r3, [r3, #14]
 8009c88:	2b03      	cmp	r3, #3
 8009c8a:	d041      	beq.n	8009d10 <USBH_MSC_ClassRequest+0xa2>
 8009c8c:	2b03      	cmp	r3, #3
 8009c8e:	dc4b      	bgt.n	8009d28 <USBH_MSC_ClassRequest+0xba>
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d001      	beq.n	8009c98 <USBH_MSC_ClassRequest+0x2a>
 8009c94:	2b02      	cmp	r3, #2
 8009c96:	d147      	bne.n	8009d28 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 fcf0 	bl	800a682 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8009ca6:	7bfb      	ldrb	r3, [r7, #15]
 8009ca8:	2b03      	cmp	r3, #3
 8009caa:	d104      	bne.n	8009cb6 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8009cb6:	7bfb      	ldrb	r3, [r7, #15]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d137      	bne.n	8009d2c <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	2b02      	cmp	r3, #2
 8009cc2:	d804      	bhi.n	8009cce <USBH_MSC_ClassRequest+0x60>
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	3301      	adds	r3, #1
 8009cca:	b2da      	uxtb	r2, r3
 8009ccc:	e000      	b.n	8009cd0 <USBH_MSC_ClassRequest+0x62>
 8009cce:	2202      	movs	r2, #2
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	73bb      	strb	r3, [r7, #14]
 8009cd8:	e014      	b.n	8009d04 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8009cda:	7bbb      	ldrb	r3, [r7, #14]
 8009cdc:	68ba      	ldr	r2, [r7, #8]
 8009cde:	2134      	movs	r1, #52	; 0x34
 8009ce0:	fb01 f303 	mul.w	r3, r1, r3
 8009ce4:	4413      	add	r3, r2
 8009ce6:	3392      	adds	r3, #146	; 0x92
 8009ce8:	2202      	movs	r2, #2
 8009cea:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8009cec:	7bbb      	ldrb	r3, [r7, #14]
 8009cee:	68ba      	ldr	r2, [r7, #8]
 8009cf0:	2134      	movs	r1, #52	; 0x34
 8009cf2:	fb01 f303 	mul.w	r3, r1, r3
 8009cf6:	4413      	add	r3, r2
 8009cf8:	33c1      	adds	r3, #193	; 0xc1
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009cfe:	7bbb      	ldrb	r3, [r7, #14]
 8009d00:	3301      	adds	r3, #1
 8009d02:	73bb      	strb	r3, [r7, #14]
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	7bba      	ldrb	r2, [r7, #14]
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d3e5      	bcc.n	8009cda <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8009d0e:	e00d      	b.n	8009d2c <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8009d10:	2100      	movs	r1, #0
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f002 f87b 	bl	800be0e <USBH_ClrFeature>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d108      	bne.n	8009d30 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	7bda      	ldrb	r2, [r3, #15]
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	739a      	strb	r2, [r3, #14]
      }
      break;
 8009d26:	e003      	b.n	8009d30 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8009d28:	bf00      	nop
 8009d2a:	e002      	b.n	8009d32 <USBH_MSC_ClassRequest+0xc4>
      break;
 8009d2c:	bf00      	nop
 8009d2e:	e000      	b.n	8009d32 <USBH_MSC_ClassRequest+0xc4>
      break;
 8009d30:	bf00      	nop
  }

  return status;
 8009d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3710      	adds	r7, #16
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b086      	sub	sp, #24
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d4a:	69db      	ldr	r3, [r3, #28]
 8009d4c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8009d52:	2301      	movs	r3, #1
 8009d54:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8009d56:	2301      	movs	r3, #1
 8009d58:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	7b1b      	ldrb	r3, [r3, #12]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d003      	beq.n	8009d6a <USBH_MSC_Process+0x2e>
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	f000 8271 	beq.w	800a24a <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8009d68:	e272      	b.n	800a250 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	429a      	cmp	r2, r3
 8009d78:	f080 824f 	bcs.w	800a21a <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d82:	4619      	mov	r1, r3
 8009d84:	693a      	ldr	r2, [r7, #16]
 8009d86:	2334      	movs	r3, #52	; 0x34
 8009d88:	fb03 f301 	mul.w	r3, r3, r1
 8009d8c:	4413      	add	r3, r2
 8009d8e:	3391      	adds	r3, #145	; 0x91
 8009d90:	2201      	movs	r2, #1
 8009d92:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	693a      	ldr	r2, [r7, #16]
 8009d9e:	2334      	movs	r3, #52	; 0x34
 8009da0:	fb03 f301 	mul.w	r3, r3, r1
 8009da4:	4413      	add	r3, r2
 8009da6:	3390      	adds	r3, #144	; 0x90
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	2b08      	cmp	r3, #8
 8009dac:	f200 8243 	bhi.w	800a236 <USBH_MSC_Process+0x4fa>
 8009db0:	a201      	add	r2, pc, #4	; (adr r2, 8009db8 <USBH_MSC_Process+0x7c>)
 8009db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db6:	bf00      	nop
 8009db8:	08009ddd 	.word	0x08009ddd
 8009dbc:	0800a237 	.word	0x0800a237
 8009dc0:	08009ea5 	.word	0x08009ea5
 8009dc4:	0800a029 	.word	0x0800a029
 8009dc8:	08009e03 	.word	0x08009e03
 8009dcc:	0800a0f5 	.word	0x0800a0f5
 8009dd0:	0800a237 	.word	0x0800a237
 8009dd4:	0800a237 	.word	0x0800a237
 8009dd8:	0800a209 	.word	0x0800a209
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009de2:	4619      	mov	r1, r3
 8009de4:	693a      	ldr	r2, [r7, #16]
 8009de6:	2334      	movs	r3, #52	; 0x34
 8009de8:	fb03 f301 	mul.w	r3, r3, r1
 8009dec:	4413      	add	r3, r2
 8009dee:	3390      	adds	r3, #144	; 0x90
 8009df0:	2204      	movs	r2, #4
 8009df2:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8009e00:	e222      	b.n	800a248 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e08:	b2d9      	uxtb	r1, r3
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e10:	461a      	mov	r2, r3
 8009e12:	2334      	movs	r3, #52	; 0x34
 8009e14:	fb03 f302 	mul.w	r3, r3, r2
 8009e18:	3398      	adds	r3, #152	; 0x98
 8009e1a:	693a      	ldr	r2, [r7, #16]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	3307      	adds	r3, #7
 8009e20:	461a      	mov	r2, r3
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 ff6a 	bl	800acfc <USBH_MSC_SCSI_Inquiry>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009e2c:	7bfb      	ldrb	r3, [r7, #15]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d10b      	bne.n	8009e4a <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e38:	4619      	mov	r1, r3
 8009e3a:	693a      	ldr	r2, [r7, #16]
 8009e3c:	2334      	movs	r3, #52	; 0x34
 8009e3e:	fb03 f301 	mul.w	r3, r3, r1
 8009e42:	4413      	add	r3, r2
 8009e44:	3390      	adds	r3, #144	; 0x90
 8009e46:	2202      	movs	r2, #2
 8009e48:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8009e4a:	7bfb      	ldrb	r3, [r7, #15]
 8009e4c:	2b02      	cmp	r3, #2
 8009e4e:	d10c      	bne.n	8009e6a <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e56:	4619      	mov	r1, r3
 8009e58:	693a      	ldr	r2, [r7, #16]
 8009e5a:	2334      	movs	r3, #52	; 0x34
 8009e5c:	fb03 f301 	mul.w	r3, r3, r1
 8009e60:	4413      	add	r3, r2
 8009e62:	3390      	adds	r3, #144	; 0x90
 8009e64:	2205      	movs	r2, #5
 8009e66:	701a      	strb	r2, [r3, #0]
            break;
 8009e68:	e1e7      	b.n	800a23a <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009e6a:	7bfb      	ldrb	r3, [r7, #15]
 8009e6c:	2b04      	cmp	r3, #4
 8009e6e:	f040 81e4 	bne.w	800a23a <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e78:	4619      	mov	r1, r3
 8009e7a:	693a      	ldr	r2, [r7, #16]
 8009e7c:	2334      	movs	r3, #52	; 0x34
 8009e7e:	fb03 f301 	mul.w	r3, r3, r1
 8009e82:	4413      	add	r3, r2
 8009e84:	3390      	adds	r3, #144	; 0x90
 8009e86:	2201      	movs	r2, #1
 8009e88:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e90:	4619      	mov	r1, r3
 8009e92:	693a      	ldr	r2, [r7, #16]
 8009e94:	2334      	movs	r3, #52	; 0x34
 8009e96:	fb03 f301 	mul.w	r3, r3, r1
 8009e9a:	4413      	add	r3, r2
 8009e9c:	3391      	adds	r3, #145	; 0x91
 8009e9e:	2202      	movs	r2, #2
 8009ea0:	701a      	strb	r2, [r3, #0]
            break;
 8009ea2:	e1ca      	b.n	800a23a <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	4619      	mov	r1, r3
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 fe66 	bl	800ab80 <USBH_MSC_SCSI_TestUnitReady>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8009eb8:	7bbb      	ldrb	r3, [r7, #14]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d149      	bne.n	8009f52 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	693a      	ldr	r2, [r7, #16]
 8009ec8:	2334      	movs	r3, #52	; 0x34
 8009eca:	fb03 f301 	mul.w	r3, r3, r1
 8009ece:	4413      	add	r3, r2
 8009ed0:	3392      	adds	r3, #146	; 0x92
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d00c      	beq.n	8009ef2 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ede:	4619      	mov	r1, r3
 8009ee0:	693a      	ldr	r2, [r7, #16]
 8009ee2:	2334      	movs	r3, #52	; 0x34
 8009ee4:	fb03 f301 	mul.w	r3, r3, r1
 8009ee8:	4413      	add	r3, r2
 8009eea:	33c1      	adds	r3, #193	; 0xc1
 8009eec:	2201      	movs	r2, #1
 8009eee:	701a      	strb	r2, [r3, #0]
 8009ef0:	e00b      	b.n	8009f0a <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ef8:	4619      	mov	r1, r3
 8009efa:	693a      	ldr	r2, [r7, #16]
 8009efc:	2334      	movs	r3, #52	; 0x34
 8009efe:	fb03 f301 	mul.w	r3, r3, r1
 8009f02:	4413      	add	r3, r2
 8009f04:	33c1      	adds	r3, #193	; 0xc1
 8009f06:	2200      	movs	r2, #0
 8009f08:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f10:	4619      	mov	r1, r3
 8009f12:	693a      	ldr	r2, [r7, #16]
 8009f14:	2334      	movs	r3, #52	; 0x34
 8009f16:	fb03 f301 	mul.w	r3, r3, r1
 8009f1a:	4413      	add	r3, r2
 8009f1c:	3390      	adds	r3, #144	; 0x90
 8009f1e:	2203      	movs	r2, #3
 8009f20:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f28:	4619      	mov	r1, r3
 8009f2a:	693a      	ldr	r2, [r7, #16]
 8009f2c:	2334      	movs	r3, #52	; 0x34
 8009f2e:	fb03 f301 	mul.w	r3, r3, r1
 8009f32:	4413      	add	r3, r2
 8009f34:	3391      	adds	r3, #145	; 0x91
 8009f36:	2200      	movs	r2, #0
 8009f38:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f40:	4619      	mov	r1, r3
 8009f42:	693a      	ldr	r2, [r7, #16]
 8009f44:	2334      	movs	r3, #52	; 0x34
 8009f46:	fb03 f301 	mul.w	r3, r3, r1
 8009f4a:	4413      	add	r3, r2
 8009f4c:	3392      	adds	r3, #146	; 0x92
 8009f4e:	2200      	movs	r2, #0
 8009f50:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8009f52:	7bbb      	ldrb	r3, [r7, #14]
 8009f54:	2b02      	cmp	r3, #2
 8009f56:	d14a      	bne.n	8009fee <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f5e:	4619      	mov	r1, r3
 8009f60:	693a      	ldr	r2, [r7, #16]
 8009f62:	2334      	movs	r3, #52	; 0x34
 8009f64:	fb03 f301 	mul.w	r3, r3, r1
 8009f68:	4413      	add	r3, r2
 8009f6a:	3392      	adds	r3, #146	; 0x92
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	2b02      	cmp	r3, #2
 8009f70:	d00c      	beq.n	8009f8c <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f78:	4619      	mov	r1, r3
 8009f7a:	693a      	ldr	r2, [r7, #16]
 8009f7c:	2334      	movs	r3, #52	; 0x34
 8009f7e:	fb03 f301 	mul.w	r3, r3, r1
 8009f82:	4413      	add	r3, r2
 8009f84:	33c1      	adds	r3, #193	; 0xc1
 8009f86:	2201      	movs	r2, #1
 8009f88:	701a      	strb	r2, [r3, #0]
 8009f8a:	e00b      	b.n	8009fa4 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f92:	4619      	mov	r1, r3
 8009f94:	693a      	ldr	r2, [r7, #16]
 8009f96:	2334      	movs	r3, #52	; 0x34
 8009f98:	fb03 f301 	mul.w	r3, r3, r1
 8009f9c:	4413      	add	r3, r2
 8009f9e:	33c1      	adds	r3, #193	; 0xc1
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009faa:	4619      	mov	r1, r3
 8009fac:	693a      	ldr	r2, [r7, #16]
 8009fae:	2334      	movs	r3, #52	; 0x34
 8009fb0:	fb03 f301 	mul.w	r3, r3, r1
 8009fb4:	4413      	add	r3, r2
 8009fb6:	3390      	adds	r3, #144	; 0x90
 8009fb8:	2205      	movs	r2, #5
 8009fba:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	693a      	ldr	r2, [r7, #16]
 8009fc6:	2334      	movs	r3, #52	; 0x34
 8009fc8:	fb03 f301 	mul.w	r3, r3, r1
 8009fcc:	4413      	add	r3, r2
 8009fce:	3391      	adds	r3, #145	; 0x91
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fda:	4619      	mov	r1, r3
 8009fdc:	693a      	ldr	r2, [r7, #16]
 8009fde:	2334      	movs	r3, #52	; 0x34
 8009fe0:	fb03 f301 	mul.w	r3, r3, r1
 8009fe4:	4413      	add	r3, r2
 8009fe6:	3392      	adds	r3, #146	; 0x92
 8009fe8:	2202      	movs	r2, #2
 8009fea:	701a      	strb	r2, [r3, #0]
            break;
 8009fec:	e127      	b.n	800a23e <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8009fee:	7bbb      	ldrb	r3, [r7, #14]
 8009ff0:	2b04      	cmp	r3, #4
 8009ff2:	f040 8124 	bne.w	800a23e <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	693a      	ldr	r2, [r7, #16]
 800a000:	2334      	movs	r3, #52	; 0x34
 800a002:	fb03 f301 	mul.w	r3, r3, r1
 800a006:	4413      	add	r3, r2
 800a008:	3390      	adds	r3, #144	; 0x90
 800a00a:	2201      	movs	r2, #1
 800a00c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a014:	4619      	mov	r1, r3
 800a016:	693a      	ldr	r2, [r7, #16]
 800a018:	2334      	movs	r3, #52	; 0x34
 800a01a:	fb03 f301 	mul.w	r3, r3, r1
 800a01e:	4413      	add	r3, r2
 800a020:	3391      	adds	r3, #145	; 0x91
 800a022:	2202      	movs	r2, #2
 800a024:	701a      	strb	r2, [r3, #0]
            break;
 800a026:	e10a      	b.n	800a23e <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a02e:	b2d9      	uxtb	r1, r3
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a036:	461a      	mov	r2, r3
 800a038:	2334      	movs	r3, #52	; 0x34
 800a03a:	fb03 f302 	mul.w	r3, r3, r2
 800a03e:	3390      	adds	r3, #144	; 0x90
 800a040:	693a      	ldr	r2, [r7, #16]
 800a042:	4413      	add	r3, r2
 800a044:	3304      	adds	r3, #4
 800a046:	461a      	mov	r2, r3
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 fddc 	bl	800ac06 <USBH_MSC_SCSI_ReadCapacity>
 800a04e:	4603      	mov	r3, r0
 800a050:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a052:	7bfb      	ldrb	r3, [r7, #15]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d120      	bne.n	800a09a <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a05e:	4619      	mov	r1, r3
 800a060:	693a      	ldr	r2, [r7, #16]
 800a062:	2334      	movs	r3, #52	; 0x34
 800a064:	fb03 f301 	mul.w	r3, r3, r1
 800a068:	4413      	add	r3, r2
 800a06a:	3390      	adds	r3, #144	; 0x90
 800a06c:	2201      	movs	r2, #1
 800a06e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a076:	4619      	mov	r1, r3
 800a078:	693a      	ldr	r2, [r7, #16]
 800a07a:	2334      	movs	r3, #52	; 0x34
 800a07c:	fb03 f301 	mul.w	r3, r3, r1
 800a080:	4413      	add	r3, r2
 800a082:	3391      	adds	r3, #145	; 0x91
 800a084:	2200      	movs	r2, #0
 800a086:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a08e:	3301      	adds	r3, #1
 800a090:	b29a      	uxth	r2, r3
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a098:	e0d3      	b.n	800a242 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800a09a:	7bfb      	ldrb	r3, [r7, #15]
 800a09c:	2b02      	cmp	r3, #2
 800a09e:	d10c      	bne.n	800a0ba <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	693a      	ldr	r2, [r7, #16]
 800a0aa:	2334      	movs	r3, #52	; 0x34
 800a0ac:	fb03 f301 	mul.w	r3, r3, r1
 800a0b0:	4413      	add	r3, r2
 800a0b2:	3390      	adds	r3, #144	; 0x90
 800a0b4:	2205      	movs	r2, #5
 800a0b6:	701a      	strb	r2, [r3, #0]
            break;
 800a0b8:	e0c3      	b.n	800a242 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a0ba:	7bfb      	ldrb	r3, [r7, #15]
 800a0bc:	2b04      	cmp	r3, #4
 800a0be:	f040 80c0 	bne.w	800a242 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	693a      	ldr	r2, [r7, #16]
 800a0cc:	2334      	movs	r3, #52	; 0x34
 800a0ce:	fb03 f301 	mul.w	r3, r3, r1
 800a0d2:	4413      	add	r3, r2
 800a0d4:	3390      	adds	r3, #144	; 0x90
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	693a      	ldr	r2, [r7, #16]
 800a0e4:	2334      	movs	r3, #52	; 0x34
 800a0e6:	fb03 f301 	mul.w	r3, r3, r1
 800a0ea:	4413      	add	r3, r2
 800a0ec:	3391      	adds	r3, #145	; 0x91
 800a0ee:	2202      	movs	r2, #2
 800a0f0:	701a      	strb	r2, [r3, #0]
            break;
 800a0f2:	e0a6      	b.n	800a242 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0fa:	b2d9      	uxtb	r1, r3
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a102:	461a      	mov	r2, r3
 800a104:	2334      	movs	r3, #52	; 0x34
 800a106:	fb03 f302 	mul.w	r3, r3, r2
 800a10a:	3398      	adds	r3, #152	; 0x98
 800a10c:	693a      	ldr	r2, [r7, #16]
 800a10e:	4413      	add	r3, r2
 800a110:	3304      	adds	r3, #4
 800a112:	461a      	mov	r2, r3
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 fe96 	bl	800ae46 <USBH_MSC_SCSI_RequestSense>
 800a11a:	4603      	mov	r3, r0
 800a11c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a11e:	7bfb      	ldrb	r3, [r7, #15]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d145      	bne.n	800a1b0 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a12a:	4619      	mov	r1, r3
 800a12c:	693a      	ldr	r2, [r7, #16]
 800a12e:	2334      	movs	r3, #52	; 0x34
 800a130:	fb03 f301 	mul.w	r3, r3, r1
 800a134:	4413      	add	r3, r2
 800a136:	339c      	adds	r3, #156	; 0x9c
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	2b06      	cmp	r3, #6
 800a13c:	d00c      	beq.n	800a158 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a144:	4619      	mov	r1, r3
 800a146:	693a      	ldr	r2, [r7, #16]
 800a148:	2334      	movs	r3, #52	; 0x34
 800a14a:	fb03 f301 	mul.w	r3, r3, r1
 800a14e:	4413      	add	r3, r2
 800a150:	339c      	adds	r3, #156	; 0x9c
 800a152:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a154:	2b02      	cmp	r3, #2
 800a156:	d117      	bne.n	800a188 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800a164:	1ad3      	subs	r3, r2, r3
 800a166:	f242 720f 	movw	r2, #9999	; 0x270f
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d80c      	bhi.n	800a188 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a174:	4619      	mov	r1, r3
 800a176:	693a      	ldr	r2, [r7, #16]
 800a178:	2334      	movs	r3, #52	; 0x34
 800a17a:	fb03 f301 	mul.w	r3, r3, r1
 800a17e:	4413      	add	r3, r2
 800a180:	3390      	adds	r3, #144	; 0x90
 800a182:	2202      	movs	r2, #2
 800a184:	701a      	strb	r2, [r3, #0]
                  break;
 800a186:	e05f      	b.n	800a248 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a18e:	4619      	mov	r1, r3
 800a190:	693a      	ldr	r2, [r7, #16]
 800a192:	2334      	movs	r3, #52	; 0x34
 800a194:	fb03 f301 	mul.w	r3, r3, r1
 800a198:	4413      	add	r3, r2
 800a19a:	3390      	adds	r3, #144	; 0x90
 800a19c:	2201      	movs	r2, #1
 800a19e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	b29a      	uxth	r2, r3
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800a1b0:	7bfb      	ldrb	r3, [r7, #15]
 800a1b2:	2b02      	cmp	r3, #2
 800a1b4:	d10c      	bne.n	800a1d0 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1bc:	4619      	mov	r1, r3
 800a1be:	693a      	ldr	r2, [r7, #16]
 800a1c0:	2334      	movs	r3, #52	; 0x34
 800a1c2:	fb03 f301 	mul.w	r3, r3, r1
 800a1c6:	4413      	add	r3, r2
 800a1c8:	3390      	adds	r3, #144	; 0x90
 800a1ca:	2208      	movs	r2, #8
 800a1cc:	701a      	strb	r2, [r3, #0]
            break;
 800a1ce:	e03a      	b.n	800a246 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a1d0:	7bfb      	ldrb	r3, [r7, #15]
 800a1d2:	2b04      	cmp	r3, #4
 800a1d4:	d137      	bne.n	800a246 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1dc:	4619      	mov	r1, r3
 800a1de:	693a      	ldr	r2, [r7, #16]
 800a1e0:	2334      	movs	r3, #52	; 0x34
 800a1e2:	fb03 f301 	mul.w	r3, r3, r1
 800a1e6:	4413      	add	r3, r2
 800a1e8:	3390      	adds	r3, #144	; 0x90
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	693a      	ldr	r2, [r7, #16]
 800a1f8:	2334      	movs	r3, #52	; 0x34
 800a1fa:	fb03 f301 	mul.w	r3, r3, r1
 800a1fe:	4413      	add	r3, r2
 800a200:	3391      	adds	r3, #145	; 0x91
 800a202:	2202      	movs	r2, #2
 800a204:	701a      	strb	r2, [r3, #0]
            break;
 800a206:	e01e      	b.n	800a246 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a20e:	3301      	adds	r3, #1
 800a210:	b29a      	uxth	r2, r3
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a218:	e016      	b.n	800a248 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	2200      	movs	r2, #0
 800a21e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	2201      	movs	r2, #1
 800a226:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a22e:	2102      	movs	r1, #2
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	4798      	blx	r3
      break;
 800a234:	e00c      	b.n	800a250 <USBH_MSC_Process+0x514>
            break;
 800a236:	bf00      	nop
 800a238:	e00a      	b.n	800a250 <USBH_MSC_Process+0x514>
            break;
 800a23a:	bf00      	nop
 800a23c:	e008      	b.n	800a250 <USBH_MSC_Process+0x514>
            break;
 800a23e:	bf00      	nop
 800a240:	e006      	b.n	800a250 <USBH_MSC_Process+0x514>
            break;
 800a242:	bf00      	nop
 800a244:	e004      	b.n	800a250 <USBH_MSC_Process+0x514>
            break;
 800a246:	bf00      	nop
      break;
 800a248:	e002      	b.n	800a250 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800a24a:	2300      	movs	r3, #0
 800a24c:	75fb      	strb	r3, [r7, #23]
      break;
 800a24e:	bf00      	nop
  }
  return error;
 800a250:	7dfb      	ldrb	r3, [r7, #23]
}
 800a252:	4618      	mov	r0, r3
 800a254:	3718      	adds	r7, #24
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop

0800a25c <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a264:	2300      	movs	r3, #0
}
 800a266:	4618      	mov	r0, r3
 800a268:	370c      	adds	r7, #12
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr

0800a272 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a272:	b580      	push	{r7, lr}
 800a274:	b088      	sub	sp, #32
 800a276:	af02      	add	r7, sp, #8
 800a278:	6078      	str	r0, [r7, #4]
 800a27a:	460b      	mov	r3, r1
 800a27c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a284:	69db      	ldr	r3, [r3, #28]
 800a286:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800a288:	2301      	movs	r3, #1
 800a28a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800a28c:	2301      	movs	r3, #1
 800a28e:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800a290:	78fb      	ldrb	r3, [r7, #3]
 800a292:	693a      	ldr	r2, [r7, #16]
 800a294:	2134      	movs	r1, #52	; 0x34
 800a296:	fb01 f303 	mul.w	r3, r1, r3
 800a29a:	4413      	add	r3, r2
 800a29c:	3390      	adds	r3, #144	; 0x90
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	2b07      	cmp	r3, #7
 800a2a2:	d03c      	beq.n	800a31e <USBH_MSC_RdWrProcess+0xac>
 800a2a4:	2b07      	cmp	r3, #7
 800a2a6:	f300 80a7 	bgt.w	800a3f8 <USBH_MSC_RdWrProcess+0x186>
 800a2aa:	2b05      	cmp	r3, #5
 800a2ac:	d06c      	beq.n	800a388 <USBH_MSC_RdWrProcess+0x116>
 800a2ae:	2b06      	cmp	r3, #6
 800a2b0:	f040 80a2 	bne.w	800a3f8 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800a2b4:	78f9      	ldrb	r1, [r7, #3]
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	9300      	str	r3, [sp, #0]
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	2200      	movs	r2, #0
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 fea5 	bl	800b00e <USBH_MSC_SCSI_Read>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a2c8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d10b      	bne.n	800a2e6 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a2ce:	78fb      	ldrb	r3, [r7, #3]
 800a2d0:	693a      	ldr	r2, [r7, #16]
 800a2d2:	2134      	movs	r1, #52	; 0x34
 800a2d4:	fb01 f303 	mul.w	r3, r1, r3
 800a2d8:	4413      	add	r3, r2
 800a2da:	3390      	adds	r3, #144	; 0x90
 800a2dc:	2201      	movs	r2, #1
 800a2de:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a2e4:	e08a      	b.n	800a3fc <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800a2e6:	7bfb      	ldrb	r3, [r7, #15]
 800a2e8:	2b02      	cmp	r3, #2
 800a2ea:	d109      	bne.n	800a300 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a2ec:	78fb      	ldrb	r3, [r7, #3]
 800a2ee:	693a      	ldr	r2, [r7, #16]
 800a2f0:	2134      	movs	r1, #52	; 0x34
 800a2f2:	fb01 f303 	mul.w	r3, r1, r3
 800a2f6:	4413      	add	r3, r2
 800a2f8:	3390      	adds	r3, #144	; 0x90
 800a2fa:	2205      	movs	r2, #5
 800a2fc:	701a      	strb	r2, [r3, #0]
      break;
 800a2fe:	e07d      	b.n	800a3fc <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a300:	7bfb      	ldrb	r3, [r7, #15]
 800a302:	2b04      	cmp	r3, #4
 800a304:	d17a      	bne.n	800a3fc <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a306:	78fb      	ldrb	r3, [r7, #3]
 800a308:	693a      	ldr	r2, [r7, #16]
 800a30a:	2134      	movs	r1, #52	; 0x34
 800a30c:	fb01 f303 	mul.w	r3, r1, r3
 800a310:	4413      	add	r3, r2
 800a312:	3390      	adds	r3, #144	; 0x90
 800a314:	2208      	movs	r2, #8
 800a316:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a318:	2302      	movs	r3, #2
 800a31a:	75fb      	strb	r3, [r7, #23]
      break;
 800a31c:	e06e      	b.n	800a3fc <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800a31e:	78f9      	ldrb	r1, [r7, #3]
 800a320:	2300      	movs	r3, #0
 800a322:	9300      	str	r3, [sp, #0]
 800a324:	2300      	movs	r3, #0
 800a326:	2200      	movs	r2, #0
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 fe05 	bl	800af38 <USBH_MSC_SCSI_Write>
 800a32e:	4603      	mov	r3, r0
 800a330:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a332:	7bfb      	ldrb	r3, [r7, #15]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d10b      	bne.n	800a350 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a338:	78fb      	ldrb	r3, [r7, #3]
 800a33a:	693a      	ldr	r2, [r7, #16]
 800a33c:	2134      	movs	r1, #52	; 0x34
 800a33e:	fb01 f303 	mul.w	r3, r1, r3
 800a342:	4413      	add	r3, r2
 800a344:	3390      	adds	r3, #144	; 0x90
 800a346:	2201      	movs	r2, #1
 800a348:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a34a:	2300      	movs	r3, #0
 800a34c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a34e:	e057      	b.n	800a400 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800a350:	7bfb      	ldrb	r3, [r7, #15]
 800a352:	2b02      	cmp	r3, #2
 800a354:	d109      	bne.n	800a36a <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a356:	78fb      	ldrb	r3, [r7, #3]
 800a358:	693a      	ldr	r2, [r7, #16]
 800a35a:	2134      	movs	r1, #52	; 0x34
 800a35c:	fb01 f303 	mul.w	r3, r1, r3
 800a360:	4413      	add	r3, r2
 800a362:	3390      	adds	r3, #144	; 0x90
 800a364:	2205      	movs	r2, #5
 800a366:	701a      	strb	r2, [r3, #0]
      break;
 800a368:	e04a      	b.n	800a400 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a36a:	7bfb      	ldrb	r3, [r7, #15]
 800a36c:	2b04      	cmp	r3, #4
 800a36e:	d147      	bne.n	800a400 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a370:	78fb      	ldrb	r3, [r7, #3]
 800a372:	693a      	ldr	r2, [r7, #16]
 800a374:	2134      	movs	r1, #52	; 0x34
 800a376:	fb01 f303 	mul.w	r3, r1, r3
 800a37a:	4413      	add	r3, r2
 800a37c:	3390      	adds	r3, #144	; 0x90
 800a37e:	2208      	movs	r2, #8
 800a380:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a382:	2302      	movs	r3, #2
 800a384:	75fb      	strb	r3, [r7, #23]
      break;
 800a386:	e03b      	b.n	800a400 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800a388:	78fb      	ldrb	r3, [r7, #3]
 800a38a:	2234      	movs	r2, #52	; 0x34
 800a38c:	fb02 f303 	mul.w	r3, r2, r3
 800a390:	3398      	adds	r3, #152	; 0x98
 800a392:	693a      	ldr	r2, [r7, #16]
 800a394:	4413      	add	r3, r2
 800a396:	1d1a      	adds	r2, r3, #4
 800a398:	78fb      	ldrb	r3, [r7, #3]
 800a39a:	4619      	mov	r1, r3
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 fd52 	bl	800ae46 <USBH_MSC_SCSI_RequestSense>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a3a6:	7bfb      	ldrb	r3, [r7, #15]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d113      	bne.n	800a3d4 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a3ac:	78fb      	ldrb	r3, [r7, #3]
 800a3ae:	693a      	ldr	r2, [r7, #16]
 800a3b0:	2134      	movs	r1, #52	; 0x34
 800a3b2:	fb01 f303 	mul.w	r3, r1, r3
 800a3b6:	4413      	add	r3, r2
 800a3b8:	3390      	adds	r3, #144	; 0x90
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800a3be:	78fb      	ldrb	r3, [r7, #3]
 800a3c0:	693a      	ldr	r2, [r7, #16]
 800a3c2:	2134      	movs	r1, #52	; 0x34
 800a3c4:	fb01 f303 	mul.w	r3, r1, r3
 800a3c8:	4413      	add	r3, r2
 800a3ca:	3391      	adds	r3, #145	; 0x91
 800a3cc:	2202      	movs	r2, #2
 800a3ce:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800a3d0:	2302      	movs	r3, #2
 800a3d2:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800a3d4:	7bfb      	ldrb	r3, [r7, #15]
 800a3d6:	2b02      	cmp	r3, #2
 800a3d8:	d014      	beq.n	800a404 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a3da:	7bfb      	ldrb	r3, [r7, #15]
 800a3dc:	2b04      	cmp	r3, #4
 800a3de:	d111      	bne.n	800a404 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a3e0:	78fb      	ldrb	r3, [r7, #3]
 800a3e2:	693a      	ldr	r2, [r7, #16]
 800a3e4:	2134      	movs	r1, #52	; 0x34
 800a3e6:	fb01 f303 	mul.w	r3, r1, r3
 800a3ea:	4413      	add	r3, r2
 800a3ec:	3390      	adds	r3, #144	; 0x90
 800a3ee:	2208      	movs	r2, #8
 800a3f0:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a3f2:	2302      	movs	r3, #2
 800a3f4:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a3f6:	e005      	b.n	800a404 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800a3f8:	bf00      	nop
 800a3fa:	e004      	b.n	800a406 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a3fc:	bf00      	nop
 800a3fe:	e002      	b.n	800a406 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a400:	bf00      	nop
 800a402:	e000      	b.n	800a406 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a404:	bf00      	nop

  }
  return error;
 800a406:	7dfb      	ldrb	r3, [r7, #23]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3718      	adds	r7, #24
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a410:	b480      	push	{r7}
 800a412:	b085      	sub	sp, #20
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	460b      	mov	r3, r1
 800a41a:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a422:	69db      	ldr	r3, [r3, #28]
 800a424:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	2b0b      	cmp	r3, #11
 800a42e:	d10c      	bne.n	800a44a <USBH_MSC_UnitIsReady+0x3a>
 800a430:	78fb      	ldrb	r3, [r7, #3]
 800a432:	68ba      	ldr	r2, [r7, #8]
 800a434:	2134      	movs	r1, #52	; 0x34
 800a436:	fb01 f303 	mul.w	r3, r1, r3
 800a43a:	4413      	add	r3, r2
 800a43c:	3391      	adds	r3, #145	; 0x91
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d102      	bne.n	800a44a <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800a444:	2301      	movs	r3, #1
 800a446:	73fb      	strb	r3, [r7, #15]
 800a448:	e001      	b.n	800a44e <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800a44a:	2300      	movs	r3, #0
 800a44c:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a44e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a450:	4618      	mov	r0, r3
 800a452:	3714      	adds	r7, #20
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b086      	sub	sp, #24
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	460b      	mov	r3, r1
 800a466:	607a      	str	r2, [r7, #4]
 800a468:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a470:	69db      	ldr	r3, [r3, #28]
 800a472:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	2b0b      	cmp	r3, #11
 800a47c:	d10d      	bne.n	800a49a <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800a47e:	7afb      	ldrb	r3, [r7, #11]
 800a480:	2234      	movs	r2, #52	; 0x34
 800a482:	fb02 f303 	mul.w	r3, r2, r3
 800a486:	3390      	adds	r3, #144	; 0x90
 800a488:	697a      	ldr	r2, [r7, #20]
 800a48a:	4413      	add	r3, r2
 800a48c:	2234      	movs	r2, #52	; 0x34
 800a48e:	4619      	mov	r1, r3
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f005 f859 	bl	800f548 <memcpy>
    return USBH_OK;
 800a496:	2300      	movs	r3, #0
 800a498:	e000      	b.n	800a49c <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800a49a:	2302      	movs	r3, #2
  }
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3718      	adds	r7, #24
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b088      	sub	sp, #32
 800a4a8:	af02      	add	r7, sp, #8
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	607a      	str	r2, [r7, #4]
 800a4ae:	603b      	str	r3, [r7, #0]
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4ba:	69db      	ldr	r3, [r3, #28]
 800a4bc:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d00e      	beq.n	800a4e8 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a4d0:	2b0b      	cmp	r3, #11
 800a4d2:	d109      	bne.n	800a4e8 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a4d4:	7afb      	ldrb	r3, [r7, #11]
 800a4d6:	697a      	ldr	r2, [r7, #20]
 800a4d8:	2134      	movs	r1, #52	; 0x34
 800a4da:	fb01 f303 	mul.w	r3, r1, r3
 800a4de:	4413      	add	r3, r2
 800a4e0:	3390      	adds	r3, #144	; 0x90
 800a4e2:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d001      	beq.n	800a4ec <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800a4e8:	2302      	movs	r3, #2
 800a4ea:	e040      	b.n	800a56e <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	2206      	movs	r2, #6
 800a4f0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800a4f2:	7afb      	ldrb	r3, [r7, #11]
 800a4f4:	697a      	ldr	r2, [r7, #20]
 800a4f6:	2134      	movs	r1, #52	; 0x34
 800a4f8:	fb01 f303 	mul.w	r3, r1, r3
 800a4fc:	4413      	add	r3, r2
 800a4fe:	3390      	adds	r3, #144	; 0x90
 800a500:	2206      	movs	r2, #6
 800a502:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a504:	7afb      	ldrb	r3, [r7, #11]
 800a506:	b29a      	uxth	r2, r3
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800a50e:	7af9      	ldrb	r1, [r7, #11]
 800a510:	6a3b      	ldr	r3, [r7, #32]
 800a512:	9300      	str	r3, [sp, #0]
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	68f8      	ldr	r0, [r7, #12]
 800a51a:	f000 fd78 	bl	800b00e <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a524:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a526:	e016      	b.n	800a556 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	1ad2      	subs	r2, r2, r3
 800a532:	6a3b      	ldr	r3, [r7, #32]
 800a534:	f242 7110 	movw	r1, #10000	; 0x2710
 800a538:	fb01 f303 	mul.w	r3, r1, r3
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d805      	bhi.n	800a54c <USBH_MSC_Read+0xa8>
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a546:	b2db      	uxtb	r3, r3
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d104      	bne.n	800a556 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	2201      	movs	r2, #1
 800a550:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a552:	2302      	movs	r3, #2
 800a554:	e00b      	b.n	800a56e <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a556:	7afb      	ldrb	r3, [r7, #11]
 800a558:	4619      	mov	r1, r3
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	f7ff fe89 	bl	800a272 <USBH_MSC_RdWrProcess>
 800a560:	4603      	mov	r3, r0
 800a562:	2b01      	cmp	r3, #1
 800a564:	d0e0      	beq.n	800a528 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	2201      	movs	r2, #1
 800a56a:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800a56c:	2300      	movs	r3, #0
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3718      	adds	r7, #24
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}

0800a576 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800a576:	b580      	push	{r7, lr}
 800a578:	b088      	sub	sp, #32
 800a57a:	af02      	add	r7, sp, #8
 800a57c:	60f8      	str	r0, [r7, #12]
 800a57e:	607a      	str	r2, [r7, #4]
 800a580:	603b      	str	r3, [r7, #0]
 800a582:	460b      	mov	r3, r1
 800a584:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a58c:	69db      	ldr	r3, [r3, #28]
 800a58e:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a596:	b2db      	uxtb	r3, r3
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00e      	beq.n	800a5ba <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a5a2:	2b0b      	cmp	r3, #11
 800a5a4:	d109      	bne.n	800a5ba <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a5a6:	7afb      	ldrb	r3, [r7, #11]
 800a5a8:	697a      	ldr	r2, [r7, #20]
 800a5aa:	2134      	movs	r1, #52	; 0x34
 800a5ac:	fb01 f303 	mul.w	r3, r1, r3
 800a5b0:	4413      	add	r3, r2
 800a5b2:	3390      	adds	r3, #144	; 0x90
 800a5b4:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d001      	beq.n	800a5be <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800a5ba:	2302      	movs	r3, #2
 800a5bc:	e040      	b.n	800a640 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	2207      	movs	r2, #7
 800a5c2:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800a5c4:	7afb      	ldrb	r3, [r7, #11]
 800a5c6:	697a      	ldr	r2, [r7, #20]
 800a5c8:	2134      	movs	r1, #52	; 0x34
 800a5ca:	fb01 f303 	mul.w	r3, r1, r3
 800a5ce:	4413      	add	r3, r2
 800a5d0:	3390      	adds	r3, #144	; 0x90
 800a5d2:	2207      	movs	r2, #7
 800a5d4:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a5d6:	7afb      	ldrb	r3, [r7, #11]
 800a5d8:	b29a      	uxth	r2, r3
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800a5e0:	7af9      	ldrb	r1, [r7, #11]
 800a5e2:	6a3b      	ldr	r3, [r7, #32]
 800a5e4:	9300      	str	r3, [sp, #0]
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	687a      	ldr	r2, [r7, #4]
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f000 fca4 	bl	800af38 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a5f6:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a5f8:	e016      	b.n	800a628 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	1ad2      	subs	r2, r2, r3
 800a604:	6a3b      	ldr	r3, [r7, #32]
 800a606:	f242 7110 	movw	r1, #10000	; 0x2710
 800a60a:	fb01 f303 	mul.w	r3, r1, r3
 800a60e:	429a      	cmp	r2, r3
 800a610:	d805      	bhi.n	800a61e <USBH_MSC_Write+0xa8>
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d104      	bne.n	800a628 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	2201      	movs	r2, #1
 800a622:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a624:	2302      	movs	r3, #2
 800a626:	e00b      	b.n	800a640 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a628:	7afb      	ldrb	r3, [r7, #11]
 800a62a:	4619      	mov	r1, r3
 800a62c:	68f8      	ldr	r0, [r7, #12]
 800a62e:	f7ff fe20 	bl	800a272 <USBH_MSC_RdWrProcess>
 800a632:	4603      	mov	r3, r0
 800a634:	2b01      	cmp	r3, #1
 800a636:	d0e0      	beq.n	800a5fa <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	2201      	movs	r2, #1
 800a63c:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800a63e:	2300      	movs	r3, #0
}
 800a640:	4618      	mov	r0, r3
 800a642:	3718      	adds	r7, #24
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2221      	movs	r2, #33	; 0x21
 800a654:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	22ff      	movs	r2, #255	; 0xff
 800a65a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2200      	movs	r2, #0
 800a666:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2200      	movs	r2, #0
 800a66c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800a66e:	2200      	movs	r2, #0
 800a670:	2100      	movs	r1, #0
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f001 fdab 	bl	800c1ce <USBH_CtlReq>
 800a678:	4603      	mov	r3, r0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3708      	adds	r7, #8
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b082      	sub	sp, #8
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
 800a68a:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	22a1      	movs	r2, #161	; 0xa1
 800a690:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	22fe      	movs	r2, #254	; 0xfe
 800a696:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2200      	movs	r2, #0
 800a69c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	6839      	ldr	r1, [r7, #0]
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f001 fd8d 	bl	800c1ce <USBH_CtlReq>
 800a6b4:	4603      	mov	r3, r0
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3708      	adds	r7, #8
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
	...

0800a6c0 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b085      	sub	sp, #20
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6ce:	69db      	ldr	r3, [r3, #28]
 800a6d0:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	4a09      	ldr	r2, [pc, #36]	; (800a6fc <USBH_MSC_BOT_Init+0x3c>)
 800a6d6:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	4a09      	ldr	r2, [pc, #36]	; (800a700 <USBH_MSC_BOT_Init+0x40>)
 800a6dc:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3714      	adds	r7, #20
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr
 800a6fc:	43425355 	.word	0x43425355
 800a700:	20304050 	.word	0x20304050

0800a704 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b088      	sub	sp, #32
 800a708:	af02      	add	r7, sp, #8
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	460b      	mov	r3, r1
 800a70e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800a710:	2301      	movs	r3, #1
 800a712:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800a714:	2301      	movs	r3, #1
 800a716:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800a718:	2301      	movs	r3, #1
 800a71a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a71c:	2300      	movs	r3, #0
 800a71e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a726:	69db      	ldr	r3, [r3, #28]
 800a728:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800a72a:	2300      	movs	r3, #0
 800a72c:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a734:	3b01      	subs	r3, #1
 800a736:	2b0a      	cmp	r3, #10
 800a738:	f200 819e 	bhi.w	800aa78 <USBH_MSC_BOT_Process+0x374>
 800a73c:	a201      	add	r2, pc, #4	; (adr r2, 800a744 <USBH_MSC_BOT_Process+0x40>)
 800a73e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a742:	bf00      	nop
 800a744:	0800a771 	.word	0x0800a771
 800a748:	0800a799 	.word	0x0800a799
 800a74c:	0800a803 	.word	0x0800a803
 800a750:	0800a821 	.word	0x0800a821
 800a754:	0800a8a5 	.word	0x0800a8a5
 800a758:	0800a8c7 	.word	0x0800a8c7
 800a75c:	0800a95f 	.word	0x0800a95f
 800a760:	0800a97b 	.word	0x0800a97b
 800a764:	0800a9cd 	.word	0x0800a9cd
 800a768:	0800a9fd 	.word	0x0800a9fd
 800a76c:	0800aa5f 	.word	0x0800aa5f
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	78fa      	ldrb	r2, [r7, #3]
 800a774:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	2202      	movs	r2, #2
 800a77c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	795b      	ldrb	r3, [r3, #5]
 800a78a:	2201      	movs	r2, #1
 800a78c:	9200      	str	r2, [sp, #0]
 800a78e:	221f      	movs	r2, #31
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f001 ff2a 	bl	800c5ea <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800a796:	e17e      	b.n	800aa96 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	795b      	ldrb	r3, [r3, #5]
 800a79c:	4619      	mov	r1, r3
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f004 fde0 	bl	800f364 <USBH_LL_GetURBState>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a7a8:	7d3b      	ldrb	r3, [r7, #20]
 800a7aa:	2b01      	cmp	r3, #1
 800a7ac:	d118      	bne.n	800a7e0 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d00f      	beq.n	800a7d6 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a7bc:	b25b      	sxtb	r3, r3
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	da04      	bge.n	800a7cc <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	2203      	movs	r2, #3
 800a7c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a7ca:	e157      	b.n	800aa7c <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	2205      	movs	r2, #5
 800a7d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a7d4:	e152      	b.n	800aa7c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	2207      	movs	r2, #7
 800a7da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a7de:	e14d      	b.n	800aa7c <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a7e0:	7d3b      	ldrb	r3, [r7, #20]
 800a7e2:	2b02      	cmp	r3, #2
 800a7e4:	d104      	bne.n	800a7f0 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a7ee:	e145      	b.n	800aa7c <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800a7f0:	7d3b      	ldrb	r3, [r7, #20]
 800a7f2:	2b05      	cmp	r3, #5
 800a7f4:	f040 8142 	bne.w	800aa7c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	220a      	movs	r2, #10
 800a7fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a800:	e13c      	b.n	800aa7c <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	895a      	ldrh	r2, [r3, #10]
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	791b      	ldrb	r3, [r3, #4]
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f001 ff0f 	bl	800c634 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	2204      	movs	r2, #4
 800a81a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800a81e:	e13a      	b.n	800aa96 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	791b      	ldrb	r3, [r3, #4]
 800a824:	4619      	mov	r1, r3
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f004 fd9c 	bl	800f364 <USBH_LL_GetURBState>
 800a82c:	4603      	mov	r3, r0
 800a82e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a830:	7d3b      	ldrb	r3, [r7, #20]
 800a832:	2b01      	cmp	r3, #1
 800a834:	d12d      	bne.n	800a892 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a83a:	693a      	ldr	r2, [r7, #16]
 800a83c:	8952      	ldrh	r2, [r2, #10]
 800a83e:	4293      	cmp	r3, r2
 800a840:	d910      	bls.n	800a864 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a848:	693a      	ldr	r2, [r7, #16]
 800a84a:	8952      	ldrh	r2, [r2, #10]
 800a84c:	441a      	add	r2, r3
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a858:	693a      	ldr	r2, [r7, #16]
 800a85a:	8952      	ldrh	r2, [r2, #10]
 800a85c:	1a9a      	subs	r2, r3, r2
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	65da      	str	r2, [r3, #92]	; 0x5c
 800a862:	e002      	b.n	800a86a <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	2200      	movs	r2, #0
 800a868:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d00a      	beq.n	800a888 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	895a      	ldrh	r2, [r3, #10]
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	791b      	ldrb	r3, [r3, #4]
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f001 fed7 	bl	800c634 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800a886:	e0fb      	b.n	800aa80 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	2207      	movs	r2, #7
 800a88c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a890:	e0f6      	b.n	800aa80 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800a892:	7d3b      	ldrb	r3, [r7, #20]
 800a894:	2b05      	cmp	r3, #5
 800a896:	f040 80f3 	bne.w	800aa80 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	2209      	movs	r2, #9
 800a89e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a8a2:	e0ed      	b.n	800aa80 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	891a      	ldrh	r2, [r3, #8]
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	795b      	ldrb	r3, [r3, #5]
 800a8b2:	2001      	movs	r0, #1
 800a8b4:	9000      	str	r0, [sp, #0]
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f001 fe97 	bl	800c5ea <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	2206      	movs	r2, #6
 800a8c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a8c4:	e0e7      	b.n	800aa96 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	795b      	ldrb	r3, [r3, #5]
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f004 fd49 	bl	800f364 <USBH_LL_GetURBState>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a8d6:	7d3b      	ldrb	r3, [r7, #20]
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d12f      	bne.n	800a93c <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8e0:	693a      	ldr	r2, [r7, #16]
 800a8e2:	8912      	ldrh	r2, [r2, #8]
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d910      	bls.n	800a90a <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8ee:	693a      	ldr	r2, [r7, #16]
 800a8f0:	8912      	ldrh	r2, [r2, #8]
 800a8f2:	441a      	add	r2, r3
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8fe:	693a      	ldr	r2, [r7, #16]
 800a900:	8912      	ldrh	r2, [r2, #8]
 800a902:	1a9a      	subs	r2, r3, r2
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	65da      	str	r2, [r3, #92]	; 0x5c
 800a908:	e002      	b.n	800a910 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	2200      	movs	r2, #0
 800a90e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a914:	2b00      	cmp	r3, #0
 800a916:	d00c      	beq.n	800a932 <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	891a      	ldrh	r2, [r3, #8]
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	795b      	ldrb	r3, [r3, #5]
 800a926:	2001      	movs	r0, #1
 800a928:	9000      	str	r0, [sp, #0]
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f001 fe5d 	bl	800c5ea <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800a930:	e0a8      	b.n	800aa84 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	2207      	movs	r2, #7
 800a936:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a93a:	e0a3      	b.n	800aa84 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a93c:	7d3b      	ldrb	r3, [r7, #20]
 800a93e:	2b02      	cmp	r3, #2
 800a940:	d104      	bne.n	800a94c <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	2205      	movs	r2, #5
 800a946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a94a:	e09b      	b.n	800aa84 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800a94c:	7d3b      	ldrb	r3, [r7, #20]
 800a94e:	2b05      	cmp	r3, #5
 800a950:	f040 8098 	bne.w	800aa84 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	220a      	movs	r2, #10
 800a958:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a95c:	e092      	b.n	800aa84 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	791b      	ldrb	r3, [r3, #4]
 800a968:	220d      	movs	r2, #13
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f001 fe62 	bl	800c634 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	2208      	movs	r2, #8
 800a974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a978:	e08d      	b.n	800aa96 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	791b      	ldrb	r3, [r3, #4]
 800a97e:	4619      	mov	r1, r3
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f004 fcef 	bl	800f364 <USBH_LL_GetURBState>
 800a986:	4603      	mov	r3, r0
 800a988:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800a98a:	7d3b      	ldrb	r3, [r7, #20]
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d115      	bne.n	800a9bc <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	2201      	movs	r2, #1
 800a994:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	2201      	movs	r2, #1
 800a99c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 f8a9 	bl	800aaf8 <USBH_MSC_DecodeCSW>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800a9aa:	7d7b      	ldrb	r3, [r7, #21]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d102      	bne.n	800a9b6 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800a9b4:	e068      	b.n	800aa88 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800a9b6:	2302      	movs	r3, #2
 800a9b8:	75fb      	strb	r3, [r7, #23]
      break;
 800a9ba:	e065      	b.n	800aa88 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800a9bc:	7d3b      	ldrb	r3, [r7, #20]
 800a9be:	2b05      	cmp	r3, #5
 800a9c0:	d162      	bne.n	800aa88 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	2209      	movs	r2, #9
 800a9c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a9ca:	e05d      	b.n	800aa88 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800a9cc:	78fb      	ldrb	r3, [r7, #3]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 f864 	bl	800aaa0 <USBH_MSC_BOT_Abort>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a9dc:	7dbb      	ldrb	r3, [r7, #22]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d104      	bne.n	800a9ec <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	2207      	movs	r2, #7
 800a9e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800a9ea:	e04f      	b.n	800aa8c <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800a9ec:	7dbb      	ldrb	r3, [r7, #22]
 800a9ee:	2b04      	cmp	r3, #4
 800a9f0:	d14c      	bne.n	800aa8c <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	220b      	movs	r2, #11
 800a9f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a9fa:	e047      	b.n	800aa8c <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800a9fc:	78fb      	ldrb	r3, [r7, #3]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	4619      	mov	r1, r3
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 f84c 	bl	800aaa0 <USBH_MSC_BOT_Abort>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800aa0c:	7dbb      	ldrb	r3, [r7, #22]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d11d      	bne.n	800aa4e <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	795b      	ldrb	r3, [r3, #5]
 800aa16:	4619      	mov	r1, r3
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f004 fcf4 	bl	800f406 <USBH_LL_GetToggle>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	7959      	ldrb	r1, [r3, #5]
 800aa26:	7bfb      	ldrb	r3, [r7, #15]
 800aa28:	f1c3 0301 	rsb	r3, r3, #1
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	461a      	mov	r2, r3
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f004 fcb8 	bl	800f3a6 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	791b      	ldrb	r3, [r3, #4]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f004 fcb1 	bl	800f3a6 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	2209      	movs	r2, #9
 800aa48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800aa4c:	e020      	b.n	800aa90 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800aa4e:	7dbb      	ldrb	r3, [r7, #22]
 800aa50:	2b04      	cmp	r3, #4
 800aa52:	d11d      	bne.n	800aa90 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	220b      	movs	r2, #11
 800aa58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aa5c:	e018      	b.n	800aa90 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f7ff fdf2 	bl	800a648 <USBH_MSC_BOT_REQ_Reset>
 800aa64:	4603      	mov	r3, r0
 800aa66:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800aa68:	7dfb      	ldrb	r3, [r7, #23]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d112      	bne.n	800aa94 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	2201      	movs	r2, #1
 800aa72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800aa76:	e00d      	b.n	800aa94 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800aa78:	bf00      	nop
 800aa7a:	e00c      	b.n	800aa96 <USBH_MSC_BOT_Process+0x392>
      break;
 800aa7c:	bf00      	nop
 800aa7e:	e00a      	b.n	800aa96 <USBH_MSC_BOT_Process+0x392>
      break;
 800aa80:	bf00      	nop
 800aa82:	e008      	b.n	800aa96 <USBH_MSC_BOT_Process+0x392>
      break;
 800aa84:	bf00      	nop
 800aa86:	e006      	b.n	800aa96 <USBH_MSC_BOT_Process+0x392>
      break;
 800aa88:	bf00      	nop
 800aa8a:	e004      	b.n	800aa96 <USBH_MSC_BOT_Process+0x392>
      break;
 800aa8c:	bf00      	nop
 800aa8e:	e002      	b.n	800aa96 <USBH_MSC_BOT_Process+0x392>
      break;
 800aa90:	bf00      	nop
 800aa92:	e000      	b.n	800aa96 <USBH_MSC_BOT_Process+0x392>
      break;
 800aa94:	bf00      	nop
  }
  return status;
 800aa96:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3718      	adds	r7, #24
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	70fb      	strb	r3, [r7, #3]
 800aaac:	4613      	mov	r3, r2
 800aaae:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800aab0:	2302      	movs	r3, #2
 800aab2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aaba:	69db      	ldr	r3, [r3, #28]
 800aabc:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800aabe:	78bb      	ldrb	r3, [r7, #2]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d002      	beq.n	800aaca <USBH_MSC_BOT_Abort+0x2a>
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d009      	beq.n	800aadc <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800aac8:	e011      	b.n	800aaee <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	79db      	ldrb	r3, [r3, #7]
 800aace:	4619      	mov	r1, r3
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f001 f99c 	bl	800be0e <USBH_ClrFeature>
 800aad6:	4603      	mov	r3, r0
 800aad8:	73fb      	strb	r3, [r7, #15]
      break;
 800aada:	e008      	b.n	800aaee <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	799b      	ldrb	r3, [r3, #6]
 800aae0:	4619      	mov	r1, r3
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f001 f993 	bl	800be0e <USBH_ClrFeature>
 800aae8:	4603      	mov	r3, r0
 800aaea:	73fb      	strb	r3, [r7, #15]
      break;
 800aaec:	bf00      	nop
  }
  return status;
 800aaee:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3710      	adds	r7, #16
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab06:	69db      	ldr	r3, [r3, #28]
 800ab08:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	791b      	ldrb	r3, [r3, #4]
 800ab12:	4619      	mov	r1, r3
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f004 fb93 	bl	800f240 <USBH_LL_GetLastXferSize>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b0d      	cmp	r3, #13
 800ab1e:	d002      	beq.n	800ab26 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800ab20:	2302      	movs	r3, #2
 800ab22:	73fb      	strb	r3, [r7, #15]
 800ab24:	e024      	b.n	800ab70 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab2a:	4a14      	ldr	r2, [pc, #80]	; (800ab7c <USBH_MSC_DecodeCSW+0x84>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d11d      	bne.n	800ab6c <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d119      	bne.n	800ab70 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d102      	bne.n	800ab4c <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800ab46:	2300      	movs	r3, #0
 800ab48:	73fb      	strb	r3, [r7, #15]
 800ab4a:	e011      	b.n	800ab70 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ab52:	2b01      	cmp	r3, #1
 800ab54:	d102      	bne.n	800ab5c <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800ab56:	2301      	movs	r3, #1
 800ab58:	73fb      	strb	r3, [r7, #15]
 800ab5a:	e009      	b.n	800ab70 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ab62:	2b02      	cmp	r3, #2
 800ab64:	d104      	bne.n	800ab70 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800ab66:	2302      	movs	r3, #2
 800ab68:	73fb      	strb	r3, [r7, #15]
 800ab6a:	e001      	b.n	800ab70 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800ab6c:	2302      	movs	r3, #2
 800ab6e:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800ab70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	53425355 	.word	0x53425355

0800ab80 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	460b      	mov	r3, r1
 800ab8a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800ab8c:	2302      	movs	r3, #2
 800ab8e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab96:	69db      	ldr	r3, [r3, #28]
 800ab98:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d002      	beq.n	800abaa <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800aba4:	2b02      	cmp	r3, #2
 800aba6:	d021      	beq.n	800abec <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800aba8:	e028      	b.n	800abfc <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	2200      	movs	r2, #0
 800abae:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	2200      	movs	r2, #0
 800abb4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	220a      	movs	r2, #10
 800abbc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	3363      	adds	r3, #99	; 0x63
 800abc4:	2210      	movs	r2, #16
 800abc6:	2100      	movs	r1, #0
 800abc8:	4618      	mov	r0, r3
 800abca:	f004 fccb 	bl	800f564 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	2200      	movs	r2, #0
 800abd2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	2201      	movs	r2, #1
 800abda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	2202      	movs	r2, #2
 800abe2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800abe6:	2301      	movs	r3, #1
 800abe8:	73fb      	strb	r3, [r7, #15]
      break;
 800abea:	e007      	b.n	800abfc <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800abec:	78fb      	ldrb	r3, [r7, #3]
 800abee:	4619      	mov	r1, r3
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f7ff fd87 	bl	800a704 <USBH_MSC_BOT_Process>
 800abf6:	4603      	mov	r3, r0
 800abf8:	73fb      	strb	r3, [r7, #15]
      break;
 800abfa:	bf00      	nop
  }

  return error;
 800abfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3710      	adds	r7, #16
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}

0800ac06 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800ac06:	b580      	push	{r7, lr}
 800ac08:	b086      	sub	sp, #24
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	60f8      	str	r0, [r7, #12]
 800ac0e:	460b      	mov	r3, r1
 800ac10:	607a      	str	r2, [r7, #4]
 800ac12:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800ac14:	2301      	movs	r3, #1
 800ac16:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac1e:	69db      	ldr	r3, [r3, #28]
 800ac20:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d002      	beq.n	800ac32 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800ac2c:	2b02      	cmp	r3, #2
 800ac2e:	d027      	beq.n	800ac80 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800ac30:	e05f      	b.n	800acf2 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	2208      	movs	r2, #8
 800ac36:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	2280      	movs	r2, #128	; 0x80
 800ac3c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	220a      	movs	r2, #10
 800ac44:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	3363      	adds	r3, #99	; 0x63
 800ac4c:	2210      	movs	r2, #16
 800ac4e:	2100      	movs	r1, #0
 800ac50:	4618      	mov	r0, r3
 800ac52:	f004 fc87 	bl	800f564 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	2225      	movs	r2, #37	; 0x25
 800ac5a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	2201      	movs	r2, #1
 800ac62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	2202      	movs	r2, #2
 800ac6a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	f103 0210 	add.w	r2, r3, #16
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	75fb      	strb	r3, [r7, #23]
      break;
 800ac7e:	e038      	b.n	800acf2 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ac80:	7afb      	ldrb	r3, [r7, #11]
 800ac82:	4619      	mov	r1, r3
 800ac84:	68f8      	ldr	r0, [r7, #12]
 800ac86:	f7ff fd3d 	bl	800a704 <USBH_MSC_BOT_Process>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ac8e:	7dfb      	ldrb	r3, [r7, #23]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d12d      	bne.n	800acf0 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac9a:	3303      	adds	r3, #3
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	461a      	mov	r2, r3
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aca6:	3302      	adds	r3, #2
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	021b      	lsls	r3, r3, #8
 800acac:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800acb4:	3301      	adds	r3, #1
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800acba:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	061b      	lsls	r3, r3, #24
 800acc6:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800acd2:	3307      	adds	r3, #7
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	b29a      	uxth	r2, r3
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800acde:	3306      	adds	r3, #6
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	b29b      	uxth	r3, r3
 800ace4:	021b      	lsls	r3, r3, #8
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	4313      	orrs	r3, r2
 800acea:	b29a      	uxth	r2, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	809a      	strh	r2, [r3, #4]
      break;
 800acf0:	bf00      	nop
  }

  return error;
 800acf2:	7dfb      	ldrb	r3, [r7, #23]
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3718      	adds	r7, #24
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b086      	sub	sp, #24
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	60f8      	str	r0, [r7, #12]
 800ad04:	460b      	mov	r3, r1
 800ad06:	607a      	str	r2, [r7, #4]
 800ad08:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800ad0a:	2302      	movs	r3, #2
 800ad0c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad14:	69db      	ldr	r3, [r3, #28]
 800ad16:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d002      	beq.n	800ad28 <USBH_MSC_SCSI_Inquiry+0x2c>
 800ad22:	2b02      	cmp	r3, #2
 800ad24:	d03d      	beq.n	800ada2 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800ad26:	e089      	b.n	800ae3c <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	2224      	movs	r2, #36	; 0x24
 800ad2c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	2280      	movs	r2, #128	; 0x80
 800ad32:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	220a      	movs	r2, #10
 800ad3a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	3363      	adds	r3, #99	; 0x63
 800ad42:	220a      	movs	r2, #10
 800ad44:	2100      	movs	r1, #0
 800ad46:	4618      	mov	r0, r3
 800ad48:	f004 fc0c 	bl	800f564 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	2212      	movs	r2, #18
 800ad50:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800ad54:	7afb      	ldrb	r3, [r7, #11]
 800ad56:	015b      	lsls	r3, r3, #5
 800ad58:	b2da      	uxtb	r2, r3
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	2200      	movs	r2, #0
 800ad64:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	2224      	movs	r2, #36	; 0x24
 800ad74:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	2201      	movs	r2, #1
 800ad84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	2202      	movs	r2, #2
 800ad8c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	f103 0210 	add.w	r2, r3, #16
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	75fb      	strb	r3, [r7, #23]
      break;
 800ada0:	e04c      	b.n	800ae3c <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ada2:	7afb      	ldrb	r3, [r7, #11]
 800ada4:	4619      	mov	r1, r3
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	f7ff fcac 	bl	800a704 <USBH_MSC_BOT_Process>
 800adac:	4603      	mov	r3, r0
 800adae:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800adb0:	7dfb      	ldrb	r3, [r7, #23]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d141      	bne.n	800ae3a <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800adb6:	2222      	movs	r2, #34	; 0x22
 800adb8:	2100      	movs	r1, #0
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f004 fbd2 	bl	800f564 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	f003 031f 	and.w	r3, r3, #31
 800adcc:	b2da      	uxtb	r2, r3
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	095b      	lsrs	r3, r3, #5
 800addc:	b2da      	uxtb	r2, r3
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ade8:	3301      	adds	r3, #1
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	b25b      	sxtb	r3, r3
 800adee:	2b00      	cmp	r3, #0
 800adf0:	da03      	bge.n	800adfa <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2201      	movs	r2, #1
 800adf6:	709a      	strb	r2, [r3, #2]
 800adf8:	e002      	b.n	800ae00 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2200      	movs	r2, #0
 800adfe:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	1cd8      	adds	r0, r3, #3
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae0a:	3308      	adds	r3, #8
 800ae0c:	2208      	movs	r2, #8
 800ae0e:	4619      	mov	r1, r3
 800ae10:	f004 fb9a 	bl	800f548 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f103 000c 	add.w	r0, r3, #12
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae20:	3310      	adds	r3, #16
 800ae22:	2210      	movs	r2, #16
 800ae24:	4619      	mov	r1, r3
 800ae26:	f004 fb8f 	bl	800f548 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	331d      	adds	r3, #29
 800ae2e:	693a      	ldr	r2, [r7, #16]
 800ae30:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800ae34:	3220      	adds	r2, #32
 800ae36:	6812      	ldr	r2, [r2, #0]
 800ae38:	601a      	str	r2, [r3, #0]
      break;
 800ae3a:	bf00      	nop
  }

  return error;
 800ae3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3718      	adds	r7, #24
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}

0800ae46 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800ae46:	b580      	push	{r7, lr}
 800ae48:	b086      	sub	sp, #24
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	60f8      	str	r0, [r7, #12]
 800ae4e:	460b      	mov	r3, r1
 800ae50:	607a      	str	r2, [r7, #4]
 800ae52:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800ae54:	2302      	movs	r3, #2
 800ae56:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae5e:	69db      	ldr	r3, [r3, #28]
 800ae60:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d002      	beq.n	800ae72 <USBH_MSC_SCSI_RequestSense+0x2c>
 800ae6c:	2b02      	cmp	r3, #2
 800ae6e:	d03d      	beq.n	800aeec <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800ae70:	e05d      	b.n	800af2e <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	220e      	movs	r2, #14
 800ae76:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	2280      	movs	r2, #128	; 0x80
 800ae7c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	220a      	movs	r2, #10
 800ae84:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	3363      	adds	r3, #99	; 0x63
 800ae8c:	2210      	movs	r2, #16
 800ae8e:	2100      	movs	r1, #0
 800ae90:	4618      	mov	r0, r3
 800ae92:	f004 fb67 	bl	800f564 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	2203      	movs	r2, #3
 800ae9a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800ae9e:	7afb      	ldrb	r3, [r7, #11]
 800aea0:	015b      	lsls	r3, r3, #5
 800aea2:	b2da      	uxtb	r2, r3
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	2200      	movs	r2, #0
 800aeae:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	220e      	movs	r2, #14
 800aebe:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	2200      	movs	r2, #0
 800aec6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	2201      	movs	r2, #1
 800aece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	2202      	movs	r2, #2
 800aed6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	f103 0210 	add.w	r2, r3, #16
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800aee6:	2301      	movs	r3, #1
 800aee8:	75fb      	strb	r3, [r7, #23]
      break;
 800aeea:	e020      	b.n	800af2e <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800aeec:	7afb      	ldrb	r3, [r7, #11]
 800aeee:	4619      	mov	r1, r3
 800aef0:	68f8      	ldr	r0, [r7, #12]
 800aef2:	f7ff fc07 	bl	800a704 <USBH_MSC_BOT_Process>
 800aef6:	4603      	mov	r3, r0
 800aef8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800aefa:	7dfb      	ldrb	r3, [r7, #23]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d115      	bne.n	800af2c <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af06:	3302      	adds	r3, #2
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	f003 030f 	and.w	r3, r3, #15
 800af0e:	b2da      	uxtb	r2, r3
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af1a:	7b1a      	ldrb	r2, [r3, #12]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af26:	7b5a      	ldrb	r2, [r3, #13]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	709a      	strb	r2, [r3, #2]
      break;
 800af2c:	bf00      	nop
  }

  return error;
 800af2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800af30:	4618      	mov	r0, r3
 800af32:	3718      	adds	r7, #24
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b086      	sub	sp, #24
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	607a      	str	r2, [r7, #4]
 800af42:	603b      	str	r3, [r7, #0]
 800af44:	460b      	mov	r3, r1
 800af46:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800af48:	2302      	movs	r3, #2
 800af4a:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af52:	69db      	ldr	r3, [r3, #28]
 800af54:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d002      	beq.n	800af66 <USBH_MSC_SCSI_Write+0x2e>
 800af60:	2b02      	cmp	r3, #2
 800af62:	d047      	beq.n	800aff4 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800af64:	e04e      	b.n	800b004 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800af6c:	461a      	mov	r2, r3
 800af6e:	6a3b      	ldr	r3, [r7, #32]
 800af70:	fb03 f202 	mul.w	r2, r3, r2
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	220a      	movs	r2, #10
 800af84:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	3363      	adds	r3, #99	; 0x63
 800af8c:	2210      	movs	r2, #16
 800af8e:	2100      	movs	r1, #0
 800af90:	4618      	mov	r0, r3
 800af92:	f004 fae7 	bl	800f564 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	222a      	movs	r2, #42	; 0x2a
 800af9a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800af9e:	79fa      	ldrb	r2, [r7, #7]
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800afa6:	79ba      	ldrb	r2, [r7, #6]
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800afae:	797a      	ldrb	r2, [r7, #5]
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800afb6:	1d3b      	adds	r3, r7, #4
 800afb8:	781a      	ldrb	r2, [r3, #0]
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800afc0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800afca:	f107 0320 	add.w	r3, r7, #32
 800afce:	781a      	ldrb	r2, [r3, #0]
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	2201      	movs	r2, #1
 800afda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	2202      	movs	r2, #2
 800afe2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	683a      	ldr	r2, [r7, #0]
 800afea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800afee:	2301      	movs	r3, #1
 800aff0:	75fb      	strb	r3, [r7, #23]
      break;
 800aff2:	e007      	b.n	800b004 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800aff4:	7afb      	ldrb	r3, [r7, #11]
 800aff6:	4619      	mov	r1, r3
 800aff8:	68f8      	ldr	r0, [r7, #12]
 800affa:	f7ff fb83 	bl	800a704 <USBH_MSC_BOT_Process>
 800affe:	4603      	mov	r3, r0
 800b000:	75fb      	strb	r3, [r7, #23]
      break;
 800b002:	bf00      	nop
  }

  return error;
 800b004:	7dfb      	ldrb	r3, [r7, #23]
}
 800b006:	4618      	mov	r0, r3
 800b008:	3718      	adds	r7, #24
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}

0800b00e <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800b00e:	b580      	push	{r7, lr}
 800b010:	b086      	sub	sp, #24
 800b012:	af00      	add	r7, sp, #0
 800b014:	60f8      	str	r0, [r7, #12]
 800b016:	607a      	str	r2, [r7, #4]
 800b018:	603b      	str	r3, [r7, #0]
 800b01a:	460b      	mov	r3, r1
 800b01c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b01e:	2302      	movs	r3, #2
 800b020:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b028:	69db      	ldr	r3, [r3, #28]
 800b02a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b032:	2b01      	cmp	r3, #1
 800b034:	d002      	beq.n	800b03c <USBH_MSC_SCSI_Read+0x2e>
 800b036:	2b02      	cmp	r3, #2
 800b038:	d047      	beq.n	800b0ca <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b03a:	e04e      	b.n	800b0da <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800b042:	461a      	mov	r2, r3
 800b044:	6a3b      	ldr	r3, [r7, #32]
 800b046:	fb03 f202 	mul.w	r2, r3, r2
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	2280      	movs	r2, #128	; 0x80
 800b052:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	220a      	movs	r2, #10
 800b05a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	3363      	adds	r3, #99	; 0x63
 800b062:	2210      	movs	r2, #16
 800b064:	2100      	movs	r1, #0
 800b066:	4618      	mov	r0, r3
 800b068:	f004 fa7c 	bl	800f564 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	2228      	movs	r2, #40	; 0x28
 800b070:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b074:	79fa      	ldrb	r2, [r7, #7]
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b07c:	79ba      	ldrb	r2, [r7, #6]
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b084:	797a      	ldrb	r2, [r7, #5]
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b08c:	1d3b      	adds	r3, r7, #4
 800b08e:	781a      	ldrb	r2, [r3, #0]
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800b096:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800b0a0:	f107 0320 	add.w	r3, r7, #32
 800b0a4:	781a      	ldrb	r2, [r3, #0]
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	2202      	movs	r2, #2
 800b0b8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	683a      	ldr	r2, [r7, #0]
 800b0c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	75fb      	strb	r3, [r7, #23]
      break;
 800b0c8:	e007      	b.n	800b0da <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b0ca:	7afb      	ldrb	r3, [r7, #11]
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	68f8      	ldr	r0, [r7, #12]
 800b0d0:	f7ff fb18 	bl	800a704 <USBH_MSC_BOT_Process>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	75fb      	strb	r3, [r7, #23]
      break;
 800b0d8:	bf00      	nop
  }

  return error;
 800b0da:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3718      	adds	r7, #24
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b084      	sub	sp, #16
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	4613      	mov	r3, r2
 800b0f0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d101      	bne.n	800b0fc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b0f8:	2302      	movs	r3, #2
 800b0fa:	e029      	b.n	800b150 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	79fa      	ldrb	r2, [r7, #7]
 800b100:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2200      	movs	r2, #0
 800b108:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	2200      	movs	r2, #0
 800b110:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800b114:	68f8      	ldr	r0, [r7, #12]
 800b116:	f000 f81f 	bl	800b158 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2200      	movs	r2, #0
 800b11e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2200      	movs	r2, #0
 800b126:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2200      	movs	r2, #0
 800b12e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	2200      	movs	r2, #0
 800b136:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d003      	beq.n	800b148 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	68ba      	ldr	r2, [r7, #8]
 800b144:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800b148:	68f8      	ldr	r0, [r7, #12]
 800b14a:	f003 ffc5 	bl	800f0d8 <USBH_LL_Init>

  return USBH_OK;
 800b14e:	2300      	movs	r3, #0
}
 800b150:	4618      	mov	r0, r3
 800b152:	3710      	adds	r7, #16
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b158:	b480      	push	{r7}
 800b15a:	b085      	sub	sp, #20
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b160:	2300      	movs	r3, #0
 800b162:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b164:	2300      	movs	r3, #0
 800b166:	60fb      	str	r3, [r7, #12]
 800b168:	e009      	b.n	800b17e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b16a:	687a      	ldr	r2, [r7, #4]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	33e0      	adds	r3, #224	; 0xe0
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	4413      	add	r3, r2
 800b174:	2200      	movs	r2, #0
 800b176:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	3301      	adds	r3, #1
 800b17c:	60fb      	str	r3, [r7, #12]
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2b0e      	cmp	r3, #14
 800b182:	d9f2      	bls.n	800b16a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b184:	2300      	movs	r3, #0
 800b186:	60fb      	str	r3, [r7, #12]
 800b188:	e009      	b.n	800b19e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b18a:	687a      	ldr	r2, [r7, #4]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	4413      	add	r3, r2
 800b190:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b194:	2200      	movs	r2, #0
 800b196:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	3301      	adds	r3, #1
 800b19c:	60fb      	str	r3, [r7, #12]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1a4:	d3f1      	bcc.n	800b18a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2201      	movs	r2, #1
 800b1b6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2240      	movs	r2, #64	; 0x40
 800b1ca:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2201      	movs	r2, #1
 800b1de:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b1f2:	2300      	movs	r3, #0
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3714      	adds	r7, #20
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b200:	b480      	push	{r7}
 800b202:	b085      	sub	sp, #20
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b20a:	2300      	movs	r3, #0
 800b20c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d016      	beq.n	800b242 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d10e      	bne.n	800b23c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b224:	1c59      	adds	r1, r3, #1
 800b226:	687a      	ldr	r2, [r7, #4]
 800b228:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	33de      	adds	r3, #222	; 0xde
 800b230:	6839      	ldr	r1, [r7, #0]
 800b232:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b236:	2300      	movs	r3, #0
 800b238:	73fb      	strb	r3, [r7, #15]
 800b23a:	e004      	b.n	800b246 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b23c:	2302      	movs	r3, #2
 800b23e:	73fb      	strb	r3, [r7, #15]
 800b240:	e001      	b.n	800b246 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b242:	2302      	movs	r3, #2
 800b244:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b246:	7bfb      	ldrb	r3, [r7, #15]
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3714      	adds	r7, #20
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b254:	b480      	push	{r7}
 800b256:	b085      	sub	sp, #20
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	460b      	mov	r3, r1
 800b25e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b260:	2300      	movs	r3, #0
 800b262:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b26a:	78fa      	ldrb	r2, [r7, #3]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d204      	bcs.n	800b27a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	78fa      	ldrb	r2, [r7, #3]
 800b274:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b278:	e001      	b.n	800b27e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b27a:	2302      	movs	r3, #2
 800b27c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b27e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b280:	4618      	mov	r0, r3
 800b282:	3714      	adds	r7, #20
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr

0800b28c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b087      	sub	sp, #28
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	4608      	mov	r0, r1
 800b296:	4611      	mov	r1, r2
 800b298:	461a      	mov	r2, r3
 800b29a:	4603      	mov	r3, r0
 800b29c:	70fb      	strb	r3, [r7, #3]
 800b29e:	460b      	mov	r3, r1
 800b2a0:	70bb      	strb	r3, [r7, #2]
 800b2a2:	4613      	mov	r3, r2
 800b2a4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b2b4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b2b6:	e025      	b.n	800b304 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b2b8:	7dfb      	ldrb	r3, [r7, #23]
 800b2ba:	221a      	movs	r2, #26
 800b2bc:	fb02 f303 	mul.w	r3, r2, r3
 800b2c0:	3308      	adds	r3, #8
 800b2c2:	68fa      	ldr	r2, [r7, #12]
 800b2c4:	4413      	add	r3, r2
 800b2c6:	3302      	adds	r3, #2
 800b2c8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	795b      	ldrb	r3, [r3, #5]
 800b2ce:	78fa      	ldrb	r2, [r7, #3]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d002      	beq.n	800b2da <USBH_FindInterface+0x4e>
 800b2d4:	78fb      	ldrb	r3, [r7, #3]
 800b2d6:	2bff      	cmp	r3, #255	; 0xff
 800b2d8:	d111      	bne.n	800b2fe <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b2de:	78ba      	ldrb	r2, [r7, #2]
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d002      	beq.n	800b2ea <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b2e4:	78bb      	ldrb	r3, [r7, #2]
 800b2e6:	2bff      	cmp	r3, #255	; 0xff
 800b2e8:	d109      	bne.n	800b2fe <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b2ee:	787a      	ldrb	r2, [r7, #1]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d002      	beq.n	800b2fa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b2f4:	787b      	ldrb	r3, [r7, #1]
 800b2f6:	2bff      	cmp	r3, #255	; 0xff
 800b2f8:	d101      	bne.n	800b2fe <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b2fa:	7dfb      	ldrb	r3, [r7, #23]
 800b2fc:	e006      	b.n	800b30c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b2fe:	7dfb      	ldrb	r3, [r7, #23]
 800b300:	3301      	adds	r3, #1
 800b302:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b304:	7dfb      	ldrb	r3, [r7, #23]
 800b306:	2b01      	cmp	r3, #1
 800b308:	d9d6      	bls.n	800b2b8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b30a:	23ff      	movs	r3, #255	; 0xff
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	371c      	adds	r7, #28
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f003 ff15 	bl	800f150 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800b326:	2101      	movs	r1, #1
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f004 f82e 	bl	800f38a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b32e:	2300      	movs	r3, #0
}
 800b330:	4618      	mov	r0, r3
 800b332:	3708      	adds	r7, #8
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b088      	sub	sp, #32
 800b33c:	af04      	add	r7, sp, #16
 800b33e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b340:	2302      	movs	r3, #2
 800b342:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b344:	2300      	movs	r3, #0
 800b346:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b34e:	b2db      	uxtb	r3, r3
 800b350:	2b01      	cmp	r3, #1
 800b352:	d102      	bne.n	800b35a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2203      	movs	r2, #3
 800b358:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	b2db      	uxtb	r3, r3
 800b360:	2b0b      	cmp	r3, #11
 800b362:	f200 81b3 	bhi.w	800b6cc <USBH_Process+0x394>
 800b366:	a201      	add	r2, pc, #4	; (adr r2, 800b36c <USBH_Process+0x34>)
 800b368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b36c:	0800b39d 	.word	0x0800b39d
 800b370:	0800b3cf 	.word	0x0800b3cf
 800b374:	0800b437 	.word	0x0800b437
 800b378:	0800b667 	.word	0x0800b667
 800b37c:	0800b6cd 	.word	0x0800b6cd
 800b380:	0800b4db 	.word	0x0800b4db
 800b384:	0800b60d 	.word	0x0800b60d
 800b388:	0800b511 	.word	0x0800b511
 800b38c:	0800b531 	.word	0x0800b531
 800b390:	0800b551 	.word	0x0800b551
 800b394:	0800b57f 	.word	0x0800b57f
 800b398:	0800b64f 	.word	0x0800b64f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b3a2:	b2db      	uxtb	r3, r3
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	f000 8193 	beq.w	800b6d0 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b3b0:	20c8      	movs	r0, #200	; 0xc8
 800b3b2:	f004 f858 	bl	800f466 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f003 ff27 	bl	800f20a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b3cc:	e180      	b.n	800b6d0 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d107      	bne.n	800b3e8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2202      	movs	r2, #2
 800b3e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b3e6:	e182      	b.n	800b6ee <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b3ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b3f2:	d914      	bls.n	800b41e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	b2da      	uxtb	r2, r3
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b40a:	2b03      	cmp	r3, #3
 800b40c:	d903      	bls.n	800b416 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	220d      	movs	r2, #13
 800b412:	701a      	strb	r2, [r3, #0]
      break;
 800b414:	e16b      	b.n	800b6ee <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2200      	movs	r2, #0
 800b41a:	701a      	strb	r2, [r3, #0]
      break;
 800b41c:	e167      	b.n	800b6ee <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b424:	f103 020a 	add.w	r2, r3, #10
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b42e:	200a      	movs	r0, #10
 800b430:	f004 f819 	bl	800f466 <USBH_Delay>
      break;
 800b434:	e15b      	b.n	800b6ee <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d005      	beq.n	800b44c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b446:	2104      	movs	r1, #4
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b44c:	2064      	movs	r0, #100	; 0x64
 800b44e:	f004 f80a 	bl	800f466 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f003 feb2 	bl	800f1bc <USBH_LL_GetSpeed>
 800b458:	4603      	mov	r3, r0
 800b45a:	461a      	mov	r2, r3
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2205      	movs	r2, #5
 800b466:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b468:	2100      	movs	r1, #0
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f001 f92f 	bl	800c6ce <USBH_AllocPipe>
 800b470:	4603      	mov	r3, r0
 800b472:	461a      	mov	r2, r3
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b478:	2180      	movs	r1, #128	; 0x80
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f001 f927 	bl	800c6ce <USBH_AllocPipe>
 800b480:	4603      	mov	r3, r0
 800b482:	461a      	mov	r2, r3
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	7919      	ldrb	r1, [r3, #4]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b498:	687a      	ldr	r2, [r7, #4]
 800b49a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b49c:	b292      	uxth	r2, r2
 800b49e:	9202      	str	r2, [sp, #8]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	9201      	str	r2, [sp, #4]
 800b4a4:	9300      	str	r3, [sp, #0]
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	2280      	movs	r2, #128	; 0x80
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f001 f8e0 	bl	800c670 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	7959      	ldrb	r1, [r3, #5]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b4c4:	b292      	uxth	r2, r2
 800b4c6:	9202      	str	r2, [sp, #8]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	9201      	str	r2, [sp, #4]
 800b4cc:	9300      	str	r3, [sp, #0]
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f001 f8cc 	bl	800c670 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b4d8:	e109      	b.n	800b6ee <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f000 f90c 	bl	800b6f8 <USBH_HandleEnum>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b4e4:	7bbb      	ldrb	r3, [r7, #14]
 800b4e6:	b2db      	uxtb	r3, r3
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	f040 80f3 	bne.w	800b6d4 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d103      	bne.n	800b508 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2208      	movs	r2, #8
 800b504:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b506:	e0e5      	b.n	800b6d4 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2207      	movs	r2, #7
 800b50c:	701a      	strb	r2, [r3, #0]
      break;
 800b50e:	e0e1      	b.n	800b6d4 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b516:	2b00      	cmp	r3, #0
 800b518:	f000 80de 	beq.w	800b6d8 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b522:	2101      	movs	r1, #1
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2208      	movs	r2, #8
 800b52c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800b52e:	e0d3      	b.n	800b6d8 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b536:	b29b      	uxth	r3, r3
 800b538:	4619      	mov	r1, r3
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 fc20 	bl	800bd80 <USBH_SetCfg>
 800b540:	4603      	mov	r3, r0
 800b542:	2b00      	cmp	r3, #0
 800b544:	f040 80ca 	bne.w	800b6dc <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2209      	movs	r2, #9
 800b54c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b54e:	e0c5      	b.n	800b6dc <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b556:	f003 0320 	and.w	r3, r3, #32
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d00b      	beq.n	800b576 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800b55e:	2101      	movs	r1, #1
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 fc30 	bl	800bdc6 <USBH_SetFeature>
 800b566:	4603      	mov	r3, r0
 800b568:	2b00      	cmp	r3, #0
 800b56a:	f040 80b9 	bne.w	800b6e0 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	220a      	movs	r2, #10
 800b572:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b574:	e0b4      	b.n	800b6e0 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	220a      	movs	r2, #10
 800b57a:	701a      	strb	r2, [r3, #0]
      break;
 800b57c:	e0b0      	b.n	800b6e0 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b584:	2b00      	cmp	r3, #0
 800b586:	f000 80ad 	beq.w	800b6e4 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2200      	movs	r2, #0
 800b58e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b592:	2300      	movs	r3, #0
 800b594:	73fb      	strb	r3, [r7, #15]
 800b596:	e016      	b.n	800b5c6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b598:	7bfa      	ldrb	r2, [r7, #15]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	32de      	adds	r2, #222	; 0xde
 800b59e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5a2:	791a      	ldrb	r2, [r3, #4]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d108      	bne.n	800b5c0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b5ae:	7bfa      	ldrb	r2, [r7, #15]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	32de      	adds	r2, #222	; 0xde
 800b5b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b5be:	e005      	b.n	800b5cc <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b5c0:	7bfb      	ldrb	r3, [r7, #15]
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	73fb      	strb	r3, [r7, #15]
 800b5c6:	7bfb      	ldrb	r3, [r7, #15]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d0e5      	beq.n	800b598 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d016      	beq.n	800b604 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	4798      	blx	r3
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d109      	bne.n	800b5fc <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2206      	movs	r2, #6
 800b5ec:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b5f4:	2103      	movs	r1, #3
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b5fa:	e073      	b.n	800b6e4 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	220d      	movs	r2, #13
 800b600:	701a      	strb	r2, [r3, #0]
      break;
 800b602:	e06f      	b.n	800b6e4 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	220d      	movs	r2, #13
 800b608:	701a      	strb	r2, [r3, #0]
      break;
 800b60a:	e06b      	b.n	800b6e4 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b612:	2b00      	cmp	r3, #0
 800b614:	d017      	beq.n	800b646 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b61c:	691b      	ldr	r3, [r3, #16]
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	4798      	blx	r3
 800b622:	4603      	mov	r3, r0
 800b624:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b626:	7bbb      	ldrb	r3, [r7, #14]
 800b628:	b2db      	uxtb	r3, r3
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d103      	bne.n	800b636 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	220b      	movs	r2, #11
 800b632:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b634:	e058      	b.n	800b6e8 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800b636:	7bbb      	ldrb	r3, [r7, #14]
 800b638:	b2db      	uxtb	r3, r3
 800b63a:	2b02      	cmp	r3, #2
 800b63c:	d154      	bne.n	800b6e8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	220d      	movs	r2, #13
 800b642:	701a      	strb	r2, [r3, #0]
      break;
 800b644:	e050      	b.n	800b6e8 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	220d      	movs	r2, #13
 800b64a:	701a      	strb	r2, [r3, #0]
      break;
 800b64c:	e04c      	b.n	800b6e8 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b654:	2b00      	cmp	r3, #0
 800b656:	d049      	beq.n	800b6ec <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b65e:	695b      	ldr	r3, [r3, #20]
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	4798      	blx	r3
      }
      break;
 800b664:	e042      	b.n	800b6ec <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2200      	movs	r2, #0
 800b66a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f7ff fd72 	bl	800b158 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d009      	beq.n	800b692 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b684:	68db      	ldr	r3, [r3, #12]
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2200      	movs	r2, #0
 800b68e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d005      	beq.n	800b6a8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b6a2:	2105      	movs	r1, #5
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b6ae:	b2db      	uxtb	r3, r3
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d107      	bne.n	800b6c4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f7ff fe2b 	bl	800b318 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b6c2:	e014      	b.n	800b6ee <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f003 fd43 	bl	800f150 <USBH_LL_Start>
      break;
 800b6ca:	e010      	b.n	800b6ee <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800b6cc:	bf00      	nop
 800b6ce:	e00e      	b.n	800b6ee <USBH_Process+0x3b6>
      break;
 800b6d0:	bf00      	nop
 800b6d2:	e00c      	b.n	800b6ee <USBH_Process+0x3b6>
      break;
 800b6d4:	bf00      	nop
 800b6d6:	e00a      	b.n	800b6ee <USBH_Process+0x3b6>
    break;
 800b6d8:	bf00      	nop
 800b6da:	e008      	b.n	800b6ee <USBH_Process+0x3b6>
      break;
 800b6dc:	bf00      	nop
 800b6de:	e006      	b.n	800b6ee <USBH_Process+0x3b6>
      break;
 800b6e0:	bf00      	nop
 800b6e2:	e004      	b.n	800b6ee <USBH_Process+0x3b6>
      break;
 800b6e4:	bf00      	nop
 800b6e6:	e002      	b.n	800b6ee <USBH_Process+0x3b6>
      break;
 800b6e8:	bf00      	nop
 800b6ea:	e000      	b.n	800b6ee <USBH_Process+0x3b6>
      break;
 800b6ec:	bf00      	nop
  }
  return USBH_OK;
 800b6ee:	2300      	movs	r3, #0
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3710      	adds	r7, #16
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b088      	sub	sp, #32
 800b6fc:	af04      	add	r7, sp, #16
 800b6fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b700:	2301      	movs	r3, #1
 800b702:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b704:	2301      	movs	r3, #1
 800b706:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	785b      	ldrb	r3, [r3, #1]
 800b70c:	2b07      	cmp	r3, #7
 800b70e:	f200 81c1 	bhi.w	800ba94 <USBH_HandleEnum+0x39c>
 800b712:	a201      	add	r2, pc, #4	; (adr r2, 800b718 <USBH_HandleEnum+0x20>)
 800b714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b718:	0800b739 	.word	0x0800b739
 800b71c:	0800b7f7 	.word	0x0800b7f7
 800b720:	0800b861 	.word	0x0800b861
 800b724:	0800b8ef 	.word	0x0800b8ef
 800b728:	0800b959 	.word	0x0800b959
 800b72c:	0800b9c9 	.word	0x0800b9c9
 800b730:	0800ba0f 	.word	0x0800ba0f
 800b734:	0800ba55 	.word	0x0800ba55
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b738:	2108      	movs	r1, #8
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 fa50 	bl	800bbe0 <USBH_Get_DevDesc>
 800b740:	4603      	mov	r3, r0
 800b742:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b744:	7bbb      	ldrb	r3, [r7, #14]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d130      	bne.n	800b7ac <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2201      	movs	r2, #1
 800b758:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	7919      	ldrb	r1, [r3, #4]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b76a:	687a      	ldr	r2, [r7, #4]
 800b76c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b76e:	b292      	uxth	r2, r2
 800b770:	9202      	str	r2, [sp, #8]
 800b772:	2200      	movs	r2, #0
 800b774:	9201      	str	r2, [sp, #4]
 800b776:	9300      	str	r3, [sp, #0]
 800b778:	4603      	mov	r3, r0
 800b77a:	2280      	movs	r2, #128	; 0x80
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f000 ff77 	bl	800c670 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	7959      	ldrb	r1, [r3, #5]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b796:	b292      	uxth	r2, r2
 800b798:	9202      	str	r2, [sp, #8]
 800b79a:	2200      	movs	r2, #0
 800b79c:	9201      	str	r2, [sp, #4]
 800b79e:	9300      	str	r3, [sp, #0]
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f000 ff63 	bl	800c670 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b7aa:	e175      	b.n	800ba98 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b7ac:	7bbb      	ldrb	r3, [r7, #14]
 800b7ae:	2b03      	cmp	r3, #3
 800b7b0:	f040 8172 	bne.w	800ba98 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	b2da      	uxtb	r2, r3
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b7ca:	2b03      	cmp	r3, #3
 800b7cc:	d903      	bls.n	800b7d6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	220d      	movs	r2, #13
 800b7d2:	701a      	strb	r2, [r3, #0]
      break;
 800b7d4:	e160      	b.n	800ba98 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	795b      	ldrb	r3, [r3, #5]
 800b7da:	4619      	mov	r1, r3
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 ff97 	bl	800c710 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	791b      	ldrb	r3, [r3, #4]
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 ff91 	bl	800c710 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	701a      	strb	r2, [r3, #0]
      break;
 800b7f4:	e150      	b.n	800ba98 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b7f6:	2112      	movs	r1, #18
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f000 f9f1 	bl	800bbe0 <USBH_Get_DevDesc>
 800b7fe:	4603      	mov	r3, r0
 800b800:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b802:	7bbb      	ldrb	r3, [r7, #14]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d103      	bne.n	800b810 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2202      	movs	r2, #2
 800b80c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b80e:	e145      	b.n	800ba9c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b810:	7bbb      	ldrb	r3, [r7, #14]
 800b812:	2b03      	cmp	r3, #3
 800b814:	f040 8142 	bne.w	800ba9c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b81e:	3301      	adds	r3, #1
 800b820:	b2da      	uxtb	r2, r3
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b82e:	2b03      	cmp	r3, #3
 800b830:	d903      	bls.n	800b83a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	220d      	movs	r2, #13
 800b836:	701a      	strb	r2, [r3, #0]
      break;
 800b838:	e130      	b.n	800ba9c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	795b      	ldrb	r3, [r3, #5]
 800b83e:	4619      	mov	r1, r3
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f000 ff65 	bl	800c710 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	791b      	ldrb	r3, [r3, #4]
 800b84a:	4619      	mov	r1, r3
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 ff5f 	bl	800c710 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2200      	movs	r2, #0
 800b856:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2200      	movs	r2, #0
 800b85c:	701a      	strb	r2, [r3, #0]
      break;
 800b85e:	e11d      	b.n	800ba9c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b860:	2101      	movs	r1, #1
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f000 fa68 	bl	800bd38 <USBH_SetAddress>
 800b868:	4603      	mov	r3, r0
 800b86a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b86c:	7bbb      	ldrb	r3, [r7, #14]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d132      	bne.n	800b8d8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b872:	2002      	movs	r0, #2
 800b874:	f003 fdf7 	bl	800f466 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2201      	movs	r2, #1
 800b87c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2203      	movs	r2, #3
 800b884:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	7919      	ldrb	r1, [r3, #4]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b89a:	b292      	uxth	r2, r2
 800b89c:	9202      	str	r2, [sp, #8]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	9201      	str	r2, [sp, #4]
 800b8a2:	9300      	str	r3, [sp, #0]
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	2280      	movs	r2, #128	; 0x80
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f000 fee1 	bl	800c670 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	7959      	ldrb	r1, [r3, #5]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b8c2:	b292      	uxth	r2, r2
 800b8c4:	9202      	str	r2, [sp, #8]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	9201      	str	r2, [sp, #4]
 800b8ca:	9300      	str	r3, [sp, #0]
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f000 fecd 	bl	800c670 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b8d6:	e0e3      	b.n	800baa0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b8d8:	7bbb      	ldrb	r3, [r7, #14]
 800b8da:	2b03      	cmp	r3, #3
 800b8dc:	f040 80e0 	bne.w	800baa0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	220d      	movs	r2, #13
 800b8e4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	705a      	strb	r2, [r3, #1]
      break;
 800b8ec:	e0d8      	b.n	800baa0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b8ee:	2109      	movs	r1, #9
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 f99d 	bl	800bc30 <USBH_Get_CfgDesc>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b8fa:	7bbb      	ldrb	r3, [r7, #14]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d103      	bne.n	800b908 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2204      	movs	r2, #4
 800b904:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b906:	e0cd      	b.n	800baa4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b908:	7bbb      	ldrb	r3, [r7, #14]
 800b90a:	2b03      	cmp	r3, #3
 800b90c:	f040 80ca 	bne.w	800baa4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b916:	3301      	adds	r3, #1
 800b918:	b2da      	uxtb	r2, r3
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b926:	2b03      	cmp	r3, #3
 800b928:	d903      	bls.n	800b932 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	220d      	movs	r2, #13
 800b92e:	701a      	strb	r2, [r3, #0]
      break;
 800b930:	e0b8      	b.n	800baa4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	795b      	ldrb	r3, [r3, #5]
 800b936:	4619      	mov	r1, r3
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f000 fee9 	bl	800c710 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	791b      	ldrb	r3, [r3, #4]
 800b942:	4619      	mov	r1, r3
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f000 fee3 	bl	800c710 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2200      	movs	r2, #0
 800b94e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2200      	movs	r2, #0
 800b954:	701a      	strb	r2, [r3, #0]
      break;
 800b956:	e0a5      	b.n	800baa4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b95e:	4619      	mov	r1, r3
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f000 f965 	bl	800bc30 <USBH_Get_CfgDesc>
 800b966:	4603      	mov	r3, r0
 800b968:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b96a:	7bbb      	ldrb	r3, [r7, #14]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d103      	bne.n	800b978 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2205      	movs	r2, #5
 800b974:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b976:	e097      	b.n	800baa8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b978:	7bbb      	ldrb	r3, [r7, #14]
 800b97a:	2b03      	cmp	r3, #3
 800b97c:	f040 8094 	bne.w	800baa8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b986:	3301      	adds	r3, #1
 800b988:	b2da      	uxtb	r2, r3
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b996:	2b03      	cmp	r3, #3
 800b998:	d903      	bls.n	800b9a2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	220d      	movs	r2, #13
 800b99e:	701a      	strb	r2, [r3, #0]
      break;
 800b9a0:	e082      	b.n	800baa8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	795b      	ldrb	r3, [r3, #5]
 800b9a6:	4619      	mov	r1, r3
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f000 feb1 	bl	800c710 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	791b      	ldrb	r3, [r3, #4]
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f000 feab 	bl	800c710 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	701a      	strb	r2, [r3, #0]
      break;
 800b9c6:	e06f      	b.n	800baa8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d019      	beq.n	800ba06 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b9de:	23ff      	movs	r3, #255	; 0xff
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f000 f949 	bl	800bc78 <USBH_Get_StringDesc>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b9ea:	7bbb      	ldrb	r3, [r7, #14]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d103      	bne.n	800b9f8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2206      	movs	r2, #6
 800b9f4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b9f6:	e059      	b.n	800baac <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b9f8:	7bbb      	ldrb	r3, [r7, #14]
 800b9fa:	2b03      	cmp	r3, #3
 800b9fc:	d156      	bne.n	800baac <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2206      	movs	r2, #6
 800ba02:	705a      	strb	r2, [r3, #1]
      break;
 800ba04:	e052      	b.n	800baac <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2206      	movs	r2, #6
 800ba0a:	705a      	strb	r2, [r3, #1]
      break;
 800ba0c:	e04e      	b.n	800baac <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d019      	beq.n	800ba4c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ba24:	23ff      	movs	r3, #255	; 0xff
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 f926 	bl	800bc78 <USBH_Get_StringDesc>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ba30:	7bbb      	ldrb	r3, [r7, #14]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d103      	bne.n	800ba3e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2207      	movs	r2, #7
 800ba3a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ba3c:	e038      	b.n	800bab0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ba3e:	7bbb      	ldrb	r3, [r7, #14]
 800ba40:	2b03      	cmp	r3, #3
 800ba42:	d135      	bne.n	800bab0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2207      	movs	r2, #7
 800ba48:	705a      	strb	r2, [r3, #1]
      break;
 800ba4a:	e031      	b.n	800bab0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2207      	movs	r2, #7
 800ba50:	705a      	strb	r2, [r3, #1]
      break;
 800ba52:	e02d      	b.n	800bab0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d017      	beq.n	800ba8e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ba6a:	23ff      	movs	r3, #255	; 0xff
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f000 f903 	bl	800bc78 <USBH_Get_StringDesc>
 800ba72:	4603      	mov	r3, r0
 800ba74:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ba76:	7bbb      	ldrb	r3, [r7, #14]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d102      	bne.n	800ba82 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ba80:	e018      	b.n	800bab4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ba82:	7bbb      	ldrb	r3, [r7, #14]
 800ba84:	2b03      	cmp	r3, #3
 800ba86:	d115      	bne.n	800bab4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	73fb      	strb	r3, [r7, #15]
      break;
 800ba8c:	e012      	b.n	800bab4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	73fb      	strb	r3, [r7, #15]
      break;
 800ba92:	e00f      	b.n	800bab4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800ba94:	bf00      	nop
 800ba96:	e00e      	b.n	800bab6 <USBH_HandleEnum+0x3be>
      break;
 800ba98:	bf00      	nop
 800ba9a:	e00c      	b.n	800bab6 <USBH_HandleEnum+0x3be>
      break;
 800ba9c:	bf00      	nop
 800ba9e:	e00a      	b.n	800bab6 <USBH_HandleEnum+0x3be>
      break;
 800baa0:	bf00      	nop
 800baa2:	e008      	b.n	800bab6 <USBH_HandleEnum+0x3be>
      break;
 800baa4:	bf00      	nop
 800baa6:	e006      	b.n	800bab6 <USBH_HandleEnum+0x3be>
      break;
 800baa8:	bf00      	nop
 800baaa:	e004      	b.n	800bab6 <USBH_HandleEnum+0x3be>
      break;
 800baac:	bf00      	nop
 800baae:	e002      	b.n	800bab6 <USBH_HandleEnum+0x3be>
      break;
 800bab0:	bf00      	nop
 800bab2:	e000      	b.n	800bab6 <USBH_HandleEnum+0x3be>
      break;
 800bab4:	bf00      	nop
  }
  return Status;
 800bab6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3710      	adds	r7, #16
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b083      	sub	sp, #12
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	683a      	ldr	r2, [r7, #0]
 800bace:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800bad2:	bf00      	nop
 800bad4:	370c      	adds	r7, #12
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr

0800bade <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800bade:	b580      	push	{r7, lr}
 800bae0:	b082      	sub	sp, #8
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800baec:	1c5a      	adds	r2, r3, #1
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f000 f804 	bl	800bb02 <USBH_HandleSof>
}
 800bafa:	bf00      	nop
 800bafc:	3708      	adds	r7, #8
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b082      	sub	sp, #8
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	2b0b      	cmp	r3, #11
 800bb12:	d10a      	bne.n	800bb2a <USBH_HandleSof+0x28>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d005      	beq.n	800bb2a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb24:	699b      	ldr	r3, [r3, #24]
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	4798      	blx	r3
  }
}
 800bb2a:	bf00      	nop
 800bb2c:	3708      	adds	r7, #8
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}

0800bb32 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800bb32:	b480      	push	{r7}
 800bb34:	b083      	sub	sp, #12
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2201      	movs	r2, #1
 800bb3e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800bb42:	bf00      	nop
}
 800bb44:	370c      	adds	r7, #12
 800bb46:	46bd      	mov	sp, r7
 800bb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4c:	4770      	bx	lr

0800bb4e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800bb4e:	b480      	push	{r7}
 800bb50:	b083      	sub	sp, #12
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800bb5e:	bf00      	nop
}
 800bb60:	370c      	adds	r7, #12
 800bb62:	46bd      	mov	sp, r7
 800bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb68:	4770      	bx	lr

0800bb6a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800bb6a:	b480      	push	{r7}
 800bb6c:	b083      	sub	sp, #12
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2201      	movs	r2, #1
 800bb76:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2200      	movs	r2, #0
 800bb86:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800bb8a:	2300      	movs	r3, #0
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	370c      	adds	r7, #12
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2201      	movs	r2, #1
 800bba4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f003 fae4 	bl	800f186 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	791b      	ldrb	r3, [r3, #4]
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f000 fda3 	bl	800c710 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	795b      	ldrb	r3, [r3, #5]
 800bbce:	4619      	mov	r1, r3
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 fd9d 	bl	800c710 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800bbd6:	2300      	movs	r3, #0
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3708      	adds	r7, #8
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}

0800bbe0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b086      	sub	sp, #24
 800bbe4:	af02      	add	r7, sp, #8
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	460b      	mov	r3, r1
 800bbea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800bbf2:	78fb      	ldrb	r3, [r7, #3]
 800bbf4:	b29b      	uxth	r3, r3
 800bbf6:	9300      	str	r3, [sp, #0]
 800bbf8:	4613      	mov	r3, r2
 800bbfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bbfe:	2100      	movs	r1, #0
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f000 f864 	bl	800bcce <USBH_GetDescriptor>
 800bc06:	4603      	mov	r3, r0
 800bc08:	73fb      	strb	r3, [r7, #15]
 800bc0a:	7bfb      	ldrb	r3, [r7, #15]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d10a      	bne.n	800bc26 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f203 3026 	addw	r0, r3, #806	; 0x326
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bc1c:	78fa      	ldrb	r2, [r7, #3]
 800bc1e:	b292      	uxth	r2, r2
 800bc20:	4619      	mov	r1, r3
 800bc22:	f000 f918 	bl	800be56 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800bc26:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3710      	adds	r7, #16
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b086      	sub	sp, #24
 800bc34:	af02      	add	r7, sp, #8
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	460b      	mov	r3, r1
 800bc3a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	331c      	adds	r3, #28
 800bc40:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800bc42:	887b      	ldrh	r3, [r7, #2]
 800bc44:	9300      	str	r3, [sp, #0]
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc4c:	2100      	movs	r1, #0
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f000 f83d 	bl	800bcce <USBH_GetDescriptor>
 800bc54:	4603      	mov	r3, r0
 800bc56:	72fb      	strb	r3, [r7, #11]
 800bc58:	7afb      	ldrb	r3, [r7, #11]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d107      	bne.n	800bc6e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bc64:	887a      	ldrh	r2, [r7, #2]
 800bc66:	68f9      	ldr	r1, [r7, #12]
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f000 f964 	bl	800bf36 <USBH_ParseCfgDesc>
  }

  return status;
 800bc6e:	7afb      	ldrb	r3, [r7, #11]
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3710      	adds	r7, #16
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b088      	sub	sp, #32
 800bc7c:	af02      	add	r7, sp, #8
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	607a      	str	r2, [r7, #4]
 800bc82:	461a      	mov	r2, r3
 800bc84:	460b      	mov	r3, r1
 800bc86:	72fb      	strb	r3, [r7, #11]
 800bc88:	4613      	mov	r3, r2
 800bc8a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800bc8c:	7afb      	ldrb	r3, [r7, #11]
 800bc8e:	b29b      	uxth	r3, r3
 800bc90:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800bc94:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800bc9c:	893b      	ldrh	r3, [r7, #8]
 800bc9e:	9300      	str	r3, [sp, #0]
 800bca0:	460b      	mov	r3, r1
 800bca2:	2100      	movs	r1, #0
 800bca4:	68f8      	ldr	r0, [r7, #12]
 800bca6:	f000 f812 	bl	800bcce <USBH_GetDescriptor>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	75fb      	strb	r3, [r7, #23]
 800bcae:	7dfb      	ldrb	r3, [r7, #23]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d107      	bne.n	800bcc4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bcba:	893a      	ldrh	r2, [r7, #8]
 800bcbc:	6879      	ldr	r1, [r7, #4]
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f000 fa37 	bl	800c132 <USBH_ParseStringDesc>
  }

  return status;
 800bcc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3718      	adds	r7, #24
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}

0800bcce <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800bcce:	b580      	push	{r7, lr}
 800bcd0:	b084      	sub	sp, #16
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	60f8      	str	r0, [r7, #12]
 800bcd6:	607b      	str	r3, [r7, #4]
 800bcd8:	460b      	mov	r3, r1
 800bcda:	72fb      	strb	r3, [r7, #11]
 800bcdc:	4613      	mov	r3, r2
 800bcde:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	789b      	ldrb	r3, [r3, #2]
 800bce4:	2b01      	cmp	r3, #1
 800bce6:	d11c      	bne.n	800bd22 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800bce8:	7afb      	ldrb	r3, [r7, #11]
 800bcea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bcee:	b2da      	uxtb	r2, r3
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2206      	movs	r2, #6
 800bcf8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	893a      	ldrh	r2, [r7, #8]
 800bcfe:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800bd00:	893b      	ldrh	r3, [r7, #8]
 800bd02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bd06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd0a:	d104      	bne.n	800bd16 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f240 4209 	movw	r2, #1033	; 0x409
 800bd12:	829a      	strh	r2, [r3, #20]
 800bd14:	e002      	b.n	800bd1c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	8b3a      	ldrh	r2, [r7, #24]
 800bd20:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800bd22:	8b3b      	ldrh	r3, [r7, #24]
 800bd24:	461a      	mov	r2, r3
 800bd26:	6879      	ldr	r1, [r7, #4]
 800bd28:	68f8      	ldr	r0, [r7, #12]
 800bd2a:	f000 fa50 	bl	800c1ce <USBH_CtlReq>
 800bd2e:	4603      	mov	r3, r0
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3710      	adds	r7, #16
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b082      	sub	sp, #8
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	460b      	mov	r3, r1
 800bd42:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	789b      	ldrb	r3, [r3, #2]
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	d10f      	bne.n	800bd6c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2205      	movs	r2, #5
 800bd56:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800bd58:	78fb      	ldrb	r3, [r7, #3]
 800bd5a:	b29a      	uxth	r2, r3
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2200      	movs	r2, #0
 800bd64:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	2100      	movs	r1, #0
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f000 fa2c 	bl	800c1ce <USBH_CtlReq>
 800bd76:	4603      	mov	r3, r0
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3708      	adds	r7, #8
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	460b      	mov	r3, r1
 800bd8a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	789b      	ldrb	r3, [r3, #2]
 800bd90:	2b01      	cmp	r3, #1
 800bd92:	d10e      	bne.n	800bdb2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2200      	movs	r2, #0
 800bd98:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2209      	movs	r2, #9
 800bd9e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	887a      	ldrh	r2, [r7, #2]
 800bda4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	2100      	movs	r1, #0
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 fa09 	bl	800c1ce <USBH_CtlReq>
 800bdbc:	4603      	mov	r3, r0
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3708      	adds	r7, #8
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}

0800bdc6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b082      	sub	sp, #8
 800bdca:	af00      	add	r7, sp, #0
 800bdcc:	6078      	str	r0, [r7, #4]
 800bdce:	460b      	mov	r3, r1
 800bdd0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	789b      	ldrb	r3, [r3, #2]
 800bdd6:	2b01      	cmp	r3, #1
 800bdd8:	d10f      	bne.n	800bdfa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2200      	movs	r2, #0
 800bdde:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2203      	movs	r2, #3
 800bde4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800bde6:	78fb      	ldrb	r3, [r7, #3]
 800bde8:	b29a      	uxth	r2, r3
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	2100      	movs	r1, #0
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f000 f9e5 	bl	800c1ce <USBH_CtlReq>
 800be04:	4603      	mov	r3, r0
}
 800be06:	4618      	mov	r0, r3
 800be08:	3708      	adds	r7, #8
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}

0800be0e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800be0e:	b580      	push	{r7, lr}
 800be10:	b082      	sub	sp, #8
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]
 800be16:	460b      	mov	r3, r1
 800be18:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	789b      	ldrb	r3, [r3, #2]
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d10f      	bne.n	800be42 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2202      	movs	r2, #2
 800be26:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2201      	movs	r2, #1
 800be2c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2200      	movs	r2, #0
 800be32:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800be34:	78fb      	ldrb	r3, [r7, #3]
 800be36:	b29a      	uxth	r2, r3
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2200      	movs	r2, #0
 800be40:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800be42:	2200      	movs	r2, #0
 800be44:	2100      	movs	r1, #0
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f000 f9c1 	bl	800c1ce <USBH_CtlReq>
 800be4c:	4603      	mov	r3, r0
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3708      	adds	r7, #8
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}

0800be56 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800be56:	b480      	push	{r7}
 800be58:	b085      	sub	sp, #20
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	60f8      	str	r0, [r7, #12]
 800be5e:	60b9      	str	r1, [r7, #8]
 800be60:	4613      	mov	r3, r2
 800be62:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	781a      	ldrb	r2, [r3, #0]
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	785a      	ldrb	r2, [r3, #1]
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	3302      	adds	r3, #2
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	b29a      	uxth	r2, r3
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	3303      	adds	r3, #3
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	b29b      	uxth	r3, r3
 800be84:	021b      	lsls	r3, r3, #8
 800be86:	b29b      	uxth	r3, r3
 800be88:	4313      	orrs	r3, r2
 800be8a:	b29a      	uxth	r2, r3
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	791a      	ldrb	r2, [r3, #4]
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	795a      	ldrb	r2, [r3, #5]
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	799a      	ldrb	r2, [r3, #6]
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	79da      	ldrb	r2, [r3, #7]
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800beb0:	88fb      	ldrh	r3, [r7, #6]
 800beb2:	2b08      	cmp	r3, #8
 800beb4:	d939      	bls.n	800bf2a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	3308      	adds	r3, #8
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	b29a      	uxth	r2, r3
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	3309      	adds	r3, #9
 800bec2:	781b      	ldrb	r3, [r3, #0]
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	021b      	lsls	r3, r3, #8
 800bec8:	b29b      	uxth	r3, r3
 800beca:	4313      	orrs	r3, r2
 800becc:	b29a      	uxth	r2, r3
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	330a      	adds	r3, #10
 800bed6:	781b      	ldrb	r3, [r3, #0]
 800bed8:	b29a      	uxth	r2, r3
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	330b      	adds	r3, #11
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	b29b      	uxth	r3, r3
 800bee2:	021b      	lsls	r3, r3, #8
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	4313      	orrs	r3, r2
 800bee8:	b29a      	uxth	r2, r3
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	330c      	adds	r3, #12
 800bef2:	781b      	ldrb	r3, [r3, #0]
 800bef4:	b29a      	uxth	r2, r3
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	330d      	adds	r3, #13
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	b29b      	uxth	r3, r3
 800befe:	021b      	lsls	r3, r3, #8
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	4313      	orrs	r3, r2
 800bf04:	b29a      	uxth	r2, r3
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	7b9a      	ldrb	r2, [r3, #14]
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	7bda      	ldrb	r2, [r3, #15]
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	7c1a      	ldrb	r2, [r3, #16]
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	7c5a      	ldrb	r2, [r3, #17]
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	745a      	strb	r2, [r3, #17]
  }
}
 800bf2a:	bf00      	nop
 800bf2c:	3714      	adds	r7, #20
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf34:	4770      	bx	lr

0800bf36 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800bf36:	b580      	push	{r7, lr}
 800bf38:	b08a      	sub	sp, #40	; 0x28
 800bf3a:	af00      	add	r7, sp, #0
 800bf3c:	60f8      	str	r0, [r7, #12]
 800bf3e:	60b9      	str	r1, [r7, #8]
 800bf40:	4613      	mov	r3, r2
 800bf42:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	781a      	ldrb	r2, [r3, #0]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	785a      	ldrb	r2, [r3, #1]
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	3302      	adds	r3, #2
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	b29a      	uxth	r2, r3
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	3303      	adds	r3, #3
 800bf74:	781b      	ldrb	r3, [r3, #0]
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	021b      	lsls	r3, r3, #8
 800bf7a:	b29b      	uxth	r3, r3
 800bf7c:	4313      	orrs	r3, r2
 800bf7e:	b29a      	uxth	r2, r3
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	791a      	ldrb	r2, [r3, #4]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	795a      	ldrb	r2, [r3, #5]
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	799a      	ldrb	r2, [r3, #6]
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	79da      	ldrb	r2, [r3, #7]
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	7a1a      	ldrb	r2, [r3, #8]
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bfac:	88fb      	ldrh	r3, [r7, #6]
 800bfae:	2b09      	cmp	r3, #9
 800bfb0:	d95f      	bls.n	800c072 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800bfb2:	2309      	movs	r3, #9
 800bfb4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bfba:	e051      	b.n	800c060 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bfbc:	f107 0316 	add.w	r3, r7, #22
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bfc4:	f000 f8e8 	bl	800c198 <USBH_GetNextDesc>
 800bfc8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800bfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfcc:	785b      	ldrb	r3, [r3, #1]
 800bfce:	2b04      	cmp	r3, #4
 800bfd0:	d146      	bne.n	800c060 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800bfd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bfd6:	221a      	movs	r2, #26
 800bfd8:	fb02 f303 	mul.w	r3, r2, r3
 800bfdc:	3308      	adds	r3, #8
 800bfde:	68fa      	ldr	r2, [r7, #12]
 800bfe0:	4413      	add	r3, r2
 800bfe2:	3302      	adds	r3, #2
 800bfe4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800bfe6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bfe8:	69f8      	ldr	r0, [r7, #28]
 800bfea:	f000 f846 	bl	800c07a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800bfee:	2300      	movs	r3, #0
 800bff0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800bff4:	2300      	movs	r3, #0
 800bff6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bff8:	e022      	b.n	800c040 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bffa:	f107 0316 	add.w	r3, r7, #22
 800bffe:	4619      	mov	r1, r3
 800c000:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c002:	f000 f8c9 	bl	800c198 <USBH_GetNextDesc>
 800c006:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800c008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c00a:	785b      	ldrb	r3, [r3, #1]
 800c00c:	2b05      	cmp	r3, #5
 800c00e:	d117      	bne.n	800c040 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c010:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c014:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800c018:	3201      	adds	r2, #1
 800c01a:	00d2      	lsls	r2, r2, #3
 800c01c:	211a      	movs	r1, #26
 800c01e:	fb01 f303 	mul.w	r3, r1, r3
 800c022:	4413      	add	r3, r2
 800c024:	3308      	adds	r3, #8
 800c026:	68fa      	ldr	r2, [r7, #12]
 800c028:	4413      	add	r3, r2
 800c02a:	3304      	adds	r3, #4
 800c02c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800c02e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c030:	69b8      	ldr	r0, [r7, #24]
 800c032:	f000 f851 	bl	800c0d8 <USBH_ParseEPDesc>
            ep_ix++;
 800c036:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c03a:	3301      	adds	r3, #1
 800c03c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c040:	69fb      	ldr	r3, [r7, #28]
 800c042:	791b      	ldrb	r3, [r3, #4]
 800c044:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800c048:	429a      	cmp	r2, r3
 800c04a:	d204      	bcs.n	800c056 <USBH_ParseCfgDesc+0x120>
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	885a      	ldrh	r2, [r3, #2]
 800c050:	8afb      	ldrh	r3, [r7, #22]
 800c052:	429a      	cmp	r2, r3
 800c054:	d8d1      	bhi.n	800bffa <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800c056:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c05a:	3301      	adds	r3, #1
 800c05c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c060:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c064:	2b01      	cmp	r3, #1
 800c066:	d804      	bhi.n	800c072 <USBH_ParseCfgDesc+0x13c>
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	885a      	ldrh	r2, [r3, #2]
 800c06c:	8afb      	ldrh	r3, [r7, #22]
 800c06e:	429a      	cmp	r2, r3
 800c070:	d8a4      	bhi.n	800bfbc <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800c072:	bf00      	nop
 800c074:	3728      	adds	r7, #40	; 0x28
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}

0800c07a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800c07a:	b480      	push	{r7}
 800c07c:	b083      	sub	sp, #12
 800c07e:	af00      	add	r7, sp, #0
 800c080:	6078      	str	r0, [r7, #4]
 800c082:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	781a      	ldrb	r2, [r3, #0]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	785a      	ldrb	r2, [r3, #1]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	789a      	ldrb	r2, [r3, #2]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	78da      	ldrb	r2, [r3, #3]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	791a      	ldrb	r2, [r3, #4]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	795a      	ldrb	r2, [r3, #5]
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	799a      	ldrb	r2, [r3, #6]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	79da      	ldrb	r2, [r3, #7]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	7a1a      	ldrb	r2, [r3, #8]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	721a      	strb	r2, [r3, #8]
}
 800c0cc:	bf00      	nop
 800c0ce:	370c      	adds	r7, #12
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr

0800c0d8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b083      	sub	sp, #12
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	781a      	ldrb	r2, [r3, #0]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	785a      	ldrb	r2, [r3, #1]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	789a      	ldrb	r2, [r3, #2]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	78da      	ldrb	r2, [r3, #3]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	3304      	adds	r3, #4
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	b29a      	uxth	r2, r3
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	3305      	adds	r3, #5
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	b29b      	uxth	r3, r3
 800c112:	021b      	lsls	r3, r3, #8
 800c114:	b29b      	uxth	r3, r3
 800c116:	4313      	orrs	r3, r2
 800c118:	b29a      	uxth	r2, r3
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	799a      	ldrb	r2, [r3, #6]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	719a      	strb	r2, [r3, #6]
}
 800c126:	bf00      	nop
 800c128:	370c      	adds	r7, #12
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr

0800c132 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c132:	b480      	push	{r7}
 800c134:	b087      	sub	sp, #28
 800c136:	af00      	add	r7, sp, #0
 800c138:	60f8      	str	r0, [r7, #12]
 800c13a:	60b9      	str	r1, [r7, #8]
 800c13c:	4613      	mov	r3, r2
 800c13e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	3301      	adds	r3, #1
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	2b03      	cmp	r3, #3
 800c148:	d120      	bne.n	800c18c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	781b      	ldrb	r3, [r3, #0]
 800c14e:	1e9a      	subs	r2, r3, #2
 800c150:	88fb      	ldrh	r3, [r7, #6]
 800c152:	4293      	cmp	r3, r2
 800c154:	bf28      	it	cs
 800c156:	4613      	movcs	r3, r2
 800c158:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	3302      	adds	r3, #2
 800c15e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c160:	2300      	movs	r3, #0
 800c162:	82fb      	strh	r3, [r7, #22]
 800c164:	e00b      	b.n	800c17e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c166:	8afb      	ldrh	r3, [r7, #22]
 800c168:	68fa      	ldr	r2, [r7, #12]
 800c16a:	4413      	add	r3, r2
 800c16c:	781a      	ldrb	r2, [r3, #0]
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	3301      	adds	r3, #1
 800c176:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c178:	8afb      	ldrh	r3, [r7, #22]
 800c17a:	3302      	adds	r3, #2
 800c17c:	82fb      	strh	r3, [r7, #22]
 800c17e:	8afa      	ldrh	r2, [r7, #22]
 800c180:	8abb      	ldrh	r3, [r7, #20]
 800c182:	429a      	cmp	r2, r3
 800c184:	d3ef      	bcc.n	800c166 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	2200      	movs	r2, #0
 800c18a:	701a      	strb	r2, [r3, #0]
  }
}
 800c18c:	bf00      	nop
 800c18e:	371c      	adds	r7, #28
 800c190:	46bd      	mov	sp, r7
 800c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c196:	4770      	bx	lr

0800c198 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800c198:	b480      	push	{r7}
 800c19a:	b085      	sub	sp, #20
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	881a      	ldrh	r2, [r3, #0]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	b29b      	uxth	r3, r3
 800c1ac:	4413      	add	r3, r2
 800c1ae:	b29a      	uxth	r2, r3
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	781b      	ldrb	r3, [r3, #0]
 800c1b8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	4413      	add	r3, r2
 800c1be:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3714      	adds	r7, #20
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr

0800c1ce <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c1ce:	b580      	push	{r7, lr}
 800c1d0:	b086      	sub	sp, #24
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	60f8      	str	r0, [r7, #12]
 800c1d6:	60b9      	str	r1, [r7, #8]
 800c1d8:	4613      	mov	r3, r2
 800c1da:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c1dc:	2301      	movs	r3, #1
 800c1de:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	789b      	ldrb	r3, [r3, #2]
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d002      	beq.n	800c1ee <USBH_CtlReq+0x20>
 800c1e8:	2b02      	cmp	r3, #2
 800c1ea:	d00f      	beq.n	800c20c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c1ec:	e027      	b.n	800c23e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	68ba      	ldr	r2, [r7, #8]
 800c1f2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	88fa      	ldrh	r2, [r7, #6]
 800c1f8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2201      	movs	r2, #1
 800c1fe:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2202      	movs	r2, #2
 800c204:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c206:	2301      	movs	r3, #1
 800c208:	75fb      	strb	r3, [r7, #23]
      break;
 800c20a:	e018      	b.n	800c23e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c20c:	68f8      	ldr	r0, [r7, #12]
 800c20e:	f000 f81b 	bl	800c248 <USBH_HandleControl>
 800c212:	4603      	mov	r3, r0
 800c214:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c216:	7dfb      	ldrb	r3, [r7, #23]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d002      	beq.n	800c222 <USBH_CtlReq+0x54>
 800c21c:	7dfb      	ldrb	r3, [r7, #23]
 800c21e:	2b03      	cmp	r3, #3
 800c220:	d106      	bne.n	800c230 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2201      	movs	r2, #1
 800c226:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2200      	movs	r2, #0
 800c22c:	761a      	strb	r2, [r3, #24]
      break;
 800c22e:	e005      	b.n	800c23c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c230:	7dfb      	ldrb	r3, [r7, #23]
 800c232:	2b02      	cmp	r3, #2
 800c234:	d102      	bne.n	800c23c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2201      	movs	r2, #1
 800c23a:	709a      	strb	r2, [r3, #2]
      break;
 800c23c:	bf00      	nop
  }
  return status;
 800c23e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c240:	4618      	mov	r0, r3
 800c242:	3718      	adds	r7, #24
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b086      	sub	sp, #24
 800c24c:	af02      	add	r7, sp, #8
 800c24e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c250:	2301      	movs	r3, #1
 800c252:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c254:	2300      	movs	r3, #0
 800c256:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	7e1b      	ldrb	r3, [r3, #24]
 800c25c:	3b01      	subs	r3, #1
 800c25e:	2b0a      	cmp	r3, #10
 800c260:	f200 8156 	bhi.w	800c510 <USBH_HandleControl+0x2c8>
 800c264:	a201      	add	r2, pc, #4	; (adr r2, 800c26c <USBH_HandleControl+0x24>)
 800c266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c26a:	bf00      	nop
 800c26c:	0800c299 	.word	0x0800c299
 800c270:	0800c2b3 	.word	0x0800c2b3
 800c274:	0800c31d 	.word	0x0800c31d
 800c278:	0800c343 	.word	0x0800c343
 800c27c:	0800c37b 	.word	0x0800c37b
 800c280:	0800c3a5 	.word	0x0800c3a5
 800c284:	0800c3f7 	.word	0x0800c3f7
 800c288:	0800c419 	.word	0x0800c419
 800c28c:	0800c455 	.word	0x0800c455
 800c290:	0800c47b 	.word	0x0800c47b
 800c294:	0800c4b9 	.word	0x0800c4b9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f103 0110 	add.w	r1, r3, #16
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	795b      	ldrb	r3, [r3, #5]
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f000 f943 	bl	800c530 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2202      	movs	r2, #2
 800c2ae:	761a      	strb	r2, [r3, #24]
      break;
 800c2b0:	e139      	b.n	800c526 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	795b      	ldrb	r3, [r3, #5]
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f003 f853 	bl	800f364 <USBH_LL_GetURBState>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c2c2:	7bbb      	ldrb	r3, [r7, #14]
 800c2c4:	2b01      	cmp	r3, #1
 800c2c6:	d11e      	bne.n	800c306 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	7c1b      	ldrb	r3, [r3, #16]
 800c2cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c2d0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	8adb      	ldrh	r3, [r3, #22]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d00a      	beq.n	800c2f0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c2da:	7b7b      	ldrb	r3, [r7, #13]
 800c2dc:	2b80      	cmp	r3, #128	; 0x80
 800c2de:	d103      	bne.n	800c2e8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2203      	movs	r2, #3
 800c2e4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c2e6:	e115      	b.n	800c514 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2205      	movs	r2, #5
 800c2ec:	761a      	strb	r2, [r3, #24]
      break;
 800c2ee:	e111      	b.n	800c514 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c2f0:	7b7b      	ldrb	r3, [r7, #13]
 800c2f2:	2b80      	cmp	r3, #128	; 0x80
 800c2f4:	d103      	bne.n	800c2fe <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2209      	movs	r2, #9
 800c2fa:	761a      	strb	r2, [r3, #24]
      break;
 800c2fc:	e10a      	b.n	800c514 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2207      	movs	r2, #7
 800c302:	761a      	strb	r2, [r3, #24]
      break;
 800c304:	e106      	b.n	800c514 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c306:	7bbb      	ldrb	r3, [r7, #14]
 800c308:	2b04      	cmp	r3, #4
 800c30a:	d003      	beq.n	800c314 <USBH_HandleControl+0xcc>
 800c30c:	7bbb      	ldrb	r3, [r7, #14]
 800c30e:	2b02      	cmp	r3, #2
 800c310:	f040 8100 	bne.w	800c514 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	220b      	movs	r2, #11
 800c318:	761a      	strb	r2, [r3, #24]
      break;
 800c31a:	e0fb      	b.n	800c514 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c322:	b29a      	uxth	r2, r3
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6899      	ldr	r1, [r3, #8]
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	899a      	ldrh	r2, [r3, #12]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	791b      	ldrb	r3, [r3, #4]
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f000 f93a 	bl	800c5ae <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2204      	movs	r2, #4
 800c33e:	761a      	strb	r2, [r3, #24]
      break;
 800c340:	e0f1      	b.n	800c526 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	791b      	ldrb	r3, [r3, #4]
 800c346:	4619      	mov	r1, r3
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f003 f80b 	bl	800f364 <USBH_LL_GetURBState>
 800c34e:	4603      	mov	r3, r0
 800c350:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c352:	7bbb      	ldrb	r3, [r7, #14]
 800c354:	2b01      	cmp	r3, #1
 800c356:	d102      	bne.n	800c35e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2209      	movs	r2, #9
 800c35c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c35e:	7bbb      	ldrb	r3, [r7, #14]
 800c360:	2b05      	cmp	r3, #5
 800c362:	d102      	bne.n	800c36a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c364:	2303      	movs	r3, #3
 800c366:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c368:	e0d6      	b.n	800c518 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800c36a:	7bbb      	ldrb	r3, [r7, #14]
 800c36c:	2b04      	cmp	r3, #4
 800c36e:	f040 80d3 	bne.w	800c518 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	220b      	movs	r2, #11
 800c376:	761a      	strb	r2, [r3, #24]
      break;
 800c378:	e0ce      	b.n	800c518 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6899      	ldr	r1, [r3, #8]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	899a      	ldrh	r2, [r3, #12]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	795b      	ldrb	r3, [r3, #5]
 800c386:	2001      	movs	r0, #1
 800c388:	9000      	str	r0, [sp, #0]
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f000 f8ea 	bl	800c564 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c396:	b29a      	uxth	r2, r3
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2206      	movs	r2, #6
 800c3a0:	761a      	strb	r2, [r3, #24]
      break;
 800c3a2:	e0c0      	b.n	800c526 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	795b      	ldrb	r3, [r3, #5]
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f002 ffda 	bl	800f364 <USBH_LL_GetURBState>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c3b4:	7bbb      	ldrb	r3, [r7, #14]
 800c3b6:	2b01      	cmp	r3, #1
 800c3b8:	d103      	bne.n	800c3c2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2207      	movs	r2, #7
 800c3be:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c3c0:	e0ac      	b.n	800c51c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800c3c2:	7bbb      	ldrb	r3, [r7, #14]
 800c3c4:	2b05      	cmp	r3, #5
 800c3c6:	d105      	bne.n	800c3d4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	220c      	movs	r2, #12
 800c3cc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c3ce:	2303      	movs	r3, #3
 800c3d0:	73fb      	strb	r3, [r7, #15]
      break;
 800c3d2:	e0a3      	b.n	800c51c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c3d4:	7bbb      	ldrb	r3, [r7, #14]
 800c3d6:	2b02      	cmp	r3, #2
 800c3d8:	d103      	bne.n	800c3e2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2205      	movs	r2, #5
 800c3de:	761a      	strb	r2, [r3, #24]
      break;
 800c3e0:	e09c      	b.n	800c51c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c3e2:	7bbb      	ldrb	r3, [r7, #14]
 800c3e4:	2b04      	cmp	r3, #4
 800c3e6:	f040 8099 	bne.w	800c51c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	220b      	movs	r2, #11
 800c3ee:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c3f0:	2302      	movs	r3, #2
 800c3f2:	73fb      	strb	r3, [r7, #15]
      break;
 800c3f4:	e092      	b.n	800c51c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	791b      	ldrb	r3, [r3, #4]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	2100      	movs	r1, #0
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f000 f8d5 	bl	800c5ae <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c40a:	b29a      	uxth	r2, r3
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2208      	movs	r2, #8
 800c414:	761a      	strb	r2, [r3, #24]

      break;
 800c416:	e086      	b.n	800c526 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	791b      	ldrb	r3, [r3, #4]
 800c41c:	4619      	mov	r1, r3
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f002 ffa0 	bl	800f364 <USBH_LL_GetURBState>
 800c424:	4603      	mov	r3, r0
 800c426:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c428:	7bbb      	ldrb	r3, [r7, #14]
 800c42a:	2b01      	cmp	r3, #1
 800c42c:	d105      	bne.n	800c43a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	220d      	movs	r2, #13
 800c432:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c434:	2300      	movs	r3, #0
 800c436:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c438:	e072      	b.n	800c520 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800c43a:	7bbb      	ldrb	r3, [r7, #14]
 800c43c:	2b04      	cmp	r3, #4
 800c43e:	d103      	bne.n	800c448 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	220b      	movs	r2, #11
 800c444:	761a      	strb	r2, [r3, #24]
      break;
 800c446:	e06b      	b.n	800c520 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800c448:	7bbb      	ldrb	r3, [r7, #14]
 800c44a:	2b05      	cmp	r3, #5
 800c44c:	d168      	bne.n	800c520 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800c44e:	2303      	movs	r3, #3
 800c450:	73fb      	strb	r3, [r7, #15]
      break;
 800c452:	e065      	b.n	800c520 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	795b      	ldrb	r3, [r3, #5]
 800c458:	2201      	movs	r2, #1
 800c45a:	9200      	str	r2, [sp, #0]
 800c45c:	2200      	movs	r2, #0
 800c45e:	2100      	movs	r1, #0
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f000 f87f 	bl	800c564 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c46c:	b29a      	uxth	r2, r3
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	220a      	movs	r2, #10
 800c476:	761a      	strb	r2, [r3, #24]
      break;
 800c478:	e055      	b.n	800c526 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	795b      	ldrb	r3, [r3, #5]
 800c47e:	4619      	mov	r1, r3
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f002 ff6f 	bl	800f364 <USBH_LL_GetURBState>
 800c486:	4603      	mov	r3, r0
 800c488:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c48a:	7bbb      	ldrb	r3, [r7, #14]
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	d105      	bne.n	800c49c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800c490:	2300      	movs	r3, #0
 800c492:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	220d      	movs	r2, #13
 800c498:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c49a:	e043      	b.n	800c524 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c49c:	7bbb      	ldrb	r3, [r7, #14]
 800c49e:	2b02      	cmp	r3, #2
 800c4a0:	d103      	bne.n	800c4aa <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2209      	movs	r2, #9
 800c4a6:	761a      	strb	r2, [r3, #24]
      break;
 800c4a8:	e03c      	b.n	800c524 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800c4aa:	7bbb      	ldrb	r3, [r7, #14]
 800c4ac:	2b04      	cmp	r3, #4
 800c4ae:	d139      	bne.n	800c524 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	220b      	movs	r2, #11
 800c4b4:	761a      	strb	r2, [r3, #24]
      break;
 800c4b6:	e035      	b.n	800c524 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	7e5b      	ldrb	r3, [r3, #25]
 800c4bc:	3301      	adds	r3, #1
 800c4be:	b2da      	uxtb	r2, r3
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	765a      	strb	r2, [r3, #25]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	7e5b      	ldrb	r3, [r3, #25]
 800c4c8:	2b02      	cmp	r3, #2
 800c4ca:	d806      	bhi.n	800c4da <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c4d8:	e025      	b.n	800c526 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c4e0:	2106      	movs	r1, #6
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	795b      	ldrb	r3, [r3, #5]
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 f90c 	bl	800c710 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	791b      	ldrb	r3, [r3, #4]
 800c4fc:	4619      	mov	r1, r3
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f000 f906 	bl	800c710 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2200      	movs	r2, #0
 800c508:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c50a:	2302      	movs	r3, #2
 800c50c:	73fb      	strb	r3, [r7, #15]
      break;
 800c50e:	e00a      	b.n	800c526 <USBH_HandleControl+0x2de>

    default:
      break;
 800c510:	bf00      	nop
 800c512:	e008      	b.n	800c526 <USBH_HandleControl+0x2de>
      break;
 800c514:	bf00      	nop
 800c516:	e006      	b.n	800c526 <USBH_HandleControl+0x2de>
      break;
 800c518:	bf00      	nop
 800c51a:	e004      	b.n	800c526 <USBH_HandleControl+0x2de>
      break;
 800c51c:	bf00      	nop
 800c51e:	e002      	b.n	800c526 <USBH_HandleControl+0x2de>
      break;
 800c520:	bf00      	nop
 800c522:	e000      	b.n	800c526 <USBH_HandleControl+0x2de>
      break;
 800c524:	bf00      	nop
  }

  return status;
 800c526:	7bfb      	ldrb	r3, [r7, #15]
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3710      	adds	r7, #16
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b088      	sub	sp, #32
 800c534:	af04      	add	r7, sp, #16
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	4613      	mov	r3, r2
 800c53c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c53e:	79f9      	ldrb	r1, [r7, #7]
 800c540:	2300      	movs	r3, #0
 800c542:	9303      	str	r3, [sp, #12]
 800c544:	2308      	movs	r3, #8
 800c546:	9302      	str	r3, [sp, #8]
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	9301      	str	r3, [sp, #4]
 800c54c:	2300      	movs	r3, #0
 800c54e:	9300      	str	r3, [sp, #0]
 800c550:	2300      	movs	r3, #0
 800c552:	2200      	movs	r2, #0
 800c554:	68f8      	ldr	r0, [r7, #12]
 800c556:	f002 fed4 	bl	800f302 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800c55a:	2300      	movs	r3, #0
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3710      	adds	r7, #16
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b088      	sub	sp, #32
 800c568:	af04      	add	r7, sp, #16
 800c56a:	60f8      	str	r0, [r7, #12]
 800c56c:	60b9      	str	r1, [r7, #8]
 800c56e:	4611      	mov	r1, r2
 800c570:	461a      	mov	r2, r3
 800c572:	460b      	mov	r3, r1
 800c574:	80fb      	strh	r3, [r7, #6]
 800c576:	4613      	mov	r3, r2
 800c578:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c580:	2b00      	cmp	r3, #0
 800c582:	d001      	beq.n	800c588 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c584:	2300      	movs	r3, #0
 800c586:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c588:	7979      	ldrb	r1, [r7, #5]
 800c58a:	7e3b      	ldrb	r3, [r7, #24]
 800c58c:	9303      	str	r3, [sp, #12]
 800c58e:	88fb      	ldrh	r3, [r7, #6]
 800c590:	9302      	str	r3, [sp, #8]
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	9301      	str	r3, [sp, #4]
 800c596:	2301      	movs	r3, #1
 800c598:	9300      	str	r3, [sp, #0]
 800c59a:	2300      	movs	r3, #0
 800c59c:	2200      	movs	r2, #0
 800c59e:	68f8      	ldr	r0, [r7, #12]
 800c5a0:	f002 feaf 	bl	800f302 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c5a4:	2300      	movs	r3, #0
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3710      	adds	r7, #16
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}

0800c5ae <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c5ae:	b580      	push	{r7, lr}
 800c5b0:	b088      	sub	sp, #32
 800c5b2:	af04      	add	r7, sp, #16
 800c5b4:	60f8      	str	r0, [r7, #12]
 800c5b6:	60b9      	str	r1, [r7, #8]
 800c5b8:	4611      	mov	r1, r2
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	460b      	mov	r3, r1
 800c5be:	80fb      	strh	r3, [r7, #6]
 800c5c0:	4613      	mov	r3, r2
 800c5c2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c5c4:	7979      	ldrb	r1, [r7, #5]
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	9303      	str	r3, [sp, #12]
 800c5ca:	88fb      	ldrh	r3, [r7, #6]
 800c5cc:	9302      	str	r3, [sp, #8]
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	9301      	str	r3, [sp, #4]
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	9300      	str	r3, [sp, #0]
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	2201      	movs	r2, #1
 800c5da:	68f8      	ldr	r0, [r7, #12]
 800c5dc:	f002 fe91 	bl	800f302 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c5e0:	2300      	movs	r3, #0

}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3710      	adds	r7, #16
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}

0800c5ea <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c5ea:	b580      	push	{r7, lr}
 800c5ec:	b088      	sub	sp, #32
 800c5ee:	af04      	add	r7, sp, #16
 800c5f0:	60f8      	str	r0, [r7, #12]
 800c5f2:	60b9      	str	r1, [r7, #8]
 800c5f4:	4611      	mov	r1, r2
 800c5f6:	461a      	mov	r2, r3
 800c5f8:	460b      	mov	r3, r1
 800c5fa:	80fb      	strh	r3, [r7, #6]
 800c5fc:	4613      	mov	r3, r2
 800c5fe:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c606:	2b00      	cmp	r3, #0
 800c608:	d001      	beq.n	800c60e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c60a:	2300      	movs	r3, #0
 800c60c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c60e:	7979      	ldrb	r1, [r7, #5]
 800c610:	7e3b      	ldrb	r3, [r7, #24]
 800c612:	9303      	str	r3, [sp, #12]
 800c614:	88fb      	ldrh	r3, [r7, #6]
 800c616:	9302      	str	r3, [sp, #8]
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	9301      	str	r3, [sp, #4]
 800c61c:	2301      	movs	r3, #1
 800c61e:	9300      	str	r3, [sp, #0]
 800c620:	2302      	movs	r3, #2
 800c622:	2200      	movs	r2, #0
 800c624:	68f8      	ldr	r0, [r7, #12]
 800c626:	f002 fe6c 	bl	800f302 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c62a:	2300      	movs	r3, #0
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3710      	adds	r7, #16
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b088      	sub	sp, #32
 800c638:	af04      	add	r7, sp, #16
 800c63a:	60f8      	str	r0, [r7, #12]
 800c63c:	60b9      	str	r1, [r7, #8]
 800c63e:	4611      	mov	r1, r2
 800c640:	461a      	mov	r2, r3
 800c642:	460b      	mov	r3, r1
 800c644:	80fb      	strh	r3, [r7, #6]
 800c646:	4613      	mov	r3, r2
 800c648:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c64a:	7979      	ldrb	r1, [r7, #5]
 800c64c:	2300      	movs	r3, #0
 800c64e:	9303      	str	r3, [sp, #12]
 800c650:	88fb      	ldrh	r3, [r7, #6]
 800c652:	9302      	str	r3, [sp, #8]
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	9301      	str	r3, [sp, #4]
 800c658:	2301      	movs	r3, #1
 800c65a:	9300      	str	r3, [sp, #0]
 800c65c:	2302      	movs	r3, #2
 800c65e:	2201      	movs	r2, #1
 800c660:	68f8      	ldr	r0, [r7, #12]
 800c662:	f002 fe4e 	bl	800f302 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c666:	2300      	movs	r3, #0
}
 800c668:	4618      	mov	r0, r3
 800c66a:	3710      	adds	r7, #16
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}

0800c670 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b086      	sub	sp, #24
 800c674:	af04      	add	r7, sp, #16
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	4608      	mov	r0, r1
 800c67a:	4611      	mov	r1, r2
 800c67c:	461a      	mov	r2, r3
 800c67e:	4603      	mov	r3, r0
 800c680:	70fb      	strb	r3, [r7, #3]
 800c682:	460b      	mov	r3, r1
 800c684:	70bb      	strb	r3, [r7, #2]
 800c686:	4613      	mov	r3, r2
 800c688:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c68a:	7878      	ldrb	r0, [r7, #1]
 800c68c:	78ba      	ldrb	r2, [r7, #2]
 800c68e:	78f9      	ldrb	r1, [r7, #3]
 800c690:	8b3b      	ldrh	r3, [r7, #24]
 800c692:	9302      	str	r3, [sp, #8]
 800c694:	7d3b      	ldrb	r3, [r7, #20]
 800c696:	9301      	str	r3, [sp, #4]
 800c698:	7c3b      	ldrb	r3, [r7, #16]
 800c69a:	9300      	str	r3, [sp, #0]
 800c69c:	4603      	mov	r3, r0
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f002 fde1 	bl	800f266 <USBH_LL_OpenPipe>

  return USBH_OK;
 800c6a4:	2300      	movs	r3, #0
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3708      	adds	r7, #8
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}

0800c6ae <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c6ae:	b580      	push	{r7, lr}
 800c6b0:	b082      	sub	sp, #8
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
 800c6b6:	460b      	mov	r3, r1
 800c6b8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800c6ba:	78fb      	ldrb	r3, [r7, #3]
 800c6bc:	4619      	mov	r1, r3
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f002 fe00 	bl	800f2c4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c6c4:	2300      	movs	r3, #0
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3708      	adds	r7, #8
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}

0800c6ce <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c6ce:	b580      	push	{r7, lr}
 800c6d0:	b084      	sub	sp, #16
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	6078      	str	r0, [r7, #4]
 800c6d6:	460b      	mov	r3, r1
 800c6d8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 f836 	bl	800c74c <USBH_GetFreePipe>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c6e4:	89fb      	ldrh	r3, [r7, #14]
 800c6e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d00a      	beq.n	800c704 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800c6ee:	78fa      	ldrb	r2, [r7, #3]
 800c6f0:	89fb      	ldrh	r3, [r7, #14]
 800c6f2:	f003 030f 	and.w	r3, r3, #15
 800c6f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c6fa:	6879      	ldr	r1, [r7, #4]
 800c6fc:	33e0      	adds	r3, #224	; 0xe0
 800c6fe:	009b      	lsls	r3, r3, #2
 800c700:	440b      	add	r3, r1
 800c702:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c704:	89fb      	ldrh	r3, [r7, #14]
 800c706:	b2db      	uxtb	r3, r3
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3710      	adds	r7, #16
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c710:	b480      	push	{r7}
 800c712:	b083      	sub	sp, #12
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
 800c718:	460b      	mov	r3, r1
 800c71a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800c71c:	78fb      	ldrb	r3, [r7, #3]
 800c71e:	2b0a      	cmp	r3, #10
 800c720:	d80d      	bhi.n	800c73e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c722:	78fb      	ldrb	r3, [r7, #3]
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	33e0      	adds	r3, #224	; 0xe0
 800c728:	009b      	lsls	r3, r3, #2
 800c72a:	4413      	add	r3, r2
 800c72c:	685a      	ldr	r2, [r3, #4]
 800c72e:	78fb      	ldrb	r3, [r7, #3]
 800c730:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c734:	6879      	ldr	r1, [r7, #4]
 800c736:	33e0      	adds	r3, #224	; 0xe0
 800c738:	009b      	lsls	r3, r3, #2
 800c73a:	440b      	add	r3, r1
 800c73c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c73e:	2300      	movs	r3, #0
}
 800c740:	4618      	mov	r0, r3
 800c742:	370c      	adds	r7, #12
 800c744:	46bd      	mov	sp, r7
 800c746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74a:	4770      	bx	lr

0800c74c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c74c:	b480      	push	{r7}
 800c74e:	b085      	sub	sp, #20
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c754:	2300      	movs	r3, #0
 800c756:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800c758:	2300      	movs	r3, #0
 800c75a:	73fb      	strb	r3, [r7, #15]
 800c75c:	e00f      	b.n	800c77e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c75e:	7bfb      	ldrb	r3, [r7, #15]
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	33e0      	adds	r3, #224	; 0xe0
 800c764:	009b      	lsls	r3, r3, #2
 800c766:	4413      	add	r3, r2
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d102      	bne.n	800c778 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c772:	7bfb      	ldrb	r3, [r7, #15]
 800c774:	b29b      	uxth	r3, r3
 800c776:	e007      	b.n	800c788 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800c778:	7bfb      	ldrb	r3, [r7, #15]
 800c77a:	3301      	adds	r3, #1
 800c77c:	73fb      	strb	r3, [r7, #15]
 800c77e:	7bfb      	ldrb	r3, [r7, #15]
 800c780:	2b0a      	cmp	r3, #10
 800c782:	d9ec      	bls.n	800c75e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c784:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3714      	adds	r7, #20
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr

0800c794 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b084      	sub	sp, #16
 800c798:	af00      	add	r7, sp, #0
 800c79a:	4603      	mov	r3, r0
 800c79c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c79e:	79fb      	ldrb	r3, [r7, #7]
 800c7a0:	4a08      	ldr	r2, [pc, #32]	; (800c7c4 <disk_status+0x30>)
 800c7a2:	009b      	lsls	r3, r3, #2
 800c7a4:	4413      	add	r3, r2
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	79fa      	ldrb	r2, [r7, #7]
 800c7ac:	4905      	ldr	r1, [pc, #20]	; (800c7c4 <disk_status+0x30>)
 800c7ae:	440a      	add	r2, r1
 800c7b0:	7a12      	ldrb	r2, [r2, #8]
 800c7b2:	4610      	mov	r0, r2
 800c7b4:	4798      	blx	r3
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c7ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3710      	adds	r7, #16
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}
 800c7c4:	20001398 	.word	0x20001398

0800c7c8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c7d6:	79fb      	ldrb	r3, [r7, #7]
 800c7d8:	4a0d      	ldr	r2, [pc, #52]	; (800c810 <disk_initialize+0x48>)
 800c7da:	5cd3      	ldrb	r3, [r2, r3]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d111      	bne.n	800c804 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c7e0:	79fb      	ldrb	r3, [r7, #7]
 800c7e2:	4a0b      	ldr	r2, [pc, #44]	; (800c810 <disk_initialize+0x48>)
 800c7e4:	2101      	movs	r1, #1
 800c7e6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c7e8:	79fb      	ldrb	r3, [r7, #7]
 800c7ea:	4a09      	ldr	r2, [pc, #36]	; (800c810 <disk_initialize+0x48>)
 800c7ec:	009b      	lsls	r3, r3, #2
 800c7ee:	4413      	add	r3, r2
 800c7f0:	685b      	ldr	r3, [r3, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	79fa      	ldrb	r2, [r7, #7]
 800c7f6:	4906      	ldr	r1, [pc, #24]	; (800c810 <disk_initialize+0x48>)
 800c7f8:	440a      	add	r2, r1
 800c7fa:	7a12      	ldrb	r2, [r2, #8]
 800c7fc:	4610      	mov	r0, r2
 800c7fe:	4798      	blx	r3
 800c800:	4603      	mov	r3, r0
 800c802:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c804:	7bfb      	ldrb	r3, [r7, #15]
}
 800c806:	4618      	mov	r0, r3
 800c808:	3710      	adds	r7, #16
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	20001398 	.word	0x20001398

0800c814 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c814:	b590      	push	{r4, r7, lr}
 800c816:	b087      	sub	sp, #28
 800c818:	af00      	add	r7, sp, #0
 800c81a:	60b9      	str	r1, [r7, #8]
 800c81c:	607a      	str	r2, [r7, #4]
 800c81e:	603b      	str	r3, [r7, #0]
 800c820:	4603      	mov	r3, r0
 800c822:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c824:	7bfb      	ldrb	r3, [r7, #15]
 800c826:	4a0a      	ldr	r2, [pc, #40]	; (800c850 <disk_read+0x3c>)
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	4413      	add	r3, r2
 800c82c:	685b      	ldr	r3, [r3, #4]
 800c82e:	689c      	ldr	r4, [r3, #8]
 800c830:	7bfb      	ldrb	r3, [r7, #15]
 800c832:	4a07      	ldr	r2, [pc, #28]	; (800c850 <disk_read+0x3c>)
 800c834:	4413      	add	r3, r2
 800c836:	7a18      	ldrb	r0, [r3, #8]
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	687a      	ldr	r2, [r7, #4]
 800c83c:	68b9      	ldr	r1, [r7, #8]
 800c83e:	47a0      	blx	r4
 800c840:	4603      	mov	r3, r0
 800c842:	75fb      	strb	r3, [r7, #23]
  return res;
 800c844:	7dfb      	ldrb	r3, [r7, #23]
}
 800c846:	4618      	mov	r0, r3
 800c848:	371c      	adds	r7, #28
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd90      	pop	{r4, r7, pc}
 800c84e:	bf00      	nop
 800c850:	20001398 	.word	0x20001398

0800c854 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c854:	b590      	push	{r4, r7, lr}
 800c856:	b087      	sub	sp, #28
 800c858:	af00      	add	r7, sp, #0
 800c85a:	60b9      	str	r1, [r7, #8]
 800c85c:	607a      	str	r2, [r7, #4]
 800c85e:	603b      	str	r3, [r7, #0]
 800c860:	4603      	mov	r3, r0
 800c862:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c864:	7bfb      	ldrb	r3, [r7, #15]
 800c866:	4a0a      	ldr	r2, [pc, #40]	; (800c890 <disk_write+0x3c>)
 800c868:	009b      	lsls	r3, r3, #2
 800c86a:	4413      	add	r3, r2
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	68dc      	ldr	r4, [r3, #12]
 800c870:	7bfb      	ldrb	r3, [r7, #15]
 800c872:	4a07      	ldr	r2, [pc, #28]	; (800c890 <disk_write+0x3c>)
 800c874:	4413      	add	r3, r2
 800c876:	7a18      	ldrb	r0, [r3, #8]
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	68b9      	ldr	r1, [r7, #8]
 800c87e:	47a0      	blx	r4
 800c880:	4603      	mov	r3, r0
 800c882:	75fb      	strb	r3, [r7, #23]
  return res;
 800c884:	7dfb      	ldrb	r3, [r7, #23]
}
 800c886:	4618      	mov	r0, r3
 800c888:	371c      	adds	r7, #28
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd90      	pop	{r4, r7, pc}
 800c88e:	bf00      	nop
 800c890:	20001398 	.word	0x20001398

0800c894 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b084      	sub	sp, #16
 800c898:	af00      	add	r7, sp, #0
 800c89a:	4603      	mov	r3, r0
 800c89c:	603a      	str	r2, [r7, #0]
 800c89e:	71fb      	strb	r3, [r7, #7]
 800c8a0:	460b      	mov	r3, r1
 800c8a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c8a4:	79fb      	ldrb	r3, [r7, #7]
 800c8a6:	4a09      	ldr	r2, [pc, #36]	; (800c8cc <disk_ioctl+0x38>)
 800c8a8:	009b      	lsls	r3, r3, #2
 800c8aa:	4413      	add	r3, r2
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	691b      	ldr	r3, [r3, #16]
 800c8b0:	79fa      	ldrb	r2, [r7, #7]
 800c8b2:	4906      	ldr	r1, [pc, #24]	; (800c8cc <disk_ioctl+0x38>)
 800c8b4:	440a      	add	r2, r1
 800c8b6:	7a10      	ldrb	r0, [r2, #8]
 800c8b8:	79b9      	ldrb	r1, [r7, #6]
 800c8ba:	683a      	ldr	r2, [r7, #0]
 800c8bc:	4798      	blx	r3
 800c8be:	4603      	mov	r3, r0
 800c8c0:	73fb      	strb	r3, [r7, #15]
  return res;
 800c8c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3710      	adds	r7, #16
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}
 800c8cc:	20001398 	.word	0x20001398

0800c8d0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b085      	sub	sp, #20
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	3301      	adds	r3, #1
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c8e0:	89fb      	ldrh	r3, [r7, #14]
 800c8e2:	021b      	lsls	r3, r3, #8
 800c8e4:	b21a      	sxth	r2, r3
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	b21b      	sxth	r3, r3
 800c8ec:	4313      	orrs	r3, r2
 800c8ee:	b21b      	sxth	r3, r3
 800c8f0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c8f2:	89fb      	ldrh	r3, [r7, #14]
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3714      	adds	r7, #20
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fe:	4770      	bx	lr

0800c900 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c900:	b480      	push	{r7}
 800c902:	b085      	sub	sp, #20
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	3303      	adds	r3, #3
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	021b      	lsls	r3, r3, #8
 800c914:	687a      	ldr	r2, [r7, #4]
 800c916:	3202      	adds	r2, #2
 800c918:	7812      	ldrb	r2, [r2, #0]
 800c91a:	4313      	orrs	r3, r2
 800c91c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	021b      	lsls	r3, r3, #8
 800c922:	687a      	ldr	r2, [r7, #4]
 800c924:	3201      	adds	r2, #1
 800c926:	7812      	ldrb	r2, [r2, #0]
 800c928:	4313      	orrs	r3, r2
 800c92a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	021b      	lsls	r3, r3, #8
 800c930:	687a      	ldr	r2, [r7, #4]
 800c932:	7812      	ldrb	r2, [r2, #0]
 800c934:	4313      	orrs	r3, r2
 800c936:	60fb      	str	r3, [r7, #12]
	return rv;
 800c938:	68fb      	ldr	r3, [r7, #12]
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	3714      	adds	r7, #20
 800c93e:	46bd      	mov	sp, r7
 800c940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c944:	4770      	bx	lr

0800c946 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c946:	b480      	push	{r7}
 800c948:	b083      	sub	sp, #12
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	6078      	str	r0, [r7, #4]
 800c94e:	460b      	mov	r3, r1
 800c950:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	1c5a      	adds	r2, r3, #1
 800c956:	607a      	str	r2, [r7, #4]
 800c958:	887a      	ldrh	r2, [r7, #2]
 800c95a:	b2d2      	uxtb	r2, r2
 800c95c:	701a      	strb	r2, [r3, #0]
 800c95e:	887b      	ldrh	r3, [r7, #2]
 800c960:	0a1b      	lsrs	r3, r3, #8
 800c962:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	1c5a      	adds	r2, r3, #1
 800c968:	607a      	str	r2, [r7, #4]
 800c96a:	887a      	ldrh	r2, [r7, #2]
 800c96c:	b2d2      	uxtb	r2, r2
 800c96e:	701a      	strb	r2, [r3, #0]
}
 800c970:	bf00      	nop
 800c972:	370c      	adds	r7, #12
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr

0800c97c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c97c:	b480      	push	{r7}
 800c97e:	b083      	sub	sp, #12
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	1c5a      	adds	r2, r3, #1
 800c98a:	607a      	str	r2, [r7, #4]
 800c98c:	683a      	ldr	r2, [r7, #0]
 800c98e:	b2d2      	uxtb	r2, r2
 800c990:	701a      	strb	r2, [r3, #0]
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	0a1b      	lsrs	r3, r3, #8
 800c996:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	1c5a      	adds	r2, r3, #1
 800c99c:	607a      	str	r2, [r7, #4]
 800c99e:	683a      	ldr	r2, [r7, #0]
 800c9a0:	b2d2      	uxtb	r2, r2
 800c9a2:	701a      	strb	r2, [r3, #0]
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	0a1b      	lsrs	r3, r3, #8
 800c9a8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	1c5a      	adds	r2, r3, #1
 800c9ae:	607a      	str	r2, [r7, #4]
 800c9b0:	683a      	ldr	r2, [r7, #0]
 800c9b2:	b2d2      	uxtb	r2, r2
 800c9b4:	701a      	strb	r2, [r3, #0]
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	0a1b      	lsrs	r3, r3, #8
 800c9ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	1c5a      	adds	r2, r3, #1
 800c9c0:	607a      	str	r2, [r7, #4]
 800c9c2:	683a      	ldr	r2, [r7, #0]
 800c9c4:	b2d2      	uxtb	r2, r2
 800c9c6:	701a      	strb	r2, [r3, #0]
}
 800c9c8:	bf00      	nop
 800c9ca:	370c      	adds	r7, #12
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d2:	4770      	bx	lr

0800c9d4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c9d4:	b480      	push	{r7}
 800c9d6:	b087      	sub	sp, #28
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	60f8      	str	r0, [r7, #12]
 800c9dc:	60b9      	str	r1, [r7, #8]
 800c9de:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d00d      	beq.n	800ca0a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c9ee:	693a      	ldr	r2, [r7, #16]
 800c9f0:	1c53      	adds	r3, r2, #1
 800c9f2:	613b      	str	r3, [r7, #16]
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	1c59      	adds	r1, r3, #1
 800c9f8:	6179      	str	r1, [r7, #20]
 800c9fa:	7812      	ldrb	r2, [r2, #0]
 800c9fc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	3b01      	subs	r3, #1
 800ca02:	607b      	str	r3, [r7, #4]
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d1f1      	bne.n	800c9ee <mem_cpy+0x1a>
	}
}
 800ca0a:	bf00      	nop
 800ca0c:	371c      	adds	r7, #28
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca14:	4770      	bx	lr

0800ca16 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ca16:	b480      	push	{r7}
 800ca18:	b087      	sub	sp, #28
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	60f8      	str	r0, [r7, #12]
 800ca1e:	60b9      	str	r1, [r7, #8]
 800ca20:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	1c5a      	adds	r2, r3, #1
 800ca2a:	617a      	str	r2, [r7, #20]
 800ca2c:	68ba      	ldr	r2, [r7, #8]
 800ca2e:	b2d2      	uxtb	r2, r2
 800ca30:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	3b01      	subs	r3, #1
 800ca36:	607b      	str	r3, [r7, #4]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d1f3      	bne.n	800ca26 <mem_set+0x10>
}
 800ca3e:	bf00      	nop
 800ca40:	bf00      	nop
 800ca42:	371c      	adds	r7, #28
 800ca44:	46bd      	mov	sp, r7
 800ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4a:	4770      	bx	lr

0800ca4c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ca4c:	b480      	push	{r7}
 800ca4e:	b089      	sub	sp, #36	; 0x24
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	60f8      	str	r0, [r7, #12]
 800ca54:	60b9      	str	r1, [r7, #8]
 800ca56:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	61fb      	str	r3, [r7, #28]
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ca60:	2300      	movs	r3, #0
 800ca62:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ca64:	69fb      	ldr	r3, [r7, #28]
 800ca66:	1c5a      	adds	r2, r3, #1
 800ca68:	61fa      	str	r2, [r7, #28]
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	4619      	mov	r1, r3
 800ca6e:	69bb      	ldr	r3, [r7, #24]
 800ca70:	1c5a      	adds	r2, r3, #1
 800ca72:	61ba      	str	r2, [r7, #24]
 800ca74:	781b      	ldrb	r3, [r3, #0]
 800ca76:	1acb      	subs	r3, r1, r3
 800ca78:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	3b01      	subs	r3, #1
 800ca7e:	607b      	str	r3, [r7, #4]
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d002      	beq.n	800ca8c <mem_cmp+0x40>
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d0eb      	beq.n	800ca64 <mem_cmp+0x18>

	return r;
 800ca8c:	697b      	ldr	r3, [r7, #20]
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3724      	adds	r7, #36	; 0x24
 800ca92:	46bd      	mov	sp, r7
 800ca94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca98:	4770      	bx	lr

0800ca9a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ca9a:	b480      	push	{r7}
 800ca9c:	b083      	sub	sp, #12
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	6078      	str	r0, [r7, #4]
 800caa2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800caa4:	e002      	b.n	800caac <chk_chr+0x12>
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	3301      	adds	r3, #1
 800caaa:	607b      	str	r3, [r7, #4]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d005      	beq.n	800cac0 <chk_chr+0x26>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	461a      	mov	r2, r3
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d1f2      	bne.n	800caa6 <chk_chr+0xc>
	return *str;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	781b      	ldrb	r3, [r3, #0]
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	370c      	adds	r7, #12
 800cac8:	46bd      	mov	sp, r7
 800caca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cace:	4770      	bx	lr

0800cad0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cad0:	b480      	push	{r7}
 800cad2:	b085      	sub	sp, #20
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cada:	2300      	movs	r3, #0
 800cadc:	60bb      	str	r3, [r7, #8]
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	60fb      	str	r3, [r7, #12]
 800cae2:	e029      	b.n	800cb38 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cae4:	4a27      	ldr	r2, [pc, #156]	; (800cb84 <chk_lock+0xb4>)
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	011b      	lsls	r3, r3, #4
 800caea:	4413      	add	r3, r2
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d01d      	beq.n	800cb2e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800caf2:	4a24      	ldr	r2, [pc, #144]	; (800cb84 <chk_lock+0xb4>)
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	011b      	lsls	r3, r3, #4
 800caf8:	4413      	add	r3, r2
 800cafa:	681a      	ldr	r2, [r3, #0]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d116      	bne.n	800cb32 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cb04:	4a1f      	ldr	r2, [pc, #124]	; (800cb84 <chk_lock+0xb4>)
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	011b      	lsls	r3, r3, #4
 800cb0a:	4413      	add	r3, r2
 800cb0c:	3304      	adds	r3, #4
 800cb0e:	681a      	ldr	r2, [r3, #0]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d10c      	bne.n	800cb32 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cb18:	4a1a      	ldr	r2, [pc, #104]	; (800cb84 <chk_lock+0xb4>)
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	011b      	lsls	r3, r3, #4
 800cb1e:	4413      	add	r3, r2
 800cb20:	3308      	adds	r3, #8
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d102      	bne.n	800cb32 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cb2c:	e007      	b.n	800cb3e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800cb2e:	2301      	movs	r3, #1
 800cb30:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	3301      	adds	r3, #1
 800cb36:	60fb      	str	r3, [r7, #12]
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	2b01      	cmp	r3, #1
 800cb3c:	d9d2      	bls.n	800cae4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	2b02      	cmp	r3, #2
 800cb42:	d109      	bne.n	800cb58 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d102      	bne.n	800cb50 <chk_lock+0x80>
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	2b02      	cmp	r3, #2
 800cb4e:	d101      	bne.n	800cb54 <chk_lock+0x84>
 800cb50:	2300      	movs	r3, #0
 800cb52:	e010      	b.n	800cb76 <chk_lock+0xa6>
 800cb54:	2312      	movs	r3, #18
 800cb56:	e00e      	b.n	800cb76 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d108      	bne.n	800cb70 <chk_lock+0xa0>
 800cb5e:	4a09      	ldr	r2, [pc, #36]	; (800cb84 <chk_lock+0xb4>)
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	011b      	lsls	r3, r3, #4
 800cb64:	4413      	add	r3, r2
 800cb66:	330c      	adds	r3, #12
 800cb68:	881b      	ldrh	r3, [r3, #0]
 800cb6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb6e:	d101      	bne.n	800cb74 <chk_lock+0xa4>
 800cb70:	2310      	movs	r3, #16
 800cb72:	e000      	b.n	800cb76 <chk_lock+0xa6>
 800cb74:	2300      	movs	r3, #0
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3714      	adds	r7, #20
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb80:	4770      	bx	lr
 800cb82:	bf00      	nop
 800cb84:	20001378 	.word	0x20001378

0800cb88 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b083      	sub	sp, #12
 800cb8c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	607b      	str	r3, [r7, #4]
 800cb92:	e002      	b.n	800cb9a <enq_lock+0x12>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	3301      	adds	r3, #1
 800cb98:	607b      	str	r3, [r7, #4]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2b01      	cmp	r3, #1
 800cb9e:	d806      	bhi.n	800cbae <enq_lock+0x26>
 800cba0:	4a09      	ldr	r2, [pc, #36]	; (800cbc8 <enq_lock+0x40>)
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	011b      	lsls	r3, r3, #4
 800cba6:	4413      	add	r3, r2
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d1f2      	bne.n	800cb94 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2b02      	cmp	r3, #2
 800cbb2:	bf14      	ite	ne
 800cbb4:	2301      	movne	r3, #1
 800cbb6:	2300      	moveq	r3, #0
 800cbb8:	b2db      	uxtb	r3, r3
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	370c      	adds	r7, #12
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc4:	4770      	bx	lr
 800cbc6:	bf00      	nop
 800cbc8:	20001378 	.word	0x20001378

0800cbcc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b085      	sub	sp, #20
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	60fb      	str	r3, [r7, #12]
 800cbda:	e01f      	b.n	800cc1c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800cbdc:	4a41      	ldr	r2, [pc, #260]	; (800cce4 <inc_lock+0x118>)
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	011b      	lsls	r3, r3, #4
 800cbe2:	4413      	add	r3, r2
 800cbe4:	681a      	ldr	r2, [r3, #0]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d113      	bne.n	800cc16 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cbee:	4a3d      	ldr	r2, [pc, #244]	; (800cce4 <inc_lock+0x118>)
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	011b      	lsls	r3, r3, #4
 800cbf4:	4413      	add	r3, r2
 800cbf6:	3304      	adds	r3, #4
 800cbf8:	681a      	ldr	r2, [r3, #0]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d109      	bne.n	800cc16 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800cc02:	4a38      	ldr	r2, [pc, #224]	; (800cce4 <inc_lock+0x118>)
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	011b      	lsls	r3, r3, #4
 800cc08:	4413      	add	r3, r2
 800cc0a:	3308      	adds	r3, #8
 800cc0c:	681a      	ldr	r2, [r3, #0]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d006      	beq.n	800cc24 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	3301      	adds	r3, #1
 800cc1a:	60fb      	str	r3, [r7, #12]
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	2b01      	cmp	r3, #1
 800cc20:	d9dc      	bls.n	800cbdc <inc_lock+0x10>
 800cc22:	e000      	b.n	800cc26 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800cc24:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	2b02      	cmp	r3, #2
 800cc2a:	d132      	bne.n	800cc92 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	60fb      	str	r3, [r7, #12]
 800cc30:	e002      	b.n	800cc38 <inc_lock+0x6c>
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	3301      	adds	r3, #1
 800cc36:	60fb      	str	r3, [r7, #12]
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2b01      	cmp	r3, #1
 800cc3c:	d806      	bhi.n	800cc4c <inc_lock+0x80>
 800cc3e:	4a29      	ldr	r2, [pc, #164]	; (800cce4 <inc_lock+0x118>)
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	011b      	lsls	r3, r3, #4
 800cc44:	4413      	add	r3, r2
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d1f2      	bne.n	800cc32 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2b02      	cmp	r3, #2
 800cc50:	d101      	bne.n	800cc56 <inc_lock+0x8a>
 800cc52:	2300      	movs	r3, #0
 800cc54:	e040      	b.n	800ccd8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681a      	ldr	r2, [r3, #0]
 800cc5a:	4922      	ldr	r1, [pc, #136]	; (800cce4 <inc_lock+0x118>)
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	011b      	lsls	r3, r3, #4
 800cc60:	440b      	add	r3, r1
 800cc62:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	689a      	ldr	r2, [r3, #8]
 800cc68:	491e      	ldr	r1, [pc, #120]	; (800cce4 <inc_lock+0x118>)
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	011b      	lsls	r3, r3, #4
 800cc6e:	440b      	add	r3, r1
 800cc70:	3304      	adds	r3, #4
 800cc72:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	695a      	ldr	r2, [r3, #20]
 800cc78:	491a      	ldr	r1, [pc, #104]	; (800cce4 <inc_lock+0x118>)
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	011b      	lsls	r3, r3, #4
 800cc7e:	440b      	add	r3, r1
 800cc80:	3308      	adds	r3, #8
 800cc82:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cc84:	4a17      	ldr	r2, [pc, #92]	; (800cce4 <inc_lock+0x118>)
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	011b      	lsls	r3, r3, #4
 800cc8a:	4413      	add	r3, r2
 800cc8c:	330c      	adds	r3, #12
 800cc8e:	2200      	movs	r2, #0
 800cc90:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d009      	beq.n	800ccac <inc_lock+0xe0>
 800cc98:	4a12      	ldr	r2, [pc, #72]	; (800cce4 <inc_lock+0x118>)
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	011b      	lsls	r3, r3, #4
 800cc9e:	4413      	add	r3, r2
 800cca0:	330c      	adds	r3, #12
 800cca2:	881b      	ldrh	r3, [r3, #0]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d001      	beq.n	800ccac <inc_lock+0xe0>
 800cca8:	2300      	movs	r3, #0
 800ccaa:	e015      	b.n	800ccd8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d108      	bne.n	800ccc4 <inc_lock+0xf8>
 800ccb2:	4a0c      	ldr	r2, [pc, #48]	; (800cce4 <inc_lock+0x118>)
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	011b      	lsls	r3, r3, #4
 800ccb8:	4413      	add	r3, r2
 800ccba:	330c      	adds	r3, #12
 800ccbc:	881b      	ldrh	r3, [r3, #0]
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	b29a      	uxth	r2, r3
 800ccc2:	e001      	b.n	800ccc8 <inc_lock+0xfc>
 800ccc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ccc8:	4906      	ldr	r1, [pc, #24]	; (800cce4 <inc_lock+0x118>)
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	011b      	lsls	r3, r3, #4
 800ccce:	440b      	add	r3, r1
 800ccd0:	330c      	adds	r3, #12
 800ccd2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	3301      	adds	r3, #1
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3714      	adds	r7, #20
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce2:	4770      	bx	lr
 800cce4:	20001378 	.word	0x20001378

0800cce8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b085      	sub	sp, #20
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	3b01      	subs	r3, #1
 800ccf4:	607b      	str	r3, [r7, #4]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2b01      	cmp	r3, #1
 800ccfa:	d825      	bhi.n	800cd48 <dec_lock+0x60>
		n = Files[i].ctr;
 800ccfc:	4a17      	ldr	r2, [pc, #92]	; (800cd5c <dec_lock+0x74>)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	011b      	lsls	r3, r3, #4
 800cd02:	4413      	add	r3, r2
 800cd04:	330c      	adds	r3, #12
 800cd06:	881b      	ldrh	r3, [r3, #0]
 800cd08:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cd0a:	89fb      	ldrh	r3, [r7, #14]
 800cd0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd10:	d101      	bne.n	800cd16 <dec_lock+0x2e>
 800cd12:	2300      	movs	r3, #0
 800cd14:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800cd16:	89fb      	ldrh	r3, [r7, #14]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d002      	beq.n	800cd22 <dec_lock+0x3a>
 800cd1c:	89fb      	ldrh	r3, [r7, #14]
 800cd1e:	3b01      	subs	r3, #1
 800cd20:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800cd22:	4a0e      	ldr	r2, [pc, #56]	; (800cd5c <dec_lock+0x74>)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	011b      	lsls	r3, r3, #4
 800cd28:	4413      	add	r3, r2
 800cd2a:	330c      	adds	r3, #12
 800cd2c:	89fa      	ldrh	r2, [r7, #14]
 800cd2e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800cd30:	89fb      	ldrh	r3, [r7, #14]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d105      	bne.n	800cd42 <dec_lock+0x5a>
 800cd36:	4a09      	ldr	r2, [pc, #36]	; (800cd5c <dec_lock+0x74>)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	011b      	lsls	r3, r3, #4
 800cd3c:	4413      	add	r3, r2
 800cd3e:	2200      	movs	r2, #0
 800cd40:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800cd42:	2300      	movs	r3, #0
 800cd44:	737b      	strb	r3, [r7, #13]
 800cd46:	e001      	b.n	800cd4c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800cd48:	2302      	movs	r3, #2
 800cd4a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800cd4c:	7b7b      	ldrb	r3, [r7, #13]
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3714      	adds	r7, #20
 800cd52:	46bd      	mov	sp, r7
 800cd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd58:	4770      	bx	lr
 800cd5a:	bf00      	nop
 800cd5c:	20001378 	.word	0x20001378

0800cd60 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800cd60:	b480      	push	{r7}
 800cd62:	b085      	sub	sp, #20
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800cd68:	2300      	movs	r3, #0
 800cd6a:	60fb      	str	r3, [r7, #12]
 800cd6c:	e010      	b.n	800cd90 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cd6e:	4a0d      	ldr	r2, [pc, #52]	; (800cda4 <clear_lock+0x44>)
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	011b      	lsls	r3, r3, #4
 800cd74:	4413      	add	r3, r2
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	687a      	ldr	r2, [r7, #4]
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d105      	bne.n	800cd8a <clear_lock+0x2a>
 800cd7e:	4a09      	ldr	r2, [pc, #36]	; (800cda4 <clear_lock+0x44>)
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	011b      	lsls	r3, r3, #4
 800cd84:	4413      	add	r3, r2
 800cd86:	2200      	movs	r2, #0
 800cd88:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	60fb      	str	r3, [r7, #12]
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	2b01      	cmp	r3, #1
 800cd94:	d9eb      	bls.n	800cd6e <clear_lock+0xe>
	}
}
 800cd96:	bf00      	nop
 800cd98:	bf00      	nop
 800cd9a:	3714      	adds	r7, #20
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr
 800cda4:	20001378 	.word	0x20001378

0800cda8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b086      	sub	sp, #24
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	78db      	ldrb	r3, [r3, #3]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d034      	beq.n	800ce26 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdc0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	7858      	ldrb	r0, [r3, #1]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cdcc:	2301      	movs	r3, #1
 800cdce:	697a      	ldr	r2, [r7, #20]
 800cdd0:	f7ff fd40 	bl	800c854 <disk_write>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d002      	beq.n	800cde0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800cdda:	2301      	movs	r3, #1
 800cddc:	73fb      	strb	r3, [r7, #15]
 800cdde:	e022      	b.n	800ce26 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2200      	movs	r2, #0
 800cde4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6a1b      	ldr	r3, [r3, #32]
 800cdea:	697a      	ldr	r2, [r7, #20]
 800cdec:	1ad2      	subs	r2, r2, r3
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	699b      	ldr	r3, [r3, #24]
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d217      	bcs.n	800ce26 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	789b      	ldrb	r3, [r3, #2]
 800cdfa:	613b      	str	r3, [r7, #16]
 800cdfc:	e010      	b.n	800ce20 <sync_window+0x78>
					wsect += fs->fsize;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	699b      	ldr	r3, [r3, #24]
 800ce02:	697a      	ldr	r2, [r7, #20]
 800ce04:	4413      	add	r3, r2
 800ce06:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	7858      	ldrb	r0, [r3, #1]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ce12:	2301      	movs	r3, #1
 800ce14:	697a      	ldr	r2, [r7, #20]
 800ce16:	f7ff fd1d 	bl	800c854 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	3b01      	subs	r3, #1
 800ce1e:	613b      	str	r3, [r7, #16]
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	2b01      	cmp	r3, #1
 800ce24:	d8eb      	bhi.n	800cdfe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ce26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3718      	adds	r7, #24
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b084      	sub	sp, #16
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce42:	683a      	ldr	r2, [r7, #0]
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d01b      	beq.n	800ce80 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f7ff ffad 	bl	800cda8 <sync_window>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ce52:	7bfb      	ldrb	r3, [r7, #15]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d113      	bne.n	800ce80 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	7858      	ldrb	r0, [r3, #1]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ce62:	2301      	movs	r3, #1
 800ce64:	683a      	ldr	r2, [r7, #0]
 800ce66:	f7ff fcd5 	bl	800c814 <disk_read>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d004      	beq.n	800ce7a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ce70:	f04f 33ff 	mov.w	r3, #4294967295
 800ce74:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ce76:	2301      	movs	r3, #1
 800ce78:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	683a      	ldr	r2, [r7, #0]
 800ce7e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800ce80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3710      	adds	r7, #16
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
	...

0800ce8c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f7ff ff87 	bl	800cda8 <sync_window>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ce9e:	7bfb      	ldrb	r3, [r7, #15]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d158      	bne.n	800cf56 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	2b03      	cmp	r3, #3
 800ceaa:	d148      	bne.n	800cf3e <sync_fs+0xb2>
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	791b      	ldrb	r3, [r3, #4]
 800ceb0:	2b01      	cmp	r3, #1
 800ceb2:	d144      	bne.n	800cf3e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	3330      	adds	r3, #48	; 0x30
 800ceb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cebc:	2100      	movs	r1, #0
 800cebe:	4618      	mov	r0, r3
 800cec0:	f7ff fda9 	bl	800ca16 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	3330      	adds	r3, #48	; 0x30
 800cec8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cecc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ced0:	4618      	mov	r0, r3
 800ced2:	f7ff fd38 	bl	800c946 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	3330      	adds	r3, #48	; 0x30
 800ceda:	4921      	ldr	r1, [pc, #132]	; (800cf60 <sync_fs+0xd4>)
 800cedc:	4618      	mov	r0, r3
 800cede:	f7ff fd4d 	bl	800c97c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	3330      	adds	r3, #48	; 0x30
 800cee6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ceea:	491e      	ldr	r1, [pc, #120]	; (800cf64 <sync_fs+0xd8>)
 800ceec:	4618      	mov	r0, r3
 800ceee:	f7ff fd45 	bl	800c97c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	3330      	adds	r3, #48	; 0x30
 800cef6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	691b      	ldr	r3, [r3, #16]
 800cefe:	4619      	mov	r1, r3
 800cf00:	4610      	mov	r0, r2
 800cf02:	f7ff fd3b 	bl	800c97c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	3330      	adds	r3, #48	; 0x30
 800cf0a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	68db      	ldr	r3, [r3, #12]
 800cf12:	4619      	mov	r1, r3
 800cf14:	4610      	mov	r0, r2
 800cf16:	f7ff fd31 	bl	800c97c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	69db      	ldr	r3, [r3, #28]
 800cf1e:	1c5a      	adds	r2, r3, #1
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	7858      	ldrb	r0, [r3, #1]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf32:	2301      	movs	r3, #1
 800cf34:	f7ff fc8e 	bl	800c854 <disk_write>
			fs->fsi_flag = 0;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	785b      	ldrb	r3, [r3, #1]
 800cf42:	2200      	movs	r2, #0
 800cf44:	2100      	movs	r1, #0
 800cf46:	4618      	mov	r0, r3
 800cf48:	f7ff fca4 	bl	800c894 <disk_ioctl>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d001      	beq.n	800cf56 <sync_fs+0xca>
 800cf52:	2301      	movs	r3, #1
 800cf54:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800cf56:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3710      	adds	r7, #16
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}
 800cf60:	41615252 	.word	0x41615252
 800cf64:	61417272 	.word	0x61417272

0800cf68 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b083      	sub	sp, #12
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
 800cf70:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	3b02      	subs	r3, #2
 800cf76:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	695b      	ldr	r3, [r3, #20]
 800cf7c:	3b02      	subs	r3, #2
 800cf7e:	683a      	ldr	r2, [r7, #0]
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d301      	bcc.n	800cf88 <clust2sect+0x20>
 800cf84:	2300      	movs	r3, #0
 800cf86:	e008      	b.n	800cf9a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	895b      	ldrh	r3, [r3, #10]
 800cf8c:	461a      	mov	r2, r3
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	fb03 f202 	mul.w	r2, r3, r2
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf98:	4413      	add	r3, r2
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	370c      	adds	r7, #12
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa4:	4770      	bx	lr

0800cfa6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cfa6:	b580      	push	{r7, lr}
 800cfa8:	b086      	sub	sp, #24
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	6078      	str	r0, [r7, #4]
 800cfae:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	2b01      	cmp	r3, #1
 800cfba:	d904      	bls.n	800cfc6 <get_fat+0x20>
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	695b      	ldr	r3, [r3, #20]
 800cfc0:	683a      	ldr	r2, [r7, #0]
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d302      	bcc.n	800cfcc <get_fat+0x26>
		val = 1;	/* Internal error */
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	617b      	str	r3, [r7, #20]
 800cfca:	e08f      	b.n	800d0ec <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cfcc:	f04f 33ff 	mov.w	r3, #4294967295
 800cfd0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	2b03      	cmp	r3, #3
 800cfd8:	d062      	beq.n	800d0a0 <get_fat+0xfa>
 800cfda:	2b03      	cmp	r3, #3
 800cfdc:	dc7c      	bgt.n	800d0d8 <get_fat+0x132>
 800cfde:	2b01      	cmp	r3, #1
 800cfe0:	d002      	beq.n	800cfe8 <get_fat+0x42>
 800cfe2:	2b02      	cmp	r3, #2
 800cfe4:	d042      	beq.n	800d06c <get_fat+0xc6>
 800cfe6:	e077      	b.n	800d0d8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	60fb      	str	r3, [r7, #12]
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	085b      	lsrs	r3, r3, #1
 800cff0:	68fa      	ldr	r2, [r7, #12]
 800cff2:	4413      	add	r3, r2
 800cff4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	6a1a      	ldr	r2, [r3, #32]
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	0a5b      	lsrs	r3, r3, #9
 800cffe:	4413      	add	r3, r2
 800d000:	4619      	mov	r1, r3
 800d002:	6938      	ldr	r0, [r7, #16]
 800d004:	f7ff ff14 	bl	800ce30 <move_window>
 800d008:	4603      	mov	r3, r0
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d167      	bne.n	800d0de <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	1c5a      	adds	r2, r3, #1
 800d012:	60fa      	str	r2, [r7, #12]
 800d014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d018:	693a      	ldr	r2, [r7, #16]
 800d01a:	4413      	add	r3, r2
 800d01c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d020:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	6a1a      	ldr	r2, [r3, #32]
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	0a5b      	lsrs	r3, r3, #9
 800d02a:	4413      	add	r3, r2
 800d02c:	4619      	mov	r1, r3
 800d02e:	6938      	ldr	r0, [r7, #16]
 800d030:	f7ff fefe 	bl	800ce30 <move_window>
 800d034:	4603      	mov	r3, r0
 800d036:	2b00      	cmp	r3, #0
 800d038:	d153      	bne.n	800d0e2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d040:	693a      	ldr	r2, [r7, #16]
 800d042:	4413      	add	r3, r2
 800d044:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d048:	021b      	lsls	r3, r3, #8
 800d04a:	461a      	mov	r2, r3
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	4313      	orrs	r3, r2
 800d050:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	f003 0301 	and.w	r3, r3, #1
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d002      	beq.n	800d062 <get_fat+0xbc>
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	091b      	lsrs	r3, r3, #4
 800d060:	e002      	b.n	800d068 <get_fat+0xc2>
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d068:	617b      	str	r3, [r7, #20]
			break;
 800d06a:	e03f      	b.n	800d0ec <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	6a1a      	ldr	r2, [r3, #32]
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	0a1b      	lsrs	r3, r3, #8
 800d074:	4413      	add	r3, r2
 800d076:	4619      	mov	r1, r3
 800d078:	6938      	ldr	r0, [r7, #16]
 800d07a:	f7ff fed9 	bl	800ce30 <move_window>
 800d07e:	4603      	mov	r3, r0
 800d080:	2b00      	cmp	r3, #0
 800d082:	d130      	bne.n	800d0e6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	005b      	lsls	r3, r3, #1
 800d08e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d092:	4413      	add	r3, r2
 800d094:	4618      	mov	r0, r3
 800d096:	f7ff fc1b 	bl	800c8d0 <ld_word>
 800d09a:	4603      	mov	r3, r0
 800d09c:	617b      	str	r3, [r7, #20]
			break;
 800d09e:	e025      	b.n	800d0ec <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	6a1a      	ldr	r2, [r3, #32]
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	09db      	lsrs	r3, r3, #7
 800d0a8:	4413      	add	r3, r2
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	6938      	ldr	r0, [r7, #16]
 800d0ae:	f7ff febf 	bl	800ce30 <move_window>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d118      	bne.n	800d0ea <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	009b      	lsls	r3, r3, #2
 800d0c2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d0c6:	4413      	add	r3, r2
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f7ff fc19 	bl	800c900 <ld_dword>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d0d4:	617b      	str	r3, [r7, #20]
			break;
 800d0d6:	e009      	b.n	800d0ec <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d0d8:	2301      	movs	r3, #1
 800d0da:	617b      	str	r3, [r7, #20]
 800d0dc:	e006      	b.n	800d0ec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d0de:	bf00      	nop
 800d0e0:	e004      	b.n	800d0ec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d0e2:	bf00      	nop
 800d0e4:	e002      	b.n	800d0ec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d0e6:	bf00      	nop
 800d0e8:	e000      	b.n	800d0ec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d0ea:	bf00      	nop
		}
	}

	return val;
 800d0ec:	697b      	ldr	r3, [r7, #20]
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3718      	adds	r7, #24
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}

0800d0f6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d0f6:	b590      	push	{r4, r7, lr}
 800d0f8:	b089      	sub	sp, #36	; 0x24
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	60f8      	str	r0, [r7, #12]
 800d0fe:	60b9      	str	r1, [r7, #8]
 800d100:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d102:	2302      	movs	r3, #2
 800d104:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	2b01      	cmp	r3, #1
 800d10a:	f240 80d2 	bls.w	800d2b2 <put_fat+0x1bc>
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	695b      	ldr	r3, [r3, #20]
 800d112:	68ba      	ldr	r2, [r7, #8]
 800d114:	429a      	cmp	r2, r3
 800d116:	f080 80cc 	bcs.w	800d2b2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	781b      	ldrb	r3, [r3, #0]
 800d11e:	2b03      	cmp	r3, #3
 800d120:	f000 8096 	beq.w	800d250 <put_fat+0x15a>
 800d124:	2b03      	cmp	r3, #3
 800d126:	f300 80cd 	bgt.w	800d2c4 <put_fat+0x1ce>
 800d12a:	2b01      	cmp	r3, #1
 800d12c:	d002      	beq.n	800d134 <put_fat+0x3e>
 800d12e:	2b02      	cmp	r3, #2
 800d130:	d06e      	beq.n	800d210 <put_fat+0x11a>
 800d132:	e0c7      	b.n	800d2c4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	61bb      	str	r3, [r7, #24]
 800d138:	69bb      	ldr	r3, [r7, #24]
 800d13a:	085b      	lsrs	r3, r3, #1
 800d13c:	69ba      	ldr	r2, [r7, #24]
 800d13e:	4413      	add	r3, r2
 800d140:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	6a1a      	ldr	r2, [r3, #32]
 800d146:	69bb      	ldr	r3, [r7, #24]
 800d148:	0a5b      	lsrs	r3, r3, #9
 800d14a:	4413      	add	r3, r2
 800d14c:	4619      	mov	r1, r3
 800d14e:	68f8      	ldr	r0, [r7, #12]
 800d150:	f7ff fe6e 	bl	800ce30 <move_window>
 800d154:	4603      	mov	r3, r0
 800d156:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d158:	7ffb      	ldrb	r3, [r7, #31]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	f040 80ab 	bne.w	800d2b6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d166:	69bb      	ldr	r3, [r7, #24]
 800d168:	1c59      	adds	r1, r3, #1
 800d16a:	61b9      	str	r1, [r7, #24]
 800d16c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d170:	4413      	add	r3, r2
 800d172:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	f003 0301 	and.w	r3, r3, #1
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d00d      	beq.n	800d19a <put_fat+0xa4>
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	781b      	ldrb	r3, [r3, #0]
 800d182:	b25b      	sxtb	r3, r3
 800d184:	f003 030f 	and.w	r3, r3, #15
 800d188:	b25a      	sxtb	r2, r3
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	b2db      	uxtb	r3, r3
 800d18e:	011b      	lsls	r3, r3, #4
 800d190:	b25b      	sxtb	r3, r3
 800d192:	4313      	orrs	r3, r2
 800d194:	b25b      	sxtb	r3, r3
 800d196:	b2db      	uxtb	r3, r3
 800d198:	e001      	b.n	800d19e <put_fat+0xa8>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	b2db      	uxtb	r3, r3
 800d19e:	697a      	ldr	r2, [r7, #20]
 800d1a0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	2201      	movs	r2, #1
 800d1a6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	6a1a      	ldr	r2, [r3, #32]
 800d1ac:	69bb      	ldr	r3, [r7, #24]
 800d1ae:	0a5b      	lsrs	r3, r3, #9
 800d1b0:	4413      	add	r3, r2
 800d1b2:	4619      	mov	r1, r3
 800d1b4:	68f8      	ldr	r0, [r7, #12]
 800d1b6:	f7ff fe3b 	bl	800ce30 <move_window>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d1be:	7ffb      	ldrb	r3, [r7, #31]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d17a      	bne.n	800d2ba <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d1ca:	69bb      	ldr	r3, [r7, #24]
 800d1cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1d0:	4413      	add	r3, r2
 800d1d2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	f003 0301 	and.w	r3, r3, #1
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d003      	beq.n	800d1e6 <put_fat+0xf0>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	091b      	lsrs	r3, r3, #4
 800d1e2:	b2db      	uxtb	r3, r3
 800d1e4:	e00e      	b.n	800d204 <put_fat+0x10e>
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	b25b      	sxtb	r3, r3
 800d1ec:	f023 030f 	bic.w	r3, r3, #15
 800d1f0:	b25a      	sxtb	r2, r3
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	0a1b      	lsrs	r3, r3, #8
 800d1f6:	b25b      	sxtb	r3, r3
 800d1f8:	f003 030f 	and.w	r3, r3, #15
 800d1fc:	b25b      	sxtb	r3, r3
 800d1fe:	4313      	orrs	r3, r2
 800d200:	b25b      	sxtb	r3, r3
 800d202:	b2db      	uxtb	r3, r3
 800d204:	697a      	ldr	r2, [r7, #20]
 800d206:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	2201      	movs	r2, #1
 800d20c:	70da      	strb	r2, [r3, #3]
			break;
 800d20e:	e059      	b.n	800d2c4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	6a1a      	ldr	r2, [r3, #32]
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	0a1b      	lsrs	r3, r3, #8
 800d218:	4413      	add	r3, r2
 800d21a:	4619      	mov	r1, r3
 800d21c:	68f8      	ldr	r0, [r7, #12]
 800d21e:	f7ff fe07 	bl	800ce30 <move_window>
 800d222:	4603      	mov	r3, r0
 800d224:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d226:	7ffb      	ldrb	r3, [r7, #31]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d148      	bne.n	800d2be <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	005b      	lsls	r3, r3, #1
 800d236:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d23a:	4413      	add	r3, r2
 800d23c:	687a      	ldr	r2, [r7, #4]
 800d23e:	b292      	uxth	r2, r2
 800d240:	4611      	mov	r1, r2
 800d242:	4618      	mov	r0, r3
 800d244:	f7ff fb7f 	bl	800c946 <st_word>
			fs->wflag = 1;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	2201      	movs	r2, #1
 800d24c:	70da      	strb	r2, [r3, #3]
			break;
 800d24e:	e039      	b.n	800d2c4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	6a1a      	ldr	r2, [r3, #32]
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	09db      	lsrs	r3, r3, #7
 800d258:	4413      	add	r3, r2
 800d25a:	4619      	mov	r1, r3
 800d25c:	68f8      	ldr	r0, [r7, #12]
 800d25e:	f7ff fde7 	bl	800ce30 <move_window>
 800d262:	4603      	mov	r3, r0
 800d264:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d266:	7ffb      	ldrb	r3, [r7, #31]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d12a      	bne.n	800d2c2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	009b      	lsls	r3, r3, #2
 800d27c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d280:	4413      	add	r3, r2
 800d282:	4618      	mov	r0, r3
 800d284:	f7ff fb3c 	bl	800c900 <ld_dword>
 800d288:	4603      	mov	r3, r0
 800d28a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d28e:	4323      	orrs	r3, r4
 800d290:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	009b      	lsls	r3, r3, #2
 800d29c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d2a0:	4413      	add	r3, r2
 800d2a2:	6879      	ldr	r1, [r7, #4]
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f7ff fb69 	bl	800c97c <st_dword>
			fs->wflag = 1;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	2201      	movs	r2, #1
 800d2ae:	70da      	strb	r2, [r3, #3]
			break;
 800d2b0:	e008      	b.n	800d2c4 <put_fat+0x1ce>
		}
	}
 800d2b2:	bf00      	nop
 800d2b4:	e006      	b.n	800d2c4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d2b6:	bf00      	nop
 800d2b8:	e004      	b.n	800d2c4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d2ba:	bf00      	nop
 800d2bc:	e002      	b.n	800d2c4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d2be:	bf00      	nop
 800d2c0:	e000      	b.n	800d2c4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d2c2:	bf00      	nop
	return res;
 800d2c4:	7ffb      	ldrb	r3, [r7, #31]
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	3724      	adds	r7, #36	; 0x24
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd90      	pop	{r4, r7, pc}

0800d2ce <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d2ce:	b580      	push	{r7, lr}
 800d2d0:	b088      	sub	sp, #32
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	60f8      	str	r0, [r7, #12]
 800d2d6:	60b9      	str	r1, [r7, #8]
 800d2d8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	2b01      	cmp	r3, #1
 800d2e8:	d904      	bls.n	800d2f4 <remove_chain+0x26>
 800d2ea:	69bb      	ldr	r3, [r7, #24]
 800d2ec:	695b      	ldr	r3, [r3, #20]
 800d2ee:	68ba      	ldr	r2, [r7, #8]
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	d301      	bcc.n	800d2f8 <remove_chain+0x2a>
 800d2f4:	2302      	movs	r3, #2
 800d2f6:	e04b      	b.n	800d390 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d00c      	beq.n	800d318 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d2fe:	f04f 32ff 	mov.w	r2, #4294967295
 800d302:	6879      	ldr	r1, [r7, #4]
 800d304:	69b8      	ldr	r0, [r7, #24]
 800d306:	f7ff fef6 	bl	800d0f6 <put_fat>
 800d30a:	4603      	mov	r3, r0
 800d30c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d30e:	7ffb      	ldrb	r3, [r7, #31]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d001      	beq.n	800d318 <remove_chain+0x4a>
 800d314:	7ffb      	ldrb	r3, [r7, #31]
 800d316:	e03b      	b.n	800d390 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d318:	68b9      	ldr	r1, [r7, #8]
 800d31a:	68f8      	ldr	r0, [r7, #12]
 800d31c:	f7ff fe43 	bl	800cfa6 <get_fat>
 800d320:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d031      	beq.n	800d38c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	2b01      	cmp	r3, #1
 800d32c:	d101      	bne.n	800d332 <remove_chain+0x64>
 800d32e:	2302      	movs	r3, #2
 800d330:	e02e      	b.n	800d390 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d338:	d101      	bne.n	800d33e <remove_chain+0x70>
 800d33a:	2301      	movs	r3, #1
 800d33c:	e028      	b.n	800d390 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d33e:	2200      	movs	r2, #0
 800d340:	68b9      	ldr	r1, [r7, #8]
 800d342:	69b8      	ldr	r0, [r7, #24]
 800d344:	f7ff fed7 	bl	800d0f6 <put_fat>
 800d348:	4603      	mov	r3, r0
 800d34a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d34c:	7ffb      	ldrb	r3, [r7, #31]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d001      	beq.n	800d356 <remove_chain+0x88>
 800d352:	7ffb      	ldrb	r3, [r7, #31]
 800d354:	e01c      	b.n	800d390 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d356:	69bb      	ldr	r3, [r7, #24]
 800d358:	691a      	ldr	r2, [r3, #16]
 800d35a:	69bb      	ldr	r3, [r7, #24]
 800d35c:	695b      	ldr	r3, [r3, #20]
 800d35e:	3b02      	subs	r3, #2
 800d360:	429a      	cmp	r2, r3
 800d362:	d20b      	bcs.n	800d37c <remove_chain+0xae>
			fs->free_clst++;
 800d364:	69bb      	ldr	r3, [r7, #24]
 800d366:	691b      	ldr	r3, [r3, #16]
 800d368:	1c5a      	adds	r2, r3, #1
 800d36a:	69bb      	ldr	r3, [r7, #24]
 800d36c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d36e:	69bb      	ldr	r3, [r7, #24]
 800d370:	791b      	ldrb	r3, [r3, #4]
 800d372:	f043 0301 	orr.w	r3, r3, #1
 800d376:	b2da      	uxtb	r2, r3
 800d378:	69bb      	ldr	r3, [r7, #24]
 800d37a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d37c:	697b      	ldr	r3, [r7, #20]
 800d37e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d380:	69bb      	ldr	r3, [r7, #24]
 800d382:	695b      	ldr	r3, [r3, #20]
 800d384:	68ba      	ldr	r2, [r7, #8]
 800d386:	429a      	cmp	r2, r3
 800d388:	d3c6      	bcc.n	800d318 <remove_chain+0x4a>
 800d38a:	e000      	b.n	800d38e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d38c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d38e:	2300      	movs	r3, #0
}
 800d390:	4618      	mov	r0, r3
 800d392:	3720      	adds	r7, #32
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}

0800d398 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b088      	sub	sp, #32
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
 800d3a0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d10d      	bne.n	800d3ca <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	68db      	ldr	r3, [r3, #12]
 800d3b2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d3b4:	69bb      	ldr	r3, [r7, #24]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d004      	beq.n	800d3c4 <create_chain+0x2c>
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	695b      	ldr	r3, [r3, #20]
 800d3be:	69ba      	ldr	r2, [r7, #24]
 800d3c0:	429a      	cmp	r2, r3
 800d3c2:	d31b      	bcc.n	800d3fc <create_chain+0x64>
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	61bb      	str	r3, [r7, #24]
 800d3c8:	e018      	b.n	800d3fc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d3ca:	6839      	ldr	r1, [r7, #0]
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f7ff fdea 	bl	800cfa6 <get_fat>
 800d3d2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2b01      	cmp	r3, #1
 800d3d8:	d801      	bhi.n	800d3de <create_chain+0x46>
 800d3da:	2301      	movs	r3, #1
 800d3dc:	e070      	b.n	800d4c0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3e4:	d101      	bne.n	800d3ea <create_chain+0x52>
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	e06a      	b.n	800d4c0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	695b      	ldr	r3, [r3, #20]
 800d3ee:	68fa      	ldr	r2, [r7, #12]
 800d3f0:	429a      	cmp	r2, r3
 800d3f2:	d201      	bcs.n	800d3f8 <create_chain+0x60>
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	e063      	b.n	800d4c0 <create_chain+0x128>
		scl = clst;
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d3fc:	69bb      	ldr	r3, [r7, #24]
 800d3fe:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	3301      	adds	r3, #1
 800d404:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	695b      	ldr	r3, [r3, #20]
 800d40a:	69fa      	ldr	r2, [r7, #28]
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d307      	bcc.n	800d420 <create_chain+0x88>
				ncl = 2;
 800d410:	2302      	movs	r3, #2
 800d412:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d414:	69fa      	ldr	r2, [r7, #28]
 800d416:	69bb      	ldr	r3, [r7, #24]
 800d418:	429a      	cmp	r2, r3
 800d41a:	d901      	bls.n	800d420 <create_chain+0x88>
 800d41c:	2300      	movs	r3, #0
 800d41e:	e04f      	b.n	800d4c0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d420:	69f9      	ldr	r1, [r7, #28]
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f7ff fdbf 	bl	800cfa6 <get_fat>
 800d428:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d00e      	beq.n	800d44e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	2b01      	cmp	r3, #1
 800d434:	d003      	beq.n	800d43e <create_chain+0xa6>
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d43c:	d101      	bne.n	800d442 <create_chain+0xaa>
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	e03e      	b.n	800d4c0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d442:	69fa      	ldr	r2, [r7, #28]
 800d444:	69bb      	ldr	r3, [r7, #24]
 800d446:	429a      	cmp	r2, r3
 800d448:	d1da      	bne.n	800d400 <create_chain+0x68>
 800d44a:	2300      	movs	r3, #0
 800d44c:	e038      	b.n	800d4c0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d44e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d450:	f04f 32ff 	mov.w	r2, #4294967295
 800d454:	69f9      	ldr	r1, [r7, #28]
 800d456:	6938      	ldr	r0, [r7, #16]
 800d458:	f7ff fe4d 	bl	800d0f6 <put_fat>
 800d45c:	4603      	mov	r3, r0
 800d45e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d460:	7dfb      	ldrb	r3, [r7, #23]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d109      	bne.n	800d47a <create_chain+0xe2>
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d006      	beq.n	800d47a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d46c:	69fa      	ldr	r2, [r7, #28]
 800d46e:	6839      	ldr	r1, [r7, #0]
 800d470:	6938      	ldr	r0, [r7, #16]
 800d472:	f7ff fe40 	bl	800d0f6 <put_fat>
 800d476:	4603      	mov	r3, r0
 800d478:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d47a:	7dfb      	ldrb	r3, [r7, #23]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d116      	bne.n	800d4ae <create_chain+0x116>
		fs->last_clst = ncl;
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	69fa      	ldr	r2, [r7, #28]
 800d484:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	691a      	ldr	r2, [r3, #16]
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	695b      	ldr	r3, [r3, #20]
 800d48e:	3b02      	subs	r3, #2
 800d490:	429a      	cmp	r2, r3
 800d492:	d804      	bhi.n	800d49e <create_chain+0x106>
 800d494:	693b      	ldr	r3, [r7, #16]
 800d496:	691b      	ldr	r3, [r3, #16]
 800d498:	1e5a      	subs	r2, r3, #1
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	791b      	ldrb	r3, [r3, #4]
 800d4a2:	f043 0301 	orr.w	r3, r3, #1
 800d4a6:	b2da      	uxtb	r2, r3
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	711a      	strb	r2, [r3, #4]
 800d4ac:	e007      	b.n	800d4be <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d4ae:	7dfb      	ldrb	r3, [r7, #23]
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	d102      	bne.n	800d4ba <create_chain+0x122>
 800d4b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d4b8:	e000      	b.n	800d4bc <create_chain+0x124>
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d4be:	69fb      	ldr	r3, [r7, #28]
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3720      	adds	r7, #32
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}

0800d4c8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b087      	sub	sp, #28
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
 800d4d0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4dc:	3304      	adds	r3, #4
 800d4de:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	0a5b      	lsrs	r3, r3, #9
 800d4e4:	68fa      	ldr	r2, [r7, #12]
 800d4e6:	8952      	ldrh	r2, [r2, #10]
 800d4e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4ec:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d4ee:	693b      	ldr	r3, [r7, #16]
 800d4f0:	1d1a      	adds	r2, r3, #4
 800d4f2:	613a      	str	r2, [r7, #16]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d101      	bne.n	800d502 <clmt_clust+0x3a>
 800d4fe:	2300      	movs	r3, #0
 800d500:	e010      	b.n	800d524 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d502:	697a      	ldr	r2, [r7, #20]
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	429a      	cmp	r2, r3
 800d508:	d307      	bcc.n	800d51a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d50a:	697a      	ldr	r2, [r7, #20]
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	1ad3      	subs	r3, r2, r3
 800d510:	617b      	str	r3, [r7, #20]
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	3304      	adds	r3, #4
 800d516:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d518:	e7e9      	b.n	800d4ee <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d51a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	681a      	ldr	r2, [r3, #0]
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	4413      	add	r3, r2
}
 800d524:	4618      	mov	r0, r3
 800d526:	371c      	adds	r7, #28
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr

0800d530 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b086      	sub	sp, #24
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
 800d538:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d546:	d204      	bcs.n	800d552 <dir_sdi+0x22>
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	f003 031f 	and.w	r3, r3, #31
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d001      	beq.n	800d556 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d552:	2302      	movs	r3, #2
 800d554:	e063      	b.n	800d61e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	683a      	ldr	r2, [r7, #0]
 800d55a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	689b      	ldr	r3, [r3, #8]
 800d560:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d106      	bne.n	800d576 <dir_sdi+0x46>
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	781b      	ldrb	r3, [r3, #0]
 800d56c:	2b02      	cmp	r3, #2
 800d56e:	d902      	bls.n	800d576 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d574:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d10c      	bne.n	800d596 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	095b      	lsrs	r3, r3, #5
 800d580:	693a      	ldr	r2, [r7, #16]
 800d582:	8912      	ldrh	r2, [r2, #8]
 800d584:	4293      	cmp	r3, r2
 800d586:	d301      	bcc.n	800d58c <dir_sdi+0x5c>
 800d588:	2302      	movs	r3, #2
 800d58a:	e048      	b.n	800d61e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d58c:	693b      	ldr	r3, [r7, #16]
 800d58e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	61da      	str	r2, [r3, #28]
 800d594:	e029      	b.n	800d5ea <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	895b      	ldrh	r3, [r3, #10]
 800d59a:	025b      	lsls	r3, r3, #9
 800d59c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d59e:	e019      	b.n	800d5d4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6979      	ldr	r1, [r7, #20]
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f7ff fcfe 	bl	800cfa6 <get_fat>
 800d5aa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5b2:	d101      	bne.n	800d5b8 <dir_sdi+0x88>
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	e032      	b.n	800d61e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	2b01      	cmp	r3, #1
 800d5bc:	d904      	bls.n	800d5c8 <dir_sdi+0x98>
 800d5be:	693b      	ldr	r3, [r7, #16]
 800d5c0:	695b      	ldr	r3, [r3, #20]
 800d5c2:	697a      	ldr	r2, [r7, #20]
 800d5c4:	429a      	cmp	r2, r3
 800d5c6:	d301      	bcc.n	800d5cc <dir_sdi+0x9c>
 800d5c8:	2302      	movs	r3, #2
 800d5ca:	e028      	b.n	800d61e <dir_sdi+0xee>
			ofs -= csz;
 800d5cc:	683a      	ldr	r2, [r7, #0]
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	1ad3      	subs	r3, r2, r3
 800d5d2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d5d4:	683a      	ldr	r2, [r7, #0]
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d2e1      	bcs.n	800d5a0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d5dc:	6979      	ldr	r1, [r7, #20]
 800d5de:	6938      	ldr	r0, [r7, #16]
 800d5e0:	f7ff fcc2 	bl	800cf68 <clust2sect>
 800d5e4:	4602      	mov	r2, r0
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	697a      	ldr	r2, [r7, #20]
 800d5ee:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	69db      	ldr	r3, [r3, #28]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d101      	bne.n	800d5fc <dir_sdi+0xcc>
 800d5f8:	2302      	movs	r3, #2
 800d5fa:	e010      	b.n	800d61e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	69da      	ldr	r2, [r3, #28]
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	0a5b      	lsrs	r3, r3, #9
 800d604:	441a      	add	r2, r3
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d60a:	693b      	ldr	r3, [r7, #16]
 800d60c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d616:	441a      	add	r2, r3
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d61c:	2300      	movs	r3, #0
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3718      	adds	r7, #24
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}

0800d626 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d626:	b580      	push	{r7, lr}
 800d628:	b086      	sub	sp, #24
 800d62a:	af00      	add	r7, sp, #0
 800d62c:	6078      	str	r0, [r7, #4]
 800d62e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	695b      	ldr	r3, [r3, #20]
 800d63a:	3320      	adds	r3, #32
 800d63c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	69db      	ldr	r3, [r3, #28]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d003      	beq.n	800d64e <dir_next+0x28>
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d64c:	d301      	bcc.n	800d652 <dir_next+0x2c>
 800d64e:	2304      	movs	r3, #4
 800d650:	e0aa      	b.n	800d7a8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d658:	2b00      	cmp	r3, #0
 800d65a:	f040 8098 	bne.w	800d78e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	69db      	ldr	r3, [r3, #28]
 800d662:	1c5a      	adds	r2, r3, #1
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	699b      	ldr	r3, [r3, #24]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d10b      	bne.n	800d688 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	095b      	lsrs	r3, r3, #5
 800d674:	68fa      	ldr	r2, [r7, #12]
 800d676:	8912      	ldrh	r2, [r2, #8]
 800d678:	4293      	cmp	r3, r2
 800d67a:	f0c0 8088 	bcc.w	800d78e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2200      	movs	r2, #0
 800d682:	61da      	str	r2, [r3, #28]
 800d684:	2304      	movs	r3, #4
 800d686:	e08f      	b.n	800d7a8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d688:	68bb      	ldr	r3, [r7, #8]
 800d68a:	0a5b      	lsrs	r3, r3, #9
 800d68c:	68fa      	ldr	r2, [r7, #12]
 800d68e:	8952      	ldrh	r2, [r2, #10]
 800d690:	3a01      	subs	r2, #1
 800d692:	4013      	ands	r3, r2
 800d694:	2b00      	cmp	r3, #0
 800d696:	d17a      	bne.n	800d78e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d698:	687a      	ldr	r2, [r7, #4]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	699b      	ldr	r3, [r3, #24]
 800d69e:	4619      	mov	r1, r3
 800d6a0:	4610      	mov	r0, r2
 800d6a2:	f7ff fc80 	bl	800cfa6 <get_fat>
 800d6a6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	2b01      	cmp	r3, #1
 800d6ac:	d801      	bhi.n	800d6b2 <dir_next+0x8c>
 800d6ae:	2302      	movs	r3, #2
 800d6b0:	e07a      	b.n	800d7a8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6b8:	d101      	bne.n	800d6be <dir_next+0x98>
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	e074      	b.n	800d7a8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	695b      	ldr	r3, [r3, #20]
 800d6c2:	697a      	ldr	r2, [r7, #20]
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	d358      	bcc.n	800d77a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d104      	bne.n	800d6d8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	61da      	str	r2, [r3, #28]
 800d6d4:	2304      	movs	r3, #4
 800d6d6:	e067      	b.n	800d7a8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d6d8:	687a      	ldr	r2, [r7, #4]
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	699b      	ldr	r3, [r3, #24]
 800d6de:	4619      	mov	r1, r3
 800d6e0:	4610      	mov	r0, r2
 800d6e2:	f7ff fe59 	bl	800d398 <create_chain>
 800d6e6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d6e8:	697b      	ldr	r3, [r7, #20]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d101      	bne.n	800d6f2 <dir_next+0xcc>
 800d6ee:	2307      	movs	r3, #7
 800d6f0:	e05a      	b.n	800d7a8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	2b01      	cmp	r3, #1
 800d6f6:	d101      	bne.n	800d6fc <dir_next+0xd6>
 800d6f8:	2302      	movs	r3, #2
 800d6fa:	e055      	b.n	800d7a8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d702:	d101      	bne.n	800d708 <dir_next+0xe2>
 800d704:	2301      	movs	r3, #1
 800d706:	e04f      	b.n	800d7a8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d708:	68f8      	ldr	r0, [r7, #12]
 800d70a:	f7ff fb4d 	bl	800cda8 <sync_window>
 800d70e:	4603      	mov	r3, r0
 800d710:	2b00      	cmp	r3, #0
 800d712:	d001      	beq.n	800d718 <dir_next+0xf2>
 800d714:	2301      	movs	r3, #1
 800d716:	e047      	b.n	800d7a8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	3330      	adds	r3, #48	; 0x30
 800d71c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d720:	2100      	movs	r1, #0
 800d722:	4618      	mov	r0, r3
 800d724:	f7ff f977 	bl	800ca16 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d728:	2300      	movs	r3, #0
 800d72a:	613b      	str	r3, [r7, #16]
 800d72c:	6979      	ldr	r1, [r7, #20]
 800d72e:	68f8      	ldr	r0, [r7, #12]
 800d730:	f7ff fc1a 	bl	800cf68 <clust2sect>
 800d734:	4602      	mov	r2, r0
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	62da      	str	r2, [r3, #44]	; 0x2c
 800d73a:	e012      	b.n	800d762 <dir_next+0x13c>
						fs->wflag = 1;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	2201      	movs	r2, #1
 800d740:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d742:	68f8      	ldr	r0, [r7, #12]
 800d744:	f7ff fb30 	bl	800cda8 <sync_window>
 800d748:	4603      	mov	r3, r0
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d001      	beq.n	800d752 <dir_next+0x12c>
 800d74e:	2301      	movs	r3, #1
 800d750:	e02a      	b.n	800d7a8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d752:	693b      	ldr	r3, [r7, #16]
 800d754:	3301      	adds	r3, #1
 800d756:	613b      	str	r3, [r7, #16]
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d75c:	1c5a      	adds	r2, r3, #1
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	62da      	str	r2, [r3, #44]	; 0x2c
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	895b      	ldrh	r3, [r3, #10]
 800d766:	461a      	mov	r2, r3
 800d768:	693b      	ldr	r3, [r7, #16]
 800d76a:	4293      	cmp	r3, r2
 800d76c:	d3e6      	bcc.n	800d73c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	1ad2      	subs	r2, r2, r3
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	697a      	ldr	r2, [r7, #20]
 800d77e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d780:	6979      	ldr	r1, [r7, #20]
 800d782:	68f8      	ldr	r0, [r7, #12]
 800d784:	f7ff fbf0 	bl	800cf68 <clust2sect>
 800d788:	4602      	mov	r2, r0
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	68ba      	ldr	r2, [r7, #8]
 800d792:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7a0:	441a      	add	r2, r3
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d7a6:	2300      	movs	r3, #0
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3718      	adds	r7, #24
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b086      	sub	sp, #24
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
 800d7b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d7c0:	2100      	movs	r1, #0
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f7ff feb4 	bl	800d530 <dir_sdi>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d7cc:	7dfb      	ldrb	r3, [r7, #23]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d12b      	bne.n	800d82a <dir_alloc+0x7a>
		n = 0;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	69db      	ldr	r3, [r3, #28]
 800d7da:	4619      	mov	r1, r3
 800d7dc:	68f8      	ldr	r0, [r7, #12]
 800d7de:	f7ff fb27 	bl	800ce30 <move_window>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d7e6:	7dfb      	ldrb	r3, [r7, #23]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d11d      	bne.n	800d828 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6a1b      	ldr	r3, [r3, #32]
 800d7f0:	781b      	ldrb	r3, [r3, #0]
 800d7f2:	2be5      	cmp	r3, #229	; 0xe5
 800d7f4:	d004      	beq.n	800d800 <dir_alloc+0x50>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6a1b      	ldr	r3, [r3, #32]
 800d7fa:	781b      	ldrb	r3, [r3, #0]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d107      	bne.n	800d810 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d800:	693b      	ldr	r3, [r7, #16]
 800d802:	3301      	adds	r3, #1
 800d804:	613b      	str	r3, [r7, #16]
 800d806:	693a      	ldr	r2, [r7, #16]
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d102      	bne.n	800d814 <dir_alloc+0x64>
 800d80e:	e00c      	b.n	800d82a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d810:	2300      	movs	r3, #0
 800d812:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d814:	2101      	movs	r1, #1
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f7ff ff05 	bl	800d626 <dir_next>
 800d81c:	4603      	mov	r3, r0
 800d81e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d820:	7dfb      	ldrb	r3, [r7, #23]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d0d7      	beq.n	800d7d6 <dir_alloc+0x26>
 800d826:	e000      	b.n	800d82a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d828:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d82a:	7dfb      	ldrb	r3, [r7, #23]
 800d82c:	2b04      	cmp	r3, #4
 800d82e:	d101      	bne.n	800d834 <dir_alloc+0x84>
 800d830:	2307      	movs	r3, #7
 800d832:	75fb      	strb	r3, [r7, #23]
	return res;
 800d834:	7dfb      	ldrb	r3, [r7, #23]
}
 800d836:	4618      	mov	r0, r3
 800d838:	3718      	adds	r7, #24
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}

0800d83e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d83e:	b580      	push	{r7, lr}
 800d840:	b084      	sub	sp, #16
 800d842:	af00      	add	r7, sp, #0
 800d844:	6078      	str	r0, [r7, #4]
 800d846:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	331a      	adds	r3, #26
 800d84c:	4618      	mov	r0, r3
 800d84e:	f7ff f83f 	bl	800c8d0 <ld_word>
 800d852:	4603      	mov	r3, r0
 800d854:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	2b03      	cmp	r3, #3
 800d85c:	d109      	bne.n	800d872 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	3314      	adds	r3, #20
 800d862:	4618      	mov	r0, r3
 800d864:	f7ff f834 	bl	800c8d0 <ld_word>
 800d868:	4603      	mov	r3, r0
 800d86a:	041b      	lsls	r3, r3, #16
 800d86c:	68fa      	ldr	r2, [r7, #12]
 800d86e:	4313      	orrs	r3, r2
 800d870:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d872:	68fb      	ldr	r3, [r7, #12]
}
 800d874:	4618      	mov	r0, r3
 800d876:	3710      	adds	r7, #16
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}

0800d87c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b084      	sub	sp, #16
 800d880:	af00      	add	r7, sp, #0
 800d882:	60f8      	str	r0, [r7, #12]
 800d884:	60b9      	str	r1, [r7, #8]
 800d886:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d888:	68bb      	ldr	r3, [r7, #8]
 800d88a:	331a      	adds	r3, #26
 800d88c:	687a      	ldr	r2, [r7, #4]
 800d88e:	b292      	uxth	r2, r2
 800d890:	4611      	mov	r1, r2
 800d892:	4618      	mov	r0, r3
 800d894:	f7ff f857 	bl	800c946 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	781b      	ldrb	r3, [r3, #0]
 800d89c:	2b03      	cmp	r3, #3
 800d89e:	d109      	bne.n	800d8b4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	f103 0214 	add.w	r2, r3, #20
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	0c1b      	lsrs	r3, r3, #16
 800d8aa:	b29b      	uxth	r3, r3
 800d8ac:	4619      	mov	r1, r3
 800d8ae:	4610      	mov	r0, r2
 800d8b0:	f7ff f849 	bl	800c946 <st_word>
	}
}
 800d8b4:	bf00      	nop
 800d8b6:	3710      	adds	r7, #16
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}

0800d8bc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b086      	sub	sp, #24
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d8ca:	2100      	movs	r1, #0
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f7ff fe2f 	bl	800d530 <dir_sdi>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d8d6:	7dfb      	ldrb	r3, [r7, #23]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d001      	beq.n	800d8e0 <dir_find+0x24>
 800d8dc:	7dfb      	ldrb	r3, [r7, #23]
 800d8de:	e03e      	b.n	800d95e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	69db      	ldr	r3, [r3, #28]
 800d8e4:	4619      	mov	r1, r3
 800d8e6:	6938      	ldr	r0, [r7, #16]
 800d8e8:	f7ff faa2 	bl	800ce30 <move_window>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d8f0:	7dfb      	ldrb	r3, [r7, #23]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d12f      	bne.n	800d956 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6a1b      	ldr	r3, [r3, #32]
 800d8fa:	781b      	ldrb	r3, [r3, #0]
 800d8fc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d8fe:	7bfb      	ldrb	r3, [r7, #15]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d102      	bne.n	800d90a <dir_find+0x4e>
 800d904:	2304      	movs	r3, #4
 800d906:	75fb      	strb	r3, [r7, #23]
 800d908:	e028      	b.n	800d95c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6a1b      	ldr	r3, [r3, #32]
 800d90e:	330b      	adds	r3, #11
 800d910:	781b      	ldrb	r3, [r3, #0]
 800d912:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d916:	b2da      	uxtb	r2, r3
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6a1b      	ldr	r3, [r3, #32]
 800d920:	330b      	adds	r3, #11
 800d922:	781b      	ldrb	r3, [r3, #0]
 800d924:	f003 0308 	and.w	r3, r3, #8
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d10a      	bne.n	800d942 <dir_find+0x86>
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6a18      	ldr	r0, [r3, #32]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	3324      	adds	r3, #36	; 0x24
 800d934:	220b      	movs	r2, #11
 800d936:	4619      	mov	r1, r3
 800d938:	f7ff f888 	bl	800ca4c <mem_cmp>
 800d93c:	4603      	mov	r3, r0
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d00b      	beq.n	800d95a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d942:	2100      	movs	r1, #0
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f7ff fe6e 	bl	800d626 <dir_next>
 800d94a:	4603      	mov	r3, r0
 800d94c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d94e:	7dfb      	ldrb	r3, [r7, #23]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d0c5      	beq.n	800d8e0 <dir_find+0x24>
 800d954:	e002      	b.n	800d95c <dir_find+0xa0>
		if (res != FR_OK) break;
 800d956:	bf00      	nop
 800d958:	e000      	b.n	800d95c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d95a:	bf00      	nop

	return res;
 800d95c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3718      	adds	r7, #24
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}

0800d966 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d966:	b580      	push	{r7, lr}
 800d968:	b084      	sub	sp, #16
 800d96a:	af00      	add	r7, sp, #0
 800d96c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d974:	2101      	movs	r1, #1
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f7ff ff1a 	bl	800d7b0 <dir_alloc>
 800d97c:	4603      	mov	r3, r0
 800d97e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d980:	7bfb      	ldrb	r3, [r7, #15]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d11c      	bne.n	800d9c0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	69db      	ldr	r3, [r3, #28]
 800d98a:	4619      	mov	r1, r3
 800d98c:	68b8      	ldr	r0, [r7, #8]
 800d98e:	f7ff fa4f 	bl	800ce30 <move_window>
 800d992:	4603      	mov	r3, r0
 800d994:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d996:	7bfb      	ldrb	r3, [r7, #15]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d111      	bne.n	800d9c0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6a1b      	ldr	r3, [r3, #32]
 800d9a0:	2220      	movs	r2, #32
 800d9a2:	2100      	movs	r1, #0
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f7ff f836 	bl	800ca16 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6a18      	ldr	r0, [r3, #32]
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	3324      	adds	r3, #36	; 0x24
 800d9b2:	220b      	movs	r2, #11
 800d9b4:	4619      	mov	r1, r3
 800d9b6:	f7ff f80d 	bl	800c9d4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	2201      	movs	r2, #1
 800d9be:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d9c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3710      	adds	r7, #16
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}
	...

0800d9cc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b088      	sub	sp, #32
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
 800d9d4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	60fb      	str	r3, [r7, #12]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	3324      	adds	r3, #36	; 0x24
 800d9e0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d9e2:	220b      	movs	r2, #11
 800d9e4:	2120      	movs	r1, #32
 800d9e6:	68b8      	ldr	r0, [r7, #8]
 800d9e8:	f7ff f815 	bl	800ca16 <mem_set>
	si = i = 0; ni = 8;
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	613b      	str	r3, [r7, #16]
 800d9f0:	693b      	ldr	r3, [r7, #16]
 800d9f2:	61fb      	str	r3, [r7, #28]
 800d9f4:	2308      	movs	r3, #8
 800d9f6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d9f8:	69fb      	ldr	r3, [r7, #28]
 800d9fa:	1c5a      	adds	r2, r3, #1
 800d9fc:	61fa      	str	r2, [r7, #28]
 800d9fe:	68fa      	ldr	r2, [r7, #12]
 800da00:	4413      	add	r3, r2
 800da02:	781b      	ldrb	r3, [r3, #0]
 800da04:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800da06:	7efb      	ldrb	r3, [r7, #27]
 800da08:	2b20      	cmp	r3, #32
 800da0a:	d94e      	bls.n	800daaa <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800da0c:	7efb      	ldrb	r3, [r7, #27]
 800da0e:	2b2f      	cmp	r3, #47	; 0x2f
 800da10:	d006      	beq.n	800da20 <create_name+0x54>
 800da12:	7efb      	ldrb	r3, [r7, #27]
 800da14:	2b5c      	cmp	r3, #92	; 0x5c
 800da16:	d110      	bne.n	800da3a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800da18:	e002      	b.n	800da20 <create_name+0x54>
 800da1a:	69fb      	ldr	r3, [r7, #28]
 800da1c:	3301      	adds	r3, #1
 800da1e:	61fb      	str	r3, [r7, #28]
 800da20:	68fa      	ldr	r2, [r7, #12]
 800da22:	69fb      	ldr	r3, [r7, #28]
 800da24:	4413      	add	r3, r2
 800da26:	781b      	ldrb	r3, [r3, #0]
 800da28:	2b2f      	cmp	r3, #47	; 0x2f
 800da2a:	d0f6      	beq.n	800da1a <create_name+0x4e>
 800da2c:	68fa      	ldr	r2, [r7, #12]
 800da2e:	69fb      	ldr	r3, [r7, #28]
 800da30:	4413      	add	r3, r2
 800da32:	781b      	ldrb	r3, [r3, #0]
 800da34:	2b5c      	cmp	r3, #92	; 0x5c
 800da36:	d0f0      	beq.n	800da1a <create_name+0x4e>
			break;
 800da38:	e038      	b.n	800daac <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800da3a:	7efb      	ldrb	r3, [r7, #27]
 800da3c:	2b2e      	cmp	r3, #46	; 0x2e
 800da3e:	d003      	beq.n	800da48 <create_name+0x7c>
 800da40:	693a      	ldr	r2, [r7, #16]
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	429a      	cmp	r2, r3
 800da46:	d30c      	bcc.n	800da62 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	2b0b      	cmp	r3, #11
 800da4c:	d002      	beq.n	800da54 <create_name+0x88>
 800da4e:	7efb      	ldrb	r3, [r7, #27]
 800da50:	2b2e      	cmp	r3, #46	; 0x2e
 800da52:	d001      	beq.n	800da58 <create_name+0x8c>
 800da54:	2306      	movs	r3, #6
 800da56:	e044      	b.n	800dae2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800da58:	2308      	movs	r3, #8
 800da5a:	613b      	str	r3, [r7, #16]
 800da5c:	230b      	movs	r3, #11
 800da5e:	617b      	str	r3, [r7, #20]
			continue;
 800da60:	e022      	b.n	800daa8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800da62:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800da66:	2b00      	cmp	r3, #0
 800da68:	da04      	bge.n	800da74 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800da6a:	7efb      	ldrb	r3, [r7, #27]
 800da6c:	3b80      	subs	r3, #128	; 0x80
 800da6e:	4a1f      	ldr	r2, [pc, #124]	; (800daec <create_name+0x120>)
 800da70:	5cd3      	ldrb	r3, [r2, r3]
 800da72:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800da74:	7efb      	ldrb	r3, [r7, #27]
 800da76:	4619      	mov	r1, r3
 800da78:	481d      	ldr	r0, [pc, #116]	; (800daf0 <create_name+0x124>)
 800da7a:	f7ff f80e 	bl	800ca9a <chk_chr>
 800da7e:	4603      	mov	r3, r0
 800da80:	2b00      	cmp	r3, #0
 800da82:	d001      	beq.n	800da88 <create_name+0xbc>
 800da84:	2306      	movs	r3, #6
 800da86:	e02c      	b.n	800dae2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800da88:	7efb      	ldrb	r3, [r7, #27]
 800da8a:	2b60      	cmp	r3, #96	; 0x60
 800da8c:	d905      	bls.n	800da9a <create_name+0xce>
 800da8e:	7efb      	ldrb	r3, [r7, #27]
 800da90:	2b7a      	cmp	r3, #122	; 0x7a
 800da92:	d802      	bhi.n	800da9a <create_name+0xce>
 800da94:	7efb      	ldrb	r3, [r7, #27]
 800da96:	3b20      	subs	r3, #32
 800da98:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800da9a:	693b      	ldr	r3, [r7, #16]
 800da9c:	1c5a      	adds	r2, r3, #1
 800da9e:	613a      	str	r2, [r7, #16]
 800daa0:	68ba      	ldr	r2, [r7, #8]
 800daa2:	4413      	add	r3, r2
 800daa4:	7efa      	ldrb	r2, [r7, #27]
 800daa6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800daa8:	e7a6      	b.n	800d9f8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800daaa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800daac:	68fa      	ldr	r2, [r7, #12]
 800daae:	69fb      	ldr	r3, [r7, #28]
 800dab0:	441a      	add	r2, r3
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800dab6:	693b      	ldr	r3, [r7, #16]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d101      	bne.n	800dac0 <create_name+0xf4>
 800dabc:	2306      	movs	r3, #6
 800dabe:	e010      	b.n	800dae2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dac0:	68bb      	ldr	r3, [r7, #8]
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	2be5      	cmp	r3, #229	; 0xe5
 800dac6:	d102      	bne.n	800dace <create_name+0x102>
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	2205      	movs	r2, #5
 800dacc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800dace:	7efb      	ldrb	r3, [r7, #27]
 800dad0:	2b20      	cmp	r3, #32
 800dad2:	d801      	bhi.n	800dad8 <create_name+0x10c>
 800dad4:	2204      	movs	r2, #4
 800dad6:	e000      	b.n	800dada <create_name+0x10e>
 800dad8:	2200      	movs	r2, #0
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	330b      	adds	r3, #11
 800dade:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800dae0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3720      	adds	r7, #32
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
 800daea:	bf00      	nop
 800daec:	080106c0 	.word	0x080106c0
 800daf0:	080105e8 	.word	0x080105e8

0800daf4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b086      	sub	sp, #24
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
 800dafc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800db02:	693b      	ldr	r3, [r7, #16]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800db08:	e002      	b.n	800db10 <follow_path+0x1c>
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	3301      	adds	r3, #1
 800db0e:	603b      	str	r3, [r7, #0]
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	781b      	ldrb	r3, [r3, #0]
 800db14:	2b2f      	cmp	r3, #47	; 0x2f
 800db16:	d0f8      	beq.n	800db0a <follow_path+0x16>
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	781b      	ldrb	r3, [r3, #0]
 800db1c:	2b5c      	cmp	r3, #92	; 0x5c
 800db1e:	d0f4      	beq.n	800db0a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	2200      	movs	r2, #0
 800db24:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	781b      	ldrb	r3, [r3, #0]
 800db2a:	2b1f      	cmp	r3, #31
 800db2c:	d80a      	bhi.n	800db44 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2280      	movs	r2, #128	; 0x80
 800db32:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800db36:	2100      	movs	r1, #0
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f7ff fcf9 	bl	800d530 <dir_sdi>
 800db3e:	4603      	mov	r3, r0
 800db40:	75fb      	strb	r3, [r7, #23]
 800db42:	e043      	b.n	800dbcc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800db44:	463b      	mov	r3, r7
 800db46:	4619      	mov	r1, r3
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f7ff ff3f 	bl	800d9cc <create_name>
 800db4e:	4603      	mov	r3, r0
 800db50:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800db52:	7dfb      	ldrb	r3, [r7, #23]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d134      	bne.n	800dbc2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f7ff feaf 	bl	800d8bc <dir_find>
 800db5e:	4603      	mov	r3, r0
 800db60:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800db68:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800db6a:	7dfb      	ldrb	r3, [r7, #23]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d00a      	beq.n	800db86 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800db70:	7dfb      	ldrb	r3, [r7, #23]
 800db72:	2b04      	cmp	r3, #4
 800db74:	d127      	bne.n	800dbc6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800db76:	7afb      	ldrb	r3, [r7, #11]
 800db78:	f003 0304 	and.w	r3, r3, #4
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d122      	bne.n	800dbc6 <follow_path+0xd2>
 800db80:	2305      	movs	r3, #5
 800db82:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800db84:	e01f      	b.n	800dbc6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800db86:	7afb      	ldrb	r3, [r7, #11]
 800db88:	f003 0304 	and.w	r3, r3, #4
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d11c      	bne.n	800dbca <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800db90:	693b      	ldr	r3, [r7, #16]
 800db92:	799b      	ldrb	r3, [r3, #6]
 800db94:	f003 0310 	and.w	r3, r3, #16
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d102      	bne.n	800dba2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800db9c:	2305      	movs	r3, #5
 800db9e:	75fb      	strb	r3, [r7, #23]
 800dba0:	e014      	b.n	800dbcc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	695b      	ldr	r3, [r3, #20]
 800dbac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbb0:	4413      	add	r3, r2
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	68f8      	ldr	r0, [r7, #12]
 800dbb6:	f7ff fe42 	bl	800d83e <ld_clust>
 800dbba:	4602      	mov	r2, r0
 800dbbc:	693b      	ldr	r3, [r7, #16]
 800dbbe:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dbc0:	e7c0      	b.n	800db44 <follow_path+0x50>
			if (res != FR_OK) break;
 800dbc2:	bf00      	nop
 800dbc4:	e002      	b.n	800dbcc <follow_path+0xd8>
				break;
 800dbc6:	bf00      	nop
 800dbc8:	e000      	b.n	800dbcc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dbca:	bf00      	nop
			}
		}
	}

	return res;
 800dbcc:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	3718      	adds	r7, #24
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}

0800dbd6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800dbd6:	b480      	push	{r7}
 800dbd8:	b087      	sub	sp, #28
 800dbda:	af00      	add	r7, sp, #0
 800dbdc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800dbde:	f04f 33ff 	mov.w	r3, #4294967295
 800dbe2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d031      	beq.n	800dc50 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	617b      	str	r3, [r7, #20]
 800dbf2:	e002      	b.n	800dbfa <get_ldnumber+0x24>
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	3301      	adds	r3, #1
 800dbf8:	617b      	str	r3, [r7, #20]
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	781b      	ldrb	r3, [r3, #0]
 800dbfe:	2b20      	cmp	r3, #32
 800dc00:	d903      	bls.n	800dc0a <get_ldnumber+0x34>
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	781b      	ldrb	r3, [r3, #0]
 800dc06:	2b3a      	cmp	r3, #58	; 0x3a
 800dc08:	d1f4      	bne.n	800dbf4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	781b      	ldrb	r3, [r3, #0]
 800dc0e:	2b3a      	cmp	r3, #58	; 0x3a
 800dc10:	d11c      	bne.n	800dc4c <get_ldnumber+0x76>
			tp = *path;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	1c5a      	adds	r2, r3, #1
 800dc1c:	60fa      	str	r2, [r7, #12]
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	3b30      	subs	r3, #48	; 0x30
 800dc22:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	2b09      	cmp	r3, #9
 800dc28:	d80e      	bhi.n	800dc48 <get_ldnumber+0x72>
 800dc2a:	68fa      	ldr	r2, [r7, #12]
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	429a      	cmp	r2, r3
 800dc30:	d10a      	bne.n	800dc48 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d107      	bne.n	800dc48 <get_ldnumber+0x72>
					vol = (int)i;
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800dc3c:	697b      	ldr	r3, [r7, #20]
 800dc3e:	3301      	adds	r3, #1
 800dc40:	617b      	str	r3, [r7, #20]
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	697a      	ldr	r2, [r7, #20]
 800dc46:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800dc48:	693b      	ldr	r3, [r7, #16]
 800dc4a:	e002      	b.n	800dc52 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800dc50:	693b      	ldr	r3, [r7, #16]
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	371c      	adds	r7, #28
 800dc56:	46bd      	mov	sp, r7
 800dc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5c:	4770      	bx	lr
	...

0800dc60 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b082      	sub	sp, #8
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	70da      	strb	r2, [r3, #3]
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f04f 32ff 	mov.w	r2, #4294967295
 800dc76:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800dc78:	6839      	ldr	r1, [r7, #0]
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f7ff f8d8 	bl	800ce30 <move_window>
 800dc80:	4603      	mov	r3, r0
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d001      	beq.n	800dc8a <check_fs+0x2a>
 800dc86:	2304      	movs	r3, #4
 800dc88:	e038      	b.n	800dcfc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	3330      	adds	r3, #48	; 0x30
 800dc8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dc92:	4618      	mov	r0, r3
 800dc94:	f7fe fe1c 	bl	800c8d0 <ld_word>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	461a      	mov	r2, r3
 800dc9c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dca0:	429a      	cmp	r2, r3
 800dca2:	d001      	beq.n	800dca8 <check_fs+0x48>
 800dca4:	2303      	movs	r3, #3
 800dca6:	e029      	b.n	800dcfc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dcae:	2be9      	cmp	r3, #233	; 0xe9
 800dcb0:	d009      	beq.n	800dcc6 <check_fs+0x66>
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dcb8:	2beb      	cmp	r3, #235	; 0xeb
 800dcba:	d11e      	bne.n	800dcfa <check_fs+0x9a>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800dcc2:	2b90      	cmp	r3, #144	; 0x90
 800dcc4:	d119      	bne.n	800dcfa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	3330      	adds	r3, #48	; 0x30
 800dcca:	3336      	adds	r3, #54	; 0x36
 800dccc:	4618      	mov	r0, r3
 800dcce:	f7fe fe17 	bl	800c900 <ld_dword>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800dcd8:	4a0a      	ldr	r2, [pc, #40]	; (800dd04 <check_fs+0xa4>)
 800dcda:	4293      	cmp	r3, r2
 800dcdc:	d101      	bne.n	800dce2 <check_fs+0x82>
 800dcde:	2300      	movs	r3, #0
 800dce0:	e00c      	b.n	800dcfc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	3330      	adds	r3, #48	; 0x30
 800dce6:	3352      	adds	r3, #82	; 0x52
 800dce8:	4618      	mov	r0, r3
 800dcea:	f7fe fe09 	bl	800c900 <ld_dword>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	4a05      	ldr	r2, [pc, #20]	; (800dd08 <check_fs+0xa8>)
 800dcf2:	4293      	cmp	r3, r2
 800dcf4:	d101      	bne.n	800dcfa <check_fs+0x9a>
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	e000      	b.n	800dcfc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800dcfa:	2302      	movs	r3, #2
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	3708      	adds	r7, #8
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}
 800dd04:	00544146 	.word	0x00544146
 800dd08:	33544146 	.word	0x33544146

0800dd0c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b096      	sub	sp, #88	; 0x58
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	60f8      	str	r0, [r7, #12]
 800dd14:	60b9      	str	r1, [r7, #8]
 800dd16:	4613      	mov	r3, r2
 800dd18:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800dd20:	68f8      	ldr	r0, [r7, #12]
 800dd22:	f7ff ff58 	bl	800dbd6 <get_ldnumber>
 800dd26:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800dd28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	da01      	bge.n	800dd32 <find_volume+0x26>
 800dd2e:	230b      	movs	r3, #11
 800dd30:	e22e      	b.n	800e190 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800dd32:	4aa8      	ldr	r2, [pc, #672]	; (800dfd4 <find_volume+0x2c8>)
 800dd34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd3a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800dd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d101      	bne.n	800dd46 <find_volume+0x3a>
 800dd42:	230c      	movs	r3, #12
 800dd44:	e224      	b.n	800e190 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd4a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800dd4c:	79fb      	ldrb	r3, [r7, #7]
 800dd4e:	f023 0301 	bic.w	r3, r3, #1
 800dd52:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd56:	781b      	ldrb	r3, [r3, #0]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d01a      	beq.n	800dd92 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800dd5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd5e:	785b      	ldrb	r3, [r3, #1]
 800dd60:	4618      	mov	r0, r3
 800dd62:	f7fe fd17 	bl	800c794 <disk_status>
 800dd66:	4603      	mov	r3, r0
 800dd68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800dd6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dd70:	f003 0301 	and.w	r3, r3, #1
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d10c      	bne.n	800dd92 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800dd78:	79fb      	ldrb	r3, [r7, #7]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d007      	beq.n	800dd8e <find_volume+0x82>
 800dd7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dd82:	f003 0304 	and.w	r3, r3, #4
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d001      	beq.n	800dd8e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800dd8a:	230a      	movs	r3, #10
 800dd8c:	e200      	b.n	800e190 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800dd8e:	2300      	movs	r3, #0
 800dd90:	e1fe      	b.n	800e190 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800dd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd94:	2200      	movs	r2, #0
 800dd96:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dd98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd9a:	b2da      	uxtb	r2, r3
 800dd9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd9e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800dda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dda2:	785b      	ldrb	r3, [r3, #1]
 800dda4:	4618      	mov	r0, r3
 800dda6:	f7fe fd0f 	bl	800c7c8 <disk_initialize>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ddb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ddb4:	f003 0301 	and.w	r3, r3, #1
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d001      	beq.n	800ddc0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ddbc:	2303      	movs	r3, #3
 800ddbe:	e1e7      	b.n	800e190 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ddc0:	79fb      	ldrb	r3, [r7, #7]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d007      	beq.n	800ddd6 <find_volume+0xca>
 800ddc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ddca:	f003 0304 	and.w	r3, r3, #4
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d001      	beq.n	800ddd6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ddd2:	230a      	movs	r3, #10
 800ddd4:	e1dc      	b.n	800e190 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ddda:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dddc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ddde:	f7ff ff3f 	bl	800dc60 <check_fs>
 800dde2:	4603      	mov	r3, r0
 800dde4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800dde8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ddec:	2b02      	cmp	r3, #2
 800ddee:	d14b      	bne.n	800de88 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	643b      	str	r3, [r7, #64]	; 0x40
 800ddf4:	e01f      	b.n	800de36 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ddf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddf8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ddfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddfe:	011b      	lsls	r3, r3, #4
 800de00:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800de04:	4413      	add	r3, r2
 800de06:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800de08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de0a:	3304      	adds	r3, #4
 800de0c:	781b      	ldrb	r3, [r3, #0]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d006      	beq.n	800de20 <find_volume+0x114>
 800de12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de14:	3308      	adds	r3, #8
 800de16:	4618      	mov	r0, r3
 800de18:	f7fe fd72 	bl	800c900 <ld_dword>
 800de1c:	4602      	mov	r2, r0
 800de1e:	e000      	b.n	800de22 <find_volume+0x116>
 800de20:	2200      	movs	r2, #0
 800de22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de24:	009b      	lsls	r3, r3, #2
 800de26:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800de2a:	440b      	add	r3, r1
 800de2c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800de30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de32:	3301      	adds	r3, #1
 800de34:	643b      	str	r3, [r7, #64]	; 0x40
 800de36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de38:	2b03      	cmp	r3, #3
 800de3a:	d9dc      	bls.n	800ddf6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800de3c:	2300      	movs	r3, #0
 800de3e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800de40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de42:	2b00      	cmp	r3, #0
 800de44:	d002      	beq.n	800de4c <find_volume+0x140>
 800de46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de48:	3b01      	subs	r3, #1
 800de4a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800de4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de4e:	009b      	lsls	r3, r3, #2
 800de50:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800de54:	4413      	add	r3, r2
 800de56:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800de5a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800de5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d005      	beq.n	800de6e <find_volume+0x162>
 800de62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800de64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800de66:	f7ff fefb 	bl	800dc60 <check_fs>
 800de6a:	4603      	mov	r3, r0
 800de6c:	e000      	b.n	800de70 <find_volume+0x164>
 800de6e:	2303      	movs	r3, #3
 800de70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800de74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800de78:	2b01      	cmp	r3, #1
 800de7a:	d905      	bls.n	800de88 <find_volume+0x17c>
 800de7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de7e:	3301      	adds	r3, #1
 800de80:	643b      	str	r3, [r7, #64]	; 0x40
 800de82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de84:	2b03      	cmp	r3, #3
 800de86:	d9e1      	bls.n	800de4c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800de88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800de8c:	2b04      	cmp	r3, #4
 800de8e:	d101      	bne.n	800de94 <find_volume+0x188>
 800de90:	2301      	movs	r3, #1
 800de92:	e17d      	b.n	800e190 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800de94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800de98:	2b01      	cmp	r3, #1
 800de9a:	d901      	bls.n	800dea0 <find_volume+0x194>
 800de9c:	230d      	movs	r3, #13
 800de9e:	e177      	b.n	800e190 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800dea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dea2:	3330      	adds	r3, #48	; 0x30
 800dea4:	330b      	adds	r3, #11
 800dea6:	4618      	mov	r0, r3
 800dea8:	f7fe fd12 	bl	800c8d0 <ld_word>
 800deac:	4603      	mov	r3, r0
 800deae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800deb2:	d001      	beq.n	800deb8 <find_volume+0x1ac>
 800deb4:	230d      	movs	r3, #13
 800deb6:	e16b      	b.n	800e190 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800deb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deba:	3330      	adds	r3, #48	; 0x30
 800debc:	3316      	adds	r3, #22
 800debe:	4618      	mov	r0, r3
 800dec0:	f7fe fd06 	bl	800c8d0 <ld_word>
 800dec4:	4603      	mov	r3, r0
 800dec6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800dec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deca:	2b00      	cmp	r3, #0
 800decc:	d106      	bne.n	800dedc <find_volume+0x1d0>
 800dece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded0:	3330      	adds	r3, #48	; 0x30
 800ded2:	3324      	adds	r3, #36	; 0x24
 800ded4:	4618      	mov	r0, r3
 800ded6:	f7fe fd13 	bl	800c900 <ld_dword>
 800deda:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800dedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dede:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dee0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800dee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dee4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800dee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800deec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deee:	789b      	ldrb	r3, [r3, #2]
 800def0:	2b01      	cmp	r3, #1
 800def2:	d005      	beq.n	800df00 <find_volume+0x1f4>
 800def4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800def6:	789b      	ldrb	r3, [r3, #2]
 800def8:	2b02      	cmp	r3, #2
 800defa:	d001      	beq.n	800df00 <find_volume+0x1f4>
 800defc:	230d      	movs	r3, #13
 800defe:	e147      	b.n	800e190 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800df00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df02:	789b      	ldrb	r3, [r3, #2]
 800df04:	461a      	mov	r2, r3
 800df06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df08:	fb02 f303 	mul.w	r3, r2, r3
 800df0c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800df0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df14:	b29a      	uxth	r2, r3
 800df16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df18:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800df1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df1c:	895b      	ldrh	r3, [r3, #10]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d008      	beq.n	800df34 <find_volume+0x228>
 800df22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df24:	895b      	ldrh	r3, [r3, #10]
 800df26:	461a      	mov	r2, r3
 800df28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df2a:	895b      	ldrh	r3, [r3, #10]
 800df2c:	3b01      	subs	r3, #1
 800df2e:	4013      	ands	r3, r2
 800df30:	2b00      	cmp	r3, #0
 800df32:	d001      	beq.n	800df38 <find_volume+0x22c>
 800df34:	230d      	movs	r3, #13
 800df36:	e12b      	b.n	800e190 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800df38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df3a:	3330      	adds	r3, #48	; 0x30
 800df3c:	3311      	adds	r3, #17
 800df3e:	4618      	mov	r0, r3
 800df40:	f7fe fcc6 	bl	800c8d0 <ld_word>
 800df44:	4603      	mov	r3, r0
 800df46:	461a      	mov	r2, r3
 800df48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df4a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800df4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df4e:	891b      	ldrh	r3, [r3, #8]
 800df50:	f003 030f 	and.w	r3, r3, #15
 800df54:	b29b      	uxth	r3, r3
 800df56:	2b00      	cmp	r3, #0
 800df58:	d001      	beq.n	800df5e <find_volume+0x252>
 800df5a:	230d      	movs	r3, #13
 800df5c:	e118      	b.n	800e190 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800df5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df60:	3330      	adds	r3, #48	; 0x30
 800df62:	3313      	adds	r3, #19
 800df64:	4618      	mov	r0, r3
 800df66:	f7fe fcb3 	bl	800c8d0 <ld_word>
 800df6a:	4603      	mov	r3, r0
 800df6c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800df6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df70:	2b00      	cmp	r3, #0
 800df72:	d106      	bne.n	800df82 <find_volume+0x276>
 800df74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df76:	3330      	adds	r3, #48	; 0x30
 800df78:	3320      	adds	r3, #32
 800df7a:	4618      	mov	r0, r3
 800df7c:	f7fe fcc0 	bl	800c900 <ld_dword>
 800df80:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800df82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df84:	3330      	adds	r3, #48	; 0x30
 800df86:	330e      	adds	r3, #14
 800df88:	4618      	mov	r0, r3
 800df8a:	f7fe fca1 	bl	800c8d0 <ld_word>
 800df8e:	4603      	mov	r3, r0
 800df90:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800df92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800df94:	2b00      	cmp	r3, #0
 800df96:	d101      	bne.n	800df9c <find_volume+0x290>
 800df98:	230d      	movs	r3, #13
 800df9a:	e0f9      	b.n	800e190 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800df9c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800df9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfa0:	4413      	add	r3, r2
 800dfa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dfa4:	8912      	ldrh	r2, [r2, #8]
 800dfa6:	0912      	lsrs	r2, r2, #4
 800dfa8:	b292      	uxth	r2, r2
 800dfaa:	4413      	add	r3, r2
 800dfac:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800dfae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	d201      	bcs.n	800dfba <find_volume+0x2ae>
 800dfb6:	230d      	movs	r3, #13
 800dfb8:	e0ea      	b.n	800e190 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800dfba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfbe:	1ad3      	subs	r3, r2, r3
 800dfc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dfc2:	8952      	ldrh	r2, [r2, #10]
 800dfc4:	fbb3 f3f2 	udiv	r3, r3, r2
 800dfc8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800dfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d103      	bne.n	800dfd8 <find_volume+0x2cc>
 800dfd0:	230d      	movs	r3, #13
 800dfd2:	e0dd      	b.n	800e190 <find_volume+0x484>
 800dfd4:	20001370 	.word	0x20001370
		fmt = FS_FAT32;
 800dfd8:	2303      	movs	r3, #3
 800dfda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800dfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800dfe4:	4293      	cmp	r3, r2
 800dfe6:	d802      	bhi.n	800dfee <find_volume+0x2e2>
 800dfe8:	2302      	movs	r3, #2
 800dfea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800dfee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800dff4:	4293      	cmp	r3, r2
 800dff6:	d802      	bhi.n	800dffe <find_volume+0x2f2>
 800dff8:	2301      	movs	r3, #1
 800dffa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800dffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e000:	1c9a      	adds	r2, r3, #2
 800e002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e004:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e008:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e00a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e00c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e00e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e010:	441a      	add	r2, r3
 800e012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e014:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800e016:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e01a:	441a      	add	r2, r3
 800e01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e01e:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800e020:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e024:	2b03      	cmp	r3, #3
 800e026:	d11e      	bne.n	800e066 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e02a:	3330      	adds	r3, #48	; 0x30
 800e02c:	332a      	adds	r3, #42	; 0x2a
 800e02e:	4618      	mov	r0, r3
 800e030:	f7fe fc4e 	bl	800c8d0 <ld_word>
 800e034:	4603      	mov	r3, r0
 800e036:	2b00      	cmp	r3, #0
 800e038:	d001      	beq.n	800e03e <find_volume+0x332>
 800e03a:	230d      	movs	r3, #13
 800e03c:	e0a8      	b.n	800e190 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e040:	891b      	ldrh	r3, [r3, #8]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d001      	beq.n	800e04a <find_volume+0x33e>
 800e046:	230d      	movs	r3, #13
 800e048:	e0a2      	b.n	800e190 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e04c:	3330      	adds	r3, #48	; 0x30
 800e04e:	332c      	adds	r3, #44	; 0x2c
 800e050:	4618      	mov	r0, r3
 800e052:	f7fe fc55 	bl	800c900 <ld_dword>
 800e056:	4602      	mov	r2, r0
 800e058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e05a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e05e:	695b      	ldr	r3, [r3, #20]
 800e060:	009b      	lsls	r3, r3, #2
 800e062:	647b      	str	r3, [r7, #68]	; 0x44
 800e064:	e01f      	b.n	800e0a6 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e068:	891b      	ldrh	r3, [r3, #8]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d101      	bne.n	800e072 <find_volume+0x366>
 800e06e:	230d      	movs	r3, #13
 800e070:	e08e      	b.n	800e190 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e074:	6a1a      	ldr	r2, [r3, #32]
 800e076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e078:	441a      	add	r2, r3
 800e07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e07c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e07e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e082:	2b02      	cmp	r3, #2
 800e084:	d103      	bne.n	800e08e <find_volume+0x382>
 800e086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e088:	695b      	ldr	r3, [r3, #20]
 800e08a:	005b      	lsls	r3, r3, #1
 800e08c:	e00a      	b.n	800e0a4 <find_volume+0x398>
 800e08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e090:	695a      	ldr	r2, [r3, #20]
 800e092:	4613      	mov	r3, r2
 800e094:	005b      	lsls	r3, r3, #1
 800e096:	4413      	add	r3, r2
 800e098:	085a      	lsrs	r2, r3, #1
 800e09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e09c:	695b      	ldr	r3, [r3, #20]
 800e09e:	f003 0301 	and.w	r3, r3, #1
 800e0a2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e0a4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a8:	699a      	ldr	r2, [r3, #24]
 800e0aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0ac:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e0b0:	0a5b      	lsrs	r3, r3, #9
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	d201      	bcs.n	800e0ba <find_volume+0x3ae>
 800e0b6:	230d      	movs	r3, #13
 800e0b8:	e06a      	b.n	800e190 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e0c0:	611a      	str	r2, [r3, #16]
 800e0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c4:	691a      	ldr	r2, [r3, #16]
 800e0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c8:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0cc:	2280      	movs	r2, #128	; 0x80
 800e0ce:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e0d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e0d4:	2b03      	cmp	r3, #3
 800e0d6:	d149      	bne.n	800e16c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0da:	3330      	adds	r3, #48	; 0x30
 800e0dc:	3330      	adds	r3, #48	; 0x30
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f7fe fbf6 	bl	800c8d0 <ld_word>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	2b01      	cmp	r3, #1
 800e0e8:	d140      	bne.n	800e16c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e0ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0ec:	3301      	adds	r3, #1
 800e0ee:	4619      	mov	r1, r3
 800e0f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e0f2:	f7fe fe9d 	bl	800ce30 <move_window>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d137      	bne.n	800e16c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800e0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0fe:	2200      	movs	r2, #0
 800e100:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e104:	3330      	adds	r3, #48	; 0x30
 800e106:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7fe fbe0 	bl	800c8d0 <ld_word>
 800e110:	4603      	mov	r3, r0
 800e112:	461a      	mov	r2, r3
 800e114:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e118:	429a      	cmp	r2, r3
 800e11a:	d127      	bne.n	800e16c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e11e:	3330      	adds	r3, #48	; 0x30
 800e120:	4618      	mov	r0, r3
 800e122:	f7fe fbed 	bl	800c900 <ld_dword>
 800e126:	4603      	mov	r3, r0
 800e128:	4a1b      	ldr	r2, [pc, #108]	; (800e198 <find_volume+0x48c>)
 800e12a:	4293      	cmp	r3, r2
 800e12c:	d11e      	bne.n	800e16c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e130:	3330      	adds	r3, #48	; 0x30
 800e132:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e136:	4618      	mov	r0, r3
 800e138:	f7fe fbe2 	bl	800c900 <ld_dword>
 800e13c:	4603      	mov	r3, r0
 800e13e:	4a17      	ldr	r2, [pc, #92]	; (800e19c <find_volume+0x490>)
 800e140:	4293      	cmp	r3, r2
 800e142:	d113      	bne.n	800e16c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e146:	3330      	adds	r3, #48	; 0x30
 800e148:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7fe fbd7 	bl	800c900 <ld_dword>
 800e152:	4602      	mov	r2, r0
 800e154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e156:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e15a:	3330      	adds	r3, #48	; 0x30
 800e15c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e160:	4618      	mov	r0, r3
 800e162:	f7fe fbcd 	bl	800c900 <ld_dword>
 800e166:	4602      	mov	r2, r0
 800e168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e16a:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e16e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e172:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e174:	4b0a      	ldr	r3, [pc, #40]	; (800e1a0 <find_volume+0x494>)
 800e176:	881b      	ldrh	r3, [r3, #0]
 800e178:	3301      	adds	r3, #1
 800e17a:	b29a      	uxth	r2, r3
 800e17c:	4b08      	ldr	r3, [pc, #32]	; (800e1a0 <find_volume+0x494>)
 800e17e:	801a      	strh	r2, [r3, #0]
 800e180:	4b07      	ldr	r3, [pc, #28]	; (800e1a0 <find_volume+0x494>)
 800e182:	881a      	ldrh	r2, [r3, #0]
 800e184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e186:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e188:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e18a:	f7fe fde9 	bl	800cd60 <clear_lock>
#endif
	return FR_OK;
 800e18e:	2300      	movs	r3, #0
}
 800e190:	4618      	mov	r0, r3
 800e192:	3758      	adds	r7, #88	; 0x58
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}
 800e198:	41615252 	.word	0x41615252
 800e19c:	61417272 	.word	0x61417272
 800e1a0:	20001374 	.word	0x20001374

0800e1a4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b084      	sub	sp, #16
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e1ae:	2309      	movs	r3, #9
 800e1b0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d01c      	beq.n	800e1f2 <validate+0x4e>
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d018      	beq.n	800e1f2 <validate+0x4e>
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	781b      	ldrb	r3, [r3, #0]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d013      	beq.n	800e1f2 <validate+0x4e>
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	889a      	ldrh	r2, [r3, #4]
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	88db      	ldrh	r3, [r3, #6]
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d10c      	bne.n	800e1f2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	785b      	ldrb	r3, [r3, #1]
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7fe fad8 	bl	800c794 <disk_status>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	f003 0301 	and.w	r3, r3, #1
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d101      	bne.n	800e1f2 <validate+0x4e>
			res = FR_OK;
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e1f2:	7bfb      	ldrb	r3, [r7, #15]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d102      	bne.n	800e1fe <validate+0x5a>
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	e000      	b.n	800e200 <validate+0x5c>
 800e1fe:	2300      	movs	r3, #0
 800e200:	683a      	ldr	r2, [r7, #0]
 800e202:	6013      	str	r3, [r2, #0]
	return res;
 800e204:	7bfb      	ldrb	r3, [r7, #15]
}
 800e206:	4618      	mov	r0, r3
 800e208:	3710      	adds	r7, #16
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}
	...

0800e210 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b088      	sub	sp, #32
 800e214:	af00      	add	r7, sp, #0
 800e216:	60f8      	str	r0, [r7, #12]
 800e218:	60b9      	str	r1, [r7, #8]
 800e21a:	4613      	mov	r3, r2
 800e21c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e222:	f107 0310 	add.w	r3, r7, #16
 800e226:	4618      	mov	r0, r3
 800e228:	f7ff fcd5 	bl	800dbd6 <get_ldnumber>
 800e22c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e22e:	69fb      	ldr	r3, [r7, #28]
 800e230:	2b00      	cmp	r3, #0
 800e232:	da01      	bge.n	800e238 <f_mount+0x28>
 800e234:	230b      	movs	r3, #11
 800e236:	e02b      	b.n	800e290 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e238:	4a17      	ldr	r2, [pc, #92]	; (800e298 <f_mount+0x88>)
 800e23a:	69fb      	ldr	r3, [r7, #28]
 800e23c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e240:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e242:	69bb      	ldr	r3, [r7, #24]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d005      	beq.n	800e254 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e248:	69b8      	ldr	r0, [r7, #24]
 800e24a:	f7fe fd89 	bl	800cd60 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e24e:	69bb      	ldr	r3, [r7, #24]
 800e250:	2200      	movs	r2, #0
 800e252:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d002      	beq.n	800e260 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	2200      	movs	r2, #0
 800e25e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e260:	68fa      	ldr	r2, [r7, #12]
 800e262:	490d      	ldr	r1, [pc, #52]	; (800e298 <f_mount+0x88>)
 800e264:	69fb      	ldr	r3, [r7, #28]
 800e266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d002      	beq.n	800e276 <f_mount+0x66>
 800e270:	79fb      	ldrb	r3, [r7, #7]
 800e272:	2b01      	cmp	r3, #1
 800e274:	d001      	beq.n	800e27a <f_mount+0x6a>
 800e276:	2300      	movs	r3, #0
 800e278:	e00a      	b.n	800e290 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e27a:	f107 010c 	add.w	r1, r7, #12
 800e27e:	f107 0308 	add.w	r3, r7, #8
 800e282:	2200      	movs	r2, #0
 800e284:	4618      	mov	r0, r3
 800e286:	f7ff fd41 	bl	800dd0c <find_volume>
 800e28a:	4603      	mov	r3, r0
 800e28c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e28e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e290:	4618      	mov	r0, r3
 800e292:	3720      	adds	r7, #32
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}
 800e298:	20001370 	.word	0x20001370

0800e29c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b098      	sub	sp, #96	; 0x60
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	60f8      	str	r0, [r7, #12]
 800e2a4:	60b9      	str	r1, [r7, #8]
 800e2a6:	4613      	mov	r3, r2
 800e2a8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d101      	bne.n	800e2b4 <f_open+0x18>
 800e2b0:	2309      	movs	r3, #9
 800e2b2:	e1ad      	b.n	800e610 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e2b4:	79fb      	ldrb	r3, [r7, #7]
 800e2b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e2ba:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e2bc:	79fa      	ldrb	r2, [r7, #7]
 800e2be:	f107 0110 	add.w	r1, r7, #16
 800e2c2:	f107 0308 	add.w	r3, r7, #8
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f7ff fd20 	bl	800dd0c <find_volume>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800e2d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	f040 8191 	bne.w	800e5fe <f_open+0x362>
		dj.obj.fs = fs;
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e2e0:	68ba      	ldr	r2, [r7, #8]
 800e2e2:	f107 0314 	add.w	r3, r7, #20
 800e2e6:	4611      	mov	r1, r2
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f7ff fc03 	bl	800daf4 <follow_path>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e2f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d11a      	bne.n	800e332 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e2fc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e300:	b25b      	sxtb	r3, r3
 800e302:	2b00      	cmp	r3, #0
 800e304:	da03      	bge.n	800e30e <f_open+0x72>
				res = FR_INVALID_NAME;
 800e306:	2306      	movs	r3, #6
 800e308:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e30c:	e011      	b.n	800e332 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e30e:	79fb      	ldrb	r3, [r7, #7]
 800e310:	f023 0301 	bic.w	r3, r3, #1
 800e314:	2b00      	cmp	r3, #0
 800e316:	bf14      	ite	ne
 800e318:	2301      	movne	r3, #1
 800e31a:	2300      	moveq	r3, #0
 800e31c:	b2db      	uxtb	r3, r3
 800e31e:	461a      	mov	r2, r3
 800e320:	f107 0314 	add.w	r3, r7, #20
 800e324:	4611      	mov	r1, r2
 800e326:	4618      	mov	r0, r3
 800e328:	f7fe fbd2 	bl	800cad0 <chk_lock>
 800e32c:	4603      	mov	r3, r0
 800e32e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e332:	79fb      	ldrb	r3, [r7, #7]
 800e334:	f003 031c 	and.w	r3, r3, #28
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d07f      	beq.n	800e43c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e33c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e340:	2b00      	cmp	r3, #0
 800e342:	d017      	beq.n	800e374 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e344:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e348:	2b04      	cmp	r3, #4
 800e34a:	d10e      	bne.n	800e36a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e34c:	f7fe fc1c 	bl	800cb88 <enq_lock>
 800e350:	4603      	mov	r3, r0
 800e352:	2b00      	cmp	r3, #0
 800e354:	d006      	beq.n	800e364 <f_open+0xc8>
 800e356:	f107 0314 	add.w	r3, r7, #20
 800e35a:	4618      	mov	r0, r3
 800e35c:	f7ff fb03 	bl	800d966 <dir_register>
 800e360:	4603      	mov	r3, r0
 800e362:	e000      	b.n	800e366 <f_open+0xca>
 800e364:	2312      	movs	r3, #18
 800e366:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e36a:	79fb      	ldrb	r3, [r7, #7]
 800e36c:	f043 0308 	orr.w	r3, r3, #8
 800e370:	71fb      	strb	r3, [r7, #7]
 800e372:	e010      	b.n	800e396 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e374:	7ebb      	ldrb	r3, [r7, #26]
 800e376:	f003 0311 	and.w	r3, r3, #17
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d003      	beq.n	800e386 <f_open+0xea>
					res = FR_DENIED;
 800e37e:	2307      	movs	r3, #7
 800e380:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e384:	e007      	b.n	800e396 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e386:	79fb      	ldrb	r3, [r7, #7]
 800e388:	f003 0304 	and.w	r3, r3, #4
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d002      	beq.n	800e396 <f_open+0xfa>
 800e390:	2308      	movs	r3, #8
 800e392:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e396:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d168      	bne.n	800e470 <f_open+0x1d4>
 800e39e:	79fb      	ldrb	r3, [r7, #7]
 800e3a0:	f003 0308 	and.w	r3, r3, #8
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d063      	beq.n	800e470 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e3a8:	f7fb f9f8 	bl	800979c <get_fattime>
 800e3ac:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e3ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3b0:	330e      	adds	r3, #14
 800e3b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f7fe fae1 	bl	800c97c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e3ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3bc:	3316      	adds	r3, #22
 800e3be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f7fe fadb 	bl	800c97c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3c8:	330b      	adds	r3, #11
 800e3ca:	2220      	movs	r2, #32
 800e3cc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e3ce:	693b      	ldr	r3, [r7, #16]
 800e3d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e3d2:	4611      	mov	r1, r2
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f7ff fa32 	bl	800d83e <ld_clust>
 800e3da:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e3dc:	693b      	ldr	r3, [r7, #16]
 800e3de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f7ff fa4a 	bl	800d87c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e3e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3ea:	331c      	adds	r3, #28
 800e3ec:	2100      	movs	r1, #0
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f7fe fac4 	bl	800c97c <st_dword>
					fs->wflag = 1;
 800e3f4:	693b      	ldr	r3, [r7, #16]
 800e3f6:	2201      	movs	r2, #1
 800e3f8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e3fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d037      	beq.n	800e470 <f_open+0x1d4>
						dw = fs->winsect;
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e404:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e406:	f107 0314 	add.w	r3, r7, #20
 800e40a:	2200      	movs	r2, #0
 800e40c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e40e:	4618      	mov	r0, r3
 800e410:	f7fe ff5d 	bl	800d2ce <remove_chain>
 800e414:	4603      	mov	r3, r0
 800e416:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800e41a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d126      	bne.n	800e470 <f_open+0x1d4>
							res = move_window(fs, dw);
 800e422:	693b      	ldr	r3, [r7, #16]
 800e424:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e426:	4618      	mov	r0, r3
 800e428:	f7fe fd02 	bl	800ce30 <move_window>
 800e42c:	4603      	mov	r3, r0
 800e42e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e432:	693b      	ldr	r3, [r7, #16]
 800e434:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e436:	3a01      	subs	r2, #1
 800e438:	60da      	str	r2, [r3, #12]
 800e43a:	e019      	b.n	800e470 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e43c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e440:	2b00      	cmp	r3, #0
 800e442:	d115      	bne.n	800e470 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e444:	7ebb      	ldrb	r3, [r7, #26]
 800e446:	f003 0310 	and.w	r3, r3, #16
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d003      	beq.n	800e456 <f_open+0x1ba>
					res = FR_NO_FILE;
 800e44e:	2304      	movs	r3, #4
 800e450:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e454:	e00c      	b.n	800e470 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e456:	79fb      	ldrb	r3, [r7, #7]
 800e458:	f003 0302 	and.w	r3, r3, #2
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d007      	beq.n	800e470 <f_open+0x1d4>
 800e460:	7ebb      	ldrb	r3, [r7, #26]
 800e462:	f003 0301 	and.w	r3, r3, #1
 800e466:	2b00      	cmp	r3, #0
 800e468:	d002      	beq.n	800e470 <f_open+0x1d4>
						res = FR_DENIED;
 800e46a:	2307      	movs	r3, #7
 800e46c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e470:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e474:	2b00      	cmp	r3, #0
 800e476:	d128      	bne.n	800e4ca <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e478:	79fb      	ldrb	r3, [r7, #7]
 800e47a:	f003 0308 	and.w	r3, r3, #8
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d003      	beq.n	800e48a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e482:	79fb      	ldrb	r3, [r7, #7]
 800e484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e488:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e48a:	693b      	ldr	r3, [r7, #16]
 800e48c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e498:	79fb      	ldrb	r3, [r7, #7]
 800e49a:	f023 0301 	bic.w	r3, r3, #1
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	bf14      	ite	ne
 800e4a2:	2301      	movne	r3, #1
 800e4a4:	2300      	moveq	r3, #0
 800e4a6:	b2db      	uxtb	r3, r3
 800e4a8:	461a      	mov	r2, r3
 800e4aa:	f107 0314 	add.w	r3, r7, #20
 800e4ae:	4611      	mov	r1, r2
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f7fe fb8b 	bl	800cbcc <inc_lock>
 800e4b6:	4602      	mov	r2, r0
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	691b      	ldr	r3, [r3, #16]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d102      	bne.n	800e4ca <f_open+0x22e>
 800e4c4:	2302      	movs	r3, #2
 800e4c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e4ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	f040 8095 	bne.w	800e5fe <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e4d4:	693b      	ldr	r3, [r7, #16]
 800e4d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e4d8:	4611      	mov	r1, r2
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f7ff f9af 	bl	800d83e <ld_clust>
 800e4e0:	4602      	mov	r2, r0
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e4e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4e8:	331c      	adds	r3, #28
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f7fe fa08 	bl	800c900 <ld_dword>
 800e4f0:	4602      	mov	r2, r0
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e4fc:	693a      	ldr	r2, [r7, #16]
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	88da      	ldrh	r2, [r3, #6]
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	79fa      	ldrb	r2, [r7, #7]
 800e50e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	2200      	movs	r2, #0
 800e514:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	2200      	movs	r2, #0
 800e51a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	2200      	movs	r2, #0
 800e520:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	3330      	adds	r3, #48	; 0x30
 800e526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e52a:	2100      	movs	r1, #0
 800e52c:	4618      	mov	r0, r3
 800e52e:	f7fe fa72 	bl	800ca16 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e532:	79fb      	ldrb	r3, [r7, #7]
 800e534:	f003 0320 	and.w	r3, r3, #32
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d060      	beq.n	800e5fe <f_open+0x362>
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	68db      	ldr	r3, [r3, #12]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d05c      	beq.n	800e5fe <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	68da      	ldr	r2, [r3, #12]
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e54c:	693b      	ldr	r3, [r7, #16]
 800e54e:	895b      	ldrh	r3, [r3, #10]
 800e550:	025b      	lsls	r3, r3, #9
 800e552:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	689b      	ldr	r3, [r3, #8]
 800e558:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	68db      	ldr	r3, [r3, #12]
 800e55e:	657b      	str	r3, [r7, #84]	; 0x54
 800e560:	e016      	b.n	800e590 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e566:	4618      	mov	r0, r3
 800e568:	f7fe fd1d 	bl	800cfa6 <get_fat>
 800e56c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e56e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e570:	2b01      	cmp	r3, #1
 800e572:	d802      	bhi.n	800e57a <f_open+0x2de>
 800e574:	2302      	movs	r3, #2
 800e576:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e57a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e57c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e580:	d102      	bne.n	800e588 <f_open+0x2ec>
 800e582:	2301      	movs	r3, #1
 800e584:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e588:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e58a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e58c:	1ad3      	subs	r3, r2, r3
 800e58e:	657b      	str	r3, [r7, #84]	; 0x54
 800e590:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e594:	2b00      	cmp	r3, #0
 800e596:	d103      	bne.n	800e5a0 <f_open+0x304>
 800e598:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e59a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e59c:	429a      	cmp	r2, r3
 800e59e:	d8e0      	bhi.n	800e562 <f_open+0x2c6>
				}
				fp->clust = clst;
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e5a4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e5a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d127      	bne.n	800e5fe <f_open+0x362>
 800e5ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d022      	beq.n	800e5fe <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e5b8:	693b      	ldr	r3, [r7, #16]
 800e5ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f7fe fcd3 	bl	800cf68 <clust2sect>
 800e5c2:	6478      	str	r0, [r7, #68]	; 0x44
 800e5c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d103      	bne.n	800e5d2 <f_open+0x336>
						res = FR_INT_ERR;
 800e5ca:	2302      	movs	r3, #2
 800e5cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e5d0:	e015      	b.n	800e5fe <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e5d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5d4:	0a5a      	lsrs	r2, r3, #9
 800e5d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5d8:	441a      	add	r2, r3
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e5de:	693b      	ldr	r3, [r7, #16]
 800e5e0:	7858      	ldrb	r0, [r3, #1]
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	6a1a      	ldr	r2, [r3, #32]
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	f7fe f911 	bl	800c814 <disk_read>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d002      	beq.n	800e5fe <f_open+0x362>
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e5fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e602:	2b00      	cmp	r3, #0
 800e604:	d002      	beq.n	800e60c <f_open+0x370>
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	2200      	movs	r2, #0
 800e60a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e60c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800e610:	4618      	mov	r0, r3
 800e612:	3760      	adds	r7, #96	; 0x60
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}

0800e618 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b08e      	sub	sp, #56	; 0x38
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	60f8      	str	r0, [r7, #12]
 800e620:	60b9      	str	r1, [r7, #8]
 800e622:	607a      	str	r2, [r7, #4]
 800e624:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e62a:	683b      	ldr	r3, [r7, #0]
 800e62c:	2200      	movs	r2, #0
 800e62e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	f107 0214 	add.w	r2, r7, #20
 800e636:	4611      	mov	r1, r2
 800e638:	4618      	mov	r0, r3
 800e63a:	f7ff fdb3 	bl	800e1a4 <validate>
 800e63e:	4603      	mov	r3, r0
 800e640:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e644:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d107      	bne.n	800e65c <f_read+0x44>
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	7d5b      	ldrb	r3, [r3, #21]
 800e650:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e654:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d002      	beq.n	800e662 <f_read+0x4a>
 800e65c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e660:	e115      	b.n	800e88e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	7d1b      	ldrb	r3, [r3, #20]
 800e666:	f003 0301 	and.w	r3, r3, #1
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d101      	bne.n	800e672 <f_read+0x5a>
 800e66e:	2307      	movs	r3, #7
 800e670:	e10d      	b.n	800e88e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	68da      	ldr	r2, [r3, #12]
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	699b      	ldr	r3, [r3, #24]
 800e67a:	1ad3      	subs	r3, r2, r3
 800e67c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e67e:	687a      	ldr	r2, [r7, #4]
 800e680:	6a3b      	ldr	r3, [r7, #32]
 800e682:	429a      	cmp	r2, r3
 800e684:	f240 80fe 	bls.w	800e884 <f_read+0x26c>
 800e688:	6a3b      	ldr	r3, [r7, #32]
 800e68a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e68c:	e0fa      	b.n	800e884 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	699b      	ldr	r3, [r3, #24]
 800e692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e696:	2b00      	cmp	r3, #0
 800e698:	f040 80c6 	bne.w	800e828 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	699b      	ldr	r3, [r3, #24]
 800e6a0:	0a5b      	lsrs	r3, r3, #9
 800e6a2:	697a      	ldr	r2, [r7, #20]
 800e6a4:	8952      	ldrh	r2, [r2, #10]
 800e6a6:	3a01      	subs	r2, #1
 800e6a8:	4013      	ands	r3, r2
 800e6aa:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e6ac:	69fb      	ldr	r3, [r7, #28]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d12f      	bne.n	800e712 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	699b      	ldr	r3, [r3, #24]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d103      	bne.n	800e6c2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	689b      	ldr	r3, [r3, #8]
 800e6be:	633b      	str	r3, [r7, #48]	; 0x30
 800e6c0:	e013      	b.n	800e6ea <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d007      	beq.n	800e6da <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	699b      	ldr	r3, [r3, #24]
 800e6ce:	4619      	mov	r1, r3
 800e6d0:	68f8      	ldr	r0, [r7, #12]
 800e6d2:	f7fe fef9 	bl	800d4c8 <clmt_clust>
 800e6d6:	6338      	str	r0, [r7, #48]	; 0x30
 800e6d8:	e007      	b.n	800e6ea <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e6da:	68fa      	ldr	r2, [r7, #12]
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	69db      	ldr	r3, [r3, #28]
 800e6e0:	4619      	mov	r1, r3
 800e6e2:	4610      	mov	r0, r2
 800e6e4:	f7fe fc5f 	bl	800cfa6 <get_fat>
 800e6e8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ec:	2b01      	cmp	r3, #1
 800e6ee:	d804      	bhi.n	800e6fa <f_read+0xe2>
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	2202      	movs	r2, #2
 800e6f4:	755a      	strb	r2, [r3, #21]
 800e6f6:	2302      	movs	r3, #2
 800e6f8:	e0c9      	b.n	800e88e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e700:	d104      	bne.n	800e70c <f_read+0xf4>
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	2201      	movs	r2, #1
 800e706:	755a      	strb	r2, [r3, #21]
 800e708:	2301      	movs	r3, #1
 800e70a:	e0c0      	b.n	800e88e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e710:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e712:	697a      	ldr	r2, [r7, #20]
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	69db      	ldr	r3, [r3, #28]
 800e718:	4619      	mov	r1, r3
 800e71a:	4610      	mov	r0, r2
 800e71c:	f7fe fc24 	bl	800cf68 <clust2sect>
 800e720:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e722:	69bb      	ldr	r3, [r7, #24]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d104      	bne.n	800e732 <f_read+0x11a>
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	2202      	movs	r2, #2
 800e72c:	755a      	strb	r2, [r3, #21]
 800e72e:	2302      	movs	r3, #2
 800e730:	e0ad      	b.n	800e88e <f_read+0x276>
			sect += csect;
 800e732:	69ba      	ldr	r2, [r7, #24]
 800e734:	69fb      	ldr	r3, [r7, #28]
 800e736:	4413      	add	r3, r2
 800e738:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	0a5b      	lsrs	r3, r3, #9
 800e73e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e742:	2b00      	cmp	r3, #0
 800e744:	d039      	beq.n	800e7ba <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e746:	69fa      	ldr	r2, [r7, #28]
 800e748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e74a:	4413      	add	r3, r2
 800e74c:	697a      	ldr	r2, [r7, #20]
 800e74e:	8952      	ldrh	r2, [r2, #10]
 800e750:	4293      	cmp	r3, r2
 800e752:	d905      	bls.n	800e760 <f_read+0x148>
					cc = fs->csize - csect;
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	895b      	ldrh	r3, [r3, #10]
 800e758:	461a      	mov	r2, r3
 800e75a:	69fb      	ldr	r3, [r7, #28]
 800e75c:	1ad3      	subs	r3, r2, r3
 800e75e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e760:	697b      	ldr	r3, [r7, #20]
 800e762:	7858      	ldrb	r0, [r3, #1]
 800e764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e766:	69ba      	ldr	r2, [r7, #24]
 800e768:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e76a:	f7fe f853 	bl	800c814 <disk_read>
 800e76e:	4603      	mov	r3, r0
 800e770:	2b00      	cmp	r3, #0
 800e772:	d004      	beq.n	800e77e <f_read+0x166>
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	2201      	movs	r2, #1
 800e778:	755a      	strb	r2, [r3, #21]
 800e77a:	2301      	movs	r3, #1
 800e77c:	e087      	b.n	800e88e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	7d1b      	ldrb	r3, [r3, #20]
 800e782:	b25b      	sxtb	r3, r3
 800e784:	2b00      	cmp	r3, #0
 800e786:	da14      	bge.n	800e7b2 <f_read+0x19a>
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	6a1a      	ldr	r2, [r3, #32]
 800e78c:	69bb      	ldr	r3, [r7, #24]
 800e78e:	1ad3      	subs	r3, r2, r3
 800e790:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e792:	429a      	cmp	r2, r3
 800e794:	d90d      	bls.n	800e7b2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	6a1a      	ldr	r2, [r3, #32]
 800e79a:	69bb      	ldr	r3, [r7, #24]
 800e79c:	1ad3      	subs	r3, r2, r3
 800e79e:	025b      	lsls	r3, r3, #9
 800e7a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7a2:	18d0      	adds	r0, r2, r3
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	3330      	adds	r3, #48	; 0x30
 800e7a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e7ac:	4619      	mov	r1, r3
 800e7ae:	f7fe f911 	bl	800c9d4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7b4:	025b      	lsls	r3, r3, #9
 800e7b6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800e7b8:	e050      	b.n	800e85c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	6a1b      	ldr	r3, [r3, #32]
 800e7be:	69ba      	ldr	r2, [r7, #24]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d02e      	beq.n	800e822 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	7d1b      	ldrb	r3, [r3, #20]
 800e7c8:	b25b      	sxtb	r3, r3
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	da18      	bge.n	800e800 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e7ce:	697b      	ldr	r3, [r7, #20]
 800e7d0:	7858      	ldrb	r0, [r3, #1]
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	6a1a      	ldr	r2, [r3, #32]
 800e7dc:	2301      	movs	r3, #1
 800e7de:	f7fe f839 	bl	800c854 <disk_write>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d004      	beq.n	800e7f2 <f_read+0x1da>
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	2201      	movs	r2, #1
 800e7ec:	755a      	strb	r2, [r3, #21]
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	e04d      	b.n	800e88e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	7d1b      	ldrb	r3, [r3, #20]
 800e7f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e7fa:	b2da      	uxtb	r2, r3
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	7858      	ldrb	r0, [r3, #1]
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e80a:	2301      	movs	r3, #1
 800e80c:	69ba      	ldr	r2, [r7, #24]
 800e80e:	f7fe f801 	bl	800c814 <disk_read>
 800e812:	4603      	mov	r3, r0
 800e814:	2b00      	cmp	r3, #0
 800e816:	d004      	beq.n	800e822 <f_read+0x20a>
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	2201      	movs	r2, #1
 800e81c:	755a      	strb	r2, [r3, #21]
 800e81e:	2301      	movs	r3, #1
 800e820:	e035      	b.n	800e88e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	69ba      	ldr	r2, [r7, #24]
 800e826:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	699b      	ldr	r3, [r3, #24]
 800e82c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e830:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e834:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d901      	bls.n	800e842 <f_read+0x22a>
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	699b      	ldr	r3, [r3, #24]
 800e84c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e850:	4413      	add	r3, r2
 800e852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e854:	4619      	mov	r1, r3
 800e856:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e858:	f7fe f8bc 	bl	800c9d4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e85c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e860:	4413      	add	r3, r2
 800e862:	627b      	str	r3, [r7, #36]	; 0x24
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	699a      	ldr	r2, [r3, #24]
 800e868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e86a:	441a      	add	r2, r3
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	619a      	str	r2, [r3, #24]
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	681a      	ldr	r2, [r3, #0]
 800e874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e876:	441a      	add	r2, r3
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	601a      	str	r2, [r3, #0]
 800e87c:	687a      	ldr	r2, [r7, #4]
 800e87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e880:	1ad3      	subs	r3, r2, r3
 800e882:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2b00      	cmp	r3, #0
 800e888:	f47f af01 	bne.w	800e68e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e88c:	2300      	movs	r3, #0
}
 800e88e:	4618      	mov	r0, r3
 800e890:	3738      	adds	r7, #56	; 0x38
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}

0800e896 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e896:	b580      	push	{r7, lr}
 800e898:	b086      	sub	sp, #24
 800e89a:	af00      	add	r7, sp, #0
 800e89c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f107 0208 	add.w	r2, r7, #8
 800e8a4:	4611      	mov	r1, r2
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f7ff fc7c 	bl	800e1a4 <validate>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e8b0:	7dfb      	ldrb	r3, [r7, #23]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d168      	bne.n	800e988 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	7d1b      	ldrb	r3, [r3, #20]
 800e8ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d062      	beq.n	800e988 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	7d1b      	ldrb	r3, [r3, #20]
 800e8c6:	b25b      	sxtb	r3, r3
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	da15      	bge.n	800e8f8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	7858      	ldrb	r0, [r3, #1]
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	6a1a      	ldr	r2, [r3, #32]
 800e8da:	2301      	movs	r3, #1
 800e8dc:	f7fd ffba 	bl	800c854 <disk_write>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d001      	beq.n	800e8ea <f_sync+0x54>
 800e8e6:	2301      	movs	r3, #1
 800e8e8:	e04f      	b.n	800e98a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	7d1b      	ldrb	r3, [r3, #20]
 800e8ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8f2:	b2da      	uxtb	r2, r3
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e8f8:	f7fa ff50 	bl	800979c <get_fattime>
 800e8fc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e8fe:	68ba      	ldr	r2, [r7, #8]
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e904:	4619      	mov	r1, r3
 800e906:	4610      	mov	r0, r2
 800e908:	f7fe fa92 	bl	800ce30 <move_window>
 800e90c:	4603      	mov	r3, r0
 800e90e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e910:	7dfb      	ldrb	r3, [r7, #23]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d138      	bne.n	800e988 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e91a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	330b      	adds	r3, #11
 800e920:	781a      	ldrb	r2, [r3, #0]
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	330b      	adds	r3, #11
 800e926:	f042 0220 	orr.w	r2, r2, #32
 800e92a:	b2d2      	uxtb	r2, r2
 800e92c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6818      	ldr	r0, [r3, #0]
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	689b      	ldr	r3, [r3, #8]
 800e936:	461a      	mov	r2, r3
 800e938:	68f9      	ldr	r1, [r7, #12]
 800e93a:	f7fe ff9f 	bl	800d87c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	f103 021c 	add.w	r2, r3, #28
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	68db      	ldr	r3, [r3, #12]
 800e948:	4619      	mov	r1, r3
 800e94a:	4610      	mov	r0, r2
 800e94c:	f7fe f816 	bl	800c97c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	3316      	adds	r3, #22
 800e954:	6939      	ldr	r1, [r7, #16]
 800e956:	4618      	mov	r0, r3
 800e958:	f7fe f810 	bl	800c97c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	3312      	adds	r3, #18
 800e960:	2100      	movs	r1, #0
 800e962:	4618      	mov	r0, r3
 800e964:	f7fd ffef 	bl	800c946 <st_word>
					fs->wflag = 1;
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	2201      	movs	r2, #1
 800e96c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e96e:	68bb      	ldr	r3, [r7, #8]
 800e970:	4618      	mov	r0, r3
 800e972:	f7fe fa8b 	bl	800ce8c <sync_fs>
 800e976:	4603      	mov	r3, r0
 800e978:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	7d1b      	ldrb	r3, [r3, #20]
 800e97e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e982:	b2da      	uxtb	r2, r3
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e988:	7dfb      	ldrb	r3, [r7, #23]
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	3718      	adds	r7, #24
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}

0800e992 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e992:	b580      	push	{r7, lr}
 800e994:	b084      	sub	sp, #16
 800e996:	af00      	add	r7, sp, #0
 800e998:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e99a:	6878      	ldr	r0, [r7, #4]
 800e99c:	f7ff ff7b 	bl	800e896 <f_sync>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e9a4:	7bfb      	ldrb	r3, [r7, #15]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d118      	bne.n	800e9dc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	f107 0208 	add.w	r2, r7, #8
 800e9b0:	4611      	mov	r1, r2
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f7ff fbf6 	bl	800e1a4 <validate>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e9bc:	7bfb      	ldrb	r3, [r7, #15]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d10c      	bne.n	800e9dc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	691b      	ldr	r3, [r3, #16]
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f7fe f98e 	bl	800cce8 <dec_lock>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e9d0:	7bfb      	ldrb	r3, [r7, #15]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d102      	bne.n	800e9dc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e9dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3710      	adds	r7, #16
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}

0800e9e6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e9e6:	b580      	push	{r7, lr}
 800e9e8:	b090      	sub	sp, #64	; 0x40
 800e9ea:	af00      	add	r7, sp, #0
 800e9ec:	6078      	str	r0, [r7, #4]
 800e9ee:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f107 0208 	add.w	r2, r7, #8
 800e9f6:	4611      	mov	r1, r2
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f7ff fbd3 	bl	800e1a4 <validate>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ea04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d103      	bne.n	800ea14 <f_lseek+0x2e>
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	7d5b      	ldrb	r3, [r3, #21]
 800ea10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ea14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d002      	beq.n	800ea22 <f_lseek+0x3c>
 800ea1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ea20:	e1e6      	b.n	800edf0 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	f000 80d1 	beq.w	800ebce <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea32:	d15a      	bne.n	800eaea <f_lseek+0x104>
			tbl = fp->cltbl;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea38:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ea3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea3c:	1d1a      	adds	r2, r3, #4
 800ea3e:	627a      	str	r2, [r7, #36]	; 0x24
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	617b      	str	r3, [r7, #20]
 800ea44:	2302      	movs	r3, #2
 800ea46:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	689b      	ldr	r3, [r3, #8]
 800ea4c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800ea4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d03a      	beq.n	800eaca <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ea54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea56:	613b      	str	r3, [r7, #16]
 800ea58:	2300      	movs	r3, #0
 800ea5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea5e:	3302      	adds	r3, #2
 800ea60:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800ea62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea64:	60fb      	str	r3, [r7, #12]
 800ea66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea68:	3301      	adds	r3, #1
 800ea6a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ea70:	4618      	mov	r0, r3
 800ea72:	f7fe fa98 	bl	800cfa6 <get_fat>
 800ea76:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ea78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea7a:	2b01      	cmp	r3, #1
 800ea7c:	d804      	bhi.n	800ea88 <f_lseek+0xa2>
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	2202      	movs	r2, #2
 800ea82:	755a      	strb	r2, [r3, #21]
 800ea84:	2302      	movs	r3, #2
 800ea86:	e1b3      	b.n	800edf0 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ea88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea8e:	d104      	bne.n	800ea9a <f_lseek+0xb4>
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2201      	movs	r2, #1
 800ea94:	755a      	strb	r2, [r3, #21]
 800ea96:	2301      	movs	r3, #1
 800ea98:	e1aa      	b.n	800edf0 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	3301      	adds	r3, #1
 800ea9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eaa0:	429a      	cmp	r2, r3
 800eaa2:	d0de      	beq.n	800ea62 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800eaa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eaa6:	697b      	ldr	r3, [r7, #20]
 800eaa8:	429a      	cmp	r2, r3
 800eaaa:	d809      	bhi.n	800eac0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800eaac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaae:	1d1a      	adds	r2, r3, #4
 800eab0:	627a      	str	r2, [r7, #36]	; 0x24
 800eab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eab4:	601a      	str	r2, [r3, #0]
 800eab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab8:	1d1a      	adds	r2, r3, #4
 800eaba:	627a      	str	r2, [r7, #36]	; 0x24
 800eabc:	693a      	ldr	r2, [r7, #16]
 800eabe:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800eac0:	68bb      	ldr	r3, [r7, #8]
 800eac2:	695b      	ldr	r3, [r3, #20]
 800eac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eac6:	429a      	cmp	r2, r3
 800eac8:	d3c4      	bcc.n	800ea54 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eace:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ead0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ead2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ead4:	697b      	ldr	r3, [r7, #20]
 800ead6:	429a      	cmp	r2, r3
 800ead8:	d803      	bhi.n	800eae2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800eada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eadc:	2200      	movs	r2, #0
 800eade:	601a      	str	r2, [r3, #0]
 800eae0:	e184      	b.n	800edec <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800eae2:	2311      	movs	r3, #17
 800eae4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800eae8:	e180      	b.n	800edec <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	68db      	ldr	r3, [r3, #12]
 800eaee:	683a      	ldr	r2, [r7, #0]
 800eaf0:	429a      	cmp	r2, r3
 800eaf2:	d902      	bls.n	800eafa <f_lseek+0x114>
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	68db      	ldr	r3, [r3, #12]
 800eaf8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	683a      	ldr	r2, [r7, #0]
 800eafe:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	f000 8172 	beq.w	800edec <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	3b01      	subs	r3, #1
 800eb0c:	4619      	mov	r1, r3
 800eb0e:	6878      	ldr	r0, [r7, #4]
 800eb10:	f7fe fcda 	bl	800d4c8 <clmt_clust>
 800eb14:	4602      	mov	r2, r0
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800eb1a:	68ba      	ldr	r2, [r7, #8]
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	69db      	ldr	r3, [r3, #28]
 800eb20:	4619      	mov	r1, r3
 800eb22:	4610      	mov	r0, r2
 800eb24:	f7fe fa20 	bl	800cf68 <clust2sect>
 800eb28:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800eb2a:	69bb      	ldr	r3, [r7, #24]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d104      	bne.n	800eb3a <f_lseek+0x154>
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2202      	movs	r2, #2
 800eb34:	755a      	strb	r2, [r3, #21]
 800eb36:	2302      	movs	r3, #2
 800eb38:	e15a      	b.n	800edf0 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	3b01      	subs	r3, #1
 800eb3e:	0a5b      	lsrs	r3, r3, #9
 800eb40:	68ba      	ldr	r2, [r7, #8]
 800eb42:	8952      	ldrh	r2, [r2, #10]
 800eb44:	3a01      	subs	r2, #1
 800eb46:	4013      	ands	r3, r2
 800eb48:	69ba      	ldr	r2, [r7, #24]
 800eb4a:	4413      	add	r3, r2
 800eb4c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	699b      	ldr	r3, [r3, #24]
 800eb52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	f000 8148 	beq.w	800edec <f_lseek+0x406>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	6a1b      	ldr	r3, [r3, #32]
 800eb60:	69ba      	ldr	r2, [r7, #24]
 800eb62:	429a      	cmp	r2, r3
 800eb64:	f000 8142 	beq.w	800edec <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	7d1b      	ldrb	r3, [r3, #20]
 800eb6c:	b25b      	sxtb	r3, r3
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	da18      	bge.n	800eba4 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	7858      	ldrb	r0, [r3, #1]
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	6a1a      	ldr	r2, [r3, #32]
 800eb80:	2301      	movs	r3, #1
 800eb82:	f7fd fe67 	bl	800c854 <disk_write>
 800eb86:	4603      	mov	r3, r0
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d004      	beq.n	800eb96 <f_lseek+0x1b0>
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2201      	movs	r2, #1
 800eb90:	755a      	strb	r2, [r3, #21]
 800eb92:	2301      	movs	r3, #1
 800eb94:	e12c      	b.n	800edf0 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	7d1b      	ldrb	r3, [r3, #20]
 800eb9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb9e:	b2da      	uxtb	r2, r3
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	7858      	ldrb	r0, [r3, #1]
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ebae:	2301      	movs	r3, #1
 800ebb0:	69ba      	ldr	r2, [r7, #24]
 800ebb2:	f7fd fe2f 	bl	800c814 <disk_read>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d004      	beq.n	800ebc6 <f_lseek+0x1e0>
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2201      	movs	r2, #1
 800ebc0:	755a      	strb	r2, [r3, #21]
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	e114      	b.n	800edf0 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	69ba      	ldr	r2, [r7, #24]
 800ebca:	621a      	str	r2, [r3, #32]
 800ebcc:	e10e      	b.n	800edec <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	68db      	ldr	r3, [r3, #12]
 800ebd2:	683a      	ldr	r2, [r7, #0]
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d908      	bls.n	800ebea <f_lseek+0x204>
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	7d1b      	ldrb	r3, [r3, #20]
 800ebdc:	f003 0302 	and.w	r3, r3, #2
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d102      	bne.n	800ebea <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	68db      	ldr	r3, [r3, #12]
 800ebe8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	699b      	ldr	r3, [r3, #24]
 800ebee:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	637b      	str	r3, [r7, #52]	; 0x34
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ebf8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	f000 80a7 	beq.w	800ed50 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	895b      	ldrh	r3, [r3, #10]
 800ec06:	025b      	lsls	r3, r3, #9
 800ec08:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ec0a:	6a3b      	ldr	r3, [r7, #32]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d01b      	beq.n	800ec48 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	1e5a      	subs	r2, r3, #1
 800ec14:	69fb      	ldr	r3, [r7, #28]
 800ec16:	fbb2 f2f3 	udiv	r2, r2, r3
 800ec1a:	6a3b      	ldr	r3, [r7, #32]
 800ec1c:	1e59      	subs	r1, r3, #1
 800ec1e:	69fb      	ldr	r3, [r7, #28]
 800ec20:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800ec24:	429a      	cmp	r2, r3
 800ec26:	d30f      	bcc.n	800ec48 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800ec28:	6a3b      	ldr	r3, [r7, #32]
 800ec2a:	1e5a      	subs	r2, r3, #1
 800ec2c:	69fb      	ldr	r3, [r7, #28]
 800ec2e:	425b      	negs	r3, r3
 800ec30:	401a      	ands	r2, r3
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	699b      	ldr	r3, [r3, #24]
 800ec3a:	683a      	ldr	r2, [r7, #0]
 800ec3c:	1ad3      	subs	r3, r2, r3
 800ec3e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	69db      	ldr	r3, [r3, #28]
 800ec44:	63bb      	str	r3, [r7, #56]	; 0x38
 800ec46:	e022      	b.n	800ec8e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	689b      	ldr	r3, [r3, #8]
 800ec4c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800ec4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d119      	bne.n	800ec88 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2100      	movs	r1, #0
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f7fe fb9d 	bl	800d398 <create_chain>
 800ec5e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ec60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec62:	2b01      	cmp	r3, #1
 800ec64:	d104      	bne.n	800ec70 <f_lseek+0x28a>
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2202      	movs	r2, #2
 800ec6a:	755a      	strb	r2, [r3, #21]
 800ec6c:	2302      	movs	r3, #2
 800ec6e:	e0bf      	b.n	800edf0 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ec70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec76:	d104      	bne.n	800ec82 <f_lseek+0x29c>
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2201      	movs	r2, #1
 800ec7c:	755a      	strb	r2, [r3, #21]
 800ec7e:	2301      	movs	r3, #1
 800ec80:	e0b6      	b.n	800edf0 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec86:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec8c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800ec8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d05d      	beq.n	800ed50 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800ec94:	e03a      	b.n	800ed0c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800ec96:	683a      	ldr	r2, [r7, #0]
 800ec98:	69fb      	ldr	r3, [r7, #28]
 800ec9a:	1ad3      	subs	r3, r2, r3
 800ec9c:	603b      	str	r3, [r7, #0]
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	699a      	ldr	r2, [r3, #24]
 800eca2:	69fb      	ldr	r3, [r7, #28]
 800eca4:	441a      	add	r2, r3
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	7d1b      	ldrb	r3, [r3, #20]
 800ecae:	f003 0302 	and.w	r3, r3, #2
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d00b      	beq.n	800ecce <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f7fe fb6c 	bl	800d398 <create_chain>
 800ecc0:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800ecc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d108      	bne.n	800ecda <f_lseek+0x2f4>
							ofs = 0; break;
 800ecc8:	2300      	movs	r3, #0
 800ecca:	603b      	str	r3, [r7, #0]
 800eccc:	e022      	b.n	800ed14 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f7fe f967 	bl	800cfa6 <get_fat>
 800ecd8:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ecda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ece0:	d104      	bne.n	800ecec <f_lseek+0x306>
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	2201      	movs	r2, #1
 800ece6:	755a      	strb	r2, [r3, #21]
 800ece8:	2301      	movs	r3, #1
 800ecea:	e081      	b.n	800edf0 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800ecec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecee:	2b01      	cmp	r3, #1
 800ecf0:	d904      	bls.n	800ecfc <f_lseek+0x316>
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	695b      	ldr	r3, [r3, #20]
 800ecf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ecf8:	429a      	cmp	r2, r3
 800ecfa:	d304      	bcc.n	800ed06 <f_lseek+0x320>
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2202      	movs	r2, #2
 800ed00:	755a      	strb	r2, [r3, #21]
 800ed02:	2302      	movs	r3, #2
 800ed04:	e074      	b.n	800edf0 <f_lseek+0x40a>
					fp->clust = clst;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed0a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800ed0c:	683a      	ldr	r2, [r7, #0]
 800ed0e:	69fb      	ldr	r3, [r7, #28]
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d8c0      	bhi.n	800ec96 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	699a      	ldr	r2, [r3, #24]
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	441a      	add	r2, r3
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d012      	beq.n	800ed50 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f7fe f91a 	bl	800cf68 <clust2sect>
 800ed34:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ed36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d104      	bne.n	800ed46 <f_lseek+0x360>
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2202      	movs	r2, #2
 800ed40:	755a      	strb	r2, [r3, #21]
 800ed42:	2302      	movs	r3, #2
 800ed44:	e054      	b.n	800edf0 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	0a5b      	lsrs	r3, r3, #9
 800ed4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ed4c:	4413      	add	r3, r2
 800ed4e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	699a      	ldr	r2, [r3, #24]
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	68db      	ldr	r3, [r3, #12]
 800ed58:	429a      	cmp	r2, r3
 800ed5a:	d90a      	bls.n	800ed72 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	699a      	ldr	r2, [r3, #24]
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	7d1b      	ldrb	r3, [r3, #20]
 800ed68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed6c:	b2da      	uxtb	r2, r3
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	699b      	ldr	r3, [r3, #24]
 800ed76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d036      	beq.n	800edec <f_lseek+0x406>
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6a1b      	ldr	r3, [r3, #32]
 800ed82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ed84:	429a      	cmp	r2, r3
 800ed86:	d031      	beq.n	800edec <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	7d1b      	ldrb	r3, [r3, #20]
 800ed8c:	b25b      	sxtb	r3, r3
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	da18      	bge.n	800edc4 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	7858      	ldrb	r0, [r3, #1]
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	6a1a      	ldr	r2, [r3, #32]
 800eda0:	2301      	movs	r3, #1
 800eda2:	f7fd fd57 	bl	800c854 <disk_write>
 800eda6:	4603      	mov	r3, r0
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d004      	beq.n	800edb6 <f_lseek+0x3d0>
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2201      	movs	r2, #1
 800edb0:	755a      	strb	r2, [r3, #21]
 800edb2:	2301      	movs	r3, #1
 800edb4:	e01c      	b.n	800edf0 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	7d1b      	ldrb	r3, [r3, #20]
 800edba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800edbe:	b2da      	uxtb	r2, r3
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	7858      	ldrb	r0, [r3, #1]
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800edce:	2301      	movs	r3, #1
 800edd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800edd2:	f7fd fd1f 	bl	800c814 <disk_read>
 800edd6:	4603      	mov	r3, r0
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d004      	beq.n	800ede6 <f_lseek+0x400>
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2201      	movs	r2, #1
 800ede0:	755a      	strb	r2, [r3, #21]
 800ede2:	2301      	movs	r3, #1
 800ede4:	e004      	b.n	800edf0 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800edea:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800edec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	3740      	adds	r7, #64	; 0x40
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}

0800edf8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800edf8:	b480      	push	{r7}
 800edfa:	b087      	sub	sp, #28
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	60f8      	str	r0, [r7, #12]
 800ee00:	60b9      	str	r1, [r7, #8]
 800ee02:	4613      	mov	r3, r2
 800ee04:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ee06:	2301      	movs	r3, #1
 800ee08:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ee0e:	4b1f      	ldr	r3, [pc, #124]	; (800ee8c <FATFS_LinkDriverEx+0x94>)
 800ee10:	7a5b      	ldrb	r3, [r3, #9]
 800ee12:	b2db      	uxtb	r3, r3
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d131      	bne.n	800ee7c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ee18:	4b1c      	ldr	r3, [pc, #112]	; (800ee8c <FATFS_LinkDriverEx+0x94>)
 800ee1a:	7a5b      	ldrb	r3, [r3, #9]
 800ee1c:	b2db      	uxtb	r3, r3
 800ee1e:	461a      	mov	r2, r3
 800ee20:	4b1a      	ldr	r3, [pc, #104]	; (800ee8c <FATFS_LinkDriverEx+0x94>)
 800ee22:	2100      	movs	r1, #0
 800ee24:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ee26:	4b19      	ldr	r3, [pc, #100]	; (800ee8c <FATFS_LinkDriverEx+0x94>)
 800ee28:	7a5b      	ldrb	r3, [r3, #9]
 800ee2a:	b2db      	uxtb	r3, r3
 800ee2c:	4a17      	ldr	r2, [pc, #92]	; (800ee8c <FATFS_LinkDriverEx+0x94>)
 800ee2e:	009b      	lsls	r3, r3, #2
 800ee30:	4413      	add	r3, r2
 800ee32:	68fa      	ldr	r2, [r7, #12]
 800ee34:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ee36:	4b15      	ldr	r3, [pc, #84]	; (800ee8c <FATFS_LinkDriverEx+0x94>)
 800ee38:	7a5b      	ldrb	r3, [r3, #9]
 800ee3a:	b2db      	uxtb	r3, r3
 800ee3c:	461a      	mov	r2, r3
 800ee3e:	4b13      	ldr	r3, [pc, #76]	; (800ee8c <FATFS_LinkDriverEx+0x94>)
 800ee40:	4413      	add	r3, r2
 800ee42:	79fa      	ldrb	r2, [r7, #7]
 800ee44:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ee46:	4b11      	ldr	r3, [pc, #68]	; (800ee8c <FATFS_LinkDriverEx+0x94>)
 800ee48:	7a5b      	ldrb	r3, [r3, #9]
 800ee4a:	b2db      	uxtb	r3, r3
 800ee4c:	1c5a      	adds	r2, r3, #1
 800ee4e:	b2d1      	uxtb	r1, r2
 800ee50:	4a0e      	ldr	r2, [pc, #56]	; (800ee8c <FATFS_LinkDriverEx+0x94>)
 800ee52:	7251      	strb	r1, [r2, #9]
 800ee54:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ee56:	7dbb      	ldrb	r3, [r7, #22]
 800ee58:	3330      	adds	r3, #48	; 0x30
 800ee5a:	b2da      	uxtb	r2, r3
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	3301      	adds	r3, #1
 800ee64:	223a      	movs	r2, #58	; 0x3a
 800ee66:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ee68:	68bb      	ldr	r3, [r7, #8]
 800ee6a:	3302      	adds	r3, #2
 800ee6c:	222f      	movs	r2, #47	; 0x2f
 800ee6e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	3303      	adds	r3, #3
 800ee74:	2200      	movs	r2, #0
 800ee76:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ee7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee7e:	4618      	mov	r0, r3
 800ee80:	371c      	adds	r7, #28
 800ee82:	46bd      	mov	sp, r7
 800ee84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee88:	4770      	bx	lr
 800ee8a:	bf00      	nop
 800ee8c:	20001398 	.word	0x20001398

0800ee90 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b082      	sub	sp, #8
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
 800ee98:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	6839      	ldr	r1, [r7, #0]
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f7ff ffaa 	bl	800edf8 <FATFS_LinkDriverEx>
 800eea4:	4603      	mov	r3, r0
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	3708      	adds	r7, #8
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
	...

0800eeb0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800eeb4:	2201      	movs	r2, #1
 800eeb6:	490e      	ldr	r1, [pc, #56]	; (800eef0 <MX_USB_HOST_Init+0x40>)
 800eeb8:	480e      	ldr	r0, [pc, #56]	; (800eef4 <MX_USB_HOST_Init+0x44>)
 800eeba:	f7fc f913 	bl	800b0e4 <USBH_Init>
 800eebe:	4603      	mov	r3, r0
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d001      	beq.n	800eec8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800eec4:	f7f2 fab0 	bl	8001428 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800eec8:	490b      	ldr	r1, [pc, #44]	; (800eef8 <MX_USB_HOST_Init+0x48>)
 800eeca:	480a      	ldr	r0, [pc, #40]	; (800eef4 <MX_USB_HOST_Init+0x44>)
 800eecc:	f7fc f998 	bl	800b200 <USBH_RegisterClass>
 800eed0:	4603      	mov	r3, r0
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d001      	beq.n	800eeda <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800eed6:	f7f2 faa7 	bl	8001428 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800eeda:	4806      	ldr	r0, [pc, #24]	; (800eef4 <MX_USB_HOST_Init+0x44>)
 800eedc:	f7fc fa1c 	bl	800b318 <USBH_Start>
 800eee0:	4603      	mov	r3, r0
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d001      	beq.n	800eeea <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800eee6:	f7f2 fa9f 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800eeea:	bf00      	nop
 800eeec:	bd80      	pop	{r7, pc}
 800eeee:	bf00      	nop
 800eef0:	0800ef11 	.word	0x0800ef11
 800eef4:	20001a78 	.word	0x20001a78
 800eef8:	20000010 	.word	0x20000010

0800eefc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800ef00:	4802      	ldr	r0, [pc, #8]	; (800ef0c <MX_USB_HOST_Process+0x10>)
 800ef02:	f7fc fa19 	bl	800b338 <USBH_Process>
}
 800ef06:	bf00      	nop
 800ef08:	bd80      	pop	{r7, pc}
 800ef0a:	bf00      	nop
 800ef0c:	20001a78 	.word	0x20001a78

0800ef10 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ef10:	b480      	push	{r7}
 800ef12:	b083      	sub	sp, #12
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
 800ef18:	460b      	mov	r3, r1
 800ef1a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ef1c:	78fb      	ldrb	r3, [r7, #3]
 800ef1e:	3b01      	subs	r3, #1
 800ef20:	2b04      	cmp	r3, #4
 800ef22:	d819      	bhi.n	800ef58 <USBH_UserProcess+0x48>
 800ef24:	a201      	add	r2, pc, #4	; (adr r2, 800ef2c <USBH_UserProcess+0x1c>)
 800ef26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef2a:	bf00      	nop
 800ef2c:	0800ef59 	.word	0x0800ef59
 800ef30:	0800ef49 	.word	0x0800ef49
 800ef34:	0800ef59 	.word	0x0800ef59
 800ef38:	0800ef51 	.word	0x0800ef51
 800ef3c:	0800ef41 	.word	0x0800ef41
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ef40:	4b09      	ldr	r3, [pc, #36]	; (800ef68 <USBH_UserProcess+0x58>)
 800ef42:	2203      	movs	r2, #3
 800ef44:	701a      	strb	r2, [r3, #0]
  break;
 800ef46:	e008      	b.n	800ef5a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ef48:	4b07      	ldr	r3, [pc, #28]	; (800ef68 <USBH_UserProcess+0x58>)
 800ef4a:	2202      	movs	r2, #2
 800ef4c:	701a      	strb	r2, [r3, #0]
  break;
 800ef4e:	e004      	b.n	800ef5a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ef50:	4b05      	ldr	r3, [pc, #20]	; (800ef68 <USBH_UserProcess+0x58>)
 800ef52:	2201      	movs	r2, #1
 800ef54:	701a      	strb	r2, [r3, #0]
  break;
 800ef56:	e000      	b.n	800ef5a <USBH_UserProcess+0x4a>

  default:
  break;
 800ef58:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ef5a:	bf00      	nop
 800ef5c:	370c      	adds	r7, #12
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef64:	4770      	bx	lr
 800ef66:	bf00      	nop
 800ef68:	200013a4 	.word	0x200013a4

0800ef6c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b08a      	sub	sp, #40	; 0x28
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ef74:	f107 0314 	add.w	r3, r7, #20
 800ef78:	2200      	movs	r2, #0
 800ef7a:	601a      	str	r2, [r3, #0]
 800ef7c:	605a      	str	r2, [r3, #4]
 800ef7e:	609a      	str	r2, [r3, #8]
 800ef80:	60da      	str	r2, [r3, #12]
 800ef82:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ef8c:	d147      	bne.n	800f01e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ef8e:	2300      	movs	r3, #0
 800ef90:	613b      	str	r3, [r7, #16]
 800ef92:	4b25      	ldr	r3, [pc, #148]	; (800f028 <HAL_HCD_MspInit+0xbc>)
 800ef94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef96:	4a24      	ldr	r2, [pc, #144]	; (800f028 <HAL_HCD_MspInit+0xbc>)
 800ef98:	f043 0301 	orr.w	r3, r3, #1
 800ef9c:	6313      	str	r3, [r2, #48]	; 0x30
 800ef9e:	4b22      	ldr	r3, [pc, #136]	; (800f028 <HAL_HCD_MspInit+0xbc>)
 800efa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efa2:	f003 0301 	and.w	r3, r3, #1
 800efa6:	613b      	str	r3, [r7, #16]
 800efa8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800efaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800efae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800efb0:	2300      	movs	r3, #0
 800efb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800efb4:	2300      	movs	r3, #0
 800efb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800efb8:	f107 0314 	add.w	r3, r7, #20
 800efbc:	4619      	mov	r1, r3
 800efbe:	481b      	ldr	r0, [pc, #108]	; (800f02c <HAL_HCD_MspInit+0xc0>)
 800efc0:	f7f4 faf0 	bl	80035a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800efc4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800efc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800efca:	2302      	movs	r3, #2
 800efcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800efce:	2300      	movs	r3, #0
 800efd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800efd2:	2303      	movs	r3, #3
 800efd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800efd6:	230a      	movs	r3, #10
 800efd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800efda:	f107 0314 	add.w	r3, r7, #20
 800efde:	4619      	mov	r1, r3
 800efe0:	4812      	ldr	r0, [pc, #72]	; (800f02c <HAL_HCD_MspInit+0xc0>)
 800efe2:	f7f4 fadf 	bl	80035a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800efe6:	4b10      	ldr	r3, [pc, #64]	; (800f028 <HAL_HCD_MspInit+0xbc>)
 800efe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efea:	4a0f      	ldr	r2, [pc, #60]	; (800f028 <HAL_HCD_MspInit+0xbc>)
 800efec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eff0:	6353      	str	r3, [r2, #52]	; 0x34
 800eff2:	2300      	movs	r3, #0
 800eff4:	60fb      	str	r3, [r7, #12]
 800eff6:	4b0c      	ldr	r3, [pc, #48]	; (800f028 <HAL_HCD_MspInit+0xbc>)
 800eff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800effa:	4a0b      	ldr	r2, [pc, #44]	; (800f028 <HAL_HCD_MspInit+0xbc>)
 800effc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f000:	6453      	str	r3, [r2, #68]	; 0x44
 800f002:	4b09      	ldr	r3, [pc, #36]	; (800f028 <HAL_HCD_MspInit+0xbc>)
 800f004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f00a:	60fb      	str	r3, [r7, #12]
 800f00c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f00e:	2200      	movs	r2, #0
 800f010:	2100      	movs	r1, #0
 800f012:	2043      	movs	r0, #67	; 0x43
 800f014:	f7f3 febc 	bl	8002d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f018:	2043      	movs	r0, #67	; 0x43
 800f01a:	f7f3 fed5 	bl	8002dc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f01e:	bf00      	nop
 800f020:	3728      	adds	r7, #40	; 0x28
 800f022:	46bd      	mov	sp, r7
 800f024:	bd80      	pop	{r7, pc}
 800f026:	bf00      	nop
 800f028:	40023800 	.word	0x40023800
 800f02c:	40020000 	.word	0x40020000

0800f030 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b082      	sub	sp, #8
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f03e:	4618      	mov	r0, r3
 800f040:	f7fc fd4d 	bl	800bade <USBH_LL_IncTimer>
}
 800f044:	bf00      	nop
 800f046:	3708      	adds	r7, #8
 800f048:	46bd      	mov	sp, r7
 800f04a:	bd80      	pop	{r7, pc}

0800f04c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b082      	sub	sp, #8
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f05a:	4618      	mov	r0, r3
 800f05c:	f7fc fd85 	bl	800bb6a <USBH_LL_Connect>
}
 800f060:	bf00      	nop
 800f062:	3708      	adds	r7, #8
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}

0800f068 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b082      	sub	sp, #8
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f076:	4618      	mov	r0, r3
 800f078:	f7fc fd8e 	bl	800bb98 <USBH_LL_Disconnect>
}
 800f07c:	bf00      	nop
 800f07e:	3708      	adds	r7, #8
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}

0800f084 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f084:	b480      	push	{r7}
 800f086:	b083      	sub	sp, #12
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
 800f08c:	460b      	mov	r3, r1
 800f08e:	70fb      	strb	r3, [r7, #3]
 800f090:	4613      	mov	r3, r2
 800f092:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800f094:	bf00      	nop
 800f096:	370c      	adds	r7, #12
 800f098:	46bd      	mov	sp, r7
 800f09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09e:	4770      	bx	lr

0800f0a0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b082      	sub	sp, #8
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f7fc fd3f 	bl	800bb32 <USBH_LL_PortEnabled>
}
 800f0b4:	bf00      	nop
 800f0b6:	3708      	adds	r7, #8
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}

0800f0bc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b082      	sub	sp, #8
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f7fc fd3f 	bl	800bb4e <USBH_LL_PortDisabled>
}
 800f0d0:	bf00      	nop
 800f0d2:	3708      	adds	r7, #8
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}

0800f0d8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b082      	sub	sp, #8
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f0e6:	2b01      	cmp	r3, #1
 800f0e8:	d12a      	bne.n	800f140 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800f0ea:	4a18      	ldr	r2, [pc, #96]	; (800f14c <USBH_LL_Init+0x74>)
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	4a15      	ldr	r2, [pc, #84]	; (800f14c <USBH_LL_Init+0x74>)
 800f0f6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f0fa:	4b14      	ldr	r3, [pc, #80]	; (800f14c <USBH_LL_Init+0x74>)
 800f0fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f100:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800f102:	4b12      	ldr	r3, [pc, #72]	; (800f14c <USBH_LL_Init+0x74>)
 800f104:	2208      	movs	r2, #8
 800f106:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800f108:	4b10      	ldr	r3, [pc, #64]	; (800f14c <USBH_LL_Init+0x74>)
 800f10a:	2201      	movs	r2, #1
 800f10c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f10e:	4b0f      	ldr	r3, [pc, #60]	; (800f14c <USBH_LL_Init+0x74>)
 800f110:	2200      	movs	r2, #0
 800f112:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800f114:	4b0d      	ldr	r3, [pc, #52]	; (800f14c <USBH_LL_Init+0x74>)
 800f116:	2202      	movs	r2, #2
 800f118:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f11a:	4b0c      	ldr	r3, [pc, #48]	; (800f14c <USBH_LL_Init+0x74>)
 800f11c:	2200      	movs	r2, #0
 800f11e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800f120:	480a      	ldr	r0, [pc, #40]	; (800f14c <USBH_LL_Init+0x74>)
 800f122:	f7f4 fc30 	bl	8003986 <HAL_HCD_Init>
 800f126:	4603      	mov	r3, r0
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d001      	beq.n	800f130 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800f12c:	f7f2 f97c 	bl	8001428 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800f130:	4806      	ldr	r0, [pc, #24]	; (800f14c <USBH_LL_Init+0x74>)
 800f132:	f7f5 f814 	bl	800415e <HAL_HCD_GetCurrentFrame>
 800f136:	4603      	mov	r3, r0
 800f138:	4619      	mov	r1, r3
 800f13a:	6878      	ldr	r0, [r7, #4]
 800f13c:	f7fc fcc0 	bl	800bac0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f140:	2300      	movs	r3, #0
}
 800f142:	4618      	mov	r0, r3
 800f144:	3708      	adds	r7, #8
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}
 800f14a:	bf00      	nop
 800f14c:	20001e50 	.word	0x20001e50

0800f150 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b084      	sub	sp, #16
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f158:	2300      	movs	r3, #0
 800f15a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f15c:	2300      	movs	r3, #0
 800f15e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f166:	4618      	mov	r0, r3
 800f168:	f7f4 ff83 	bl	8004072 <HAL_HCD_Start>
 800f16c:	4603      	mov	r3, r0
 800f16e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f170:	7bfb      	ldrb	r3, [r7, #15]
 800f172:	4618      	mov	r0, r3
 800f174:	f000 f982 	bl	800f47c <USBH_Get_USB_Status>
 800f178:	4603      	mov	r3, r0
 800f17a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f17c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f17e:	4618      	mov	r0, r3
 800f180:	3710      	adds	r7, #16
 800f182:	46bd      	mov	sp, r7
 800f184:	bd80      	pop	{r7, pc}

0800f186 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f186:	b580      	push	{r7, lr}
 800f188:	b084      	sub	sp, #16
 800f18a:	af00      	add	r7, sp, #0
 800f18c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f18e:	2300      	movs	r3, #0
 800f190:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f192:	2300      	movs	r3, #0
 800f194:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f19c:	4618      	mov	r0, r3
 800f19e:	f7f4 ff8b 	bl	80040b8 <HAL_HCD_Stop>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f1a6:	7bfb      	ldrb	r3, [r7, #15]
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f000 f967 	bl	800f47c <USBH_Get_USB_Status>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	3710      	adds	r7, #16
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	bd80      	pop	{r7, pc}

0800f1bc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b084      	sub	sp, #16
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f7f4 ffd3 	bl	800417a <HAL_HCD_GetCurrentSpeed>
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	2b02      	cmp	r3, #2
 800f1d8:	d00c      	beq.n	800f1f4 <USBH_LL_GetSpeed+0x38>
 800f1da:	2b02      	cmp	r3, #2
 800f1dc:	d80d      	bhi.n	800f1fa <USBH_LL_GetSpeed+0x3e>
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d002      	beq.n	800f1e8 <USBH_LL_GetSpeed+0x2c>
 800f1e2:	2b01      	cmp	r3, #1
 800f1e4:	d003      	beq.n	800f1ee <USBH_LL_GetSpeed+0x32>
 800f1e6:	e008      	b.n	800f1fa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	73fb      	strb	r3, [r7, #15]
    break;
 800f1ec:	e008      	b.n	800f200 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800f1ee:	2301      	movs	r3, #1
 800f1f0:	73fb      	strb	r3, [r7, #15]
    break;
 800f1f2:	e005      	b.n	800f200 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800f1f4:	2302      	movs	r3, #2
 800f1f6:	73fb      	strb	r3, [r7, #15]
    break;
 800f1f8:	e002      	b.n	800f200 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800f1fa:	2301      	movs	r3, #1
 800f1fc:	73fb      	strb	r3, [r7, #15]
    break;
 800f1fe:	bf00      	nop
  }
  return  speed;
 800f200:	7bfb      	ldrb	r3, [r7, #15]
}
 800f202:	4618      	mov	r0, r3
 800f204:	3710      	adds	r7, #16
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}

0800f20a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800f20a:	b580      	push	{r7, lr}
 800f20c:	b084      	sub	sp, #16
 800f20e:	af00      	add	r7, sp, #0
 800f210:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f212:	2300      	movs	r3, #0
 800f214:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f216:	2300      	movs	r3, #0
 800f218:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f220:	4618      	mov	r0, r3
 800f222:	f7f4 ff66 	bl	80040f2 <HAL_HCD_ResetPort>
 800f226:	4603      	mov	r3, r0
 800f228:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f22a:	7bfb      	ldrb	r3, [r7, #15]
 800f22c:	4618      	mov	r0, r3
 800f22e:	f000 f925 	bl	800f47c <USBH_Get_USB_Status>
 800f232:	4603      	mov	r3, r0
 800f234:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f236:	7bbb      	ldrb	r3, [r7, #14]
}
 800f238:	4618      	mov	r0, r3
 800f23a:	3710      	adds	r7, #16
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}

0800f240 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b082      	sub	sp, #8
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
 800f248:	460b      	mov	r3, r1
 800f24a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f252:	78fa      	ldrb	r2, [r7, #3]
 800f254:	4611      	mov	r1, r2
 800f256:	4618      	mov	r0, r3
 800f258:	f7f4 ff6d 	bl	8004136 <HAL_HCD_HC_GetXferCount>
 800f25c:	4603      	mov	r3, r0
}
 800f25e:	4618      	mov	r0, r3
 800f260:	3708      	adds	r7, #8
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}

0800f266 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f266:	b590      	push	{r4, r7, lr}
 800f268:	b089      	sub	sp, #36	; 0x24
 800f26a:	af04      	add	r7, sp, #16
 800f26c:	6078      	str	r0, [r7, #4]
 800f26e:	4608      	mov	r0, r1
 800f270:	4611      	mov	r1, r2
 800f272:	461a      	mov	r2, r3
 800f274:	4603      	mov	r3, r0
 800f276:	70fb      	strb	r3, [r7, #3]
 800f278:	460b      	mov	r3, r1
 800f27a:	70bb      	strb	r3, [r7, #2]
 800f27c:	4613      	mov	r3, r2
 800f27e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f280:	2300      	movs	r3, #0
 800f282:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f284:	2300      	movs	r3, #0
 800f286:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f28e:	787c      	ldrb	r4, [r7, #1]
 800f290:	78ba      	ldrb	r2, [r7, #2]
 800f292:	78f9      	ldrb	r1, [r7, #3]
 800f294:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f296:	9302      	str	r3, [sp, #8]
 800f298:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f29c:	9301      	str	r3, [sp, #4]
 800f29e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f2a2:	9300      	str	r3, [sp, #0]
 800f2a4:	4623      	mov	r3, r4
 800f2a6:	f7f4 fbd0 	bl	8003a4a <HAL_HCD_HC_Init>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f2ae:	7bfb      	ldrb	r3, [r7, #15]
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f000 f8e3 	bl	800f47c <USBH_Get_USB_Status>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f2ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800f2bc:	4618      	mov	r0, r3
 800f2be:	3714      	adds	r7, #20
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	bd90      	pop	{r4, r7, pc}

0800f2c4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b084      	sub	sp, #16
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
 800f2cc:	460b      	mov	r3, r1
 800f2ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f2de:	78fa      	ldrb	r2, [r7, #3]
 800f2e0:	4611      	mov	r1, r2
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f7f4 fc40 	bl	8003b68 <HAL_HCD_HC_Halt>
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f2ec:	7bfb      	ldrb	r3, [r7, #15]
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f000 f8c4 	bl	800f47c <USBH_Get_USB_Status>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f2f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	3710      	adds	r7, #16
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}

0800f302 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f302:	b590      	push	{r4, r7, lr}
 800f304:	b089      	sub	sp, #36	; 0x24
 800f306:	af04      	add	r7, sp, #16
 800f308:	6078      	str	r0, [r7, #4]
 800f30a:	4608      	mov	r0, r1
 800f30c:	4611      	mov	r1, r2
 800f30e:	461a      	mov	r2, r3
 800f310:	4603      	mov	r3, r0
 800f312:	70fb      	strb	r3, [r7, #3]
 800f314:	460b      	mov	r3, r1
 800f316:	70bb      	strb	r3, [r7, #2]
 800f318:	4613      	mov	r3, r2
 800f31a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f31c:	2300      	movs	r3, #0
 800f31e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f320:	2300      	movs	r3, #0
 800f322:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f32a:	787c      	ldrb	r4, [r7, #1]
 800f32c:	78ba      	ldrb	r2, [r7, #2]
 800f32e:	78f9      	ldrb	r1, [r7, #3]
 800f330:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f334:	9303      	str	r3, [sp, #12]
 800f336:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f338:	9302      	str	r3, [sp, #8]
 800f33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f33c:	9301      	str	r3, [sp, #4]
 800f33e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f342:	9300      	str	r3, [sp, #0]
 800f344:	4623      	mov	r3, r4
 800f346:	f7f4 fc33 	bl	8003bb0 <HAL_HCD_HC_SubmitRequest>
 800f34a:	4603      	mov	r3, r0
 800f34c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800f34e:	7bfb      	ldrb	r3, [r7, #15]
 800f350:	4618      	mov	r0, r3
 800f352:	f000 f893 	bl	800f47c <USBH_Get_USB_Status>
 800f356:	4603      	mov	r3, r0
 800f358:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f35a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f35c:	4618      	mov	r0, r3
 800f35e:	3714      	adds	r7, #20
 800f360:	46bd      	mov	sp, r7
 800f362:	bd90      	pop	{r4, r7, pc}

0800f364 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b082      	sub	sp, #8
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
 800f36c:	460b      	mov	r3, r1
 800f36e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f376:	78fa      	ldrb	r2, [r7, #3]
 800f378:	4611      	mov	r1, r2
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7f4 fec7 	bl	800410e <HAL_HCD_HC_GetURBState>
 800f380:	4603      	mov	r3, r0
}
 800f382:	4618      	mov	r0, r3
 800f384:	3708      	adds	r7, #8
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}

0800f38a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f38a:	b580      	push	{r7, lr}
 800f38c:	b082      	sub	sp, #8
 800f38e:	af00      	add	r7, sp, #0
 800f390:	6078      	str	r0, [r7, #4]
 800f392:	460b      	mov	r3, r1
 800f394:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800f396:	20c8      	movs	r0, #200	; 0xc8
 800f398:	f7f2 fdb2 	bl	8001f00 <HAL_Delay>
  return USBH_OK;
 800f39c:	2300      	movs	r3, #0
}
 800f39e:	4618      	mov	r0, r3
 800f3a0:	3708      	adds	r7, #8
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bd80      	pop	{r7, pc}

0800f3a6 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f3a6:	b480      	push	{r7}
 800f3a8:	b085      	sub	sp, #20
 800f3aa:	af00      	add	r7, sp, #0
 800f3ac:	6078      	str	r0, [r7, #4]
 800f3ae:	460b      	mov	r3, r1
 800f3b0:	70fb      	strb	r3, [r7, #3]
 800f3b2:	4613      	mov	r3, r2
 800f3b4:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f3bc:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f3be:	78fb      	ldrb	r3, [r7, #3]
 800f3c0:	68fa      	ldr	r2, [r7, #12]
 800f3c2:	212c      	movs	r1, #44	; 0x2c
 800f3c4:	fb01 f303 	mul.w	r3, r1, r3
 800f3c8:	4413      	add	r3, r2
 800f3ca:	333b      	adds	r3, #59	; 0x3b
 800f3cc:	781b      	ldrb	r3, [r3, #0]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d009      	beq.n	800f3e6 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f3d2:	78fb      	ldrb	r3, [r7, #3]
 800f3d4:	68fa      	ldr	r2, [r7, #12]
 800f3d6:	212c      	movs	r1, #44	; 0x2c
 800f3d8:	fb01 f303 	mul.w	r3, r1, r3
 800f3dc:	4413      	add	r3, r2
 800f3de:	3354      	adds	r3, #84	; 0x54
 800f3e0:	78ba      	ldrb	r2, [r7, #2]
 800f3e2:	701a      	strb	r2, [r3, #0]
 800f3e4:	e008      	b.n	800f3f8 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f3e6:	78fb      	ldrb	r3, [r7, #3]
 800f3e8:	68fa      	ldr	r2, [r7, #12]
 800f3ea:	212c      	movs	r1, #44	; 0x2c
 800f3ec:	fb01 f303 	mul.w	r3, r1, r3
 800f3f0:	4413      	add	r3, r2
 800f3f2:	3355      	adds	r3, #85	; 0x55
 800f3f4:	78ba      	ldrb	r2, [r7, #2]
 800f3f6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f3f8:	2300      	movs	r3, #0
}
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	3714      	adds	r7, #20
 800f3fe:	46bd      	mov	sp, r7
 800f400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f404:	4770      	bx	lr

0800f406 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f406:	b480      	push	{r7}
 800f408:	b085      	sub	sp, #20
 800f40a:	af00      	add	r7, sp, #0
 800f40c:	6078      	str	r0, [r7, #4]
 800f40e:	460b      	mov	r3, r1
 800f410:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800f412:	2300      	movs	r3, #0
 800f414:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f41c:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800f41e:	78fb      	ldrb	r3, [r7, #3]
 800f420:	68ba      	ldr	r2, [r7, #8]
 800f422:	212c      	movs	r1, #44	; 0x2c
 800f424:	fb01 f303 	mul.w	r3, r1, r3
 800f428:	4413      	add	r3, r2
 800f42a:	333b      	adds	r3, #59	; 0x3b
 800f42c:	781b      	ldrb	r3, [r3, #0]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d009      	beq.n	800f446 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800f432:	78fb      	ldrb	r3, [r7, #3]
 800f434:	68ba      	ldr	r2, [r7, #8]
 800f436:	212c      	movs	r1, #44	; 0x2c
 800f438:	fb01 f303 	mul.w	r3, r1, r3
 800f43c:	4413      	add	r3, r2
 800f43e:	3354      	adds	r3, #84	; 0x54
 800f440:	781b      	ldrb	r3, [r3, #0]
 800f442:	73fb      	strb	r3, [r7, #15]
 800f444:	e008      	b.n	800f458 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800f446:	78fb      	ldrb	r3, [r7, #3]
 800f448:	68ba      	ldr	r2, [r7, #8]
 800f44a:	212c      	movs	r1, #44	; 0x2c
 800f44c:	fb01 f303 	mul.w	r3, r1, r3
 800f450:	4413      	add	r3, r2
 800f452:	3355      	adds	r3, #85	; 0x55
 800f454:	781b      	ldrb	r3, [r3, #0]
 800f456:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800f458:	7bfb      	ldrb	r3, [r7, #15]
}
 800f45a:	4618      	mov	r0, r3
 800f45c:	3714      	adds	r7, #20
 800f45e:	46bd      	mov	sp, r7
 800f460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f464:	4770      	bx	lr

0800f466 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f466:	b580      	push	{r7, lr}
 800f468:	b082      	sub	sp, #8
 800f46a:	af00      	add	r7, sp, #0
 800f46c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f46e:	6878      	ldr	r0, [r7, #4]
 800f470:	f7f2 fd46 	bl	8001f00 <HAL_Delay>
}
 800f474:	bf00      	nop
 800f476:	3708      	adds	r7, #8
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}

0800f47c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f47c:	b480      	push	{r7}
 800f47e:	b085      	sub	sp, #20
 800f480:	af00      	add	r7, sp, #0
 800f482:	4603      	mov	r3, r0
 800f484:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f486:	2300      	movs	r3, #0
 800f488:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f48a:	79fb      	ldrb	r3, [r7, #7]
 800f48c:	2b03      	cmp	r3, #3
 800f48e:	d817      	bhi.n	800f4c0 <USBH_Get_USB_Status+0x44>
 800f490:	a201      	add	r2, pc, #4	; (adr r2, 800f498 <USBH_Get_USB_Status+0x1c>)
 800f492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f496:	bf00      	nop
 800f498:	0800f4a9 	.word	0x0800f4a9
 800f49c:	0800f4af 	.word	0x0800f4af
 800f4a0:	0800f4b5 	.word	0x0800f4b5
 800f4a4:	0800f4bb 	.word	0x0800f4bb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	73fb      	strb	r3, [r7, #15]
    break;
 800f4ac:	e00b      	b.n	800f4c6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f4ae:	2302      	movs	r3, #2
 800f4b0:	73fb      	strb	r3, [r7, #15]
    break;
 800f4b2:	e008      	b.n	800f4c6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f4b4:	2301      	movs	r3, #1
 800f4b6:	73fb      	strb	r3, [r7, #15]
    break;
 800f4b8:	e005      	b.n	800f4c6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f4ba:	2302      	movs	r3, #2
 800f4bc:	73fb      	strb	r3, [r7, #15]
    break;
 800f4be:	e002      	b.n	800f4c6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f4c0:	2302      	movs	r3, #2
 800f4c2:	73fb      	strb	r3, [r7, #15]
    break;
 800f4c4:	bf00      	nop
  }
  return usb_status;
 800f4c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3714      	adds	r7, #20
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d2:	4770      	bx	lr

0800f4d4 <__errno>:
 800f4d4:	4b01      	ldr	r3, [pc, #4]	; (800f4dc <__errno+0x8>)
 800f4d6:	6818      	ldr	r0, [r3, #0]
 800f4d8:	4770      	bx	lr
 800f4da:	bf00      	nop
 800f4dc:	20000030 	.word	0x20000030

0800f4e0 <__libc_init_array>:
 800f4e0:	b570      	push	{r4, r5, r6, lr}
 800f4e2:	4d0d      	ldr	r5, [pc, #52]	; (800f518 <__libc_init_array+0x38>)
 800f4e4:	4c0d      	ldr	r4, [pc, #52]	; (800f51c <__libc_init_array+0x3c>)
 800f4e6:	1b64      	subs	r4, r4, r5
 800f4e8:	10a4      	asrs	r4, r4, #2
 800f4ea:	2600      	movs	r6, #0
 800f4ec:	42a6      	cmp	r6, r4
 800f4ee:	d109      	bne.n	800f504 <__libc_init_array+0x24>
 800f4f0:	4d0b      	ldr	r5, [pc, #44]	; (800f520 <__libc_init_array+0x40>)
 800f4f2:	4c0c      	ldr	r4, [pc, #48]	; (800f524 <__libc_init_array+0x44>)
 800f4f4:	f001 f838 	bl	8010568 <_init>
 800f4f8:	1b64      	subs	r4, r4, r5
 800f4fa:	10a4      	asrs	r4, r4, #2
 800f4fc:	2600      	movs	r6, #0
 800f4fe:	42a6      	cmp	r6, r4
 800f500:	d105      	bne.n	800f50e <__libc_init_array+0x2e>
 800f502:	bd70      	pop	{r4, r5, r6, pc}
 800f504:	f855 3b04 	ldr.w	r3, [r5], #4
 800f508:	4798      	blx	r3
 800f50a:	3601      	adds	r6, #1
 800f50c:	e7ee      	b.n	800f4ec <__libc_init_array+0xc>
 800f50e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f512:	4798      	blx	r3
 800f514:	3601      	adds	r6, #1
 800f516:	e7f2      	b.n	800f4fe <__libc_init_array+0x1e>
 800f518:	08010894 	.word	0x08010894
 800f51c:	08010894 	.word	0x08010894
 800f520:	08010894 	.word	0x08010894
 800f524:	08010898 	.word	0x08010898

0800f528 <malloc>:
 800f528:	4b02      	ldr	r3, [pc, #8]	; (800f534 <malloc+0xc>)
 800f52a:	4601      	mov	r1, r0
 800f52c:	6818      	ldr	r0, [r3, #0]
 800f52e:	f000 b871 	b.w	800f614 <_malloc_r>
 800f532:	bf00      	nop
 800f534:	20000030 	.word	0x20000030

0800f538 <free>:
 800f538:	4b02      	ldr	r3, [pc, #8]	; (800f544 <free+0xc>)
 800f53a:	4601      	mov	r1, r0
 800f53c:	6818      	ldr	r0, [r3, #0]
 800f53e:	f000 b819 	b.w	800f574 <_free_r>
 800f542:	bf00      	nop
 800f544:	20000030 	.word	0x20000030

0800f548 <memcpy>:
 800f548:	440a      	add	r2, r1
 800f54a:	4291      	cmp	r1, r2
 800f54c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f550:	d100      	bne.n	800f554 <memcpy+0xc>
 800f552:	4770      	bx	lr
 800f554:	b510      	push	{r4, lr}
 800f556:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f55a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f55e:	4291      	cmp	r1, r2
 800f560:	d1f9      	bne.n	800f556 <memcpy+0xe>
 800f562:	bd10      	pop	{r4, pc}

0800f564 <memset>:
 800f564:	4402      	add	r2, r0
 800f566:	4603      	mov	r3, r0
 800f568:	4293      	cmp	r3, r2
 800f56a:	d100      	bne.n	800f56e <memset+0xa>
 800f56c:	4770      	bx	lr
 800f56e:	f803 1b01 	strb.w	r1, [r3], #1
 800f572:	e7f9      	b.n	800f568 <memset+0x4>

0800f574 <_free_r>:
 800f574:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f576:	2900      	cmp	r1, #0
 800f578:	d048      	beq.n	800f60c <_free_r+0x98>
 800f57a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f57e:	9001      	str	r0, [sp, #4]
 800f580:	2b00      	cmp	r3, #0
 800f582:	f1a1 0404 	sub.w	r4, r1, #4
 800f586:	bfb8      	it	lt
 800f588:	18e4      	addlt	r4, r4, r3
 800f58a:	f000 f91d 	bl	800f7c8 <__malloc_lock>
 800f58e:	4a20      	ldr	r2, [pc, #128]	; (800f610 <_free_r+0x9c>)
 800f590:	9801      	ldr	r0, [sp, #4]
 800f592:	6813      	ldr	r3, [r2, #0]
 800f594:	4615      	mov	r5, r2
 800f596:	b933      	cbnz	r3, 800f5a6 <_free_r+0x32>
 800f598:	6063      	str	r3, [r4, #4]
 800f59a:	6014      	str	r4, [r2, #0]
 800f59c:	b003      	add	sp, #12
 800f59e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f5a2:	f000 b917 	b.w	800f7d4 <__malloc_unlock>
 800f5a6:	42a3      	cmp	r3, r4
 800f5a8:	d90b      	bls.n	800f5c2 <_free_r+0x4e>
 800f5aa:	6821      	ldr	r1, [r4, #0]
 800f5ac:	1862      	adds	r2, r4, r1
 800f5ae:	4293      	cmp	r3, r2
 800f5b0:	bf04      	itt	eq
 800f5b2:	681a      	ldreq	r2, [r3, #0]
 800f5b4:	685b      	ldreq	r3, [r3, #4]
 800f5b6:	6063      	str	r3, [r4, #4]
 800f5b8:	bf04      	itt	eq
 800f5ba:	1852      	addeq	r2, r2, r1
 800f5bc:	6022      	streq	r2, [r4, #0]
 800f5be:	602c      	str	r4, [r5, #0]
 800f5c0:	e7ec      	b.n	800f59c <_free_r+0x28>
 800f5c2:	461a      	mov	r2, r3
 800f5c4:	685b      	ldr	r3, [r3, #4]
 800f5c6:	b10b      	cbz	r3, 800f5cc <_free_r+0x58>
 800f5c8:	42a3      	cmp	r3, r4
 800f5ca:	d9fa      	bls.n	800f5c2 <_free_r+0x4e>
 800f5cc:	6811      	ldr	r1, [r2, #0]
 800f5ce:	1855      	adds	r5, r2, r1
 800f5d0:	42a5      	cmp	r5, r4
 800f5d2:	d10b      	bne.n	800f5ec <_free_r+0x78>
 800f5d4:	6824      	ldr	r4, [r4, #0]
 800f5d6:	4421      	add	r1, r4
 800f5d8:	1854      	adds	r4, r2, r1
 800f5da:	42a3      	cmp	r3, r4
 800f5dc:	6011      	str	r1, [r2, #0]
 800f5de:	d1dd      	bne.n	800f59c <_free_r+0x28>
 800f5e0:	681c      	ldr	r4, [r3, #0]
 800f5e2:	685b      	ldr	r3, [r3, #4]
 800f5e4:	6053      	str	r3, [r2, #4]
 800f5e6:	4421      	add	r1, r4
 800f5e8:	6011      	str	r1, [r2, #0]
 800f5ea:	e7d7      	b.n	800f59c <_free_r+0x28>
 800f5ec:	d902      	bls.n	800f5f4 <_free_r+0x80>
 800f5ee:	230c      	movs	r3, #12
 800f5f0:	6003      	str	r3, [r0, #0]
 800f5f2:	e7d3      	b.n	800f59c <_free_r+0x28>
 800f5f4:	6825      	ldr	r5, [r4, #0]
 800f5f6:	1961      	adds	r1, r4, r5
 800f5f8:	428b      	cmp	r3, r1
 800f5fa:	bf04      	itt	eq
 800f5fc:	6819      	ldreq	r1, [r3, #0]
 800f5fe:	685b      	ldreq	r3, [r3, #4]
 800f600:	6063      	str	r3, [r4, #4]
 800f602:	bf04      	itt	eq
 800f604:	1949      	addeq	r1, r1, r5
 800f606:	6021      	streq	r1, [r4, #0]
 800f608:	6054      	str	r4, [r2, #4]
 800f60a:	e7c7      	b.n	800f59c <_free_r+0x28>
 800f60c:	b003      	add	sp, #12
 800f60e:	bd30      	pop	{r4, r5, pc}
 800f610:	200013a8 	.word	0x200013a8

0800f614 <_malloc_r>:
 800f614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f616:	1ccd      	adds	r5, r1, #3
 800f618:	f025 0503 	bic.w	r5, r5, #3
 800f61c:	3508      	adds	r5, #8
 800f61e:	2d0c      	cmp	r5, #12
 800f620:	bf38      	it	cc
 800f622:	250c      	movcc	r5, #12
 800f624:	2d00      	cmp	r5, #0
 800f626:	4606      	mov	r6, r0
 800f628:	db01      	blt.n	800f62e <_malloc_r+0x1a>
 800f62a:	42a9      	cmp	r1, r5
 800f62c:	d903      	bls.n	800f636 <_malloc_r+0x22>
 800f62e:	230c      	movs	r3, #12
 800f630:	6033      	str	r3, [r6, #0]
 800f632:	2000      	movs	r0, #0
 800f634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f636:	f000 f8c7 	bl	800f7c8 <__malloc_lock>
 800f63a:	4921      	ldr	r1, [pc, #132]	; (800f6c0 <_malloc_r+0xac>)
 800f63c:	680a      	ldr	r2, [r1, #0]
 800f63e:	4614      	mov	r4, r2
 800f640:	b99c      	cbnz	r4, 800f66a <_malloc_r+0x56>
 800f642:	4f20      	ldr	r7, [pc, #128]	; (800f6c4 <_malloc_r+0xb0>)
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	b923      	cbnz	r3, 800f652 <_malloc_r+0x3e>
 800f648:	4621      	mov	r1, r4
 800f64a:	4630      	mov	r0, r6
 800f64c:	f000 f87c 	bl	800f748 <_sbrk_r>
 800f650:	6038      	str	r0, [r7, #0]
 800f652:	4629      	mov	r1, r5
 800f654:	4630      	mov	r0, r6
 800f656:	f000 f877 	bl	800f748 <_sbrk_r>
 800f65a:	1c43      	adds	r3, r0, #1
 800f65c:	d123      	bne.n	800f6a6 <_malloc_r+0x92>
 800f65e:	230c      	movs	r3, #12
 800f660:	6033      	str	r3, [r6, #0]
 800f662:	4630      	mov	r0, r6
 800f664:	f000 f8b6 	bl	800f7d4 <__malloc_unlock>
 800f668:	e7e3      	b.n	800f632 <_malloc_r+0x1e>
 800f66a:	6823      	ldr	r3, [r4, #0]
 800f66c:	1b5b      	subs	r3, r3, r5
 800f66e:	d417      	bmi.n	800f6a0 <_malloc_r+0x8c>
 800f670:	2b0b      	cmp	r3, #11
 800f672:	d903      	bls.n	800f67c <_malloc_r+0x68>
 800f674:	6023      	str	r3, [r4, #0]
 800f676:	441c      	add	r4, r3
 800f678:	6025      	str	r5, [r4, #0]
 800f67a:	e004      	b.n	800f686 <_malloc_r+0x72>
 800f67c:	6863      	ldr	r3, [r4, #4]
 800f67e:	42a2      	cmp	r2, r4
 800f680:	bf0c      	ite	eq
 800f682:	600b      	streq	r3, [r1, #0]
 800f684:	6053      	strne	r3, [r2, #4]
 800f686:	4630      	mov	r0, r6
 800f688:	f000 f8a4 	bl	800f7d4 <__malloc_unlock>
 800f68c:	f104 000b 	add.w	r0, r4, #11
 800f690:	1d23      	adds	r3, r4, #4
 800f692:	f020 0007 	bic.w	r0, r0, #7
 800f696:	1ac2      	subs	r2, r0, r3
 800f698:	d0cc      	beq.n	800f634 <_malloc_r+0x20>
 800f69a:	1a1b      	subs	r3, r3, r0
 800f69c:	50a3      	str	r3, [r4, r2]
 800f69e:	e7c9      	b.n	800f634 <_malloc_r+0x20>
 800f6a0:	4622      	mov	r2, r4
 800f6a2:	6864      	ldr	r4, [r4, #4]
 800f6a4:	e7cc      	b.n	800f640 <_malloc_r+0x2c>
 800f6a6:	1cc4      	adds	r4, r0, #3
 800f6a8:	f024 0403 	bic.w	r4, r4, #3
 800f6ac:	42a0      	cmp	r0, r4
 800f6ae:	d0e3      	beq.n	800f678 <_malloc_r+0x64>
 800f6b0:	1a21      	subs	r1, r4, r0
 800f6b2:	4630      	mov	r0, r6
 800f6b4:	f000 f848 	bl	800f748 <_sbrk_r>
 800f6b8:	3001      	adds	r0, #1
 800f6ba:	d1dd      	bne.n	800f678 <_malloc_r+0x64>
 800f6bc:	e7cf      	b.n	800f65e <_malloc_r+0x4a>
 800f6be:	bf00      	nop
 800f6c0:	200013a8 	.word	0x200013a8
 800f6c4:	200013ac 	.word	0x200013ac

0800f6c8 <rand>:
 800f6c8:	4b17      	ldr	r3, [pc, #92]	; (800f728 <rand+0x60>)
 800f6ca:	b510      	push	{r4, lr}
 800f6cc:	681c      	ldr	r4, [r3, #0]
 800f6ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f6d0:	b9b3      	cbnz	r3, 800f700 <rand+0x38>
 800f6d2:	2018      	movs	r0, #24
 800f6d4:	f7ff ff28 	bl	800f528 <malloc>
 800f6d8:	63a0      	str	r0, [r4, #56]	; 0x38
 800f6da:	b928      	cbnz	r0, 800f6e8 <rand+0x20>
 800f6dc:	4602      	mov	r2, r0
 800f6de:	4b13      	ldr	r3, [pc, #76]	; (800f72c <rand+0x64>)
 800f6e0:	4813      	ldr	r0, [pc, #76]	; (800f730 <rand+0x68>)
 800f6e2:	214e      	movs	r1, #78	; 0x4e
 800f6e4:	f000 f840 	bl	800f768 <__assert_func>
 800f6e8:	4a12      	ldr	r2, [pc, #72]	; (800f734 <rand+0x6c>)
 800f6ea:	4b13      	ldr	r3, [pc, #76]	; (800f738 <rand+0x70>)
 800f6ec:	e9c0 2300 	strd	r2, r3, [r0]
 800f6f0:	4b12      	ldr	r3, [pc, #72]	; (800f73c <rand+0x74>)
 800f6f2:	6083      	str	r3, [r0, #8]
 800f6f4:	230b      	movs	r3, #11
 800f6f6:	8183      	strh	r3, [r0, #12]
 800f6f8:	2201      	movs	r2, #1
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800f700:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f702:	480f      	ldr	r0, [pc, #60]	; (800f740 <rand+0x78>)
 800f704:	690a      	ldr	r2, [r1, #16]
 800f706:	694b      	ldr	r3, [r1, #20]
 800f708:	4c0e      	ldr	r4, [pc, #56]	; (800f744 <rand+0x7c>)
 800f70a:	4350      	muls	r0, r2
 800f70c:	fb04 0003 	mla	r0, r4, r3, r0
 800f710:	fba2 3404 	umull	r3, r4, r2, r4
 800f714:	1c5a      	adds	r2, r3, #1
 800f716:	4404      	add	r4, r0
 800f718:	f144 0000 	adc.w	r0, r4, #0
 800f71c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800f720:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f724:	bd10      	pop	{r4, pc}
 800f726:	bf00      	nop
 800f728:	20000030 	.word	0x20000030
 800f72c:	08010744 	.word	0x08010744
 800f730:	0801075b 	.word	0x0801075b
 800f734:	abcd330e 	.word	0xabcd330e
 800f738:	e66d1234 	.word	0xe66d1234
 800f73c:	0005deec 	.word	0x0005deec
 800f740:	5851f42d 	.word	0x5851f42d
 800f744:	4c957f2d 	.word	0x4c957f2d

0800f748 <_sbrk_r>:
 800f748:	b538      	push	{r3, r4, r5, lr}
 800f74a:	4d06      	ldr	r5, [pc, #24]	; (800f764 <_sbrk_r+0x1c>)
 800f74c:	2300      	movs	r3, #0
 800f74e:	4604      	mov	r4, r0
 800f750:	4608      	mov	r0, r1
 800f752:	602b      	str	r3, [r5, #0]
 800f754:	f7f2 fa10 	bl	8001b78 <_sbrk>
 800f758:	1c43      	adds	r3, r0, #1
 800f75a:	d102      	bne.n	800f762 <_sbrk_r+0x1a>
 800f75c:	682b      	ldr	r3, [r5, #0]
 800f75e:	b103      	cbz	r3, 800f762 <_sbrk_r+0x1a>
 800f760:	6023      	str	r3, [r4, #0]
 800f762:	bd38      	pop	{r3, r4, r5, pc}
 800f764:	20002154 	.word	0x20002154

0800f768 <__assert_func>:
 800f768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f76a:	4614      	mov	r4, r2
 800f76c:	461a      	mov	r2, r3
 800f76e:	4b09      	ldr	r3, [pc, #36]	; (800f794 <__assert_func+0x2c>)
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	4605      	mov	r5, r0
 800f774:	68d8      	ldr	r0, [r3, #12]
 800f776:	b14c      	cbz	r4, 800f78c <__assert_func+0x24>
 800f778:	4b07      	ldr	r3, [pc, #28]	; (800f798 <__assert_func+0x30>)
 800f77a:	9100      	str	r1, [sp, #0]
 800f77c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f780:	4906      	ldr	r1, [pc, #24]	; (800f79c <__assert_func+0x34>)
 800f782:	462b      	mov	r3, r5
 800f784:	f000 f80e 	bl	800f7a4 <fiprintf>
 800f788:	f000 fbd8 	bl	800ff3c <abort>
 800f78c:	4b04      	ldr	r3, [pc, #16]	; (800f7a0 <__assert_func+0x38>)
 800f78e:	461c      	mov	r4, r3
 800f790:	e7f3      	b.n	800f77a <__assert_func+0x12>
 800f792:	bf00      	nop
 800f794:	20000030 	.word	0x20000030
 800f798:	080107ba 	.word	0x080107ba
 800f79c:	080107c7 	.word	0x080107c7
 800f7a0:	080107f5 	.word	0x080107f5

0800f7a4 <fiprintf>:
 800f7a4:	b40e      	push	{r1, r2, r3}
 800f7a6:	b503      	push	{r0, r1, lr}
 800f7a8:	4601      	mov	r1, r0
 800f7aa:	ab03      	add	r3, sp, #12
 800f7ac:	4805      	ldr	r0, [pc, #20]	; (800f7c4 <fiprintf+0x20>)
 800f7ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7b2:	6800      	ldr	r0, [r0, #0]
 800f7b4:	9301      	str	r3, [sp, #4]
 800f7b6:	f000 f83d 	bl	800f834 <_vfiprintf_r>
 800f7ba:	b002      	add	sp, #8
 800f7bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f7c0:	b003      	add	sp, #12
 800f7c2:	4770      	bx	lr
 800f7c4:	20000030 	.word	0x20000030

0800f7c8 <__malloc_lock>:
 800f7c8:	4801      	ldr	r0, [pc, #4]	; (800f7d0 <__malloc_lock+0x8>)
 800f7ca:	f000 bd77 	b.w	80102bc <__retarget_lock_acquire_recursive>
 800f7ce:	bf00      	nop
 800f7d0:	2000215c 	.word	0x2000215c

0800f7d4 <__malloc_unlock>:
 800f7d4:	4801      	ldr	r0, [pc, #4]	; (800f7dc <__malloc_unlock+0x8>)
 800f7d6:	f000 bd72 	b.w	80102be <__retarget_lock_release_recursive>
 800f7da:	bf00      	nop
 800f7dc:	2000215c 	.word	0x2000215c

0800f7e0 <__sfputc_r>:
 800f7e0:	6893      	ldr	r3, [r2, #8]
 800f7e2:	3b01      	subs	r3, #1
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	b410      	push	{r4}
 800f7e8:	6093      	str	r3, [r2, #8]
 800f7ea:	da08      	bge.n	800f7fe <__sfputc_r+0x1e>
 800f7ec:	6994      	ldr	r4, [r2, #24]
 800f7ee:	42a3      	cmp	r3, r4
 800f7f0:	db01      	blt.n	800f7f6 <__sfputc_r+0x16>
 800f7f2:	290a      	cmp	r1, #10
 800f7f4:	d103      	bne.n	800f7fe <__sfputc_r+0x1e>
 800f7f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7fa:	f000 badf 	b.w	800fdbc <__swbuf_r>
 800f7fe:	6813      	ldr	r3, [r2, #0]
 800f800:	1c58      	adds	r0, r3, #1
 800f802:	6010      	str	r0, [r2, #0]
 800f804:	7019      	strb	r1, [r3, #0]
 800f806:	4608      	mov	r0, r1
 800f808:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f80c:	4770      	bx	lr

0800f80e <__sfputs_r>:
 800f80e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f810:	4606      	mov	r6, r0
 800f812:	460f      	mov	r7, r1
 800f814:	4614      	mov	r4, r2
 800f816:	18d5      	adds	r5, r2, r3
 800f818:	42ac      	cmp	r4, r5
 800f81a:	d101      	bne.n	800f820 <__sfputs_r+0x12>
 800f81c:	2000      	movs	r0, #0
 800f81e:	e007      	b.n	800f830 <__sfputs_r+0x22>
 800f820:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f824:	463a      	mov	r2, r7
 800f826:	4630      	mov	r0, r6
 800f828:	f7ff ffda 	bl	800f7e0 <__sfputc_r>
 800f82c:	1c43      	adds	r3, r0, #1
 800f82e:	d1f3      	bne.n	800f818 <__sfputs_r+0xa>
 800f830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f834 <_vfiprintf_r>:
 800f834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f838:	460d      	mov	r5, r1
 800f83a:	b09d      	sub	sp, #116	; 0x74
 800f83c:	4614      	mov	r4, r2
 800f83e:	4698      	mov	r8, r3
 800f840:	4606      	mov	r6, r0
 800f842:	b118      	cbz	r0, 800f84c <_vfiprintf_r+0x18>
 800f844:	6983      	ldr	r3, [r0, #24]
 800f846:	b90b      	cbnz	r3, 800f84c <_vfiprintf_r+0x18>
 800f848:	f000 fc9a 	bl	8010180 <__sinit>
 800f84c:	4b89      	ldr	r3, [pc, #548]	; (800fa74 <_vfiprintf_r+0x240>)
 800f84e:	429d      	cmp	r5, r3
 800f850:	d11b      	bne.n	800f88a <_vfiprintf_r+0x56>
 800f852:	6875      	ldr	r5, [r6, #4]
 800f854:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f856:	07d9      	lsls	r1, r3, #31
 800f858:	d405      	bmi.n	800f866 <_vfiprintf_r+0x32>
 800f85a:	89ab      	ldrh	r3, [r5, #12]
 800f85c:	059a      	lsls	r2, r3, #22
 800f85e:	d402      	bmi.n	800f866 <_vfiprintf_r+0x32>
 800f860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f862:	f000 fd2b 	bl	80102bc <__retarget_lock_acquire_recursive>
 800f866:	89ab      	ldrh	r3, [r5, #12]
 800f868:	071b      	lsls	r3, r3, #28
 800f86a:	d501      	bpl.n	800f870 <_vfiprintf_r+0x3c>
 800f86c:	692b      	ldr	r3, [r5, #16]
 800f86e:	b9eb      	cbnz	r3, 800f8ac <_vfiprintf_r+0x78>
 800f870:	4629      	mov	r1, r5
 800f872:	4630      	mov	r0, r6
 800f874:	f000 faf4 	bl	800fe60 <__swsetup_r>
 800f878:	b1c0      	cbz	r0, 800f8ac <_vfiprintf_r+0x78>
 800f87a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f87c:	07dc      	lsls	r4, r3, #31
 800f87e:	d50e      	bpl.n	800f89e <_vfiprintf_r+0x6a>
 800f880:	f04f 30ff 	mov.w	r0, #4294967295
 800f884:	b01d      	add	sp, #116	; 0x74
 800f886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f88a:	4b7b      	ldr	r3, [pc, #492]	; (800fa78 <_vfiprintf_r+0x244>)
 800f88c:	429d      	cmp	r5, r3
 800f88e:	d101      	bne.n	800f894 <_vfiprintf_r+0x60>
 800f890:	68b5      	ldr	r5, [r6, #8]
 800f892:	e7df      	b.n	800f854 <_vfiprintf_r+0x20>
 800f894:	4b79      	ldr	r3, [pc, #484]	; (800fa7c <_vfiprintf_r+0x248>)
 800f896:	429d      	cmp	r5, r3
 800f898:	bf08      	it	eq
 800f89a:	68f5      	ldreq	r5, [r6, #12]
 800f89c:	e7da      	b.n	800f854 <_vfiprintf_r+0x20>
 800f89e:	89ab      	ldrh	r3, [r5, #12]
 800f8a0:	0598      	lsls	r0, r3, #22
 800f8a2:	d4ed      	bmi.n	800f880 <_vfiprintf_r+0x4c>
 800f8a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f8a6:	f000 fd0a 	bl	80102be <__retarget_lock_release_recursive>
 800f8aa:	e7e9      	b.n	800f880 <_vfiprintf_r+0x4c>
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	9309      	str	r3, [sp, #36]	; 0x24
 800f8b0:	2320      	movs	r3, #32
 800f8b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f8b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f8ba:	2330      	movs	r3, #48	; 0x30
 800f8bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fa80 <_vfiprintf_r+0x24c>
 800f8c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f8c4:	f04f 0901 	mov.w	r9, #1
 800f8c8:	4623      	mov	r3, r4
 800f8ca:	469a      	mov	sl, r3
 800f8cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8d0:	b10a      	cbz	r2, 800f8d6 <_vfiprintf_r+0xa2>
 800f8d2:	2a25      	cmp	r2, #37	; 0x25
 800f8d4:	d1f9      	bne.n	800f8ca <_vfiprintf_r+0x96>
 800f8d6:	ebba 0b04 	subs.w	fp, sl, r4
 800f8da:	d00b      	beq.n	800f8f4 <_vfiprintf_r+0xc0>
 800f8dc:	465b      	mov	r3, fp
 800f8de:	4622      	mov	r2, r4
 800f8e0:	4629      	mov	r1, r5
 800f8e2:	4630      	mov	r0, r6
 800f8e4:	f7ff ff93 	bl	800f80e <__sfputs_r>
 800f8e8:	3001      	adds	r0, #1
 800f8ea:	f000 80aa 	beq.w	800fa42 <_vfiprintf_r+0x20e>
 800f8ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f8f0:	445a      	add	r2, fp
 800f8f2:	9209      	str	r2, [sp, #36]	; 0x24
 800f8f4:	f89a 3000 	ldrb.w	r3, [sl]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	f000 80a2 	beq.w	800fa42 <_vfiprintf_r+0x20e>
 800f8fe:	2300      	movs	r3, #0
 800f900:	f04f 32ff 	mov.w	r2, #4294967295
 800f904:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f908:	f10a 0a01 	add.w	sl, sl, #1
 800f90c:	9304      	str	r3, [sp, #16]
 800f90e:	9307      	str	r3, [sp, #28]
 800f910:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f914:	931a      	str	r3, [sp, #104]	; 0x68
 800f916:	4654      	mov	r4, sl
 800f918:	2205      	movs	r2, #5
 800f91a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f91e:	4858      	ldr	r0, [pc, #352]	; (800fa80 <_vfiprintf_r+0x24c>)
 800f920:	f7f0 fc56 	bl	80001d0 <memchr>
 800f924:	9a04      	ldr	r2, [sp, #16]
 800f926:	b9d8      	cbnz	r0, 800f960 <_vfiprintf_r+0x12c>
 800f928:	06d1      	lsls	r1, r2, #27
 800f92a:	bf44      	itt	mi
 800f92c:	2320      	movmi	r3, #32
 800f92e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f932:	0713      	lsls	r3, r2, #28
 800f934:	bf44      	itt	mi
 800f936:	232b      	movmi	r3, #43	; 0x2b
 800f938:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f93c:	f89a 3000 	ldrb.w	r3, [sl]
 800f940:	2b2a      	cmp	r3, #42	; 0x2a
 800f942:	d015      	beq.n	800f970 <_vfiprintf_r+0x13c>
 800f944:	9a07      	ldr	r2, [sp, #28]
 800f946:	4654      	mov	r4, sl
 800f948:	2000      	movs	r0, #0
 800f94a:	f04f 0c0a 	mov.w	ip, #10
 800f94e:	4621      	mov	r1, r4
 800f950:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f954:	3b30      	subs	r3, #48	; 0x30
 800f956:	2b09      	cmp	r3, #9
 800f958:	d94e      	bls.n	800f9f8 <_vfiprintf_r+0x1c4>
 800f95a:	b1b0      	cbz	r0, 800f98a <_vfiprintf_r+0x156>
 800f95c:	9207      	str	r2, [sp, #28]
 800f95e:	e014      	b.n	800f98a <_vfiprintf_r+0x156>
 800f960:	eba0 0308 	sub.w	r3, r0, r8
 800f964:	fa09 f303 	lsl.w	r3, r9, r3
 800f968:	4313      	orrs	r3, r2
 800f96a:	9304      	str	r3, [sp, #16]
 800f96c:	46a2      	mov	sl, r4
 800f96e:	e7d2      	b.n	800f916 <_vfiprintf_r+0xe2>
 800f970:	9b03      	ldr	r3, [sp, #12]
 800f972:	1d19      	adds	r1, r3, #4
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	9103      	str	r1, [sp, #12]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	bfbb      	ittet	lt
 800f97c:	425b      	neglt	r3, r3
 800f97e:	f042 0202 	orrlt.w	r2, r2, #2
 800f982:	9307      	strge	r3, [sp, #28]
 800f984:	9307      	strlt	r3, [sp, #28]
 800f986:	bfb8      	it	lt
 800f988:	9204      	strlt	r2, [sp, #16]
 800f98a:	7823      	ldrb	r3, [r4, #0]
 800f98c:	2b2e      	cmp	r3, #46	; 0x2e
 800f98e:	d10c      	bne.n	800f9aa <_vfiprintf_r+0x176>
 800f990:	7863      	ldrb	r3, [r4, #1]
 800f992:	2b2a      	cmp	r3, #42	; 0x2a
 800f994:	d135      	bne.n	800fa02 <_vfiprintf_r+0x1ce>
 800f996:	9b03      	ldr	r3, [sp, #12]
 800f998:	1d1a      	adds	r2, r3, #4
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	9203      	str	r2, [sp, #12]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	bfb8      	it	lt
 800f9a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800f9a6:	3402      	adds	r4, #2
 800f9a8:	9305      	str	r3, [sp, #20]
 800f9aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fa90 <_vfiprintf_r+0x25c>
 800f9ae:	7821      	ldrb	r1, [r4, #0]
 800f9b0:	2203      	movs	r2, #3
 800f9b2:	4650      	mov	r0, sl
 800f9b4:	f7f0 fc0c 	bl	80001d0 <memchr>
 800f9b8:	b140      	cbz	r0, 800f9cc <_vfiprintf_r+0x198>
 800f9ba:	2340      	movs	r3, #64	; 0x40
 800f9bc:	eba0 000a 	sub.w	r0, r0, sl
 800f9c0:	fa03 f000 	lsl.w	r0, r3, r0
 800f9c4:	9b04      	ldr	r3, [sp, #16]
 800f9c6:	4303      	orrs	r3, r0
 800f9c8:	3401      	adds	r4, #1
 800f9ca:	9304      	str	r3, [sp, #16]
 800f9cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9d0:	482c      	ldr	r0, [pc, #176]	; (800fa84 <_vfiprintf_r+0x250>)
 800f9d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f9d6:	2206      	movs	r2, #6
 800f9d8:	f7f0 fbfa 	bl	80001d0 <memchr>
 800f9dc:	2800      	cmp	r0, #0
 800f9de:	d03f      	beq.n	800fa60 <_vfiprintf_r+0x22c>
 800f9e0:	4b29      	ldr	r3, [pc, #164]	; (800fa88 <_vfiprintf_r+0x254>)
 800f9e2:	bb1b      	cbnz	r3, 800fa2c <_vfiprintf_r+0x1f8>
 800f9e4:	9b03      	ldr	r3, [sp, #12]
 800f9e6:	3307      	adds	r3, #7
 800f9e8:	f023 0307 	bic.w	r3, r3, #7
 800f9ec:	3308      	adds	r3, #8
 800f9ee:	9303      	str	r3, [sp, #12]
 800f9f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9f2:	443b      	add	r3, r7
 800f9f4:	9309      	str	r3, [sp, #36]	; 0x24
 800f9f6:	e767      	b.n	800f8c8 <_vfiprintf_r+0x94>
 800f9f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f9fc:	460c      	mov	r4, r1
 800f9fe:	2001      	movs	r0, #1
 800fa00:	e7a5      	b.n	800f94e <_vfiprintf_r+0x11a>
 800fa02:	2300      	movs	r3, #0
 800fa04:	3401      	adds	r4, #1
 800fa06:	9305      	str	r3, [sp, #20]
 800fa08:	4619      	mov	r1, r3
 800fa0a:	f04f 0c0a 	mov.w	ip, #10
 800fa0e:	4620      	mov	r0, r4
 800fa10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa14:	3a30      	subs	r2, #48	; 0x30
 800fa16:	2a09      	cmp	r2, #9
 800fa18:	d903      	bls.n	800fa22 <_vfiprintf_r+0x1ee>
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d0c5      	beq.n	800f9aa <_vfiprintf_r+0x176>
 800fa1e:	9105      	str	r1, [sp, #20]
 800fa20:	e7c3      	b.n	800f9aa <_vfiprintf_r+0x176>
 800fa22:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa26:	4604      	mov	r4, r0
 800fa28:	2301      	movs	r3, #1
 800fa2a:	e7f0      	b.n	800fa0e <_vfiprintf_r+0x1da>
 800fa2c:	ab03      	add	r3, sp, #12
 800fa2e:	9300      	str	r3, [sp, #0]
 800fa30:	462a      	mov	r2, r5
 800fa32:	4b16      	ldr	r3, [pc, #88]	; (800fa8c <_vfiprintf_r+0x258>)
 800fa34:	a904      	add	r1, sp, #16
 800fa36:	4630      	mov	r0, r6
 800fa38:	f3af 8000 	nop.w
 800fa3c:	4607      	mov	r7, r0
 800fa3e:	1c78      	adds	r0, r7, #1
 800fa40:	d1d6      	bne.n	800f9f0 <_vfiprintf_r+0x1bc>
 800fa42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa44:	07d9      	lsls	r1, r3, #31
 800fa46:	d405      	bmi.n	800fa54 <_vfiprintf_r+0x220>
 800fa48:	89ab      	ldrh	r3, [r5, #12]
 800fa4a:	059a      	lsls	r2, r3, #22
 800fa4c:	d402      	bmi.n	800fa54 <_vfiprintf_r+0x220>
 800fa4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa50:	f000 fc35 	bl	80102be <__retarget_lock_release_recursive>
 800fa54:	89ab      	ldrh	r3, [r5, #12]
 800fa56:	065b      	lsls	r3, r3, #25
 800fa58:	f53f af12 	bmi.w	800f880 <_vfiprintf_r+0x4c>
 800fa5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa5e:	e711      	b.n	800f884 <_vfiprintf_r+0x50>
 800fa60:	ab03      	add	r3, sp, #12
 800fa62:	9300      	str	r3, [sp, #0]
 800fa64:	462a      	mov	r2, r5
 800fa66:	4b09      	ldr	r3, [pc, #36]	; (800fa8c <_vfiprintf_r+0x258>)
 800fa68:	a904      	add	r1, sp, #16
 800fa6a:	4630      	mov	r0, r6
 800fa6c:	f000 f880 	bl	800fb70 <_printf_i>
 800fa70:	e7e4      	b.n	800fa3c <_vfiprintf_r+0x208>
 800fa72:	bf00      	nop
 800fa74:	0801084c 	.word	0x0801084c
 800fa78:	0801086c 	.word	0x0801086c
 800fa7c:	0801082c 	.word	0x0801082c
 800fa80:	080107f6 	.word	0x080107f6
 800fa84:	08010800 	.word	0x08010800
 800fa88:	00000000 	.word	0x00000000
 800fa8c:	0800f80f 	.word	0x0800f80f
 800fa90:	080107fc 	.word	0x080107fc

0800fa94 <_printf_common>:
 800fa94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa98:	4616      	mov	r6, r2
 800fa9a:	4699      	mov	r9, r3
 800fa9c:	688a      	ldr	r2, [r1, #8]
 800fa9e:	690b      	ldr	r3, [r1, #16]
 800faa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800faa4:	4293      	cmp	r3, r2
 800faa6:	bfb8      	it	lt
 800faa8:	4613      	movlt	r3, r2
 800faaa:	6033      	str	r3, [r6, #0]
 800faac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fab0:	4607      	mov	r7, r0
 800fab2:	460c      	mov	r4, r1
 800fab4:	b10a      	cbz	r2, 800faba <_printf_common+0x26>
 800fab6:	3301      	adds	r3, #1
 800fab8:	6033      	str	r3, [r6, #0]
 800faba:	6823      	ldr	r3, [r4, #0]
 800fabc:	0699      	lsls	r1, r3, #26
 800fabe:	bf42      	ittt	mi
 800fac0:	6833      	ldrmi	r3, [r6, #0]
 800fac2:	3302      	addmi	r3, #2
 800fac4:	6033      	strmi	r3, [r6, #0]
 800fac6:	6825      	ldr	r5, [r4, #0]
 800fac8:	f015 0506 	ands.w	r5, r5, #6
 800facc:	d106      	bne.n	800fadc <_printf_common+0x48>
 800face:	f104 0a19 	add.w	sl, r4, #25
 800fad2:	68e3      	ldr	r3, [r4, #12]
 800fad4:	6832      	ldr	r2, [r6, #0]
 800fad6:	1a9b      	subs	r3, r3, r2
 800fad8:	42ab      	cmp	r3, r5
 800fada:	dc26      	bgt.n	800fb2a <_printf_common+0x96>
 800fadc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fae0:	1e13      	subs	r3, r2, #0
 800fae2:	6822      	ldr	r2, [r4, #0]
 800fae4:	bf18      	it	ne
 800fae6:	2301      	movne	r3, #1
 800fae8:	0692      	lsls	r2, r2, #26
 800faea:	d42b      	bmi.n	800fb44 <_printf_common+0xb0>
 800faec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800faf0:	4649      	mov	r1, r9
 800faf2:	4638      	mov	r0, r7
 800faf4:	47c0      	blx	r8
 800faf6:	3001      	adds	r0, #1
 800faf8:	d01e      	beq.n	800fb38 <_printf_common+0xa4>
 800fafa:	6823      	ldr	r3, [r4, #0]
 800fafc:	68e5      	ldr	r5, [r4, #12]
 800fafe:	6832      	ldr	r2, [r6, #0]
 800fb00:	f003 0306 	and.w	r3, r3, #6
 800fb04:	2b04      	cmp	r3, #4
 800fb06:	bf08      	it	eq
 800fb08:	1aad      	subeq	r5, r5, r2
 800fb0a:	68a3      	ldr	r3, [r4, #8]
 800fb0c:	6922      	ldr	r2, [r4, #16]
 800fb0e:	bf0c      	ite	eq
 800fb10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fb14:	2500      	movne	r5, #0
 800fb16:	4293      	cmp	r3, r2
 800fb18:	bfc4      	itt	gt
 800fb1a:	1a9b      	subgt	r3, r3, r2
 800fb1c:	18ed      	addgt	r5, r5, r3
 800fb1e:	2600      	movs	r6, #0
 800fb20:	341a      	adds	r4, #26
 800fb22:	42b5      	cmp	r5, r6
 800fb24:	d11a      	bne.n	800fb5c <_printf_common+0xc8>
 800fb26:	2000      	movs	r0, #0
 800fb28:	e008      	b.n	800fb3c <_printf_common+0xa8>
 800fb2a:	2301      	movs	r3, #1
 800fb2c:	4652      	mov	r2, sl
 800fb2e:	4649      	mov	r1, r9
 800fb30:	4638      	mov	r0, r7
 800fb32:	47c0      	blx	r8
 800fb34:	3001      	adds	r0, #1
 800fb36:	d103      	bne.n	800fb40 <_printf_common+0xac>
 800fb38:	f04f 30ff 	mov.w	r0, #4294967295
 800fb3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb40:	3501      	adds	r5, #1
 800fb42:	e7c6      	b.n	800fad2 <_printf_common+0x3e>
 800fb44:	18e1      	adds	r1, r4, r3
 800fb46:	1c5a      	adds	r2, r3, #1
 800fb48:	2030      	movs	r0, #48	; 0x30
 800fb4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fb4e:	4422      	add	r2, r4
 800fb50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fb54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fb58:	3302      	adds	r3, #2
 800fb5a:	e7c7      	b.n	800faec <_printf_common+0x58>
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	4622      	mov	r2, r4
 800fb60:	4649      	mov	r1, r9
 800fb62:	4638      	mov	r0, r7
 800fb64:	47c0      	blx	r8
 800fb66:	3001      	adds	r0, #1
 800fb68:	d0e6      	beq.n	800fb38 <_printf_common+0xa4>
 800fb6a:	3601      	adds	r6, #1
 800fb6c:	e7d9      	b.n	800fb22 <_printf_common+0x8e>
	...

0800fb70 <_printf_i>:
 800fb70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fb74:	460c      	mov	r4, r1
 800fb76:	4691      	mov	r9, r2
 800fb78:	7e27      	ldrb	r7, [r4, #24]
 800fb7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fb7c:	2f78      	cmp	r7, #120	; 0x78
 800fb7e:	4680      	mov	r8, r0
 800fb80:	469a      	mov	sl, r3
 800fb82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fb86:	d807      	bhi.n	800fb98 <_printf_i+0x28>
 800fb88:	2f62      	cmp	r7, #98	; 0x62
 800fb8a:	d80a      	bhi.n	800fba2 <_printf_i+0x32>
 800fb8c:	2f00      	cmp	r7, #0
 800fb8e:	f000 80d8 	beq.w	800fd42 <_printf_i+0x1d2>
 800fb92:	2f58      	cmp	r7, #88	; 0x58
 800fb94:	f000 80a3 	beq.w	800fcde <_printf_i+0x16e>
 800fb98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fb9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fba0:	e03a      	b.n	800fc18 <_printf_i+0xa8>
 800fba2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fba6:	2b15      	cmp	r3, #21
 800fba8:	d8f6      	bhi.n	800fb98 <_printf_i+0x28>
 800fbaa:	a001      	add	r0, pc, #4	; (adr r0, 800fbb0 <_printf_i+0x40>)
 800fbac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800fbb0:	0800fc09 	.word	0x0800fc09
 800fbb4:	0800fc1d 	.word	0x0800fc1d
 800fbb8:	0800fb99 	.word	0x0800fb99
 800fbbc:	0800fb99 	.word	0x0800fb99
 800fbc0:	0800fb99 	.word	0x0800fb99
 800fbc4:	0800fb99 	.word	0x0800fb99
 800fbc8:	0800fc1d 	.word	0x0800fc1d
 800fbcc:	0800fb99 	.word	0x0800fb99
 800fbd0:	0800fb99 	.word	0x0800fb99
 800fbd4:	0800fb99 	.word	0x0800fb99
 800fbd8:	0800fb99 	.word	0x0800fb99
 800fbdc:	0800fd29 	.word	0x0800fd29
 800fbe0:	0800fc4d 	.word	0x0800fc4d
 800fbe4:	0800fd0b 	.word	0x0800fd0b
 800fbe8:	0800fb99 	.word	0x0800fb99
 800fbec:	0800fb99 	.word	0x0800fb99
 800fbf0:	0800fd4b 	.word	0x0800fd4b
 800fbf4:	0800fb99 	.word	0x0800fb99
 800fbf8:	0800fc4d 	.word	0x0800fc4d
 800fbfc:	0800fb99 	.word	0x0800fb99
 800fc00:	0800fb99 	.word	0x0800fb99
 800fc04:	0800fd13 	.word	0x0800fd13
 800fc08:	680b      	ldr	r3, [r1, #0]
 800fc0a:	1d1a      	adds	r2, r3, #4
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	600a      	str	r2, [r1, #0]
 800fc10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fc14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fc18:	2301      	movs	r3, #1
 800fc1a:	e0a3      	b.n	800fd64 <_printf_i+0x1f4>
 800fc1c:	6825      	ldr	r5, [r4, #0]
 800fc1e:	6808      	ldr	r0, [r1, #0]
 800fc20:	062e      	lsls	r6, r5, #24
 800fc22:	f100 0304 	add.w	r3, r0, #4
 800fc26:	d50a      	bpl.n	800fc3e <_printf_i+0xce>
 800fc28:	6805      	ldr	r5, [r0, #0]
 800fc2a:	600b      	str	r3, [r1, #0]
 800fc2c:	2d00      	cmp	r5, #0
 800fc2e:	da03      	bge.n	800fc38 <_printf_i+0xc8>
 800fc30:	232d      	movs	r3, #45	; 0x2d
 800fc32:	426d      	negs	r5, r5
 800fc34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc38:	485e      	ldr	r0, [pc, #376]	; (800fdb4 <_printf_i+0x244>)
 800fc3a:	230a      	movs	r3, #10
 800fc3c:	e019      	b.n	800fc72 <_printf_i+0x102>
 800fc3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800fc42:	6805      	ldr	r5, [r0, #0]
 800fc44:	600b      	str	r3, [r1, #0]
 800fc46:	bf18      	it	ne
 800fc48:	b22d      	sxthne	r5, r5
 800fc4a:	e7ef      	b.n	800fc2c <_printf_i+0xbc>
 800fc4c:	680b      	ldr	r3, [r1, #0]
 800fc4e:	6825      	ldr	r5, [r4, #0]
 800fc50:	1d18      	adds	r0, r3, #4
 800fc52:	6008      	str	r0, [r1, #0]
 800fc54:	0628      	lsls	r0, r5, #24
 800fc56:	d501      	bpl.n	800fc5c <_printf_i+0xec>
 800fc58:	681d      	ldr	r5, [r3, #0]
 800fc5a:	e002      	b.n	800fc62 <_printf_i+0xf2>
 800fc5c:	0669      	lsls	r1, r5, #25
 800fc5e:	d5fb      	bpl.n	800fc58 <_printf_i+0xe8>
 800fc60:	881d      	ldrh	r5, [r3, #0]
 800fc62:	4854      	ldr	r0, [pc, #336]	; (800fdb4 <_printf_i+0x244>)
 800fc64:	2f6f      	cmp	r7, #111	; 0x6f
 800fc66:	bf0c      	ite	eq
 800fc68:	2308      	moveq	r3, #8
 800fc6a:	230a      	movne	r3, #10
 800fc6c:	2100      	movs	r1, #0
 800fc6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fc72:	6866      	ldr	r6, [r4, #4]
 800fc74:	60a6      	str	r6, [r4, #8]
 800fc76:	2e00      	cmp	r6, #0
 800fc78:	bfa2      	ittt	ge
 800fc7a:	6821      	ldrge	r1, [r4, #0]
 800fc7c:	f021 0104 	bicge.w	r1, r1, #4
 800fc80:	6021      	strge	r1, [r4, #0]
 800fc82:	b90d      	cbnz	r5, 800fc88 <_printf_i+0x118>
 800fc84:	2e00      	cmp	r6, #0
 800fc86:	d04d      	beq.n	800fd24 <_printf_i+0x1b4>
 800fc88:	4616      	mov	r6, r2
 800fc8a:	fbb5 f1f3 	udiv	r1, r5, r3
 800fc8e:	fb03 5711 	mls	r7, r3, r1, r5
 800fc92:	5dc7      	ldrb	r7, [r0, r7]
 800fc94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fc98:	462f      	mov	r7, r5
 800fc9a:	42bb      	cmp	r3, r7
 800fc9c:	460d      	mov	r5, r1
 800fc9e:	d9f4      	bls.n	800fc8a <_printf_i+0x11a>
 800fca0:	2b08      	cmp	r3, #8
 800fca2:	d10b      	bne.n	800fcbc <_printf_i+0x14c>
 800fca4:	6823      	ldr	r3, [r4, #0]
 800fca6:	07df      	lsls	r7, r3, #31
 800fca8:	d508      	bpl.n	800fcbc <_printf_i+0x14c>
 800fcaa:	6923      	ldr	r3, [r4, #16]
 800fcac:	6861      	ldr	r1, [r4, #4]
 800fcae:	4299      	cmp	r1, r3
 800fcb0:	bfde      	ittt	le
 800fcb2:	2330      	movle	r3, #48	; 0x30
 800fcb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fcb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fcbc:	1b92      	subs	r2, r2, r6
 800fcbe:	6122      	str	r2, [r4, #16]
 800fcc0:	f8cd a000 	str.w	sl, [sp]
 800fcc4:	464b      	mov	r3, r9
 800fcc6:	aa03      	add	r2, sp, #12
 800fcc8:	4621      	mov	r1, r4
 800fcca:	4640      	mov	r0, r8
 800fccc:	f7ff fee2 	bl	800fa94 <_printf_common>
 800fcd0:	3001      	adds	r0, #1
 800fcd2:	d14c      	bne.n	800fd6e <_printf_i+0x1fe>
 800fcd4:	f04f 30ff 	mov.w	r0, #4294967295
 800fcd8:	b004      	add	sp, #16
 800fcda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcde:	4835      	ldr	r0, [pc, #212]	; (800fdb4 <_printf_i+0x244>)
 800fce0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fce4:	6823      	ldr	r3, [r4, #0]
 800fce6:	680e      	ldr	r6, [r1, #0]
 800fce8:	061f      	lsls	r7, r3, #24
 800fcea:	f856 5b04 	ldr.w	r5, [r6], #4
 800fcee:	600e      	str	r6, [r1, #0]
 800fcf0:	d514      	bpl.n	800fd1c <_printf_i+0x1ac>
 800fcf2:	07d9      	lsls	r1, r3, #31
 800fcf4:	bf44      	itt	mi
 800fcf6:	f043 0320 	orrmi.w	r3, r3, #32
 800fcfa:	6023      	strmi	r3, [r4, #0]
 800fcfc:	b91d      	cbnz	r5, 800fd06 <_printf_i+0x196>
 800fcfe:	6823      	ldr	r3, [r4, #0]
 800fd00:	f023 0320 	bic.w	r3, r3, #32
 800fd04:	6023      	str	r3, [r4, #0]
 800fd06:	2310      	movs	r3, #16
 800fd08:	e7b0      	b.n	800fc6c <_printf_i+0xfc>
 800fd0a:	6823      	ldr	r3, [r4, #0]
 800fd0c:	f043 0320 	orr.w	r3, r3, #32
 800fd10:	6023      	str	r3, [r4, #0]
 800fd12:	2378      	movs	r3, #120	; 0x78
 800fd14:	4828      	ldr	r0, [pc, #160]	; (800fdb8 <_printf_i+0x248>)
 800fd16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fd1a:	e7e3      	b.n	800fce4 <_printf_i+0x174>
 800fd1c:	065e      	lsls	r6, r3, #25
 800fd1e:	bf48      	it	mi
 800fd20:	b2ad      	uxthmi	r5, r5
 800fd22:	e7e6      	b.n	800fcf2 <_printf_i+0x182>
 800fd24:	4616      	mov	r6, r2
 800fd26:	e7bb      	b.n	800fca0 <_printf_i+0x130>
 800fd28:	680b      	ldr	r3, [r1, #0]
 800fd2a:	6826      	ldr	r6, [r4, #0]
 800fd2c:	6960      	ldr	r0, [r4, #20]
 800fd2e:	1d1d      	adds	r5, r3, #4
 800fd30:	600d      	str	r5, [r1, #0]
 800fd32:	0635      	lsls	r5, r6, #24
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	d501      	bpl.n	800fd3c <_printf_i+0x1cc>
 800fd38:	6018      	str	r0, [r3, #0]
 800fd3a:	e002      	b.n	800fd42 <_printf_i+0x1d2>
 800fd3c:	0671      	lsls	r1, r6, #25
 800fd3e:	d5fb      	bpl.n	800fd38 <_printf_i+0x1c8>
 800fd40:	8018      	strh	r0, [r3, #0]
 800fd42:	2300      	movs	r3, #0
 800fd44:	6123      	str	r3, [r4, #16]
 800fd46:	4616      	mov	r6, r2
 800fd48:	e7ba      	b.n	800fcc0 <_printf_i+0x150>
 800fd4a:	680b      	ldr	r3, [r1, #0]
 800fd4c:	1d1a      	adds	r2, r3, #4
 800fd4e:	600a      	str	r2, [r1, #0]
 800fd50:	681e      	ldr	r6, [r3, #0]
 800fd52:	6862      	ldr	r2, [r4, #4]
 800fd54:	2100      	movs	r1, #0
 800fd56:	4630      	mov	r0, r6
 800fd58:	f7f0 fa3a 	bl	80001d0 <memchr>
 800fd5c:	b108      	cbz	r0, 800fd62 <_printf_i+0x1f2>
 800fd5e:	1b80      	subs	r0, r0, r6
 800fd60:	6060      	str	r0, [r4, #4]
 800fd62:	6863      	ldr	r3, [r4, #4]
 800fd64:	6123      	str	r3, [r4, #16]
 800fd66:	2300      	movs	r3, #0
 800fd68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd6c:	e7a8      	b.n	800fcc0 <_printf_i+0x150>
 800fd6e:	6923      	ldr	r3, [r4, #16]
 800fd70:	4632      	mov	r2, r6
 800fd72:	4649      	mov	r1, r9
 800fd74:	4640      	mov	r0, r8
 800fd76:	47d0      	blx	sl
 800fd78:	3001      	adds	r0, #1
 800fd7a:	d0ab      	beq.n	800fcd4 <_printf_i+0x164>
 800fd7c:	6823      	ldr	r3, [r4, #0]
 800fd7e:	079b      	lsls	r3, r3, #30
 800fd80:	d413      	bmi.n	800fdaa <_printf_i+0x23a>
 800fd82:	68e0      	ldr	r0, [r4, #12]
 800fd84:	9b03      	ldr	r3, [sp, #12]
 800fd86:	4298      	cmp	r0, r3
 800fd88:	bfb8      	it	lt
 800fd8a:	4618      	movlt	r0, r3
 800fd8c:	e7a4      	b.n	800fcd8 <_printf_i+0x168>
 800fd8e:	2301      	movs	r3, #1
 800fd90:	4632      	mov	r2, r6
 800fd92:	4649      	mov	r1, r9
 800fd94:	4640      	mov	r0, r8
 800fd96:	47d0      	blx	sl
 800fd98:	3001      	adds	r0, #1
 800fd9a:	d09b      	beq.n	800fcd4 <_printf_i+0x164>
 800fd9c:	3501      	adds	r5, #1
 800fd9e:	68e3      	ldr	r3, [r4, #12]
 800fda0:	9903      	ldr	r1, [sp, #12]
 800fda2:	1a5b      	subs	r3, r3, r1
 800fda4:	42ab      	cmp	r3, r5
 800fda6:	dcf2      	bgt.n	800fd8e <_printf_i+0x21e>
 800fda8:	e7eb      	b.n	800fd82 <_printf_i+0x212>
 800fdaa:	2500      	movs	r5, #0
 800fdac:	f104 0619 	add.w	r6, r4, #25
 800fdb0:	e7f5      	b.n	800fd9e <_printf_i+0x22e>
 800fdb2:	bf00      	nop
 800fdb4:	08010807 	.word	0x08010807
 800fdb8:	08010818 	.word	0x08010818

0800fdbc <__swbuf_r>:
 800fdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdbe:	460e      	mov	r6, r1
 800fdc0:	4614      	mov	r4, r2
 800fdc2:	4605      	mov	r5, r0
 800fdc4:	b118      	cbz	r0, 800fdce <__swbuf_r+0x12>
 800fdc6:	6983      	ldr	r3, [r0, #24]
 800fdc8:	b90b      	cbnz	r3, 800fdce <__swbuf_r+0x12>
 800fdca:	f000 f9d9 	bl	8010180 <__sinit>
 800fdce:	4b21      	ldr	r3, [pc, #132]	; (800fe54 <__swbuf_r+0x98>)
 800fdd0:	429c      	cmp	r4, r3
 800fdd2:	d12b      	bne.n	800fe2c <__swbuf_r+0x70>
 800fdd4:	686c      	ldr	r4, [r5, #4]
 800fdd6:	69a3      	ldr	r3, [r4, #24]
 800fdd8:	60a3      	str	r3, [r4, #8]
 800fdda:	89a3      	ldrh	r3, [r4, #12]
 800fddc:	071a      	lsls	r2, r3, #28
 800fdde:	d52f      	bpl.n	800fe40 <__swbuf_r+0x84>
 800fde0:	6923      	ldr	r3, [r4, #16]
 800fde2:	b36b      	cbz	r3, 800fe40 <__swbuf_r+0x84>
 800fde4:	6923      	ldr	r3, [r4, #16]
 800fde6:	6820      	ldr	r0, [r4, #0]
 800fde8:	1ac0      	subs	r0, r0, r3
 800fdea:	6963      	ldr	r3, [r4, #20]
 800fdec:	b2f6      	uxtb	r6, r6
 800fdee:	4283      	cmp	r3, r0
 800fdf0:	4637      	mov	r7, r6
 800fdf2:	dc04      	bgt.n	800fdfe <__swbuf_r+0x42>
 800fdf4:	4621      	mov	r1, r4
 800fdf6:	4628      	mov	r0, r5
 800fdf8:	f000 f92e 	bl	8010058 <_fflush_r>
 800fdfc:	bb30      	cbnz	r0, 800fe4c <__swbuf_r+0x90>
 800fdfe:	68a3      	ldr	r3, [r4, #8]
 800fe00:	3b01      	subs	r3, #1
 800fe02:	60a3      	str	r3, [r4, #8]
 800fe04:	6823      	ldr	r3, [r4, #0]
 800fe06:	1c5a      	adds	r2, r3, #1
 800fe08:	6022      	str	r2, [r4, #0]
 800fe0a:	701e      	strb	r6, [r3, #0]
 800fe0c:	6963      	ldr	r3, [r4, #20]
 800fe0e:	3001      	adds	r0, #1
 800fe10:	4283      	cmp	r3, r0
 800fe12:	d004      	beq.n	800fe1e <__swbuf_r+0x62>
 800fe14:	89a3      	ldrh	r3, [r4, #12]
 800fe16:	07db      	lsls	r3, r3, #31
 800fe18:	d506      	bpl.n	800fe28 <__swbuf_r+0x6c>
 800fe1a:	2e0a      	cmp	r6, #10
 800fe1c:	d104      	bne.n	800fe28 <__swbuf_r+0x6c>
 800fe1e:	4621      	mov	r1, r4
 800fe20:	4628      	mov	r0, r5
 800fe22:	f000 f919 	bl	8010058 <_fflush_r>
 800fe26:	b988      	cbnz	r0, 800fe4c <__swbuf_r+0x90>
 800fe28:	4638      	mov	r0, r7
 800fe2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe2c:	4b0a      	ldr	r3, [pc, #40]	; (800fe58 <__swbuf_r+0x9c>)
 800fe2e:	429c      	cmp	r4, r3
 800fe30:	d101      	bne.n	800fe36 <__swbuf_r+0x7a>
 800fe32:	68ac      	ldr	r4, [r5, #8]
 800fe34:	e7cf      	b.n	800fdd6 <__swbuf_r+0x1a>
 800fe36:	4b09      	ldr	r3, [pc, #36]	; (800fe5c <__swbuf_r+0xa0>)
 800fe38:	429c      	cmp	r4, r3
 800fe3a:	bf08      	it	eq
 800fe3c:	68ec      	ldreq	r4, [r5, #12]
 800fe3e:	e7ca      	b.n	800fdd6 <__swbuf_r+0x1a>
 800fe40:	4621      	mov	r1, r4
 800fe42:	4628      	mov	r0, r5
 800fe44:	f000 f80c 	bl	800fe60 <__swsetup_r>
 800fe48:	2800      	cmp	r0, #0
 800fe4a:	d0cb      	beq.n	800fde4 <__swbuf_r+0x28>
 800fe4c:	f04f 37ff 	mov.w	r7, #4294967295
 800fe50:	e7ea      	b.n	800fe28 <__swbuf_r+0x6c>
 800fe52:	bf00      	nop
 800fe54:	0801084c 	.word	0x0801084c
 800fe58:	0801086c 	.word	0x0801086c
 800fe5c:	0801082c 	.word	0x0801082c

0800fe60 <__swsetup_r>:
 800fe60:	4b32      	ldr	r3, [pc, #200]	; (800ff2c <__swsetup_r+0xcc>)
 800fe62:	b570      	push	{r4, r5, r6, lr}
 800fe64:	681d      	ldr	r5, [r3, #0]
 800fe66:	4606      	mov	r6, r0
 800fe68:	460c      	mov	r4, r1
 800fe6a:	b125      	cbz	r5, 800fe76 <__swsetup_r+0x16>
 800fe6c:	69ab      	ldr	r3, [r5, #24]
 800fe6e:	b913      	cbnz	r3, 800fe76 <__swsetup_r+0x16>
 800fe70:	4628      	mov	r0, r5
 800fe72:	f000 f985 	bl	8010180 <__sinit>
 800fe76:	4b2e      	ldr	r3, [pc, #184]	; (800ff30 <__swsetup_r+0xd0>)
 800fe78:	429c      	cmp	r4, r3
 800fe7a:	d10f      	bne.n	800fe9c <__swsetup_r+0x3c>
 800fe7c:	686c      	ldr	r4, [r5, #4]
 800fe7e:	89a3      	ldrh	r3, [r4, #12]
 800fe80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fe84:	0719      	lsls	r1, r3, #28
 800fe86:	d42c      	bmi.n	800fee2 <__swsetup_r+0x82>
 800fe88:	06dd      	lsls	r5, r3, #27
 800fe8a:	d411      	bmi.n	800feb0 <__swsetup_r+0x50>
 800fe8c:	2309      	movs	r3, #9
 800fe8e:	6033      	str	r3, [r6, #0]
 800fe90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fe94:	81a3      	strh	r3, [r4, #12]
 800fe96:	f04f 30ff 	mov.w	r0, #4294967295
 800fe9a:	e03e      	b.n	800ff1a <__swsetup_r+0xba>
 800fe9c:	4b25      	ldr	r3, [pc, #148]	; (800ff34 <__swsetup_r+0xd4>)
 800fe9e:	429c      	cmp	r4, r3
 800fea0:	d101      	bne.n	800fea6 <__swsetup_r+0x46>
 800fea2:	68ac      	ldr	r4, [r5, #8]
 800fea4:	e7eb      	b.n	800fe7e <__swsetup_r+0x1e>
 800fea6:	4b24      	ldr	r3, [pc, #144]	; (800ff38 <__swsetup_r+0xd8>)
 800fea8:	429c      	cmp	r4, r3
 800feaa:	bf08      	it	eq
 800feac:	68ec      	ldreq	r4, [r5, #12]
 800feae:	e7e6      	b.n	800fe7e <__swsetup_r+0x1e>
 800feb0:	0758      	lsls	r0, r3, #29
 800feb2:	d512      	bpl.n	800feda <__swsetup_r+0x7a>
 800feb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800feb6:	b141      	cbz	r1, 800feca <__swsetup_r+0x6a>
 800feb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800febc:	4299      	cmp	r1, r3
 800febe:	d002      	beq.n	800fec6 <__swsetup_r+0x66>
 800fec0:	4630      	mov	r0, r6
 800fec2:	f7ff fb57 	bl	800f574 <_free_r>
 800fec6:	2300      	movs	r3, #0
 800fec8:	6363      	str	r3, [r4, #52]	; 0x34
 800feca:	89a3      	ldrh	r3, [r4, #12]
 800fecc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fed0:	81a3      	strh	r3, [r4, #12]
 800fed2:	2300      	movs	r3, #0
 800fed4:	6063      	str	r3, [r4, #4]
 800fed6:	6923      	ldr	r3, [r4, #16]
 800fed8:	6023      	str	r3, [r4, #0]
 800feda:	89a3      	ldrh	r3, [r4, #12]
 800fedc:	f043 0308 	orr.w	r3, r3, #8
 800fee0:	81a3      	strh	r3, [r4, #12]
 800fee2:	6923      	ldr	r3, [r4, #16]
 800fee4:	b94b      	cbnz	r3, 800fefa <__swsetup_r+0x9a>
 800fee6:	89a3      	ldrh	r3, [r4, #12]
 800fee8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800feec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fef0:	d003      	beq.n	800fefa <__swsetup_r+0x9a>
 800fef2:	4621      	mov	r1, r4
 800fef4:	4630      	mov	r0, r6
 800fef6:	f000 fa07 	bl	8010308 <__smakebuf_r>
 800fefa:	89a0      	ldrh	r0, [r4, #12]
 800fefc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ff00:	f010 0301 	ands.w	r3, r0, #1
 800ff04:	d00a      	beq.n	800ff1c <__swsetup_r+0xbc>
 800ff06:	2300      	movs	r3, #0
 800ff08:	60a3      	str	r3, [r4, #8]
 800ff0a:	6963      	ldr	r3, [r4, #20]
 800ff0c:	425b      	negs	r3, r3
 800ff0e:	61a3      	str	r3, [r4, #24]
 800ff10:	6923      	ldr	r3, [r4, #16]
 800ff12:	b943      	cbnz	r3, 800ff26 <__swsetup_r+0xc6>
 800ff14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ff18:	d1ba      	bne.n	800fe90 <__swsetup_r+0x30>
 800ff1a:	bd70      	pop	{r4, r5, r6, pc}
 800ff1c:	0781      	lsls	r1, r0, #30
 800ff1e:	bf58      	it	pl
 800ff20:	6963      	ldrpl	r3, [r4, #20]
 800ff22:	60a3      	str	r3, [r4, #8]
 800ff24:	e7f4      	b.n	800ff10 <__swsetup_r+0xb0>
 800ff26:	2000      	movs	r0, #0
 800ff28:	e7f7      	b.n	800ff1a <__swsetup_r+0xba>
 800ff2a:	bf00      	nop
 800ff2c:	20000030 	.word	0x20000030
 800ff30:	0801084c 	.word	0x0801084c
 800ff34:	0801086c 	.word	0x0801086c
 800ff38:	0801082c 	.word	0x0801082c

0800ff3c <abort>:
 800ff3c:	b508      	push	{r3, lr}
 800ff3e:	2006      	movs	r0, #6
 800ff40:	f000 fa4a 	bl	80103d8 <raise>
 800ff44:	2001      	movs	r0, #1
 800ff46:	f7f1 fd9f 	bl	8001a88 <_exit>
	...

0800ff4c <__sflush_r>:
 800ff4c:	898a      	ldrh	r2, [r1, #12]
 800ff4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff52:	4605      	mov	r5, r0
 800ff54:	0710      	lsls	r0, r2, #28
 800ff56:	460c      	mov	r4, r1
 800ff58:	d458      	bmi.n	801000c <__sflush_r+0xc0>
 800ff5a:	684b      	ldr	r3, [r1, #4]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	dc05      	bgt.n	800ff6c <__sflush_r+0x20>
 800ff60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	dc02      	bgt.n	800ff6c <__sflush_r+0x20>
 800ff66:	2000      	movs	r0, #0
 800ff68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ff6e:	2e00      	cmp	r6, #0
 800ff70:	d0f9      	beq.n	800ff66 <__sflush_r+0x1a>
 800ff72:	2300      	movs	r3, #0
 800ff74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ff78:	682f      	ldr	r7, [r5, #0]
 800ff7a:	602b      	str	r3, [r5, #0]
 800ff7c:	d032      	beq.n	800ffe4 <__sflush_r+0x98>
 800ff7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ff80:	89a3      	ldrh	r3, [r4, #12]
 800ff82:	075a      	lsls	r2, r3, #29
 800ff84:	d505      	bpl.n	800ff92 <__sflush_r+0x46>
 800ff86:	6863      	ldr	r3, [r4, #4]
 800ff88:	1ac0      	subs	r0, r0, r3
 800ff8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ff8c:	b10b      	cbz	r3, 800ff92 <__sflush_r+0x46>
 800ff8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ff90:	1ac0      	subs	r0, r0, r3
 800ff92:	2300      	movs	r3, #0
 800ff94:	4602      	mov	r2, r0
 800ff96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ff98:	6a21      	ldr	r1, [r4, #32]
 800ff9a:	4628      	mov	r0, r5
 800ff9c:	47b0      	blx	r6
 800ff9e:	1c43      	adds	r3, r0, #1
 800ffa0:	89a3      	ldrh	r3, [r4, #12]
 800ffa2:	d106      	bne.n	800ffb2 <__sflush_r+0x66>
 800ffa4:	6829      	ldr	r1, [r5, #0]
 800ffa6:	291d      	cmp	r1, #29
 800ffa8:	d82c      	bhi.n	8010004 <__sflush_r+0xb8>
 800ffaa:	4a2a      	ldr	r2, [pc, #168]	; (8010054 <__sflush_r+0x108>)
 800ffac:	40ca      	lsrs	r2, r1
 800ffae:	07d6      	lsls	r6, r2, #31
 800ffb0:	d528      	bpl.n	8010004 <__sflush_r+0xb8>
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	6062      	str	r2, [r4, #4]
 800ffb6:	04d9      	lsls	r1, r3, #19
 800ffb8:	6922      	ldr	r2, [r4, #16]
 800ffba:	6022      	str	r2, [r4, #0]
 800ffbc:	d504      	bpl.n	800ffc8 <__sflush_r+0x7c>
 800ffbe:	1c42      	adds	r2, r0, #1
 800ffc0:	d101      	bne.n	800ffc6 <__sflush_r+0x7a>
 800ffc2:	682b      	ldr	r3, [r5, #0]
 800ffc4:	b903      	cbnz	r3, 800ffc8 <__sflush_r+0x7c>
 800ffc6:	6560      	str	r0, [r4, #84]	; 0x54
 800ffc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ffca:	602f      	str	r7, [r5, #0]
 800ffcc:	2900      	cmp	r1, #0
 800ffce:	d0ca      	beq.n	800ff66 <__sflush_r+0x1a>
 800ffd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ffd4:	4299      	cmp	r1, r3
 800ffd6:	d002      	beq.n	800ffde <__sflush_r+0x92>
 800ffd8:	4628      	mov	r0, r5
 800ffda:	f7ff facb 	bl	800f574 <_free_r>
 800ffde:	2000      	movs	r0, #0
 800ffe0:	6360      	str	r0, [r4, #52]	; 0x34
 800ffe2:	e7c1      	b.n	800ff68 <__sflush_r+0x1c>
 800ffe4:	6a21      	ldr	r1, [r4, #32]
 800ffe6:	2301      	movs	r3, #1
 800ffe8:	4628      	mov	r0, r5
 800ffea:	47b0      	blx	r6
 800ffec:	1c41      	adds	r1, r0, #1
 800ffee:	d1c7      	bne.n	800ff80 <__sflush_r+0x34>
 800fff0:	682b      	ldr	r3, [r5, #0]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d0c4      	beq.n	800ff80 <__sflush_r+0x34>
 800fff6:	2b1d      	cmp	r3, #29
 800fff8:	d001      	beq.n	800fffe <__sflush_r+0xb2>
 800fffa:	2b16      	cmp	r3, #22
 800fffc:	d101      	bne.n	8010002 <__sflush_r+0xb6>
 800fffe:	602f      	str	r7, [r5, #0]
 8010000:	e7b1      	b.n	800ff66 <__sflush_r+0x1a>
 8010002:	89a3      	ldrh	r3, [r4, #12]
 8010004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010008:	81a3      	strh	r3, [r4, #12]
 801000a:	e7ad      	b.n	800ff68 <__sflush_r+0x1c>
 801000c:	690f      	ldr	r7, [r1, #16]
 801000e:	2f00      	cmp	r7, #0
 8010010:	d0a9      	beq.n	800ff66 <__sflush_r+0x1a>
 8010012:	0793      	lsls	r3, r2, #30
 8010014:	680e      	ldr	r6, [r1, #0]
 8010016:	bf08      	it	eq
 8010018:	694b      	ldreq	r3, [r1, #20]
 801001a:	600f      	str	r7, [r1, #0]
 801001c:	bf18      	it	ne
 801001e:	2300      	movne	r3, #0
 8010020:	eba6 0807 	sub.w	r8, r6, r7
 8010024:	608b      	str	r3, [r1, #8]
 8010026:	f1b8 0f00 	cmp.w	r8, #0
 801002a:	dd9c      	ble.n	800ff66 <__sflush_r+0x1a>
 801002c:	6a21      	ldr	r1, [r4, #32]
 801002e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010030:	4643      	mov	r3, r8
 8010032:	463a      	mov	r2, r7
 8010034:	4628      	mov	r0, r5
 8010036:	47b0      	blx	r6
 8010038:	2800      	cmp	r0, #0
 801003a:	dc06      	bgt.n	801004a <__sflush_r+0xfe>
 801003c:	89a3      	ldrh	r3, [r4, #12]
 801003e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010042:	81a3      	strh	r3, [r4, #12]
 8010044:	f04f 30ff 	mov.w	r0, #4294967295
 8010048:	e78e      	b.n	800ff68 <__sflush_r+0x1c>
 801004a:	4407      	add	r7, r0
 801004c:	eba8 0800 	sub.w	r8, r8, r0
 8010050:	e7e9      	b.n	8010026 <__sflush_r+0xda>
 8010052:	bf00      	nop
 8010054:	20400001 	.word	0x20400001

08010058 <_fflush_r>:
 8010058:	b538      	push	{r3, r4, r5, lr}
 801005a:	690b      	ldr	r3, [r1, #16]
 801005c:	4605      	mov	r5, r0
 801005e:	460c      	mov	r4, r1
 8010060:	b913      	cbnz	r3, 8010068 <_fflush_r+0x10>
 8010062:	2500      	movs	r5, #0
 8010064:	4628      	mov	r0, r5
 8010066:	bd38      	pop	{r3, r4, r5, pc}
 8010068:	b118      	cbz	r0, 8010072 <_fflush_r+0x1a>
 801006a:	6983      	ldr	r3, [r0, #24]
 801006c:	b90b      	cbnz	r3, 8010072 <_fflush_r+0x1a>
 801006e:	f000 f887 	bl	8010180 <__sinit>
 8010072:	4b14      	ldr	r3, [pc, #80]	; (80100c4 <_fflush_r+0x6c>)
 8010074:	429c      	cmp	r4, r3
 8010076:	d11b      	bne.n	80100b0 <_fflush_r+0x58>
 8010078:	686c      	ldr	r4, [r5, #4]
 801007a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d0ef      	beq.n	8010062 <_fflush_r+0xa>
 8010082:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010084:	07d0      	lsls	r0, r2, #31
 8010086:	d404      	bmi.n	8010092 <_fflush_r+0x3a>
 8010088:	0599      	lsls	r1, r3, #22
 801008a:	d402      	bmi.n	8010092 <_fflush_r+0x3a>
 801008c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801008e:	f000 f915 	bl	80102bc <__retarget_lock_acquire_recursive>
 8010092:	4628      	mov	r0, r5
 8010094:	4621      	mov	r1, r4
 8010096:	f7ff ff59 	bl	800ff4c <__sflush_r>
 801009a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801009c:	07da      	lsls	r2, r3, #31
 801009e:	4605      	mov	r5, r0
 80100a0:	d4e0      	bmi.n	8010064 <_fflush_r+0xc>
 80100a2:	89a3      	ldrh	r3, [r4, #12]
 80100a4:	059b      	lsls	r3, r3, #22
 80100a6:	d4dd      	bmi.n	8010064 <_fflush_r+0xc>
 80100a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100aa:	f000 f908 	bl	80102be <__retarget_lock_release_recursive>
 80100ae:	e7d9      	b.n	8010064 <_fflush_r+0xc>
 80100b0:	4b05      	ldr	r3, [pc, #20]	; (80100c8 <_fflush_r+0x70>)
 80100b2:	429c      	cmp	r4, r3
 80100b4:	d101      	bne.n	80100ba <_fflush_r+0x62>
 80100b6:	68ac      	ldr	r4, [r5, #8]
 80100b8:	e7df      	b.n	801007a <_fflush_r+0x22>
 80100ba:	4b04      	ldr	r3, [pc, #16]	; (80100cc <_fflush_r+0x74>)
 80100bc:	429c      	cmp	r4, r3
 80100be:	bf08      	it	eq
 80100c0:	68ec      	ldreq	r4, [r5, #12]
 80100c2:	e7da      	b.n	801007a <_fflush_r+0x22>
 80100c4:	0801084c 	.word	0x0801084c
 80100c8:	0801086c 	.word	0x0801086c
 80100cc:	0801082c 	.word	0x0801082c

080100d0 <std>:
 80100d0:	2300      	movs	r3, #0
 80100d2:	b510      	push	{r4, lr}
 80100d4:	4604      	mov	r4, r0
 80100d6:	e9c0 3300 	strd	r3, r3, [r0]
 80100da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80100de:	6083      	str	r3, [r0, #8]
 80100e0:	8181      	strh	r1, [r0, #12]
 80100e2:	6643      	str	r3, [r0, #100]	; 0x64
 80100e4:	81c2      	strh	r2, [r0, #14]
 80100e6:	6183      	str	r3, [r0, #24]
 80100e8:	4619      	mov	r1, r3
 80100ea:	2208      	movs	r2, #8
 80100ec:	305c      	adds	r0, #92	; 0x5c
 80100ee:	f7ff fa39 	bl	800f564 <memset>
 80100f2:	4b05      	ldr	r3, [pc, #20]	; (8010108 <std+0x38>)
 80100f4:	6263      	str	r3, [r4, #36]	; 0x24
 80100f6:	4b05      	ldr	r3, [pc, #20]	; (801010c <std+0x3c>)
 80100f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80100fa:	4b05      	ldr	r3, [pc, #20]	; (8010110 <std+0x40>)
 80100fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80100fe:	4b05      	ldr	r3, [pc, #20]	; (8010114 <std+0x44>)
 8010100:	6224      	str	r4, [r4, #32]
 8010102:	6323      	str	r3, [r4, #48]	; 0x30
 8010104:	bd10      	pop	{r4, pc}
 8010106:	bf00      	nop
 8010108:	08010411 	.word	0x08010411
 801010c:	08010433 	.word	0x08010433
 8010110:	0801046b 	.word	0x0801046b
 8010114:	0801048f 	.word	0x0801048f

08010118 <_cleanup_r>:
 8010118:	4901      	ldr	r1, [pc, #4]	; (8010120 <_cleanup_r+0x8>)
 801011a:	f000 b8af 	b.w	801027c <_fwalk_reent>
 801011e:	bf00      	nop
 8010120:	08010059 	.word	0x08010059

08010124 <__sfmoreglue>:
 8010124:	b570      	push	{r4, r5, r6, lr}
 8010126:	1e4a      	subs	r2, r1, #1
 8010128:	2568      	movs	r5, #104	; 0x68
 801012a:	4355      	muls	r5, r2
 801012c:	460e      	mov	r6, r1
 801012e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010132:	f7ff fa6f 	bl	800f614 <_malloc_r>
 8010136:	4604      	mov	r4, r0
 8010138:	b140      	cbz	r0, 801014c <__sfmoreglue+0x28>
 801013a:	2100      	movs	r1, #0
 801013c:	e9c0 1600 	strd	r1, r6, [r0]
 8010140:	300c      	adds	r0, #12
 8010142:	60a0      	str	r0, [r4, #8]
 8010144:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010148:	f7ff fa0c 	bl	800f564 <memset>
 801014c:	4620      	mov	r0, r4
 801014e:	bd70      	pop	{r4, r5, r6, pc}

08010150 <__sfp_lock_acquire>:
 8010150:	4801      	ldr	r0, [pc, #4]	; (8010158 <__sfp_lock_acquire+0x8>)
 8010152:	f000 b8b3 	b.w	80102bc <__retarget_lock_acquire_recursive>
 8010156:	bf00      	nop
 8010158:	20002160 	.word	0x20002160

0801015c <__sfp_lock_release>:
 801015c:	4801      	ldr	r0, [pc, #4]	; (8010164 <__sfp_lock_release+0x8>)
 801015e:	f000 b8ae 	b.w	80102be <__retarget_lock_release_recursive>
 8010162:	bf00      	nop
 8010164:	20002160 	.word	0x20002160

08010168 <__sinit_lock_acquire>:
 8010168:	4801      	ldr	r0, [pc, #4]	; (8010170 <__sinit_lock_acquire+0x8>)
 801016a:	f000 b8a7 	b.w	80102bc <__retarget_lock_acquire_recursive>
 801016e:	bf00      	nop
 8010170:	2000215b 	.word	0x2000215b

08010174 <__sinit_lock_release>:
 8010174:	4801      	ldr	r0, [pc, #4]	; (801017c <__sinit_lock_release+0x8>)
 8010176:	f000 b8a2 	b.w	80102be <__retarget_lock_release_recursive>
 801017a:	bf00      	nop
 801017c:	2000215b 	.word	0x2000215b

08010180 <__sinit>:
 8010180:	b510      	push	{r4, lr}
 8010182:	4604      	mov	r4, r0
 8010184:	f7ff fff0 	bl	8010168 <__sinit_lock_acquire>
 8010188:	69a3      	ldr	r3, [r4, #24]
 801018a:	b11b      	cbz	r3, 8010194 <__sinit+0x14>
 801018c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010190:	f7ff bff0 	b.w	8010174 <__sinit_lock_release>
 8010194:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010198:	6523      	str	r3, [r4, #80]	; 0x50
 801019a:	4b13      	ldr	r3, [pc, #76]	; (80101e8 <__sinit+0x68>)
 801019c:	4a13      	ldr	r2, [pc, #76]	; (80101ec <__sinit+0x6c>)
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80101a2:	42a3      	cmp	r3, r4
 80101a4:	bf04      	itt	eq
 80101a6:	2301      	moveq	r3, #1
 80101a8:	61a3      	streq	r3, [r4, #24]
 80101aa:	4620      	mov	r0, r4
 80101ac:	f000 f820 	bl	80101f0 <__sfp>
 80101b0:	6060      	str	r0, [r4, #4]
 80101b2:	4620      	mov	r0, r4
 80101b4:	f000 f81c 	bl	80101f0 <__sfp>
 80101b8:	60a0      	str	r0, [r4, #8]
 80101ba:	4620      	mov	r0, r4
 80101bc:	f000 f818 	bl	80101f0 <__sfp>
 80101c0:	2200      	movs	r2, #0
 80101c2:	60e0      	str	r0, [r4, #12]
 80101c4:	2104      	movs	r1, #4
 80101c6:	6860      	ldr	r0, [r4, #4]
 80101c8:	f7ff ff82 	bl	80100d0 <std>
 80101cc:	68a0      	ldr	r0, [r4, #8]
 80101ce:	2201      	movs	r2, #1
 80101d0:	2109      	movs	r1, #9
 80101d2:	f7ff ff7d 	bl	80100d0 <std>
 80101d6:	68e0      	ldr	r0, [r4, #12]
 80101d8:	2202      	movs	r2, #2
 80101da:	2112      	movs	r1, #18
 80101dc:	f7ff ff78 	bl	80100d0 <std>
 80101e0:	2301      	movs	r3, #1
 80101e2:	61a3      	str	r3, [r4, #24]
 80101e4:	e7d2      	b.n	801018c <__sinit+0xc>
 80101e6:	bf00      	nop
 80101e8:	08010740 	.word	0x08010740
 80101ec:	08010119 	.word	0x08010119

080101f0 <__sfp>:
 80101f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101f2:	4607      	mov	r7, r0
 80101f4:	f7ff ffac 	bl	8010150 <__sfp_lock_acquire>
 80101f8:	4b1e      	ldr	r3, [pc, #120]	; (8010274 <__sfp+0x84>)
 80101fa:	681e      	ldr	r6, [r3, #0]
 80101fc:	69b3      	ldr	r3, [r6, #24]
 80101fe:	b913      	cbnz	r3, 8010206 <__sfp+0x16>
 8010200:	4630      	mov	r0, r6
 8010202:	f7ff ffbd 	bl	8010180 <__sinit>
 8010206:	3648      	adds	r6, #72	; 0x48
 8010208:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801020c:	3b01      	subs	r3, #1
 801020e:	d503      	bpl.n	8010218 <__sfp+0x28>
 8010210:	6833      	ldr	r3, [r6, #0]
 8010212:	b30b      	cbz	r3, 8010258 <__sfp+0x68>
 8010214:	6836      	ldr	r6, [r6, #0]
 8010216:	e7f7      	b.n	8010208 <__sfp+0x18>
 8010218:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801021c:	b9d5      	cbnz	r5, 8010254 <__sfp+0x64>
 801021e:	4b16      	ldr	r3, [pc, #88]	; (8010278 <__sfp+0x88>)
 8010220:	60e3      	str	r3, [r4, #12]
 8010222:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010226:	6665      	str	r5, [r4, #100]	; 0x64
 8010228:	f000 f847 	bl	80102ba <__retarget_lock_init_recursive>
 801022c:	f7ff ff96 	bl	801015c <__sfp_lock_release>
 8010230:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010234:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010238:	6025      	str	r5, [r4, #0]
 801023a:	61a5      	str	r5, [r4, #24]
 801023c:	2208      	movs	r2, #8
 801023e:	4629      	mov	r1, r5
 8010240:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010244:	f7ff f98e 	bl	800f564 <memset>
 8010248:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801024c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010250:	4620      	mov	r0, r4
 8010252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010254:	3468      	adds	r4, #104	; 0x68
 8010256:	e7d9      	b.n	801020c <__sfp+0x1c>
 8010258:	2104      	movs	r1, #4
 801025a:	4638      	mov	r0, r7
 801025c:	f7ff ff62 	bl	8010124 <__sfmoreglue>
 8010260:	4604      	mov	r4, r0
 8010262:	6030      	str	r0, [r6, #0]
 8010264:	2800      	cmp	r0, #0
 8010266:	d1d5      	bne.n	8010214 <__sfp+0x24>
 8010268:	f7ff ff78 	bl	801015c <__sfp_lock_release>
 801026c:	230c      	movs	r3, #12
 801026e:	603b      	str	r3, [r7, #0]
 8010270:	e7ee      	b.n	8010250 <__sfp+0x60>
 8010272:	bf00      	nop
 8010274:	08010740 	.word	0x08010740
 8010278:	ffff0001 	.word	0xffff0001

0801027c <_fwalk_reent>:
 801027c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010280:	4606      	mov	r6, r0
 8010282:	4688      	mov	r8, r1
 8010284:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010288:	2700      	movs	r7, #0
 801028a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801028e:	f1b9 0901 	subs.w	r9, r9, #1
 8010292:	d505      	bpl.n	80102a0 <_fwalk_reent+0x24>
 8010294:	6824      	ldr	r4, [r4, #0]
 8010296:	2c00      	cmp	r4, #0
 8010298:	d1f7      	bne.n	801028a <_fwalk_reent+0xe>
 801029a:	4638      	mov	r0, r7
 801029c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102a0:	89ab      	ldrh	r3, [r5, #12]
 80102a2:	2b01      	cmp	r3, #1
 80102a4:	d907      	bls.n	80102b6 <_fwalk_reent+0x3a>
 80102a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80102aa:	3301      	adds	r3, #1
 80102ac:	d003      	beq.n	80102b6 <_fwalk_reent+0x3a>
 80102ae:	4629      	mov	r1, r5
 80102b0:	4630      	mov	r0, r6
 80102b2:	47c0      	blx	r8
 80102b4:	4307      	orrs	r7, r0
 80102b6:	3568      	adds	r5, #104	; 0x68
 80102b8:	e7e9      	b.n	801028e <_fwalk_reent+0x12>

080102ba <__retarget_lock_init_recursive>:
 80102ba:	4770      	bx	lr

080102bc <__retarget_lock_acquire_recursive>:
 80102bc:	4770      	bx	lr

080102be <__retarget_lock_release_recursive>:
 80102be:	4770      	bx	lr

080102c0 <__swhatbuf_r>:
 80102c0:	b570      	push	{r4, r5, r6, lr}
 80102c2:	460e      	mov	r6, r1
 80102c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102c8:	2900      	cmp	r1, #0
 80102ca:	b096      	sub	sp, #88	; 0x58
 80102cc:	4614      	mov	r4, r2
 80102ce:	461d      	mov	r5, r3
 80102d0:	da07      	bge.n	80102e2 <__swhatbuf_r+0x22>
 80102d2:	2300      	movs	r3, #0
 80102d4:	602b      	str	r3, [r5, #0]
 80102d6:	89b3      	ldrh	r3, [r6, #12]
 80102d8:	061a      	lsls	r2, r3, #24
 80102da:	d410      	bmi.n	80102fe <__swhatbuf_r+0x3e>
 80102dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102e0:	e00e      	b.n	8010300 <__swhatbuf_r+0x40>
 80102e2:	466a      	mov	r2, sp
 80102e4:	f000 f8fa 	bl	80104dc <_fstat_r>
 80102e8:	2800      	cmp	r0, #0
 80102ea:	dbf2      	blt.n	80102d2 <__swhatbuf_r+0x12>
 80102ec:	9a01      	ldr	r2, [sp, #4]
 80102ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80102f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80102f6:	425a      	negs	r2, r3
 80102f8:	415a      	adcs	r2, r3
 80102fa:	602a      	str	r2, [r5, #0]
 80102fc:	e7ee      	b.n	80102dc <__swhatbuf_r+0x1c>
 80102fe:	2340      	movs	r3, #64	; 0x40
 8010300:	2000      	movs	r0, #0
 8010302:	6023      	str	r3, [r4, #0]
 8010304:	b016      	add	sp, #88	; 0x58
 8010306:	bd70      	pop	{r4, r5, r6, pc}

08010308 <__smakebuf_r>:
 8010308:	898b      	ldrh	r3, [r1, #12]
 801030a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801030c:	079d      	lsls	r5, r3, #30
 801030e:	4606      	mov	r6, r0
 8010310:	460c      	mov	r4, r1
 8010312:	d507      	bpl.n	8010324 <__smakebuf_r+0x1c>
 8010314:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010318:	6023      	str	r3, [r4, #0]
 801031a:	6123      	str	r3, [r4, #16]
 801031c:	2301      	movs	r3, #1
 801031e:	6163      	str	r3, [r4, #20]
 8010320:	b002      	add	sp, #8
 8010322:	bd70      	pop	{r4, r5, r6, pc}
 8010324:	ab01      	add	r3, sp, #4
 8010326:	466a      	mov	r2, sp
 8010328:	f7ff ffca 	bl	80102c0 <__swhatbuf_r>
 801032c:	9900      	ldr	r1, [sp, #0]
 801032e:	4605      	mov	r5, r0
 8010330:	4630      	mov	r0, r6
 8010332:	f7ff f96f 	bl	800f614 <_malloc_r>
 8010336:	b948      	cbnz	r0, 801034c <__smakebuf_r+0x44>
 8010338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801033c:	059a      	lsls	r2, r3, #22
 801033e:	d4ef      	bmi.n	8010320 <__smakebuf_r+0x18>
 8010340:	f023 0303 	bic.w	r3, r3, #3
 8010344:	f043 0302 	orr.w	r3, r3, #2
 8010348:	81a3      	strh	r3, [r4, #12]
 801034a:	e7e3      	b.n	8010314 <__smakebuf_r+0xc>
 801034c:	4b0d      	ldr	r3, [pc, #52]	; (8010384 <__smakebuf_r+0x7c>)
 801034e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010350:	89a3      	ldrh	r3, [r4, #12]
 8010352:	6020      	str	r0, [r4, #0]
 8010354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010358:	81a3      	strh	r3, [r4, #12]
 801035a:	9b00      	ldr	r3, [sp, #0]
 801035c:	6163      	str	r3, [r4, #20]
 801035e:	9b01      	ldr	r3, [sp, #4]
 8010360:	6120      	str	r0, [r4, #16]
 8010362:	b15b      	cbz	r3, 801037c <__smakebuf_r+0x74>
 8010364:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010368:	4630      	mov	r0, r6
 801036a:	f000 f8c9 	bl	8010500 <_isatty_r>
 801036e:	b128      	cbz	r0, 801037c <__smakebuf_r+0x74>
 8010370:	89a3      	ldrh	r3, [r4, #12]
 8010372:	f023 0303 	bic.w	r3, r3, #3
 8010376:	f043 0301 	orr.w	r3, r3, #1
 801037a:	81a3      	strh	r3, [r4, #12]
 801037c:	89a0      	ldrh	r0, [r4, #12]
 801037e:	4305      	orrs	r5, r0
 8010380:	81a5      	strh	r5, [r4, #12]
 8010382:	e7cd      	b.n	8010320 <__smakebuf_r+0x18>
 8010384:	08010119 	.word	0x08010119

08010388 <_raise_r>:
 8010388:	291f      	cmp	r1, #31
 801038a:	b538      	push	{r3, r4, r5, lr}
 801038c:	4604      	mov	r4, r0
 801038e:	460d      	mov	r5, r1
 8010390:	d904      	bls.n	801039c <_raise_r+0x14>
 8010392:	2316      	movs	r3, #22
 8010394:	6003      	str	r3, [r0, #0]
 8010396:	f04f 30ff 	mov.w	r0, #4294967295
 801039a:	bd38      	pop	{r3, r4, r5, pc}
 801039c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801039e:	b112      	cbz	r2, 80103a6 <_raise_r+0x1e>
 80103a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80103a4:	b94b      	cbnz	r3, 80103ba <_raise_r+0x32>
 80103a6:	4620      	mov	r0, r4
 80103a8:	f000 f830 	bl	801040c <_getpid_r>
 80103ac:	462a      	mov	r2, r5
 80103ae:	4601      	mov	r1, r0
 80103b0:	4620      	mov	r0, r4
 80103b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80103b6:	f000 b817 	b.w	80103e8 <_kill_r>
 80103ba:	2b01      	cmp	r3, #1
 80103bc:	d00a      	beq.n	80103d4 <_raise_r+0x4c>
 80103be:	1c59      	adds	r1, r3, #1
 80103c0:	d103      	bne.n	80103ca <_raise_r+0x42>
 80103c2:	2316      	movs	r3, #22
 80103c4:	6003      	str	r3, [r0, #0]
 80103c6:	2001      	movs	r0, #1
 80103c8:	e7e7      	b.n	801039a <_raise_r+0x12>
 80103ca:	2400      	movs	r4, #0
 80103cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80103d0:	4628      	mov	r0, r5
 80103d2:	4798      	blx	r3
 80103d4:	2000      	movs	r0, #0
 80103d6:	e7e0      	b.n	801039a <_raise_r+0x12>

080103d8 <raise>:
 80103d8:	4b02      	ldr	r3, [pc, #8]	; (80103e4 <raise+0xc>)
 80103da:	4601      	mov	r1, r0
 80103dc:	6818      	ldr	r0, [r3, #0]
 80103de:	f7ff bfd3 	b.w	8010388 <_raise_r>
 80103e2:	bf00      	nop
 80103e4:	20000030 	.word	0x20000030

080103e8 <_kill_r>:
 80103e8:	b538      	push	{r3, r4, r5, lr}
 80103ea:	4d07      	ldr	r5, [pc, #28]	; (8010408 <_kill_r+0x20>)
 80103ec:	2300      	movs	r3, #0
 80103ee:	4604      	mov	r4, r0
 80103f0:	4608      	mov	r0, r1
 80103f2:	4611      	mov	r1, r2
 80103f4:	602b      	str	r3, [r5, #0]
 80103f6:	f7f1 fb37 	bl	8001a68 <_kill>
 80103fa:	1c43      	adds	r3, r0, #1
 80103fc:	d102      	bne.n	8010404 <_kill_r+0x1c>
 80103fe:	682b      	ldr	r3, [r5, #0]
 8010400:	b103      	cbz	r3, 8010404 <_kill_r+0x1c>
 8010402:	6023      	str	r3, [r4, #0]
 8010404:	bd38      	pop	{r3, r4, r5, pc}
 8010406:	bf00      	nop
 8010408:	20002154 	.word	0x20002154

0801040c <_getpid_r>:
 801040c:	f7f1 bb24 	b.w	8001a58 <_getpid>

08010410 <__sread>:
 8010410:	b510      	push	{r4, lr}
 8010412:	460c      	mov	r4, r1
 8010414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010418:	f000 f894 	bl	8010544 <_read_r>
 801041c:	2800      	cmp	r0, #0
 801041e:	bfab      	itete	ge
 8010420:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010422:	89a3      	ldrhlt	r3, [r4, #12]
 8010424:	181b      	addge	r3, r3, r0
 8010426:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801042a:	bfac      	ite	ge
 801042c:	6563      	strge	r3, [r4, #84]	; 0x54
 801042e:	81a3      	strhlt	r3, [r4, #12]
 8010430:	bd10      	pop	{r4, pc}

08010432 <__swrite>:
 8010432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010436:	461f      	mov	r7, r3
 8010438:	898b      	ldrh	r3, [r1, #12]
 801043a:	05db      	lsls	r3, r3, #23
 801043c:	4605      	mov	r5, r0
 801043e:	460c      	mov	r4, r1
 8010440:	4616      	mov	r6, r2
 8010442:	d505      	bpl.n	8010450 <__swrite+0x1e>
 8010444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010448:	2302      	movs	r3, #2
 801044a:	2200      	movs	r2, #0
 801044c:	f000 f868 	bl	8010520 <_lseek_r>
 8010450:	89a3      	ldrh	r3, [r4, #12]
 8010452:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010456:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801045a:	81a3      	strh	r3, [r4, #12]
 801045c:	4632      	mov	r2, r6
 801045e:	463b      	mov	r3, r7
 8010460:	4628      	mov	r0, r5
 8010462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010466:	f000 b817 	b.w	8010498 <_write_r>

0801046a <__sseek>:
 801046a:	b510      	push	{r4, lr}
 801046c:	460c      	mov	r4, r1
 801046e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010472:	f000 f855 	bl	8010520 <_lseek_r>
 8010476:	1c43      	adds	r3, r0, #1
 8010478:	89a3      	ldrh	r3, [r4, #12]
 801047a:	bf15      	itete	ne
 801047c:	6560      	strne	r0, [r4, #84]	; 0x54
 801047e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010482:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010486:	81a3      	strheq	r3, [r4, #12]
 8010488:	bf18      	it	ne
 801048a:	81a3      	strhne	r3, [r4, #12]
 801048c:	bd10      	pop	{r4, pc}

0801048e <__sclose>:
 801048e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010492:	f000 b813 	b.w	80104bc <_close_r>
	...

08010498 <_write_r>:
 8010498:	b538      	push	{r3, r4, r5, lr}
 801049a:	4d07      	ldr	r5, [pc, #28]	; (80104b8 <_write_r+0x20>)
 801049c:	4604      	mov	r4, r0
 801049e:	4608      	mov	r0, r1
 80104a0:	4611      	mov	r1, r2
 80104a2:	2200      	movs	r2, #0
 80104a4:	602a      	str	r2, [r5, #0]
 80104a6:	461a      	mov	r2, r3
 80104a8:	f7f1 fb15 	bl	8001ad6 <_write>
 80104ac:	1c43      	adds	r3, r0, #1
 80104ae:	d102      	bne.n	80104b6 <_write_r+0x1e>
 80104b0:	682b      	ldr	r3, [r5, #0]
 80104b2:	b103      	cbz	r3, 80104b6 <_write_r+0x1e>
 80104b4:	6023      	str	r3, [r4, #0]
 80104b6:	bd38      	pop	{r3, r4, r5, pc}
 80104b8:	20002154 	.word	0x20002154

080104bc <_close_r>:
 80104bc:	b538      	push	{r3, r4, r5, lr}
 80104be:	4d06      	ldr	r5, [pc, #24]	; (80104d8 <_close_r+0x1c>)
 80104c0:	2300      	movs	r3, #0
 80104c2:	4604      	mov	r4, r0
 80104c4:	4608      	mov	r0, r1
 80104c6:	602b      	str	r3, [r5, #0]
 80104c8:	f7f1 fb21 	bl	8001b0e <_close>
 80104cc:	1c43      	adds	r3, r0, #1
 80104ce:	d102      	bne.n	80104d6 <_close_r+0x1a>
 80104d0:	682b      	ldr	r3, [r5, #0]
 80104d2:	b103      	cbz	r3, 80104d6 <_close_r+0x1a>
 80104d4:	6023      	str	r3, [r4, #0]
 80104d6:	bd38      	pop	{r3, r4, r5, pc}
 80104d8:	20002154 	.word	0x20002154

080104dc <_fstat_r>:
 80104dc:	b538      	push	{r3, r4, r5, lr}
 80104de:	4d07      	ldr	r5, [pc, #28]	; (80104fc <_fstat_r+0x20>)
 80104e0:	2300      	movs	r3, #0
 80104e2:	4604      	mov	r4, r0
 80104e4:	4608      	mov	r0, r1
 80104e6:	4611      	mov	r1, r2
 80104e8:	602b      	str	r3, [r5, #0]
 80104ea:	f7f1 fb1c 	bl	8001b26 <_fstat>
 80104ee:	1c43      	adds	r3, r0, #1
 80104f0:	d102      	bne.n	80104f8 <_fstat_r+0x1c>
 80104f2:	682b      	ldr	r3, [r5, #0]
 80104f4:	b103      	cbz	r3, 80104f8 <_fstat_r+0x1c>
 80104f6:	6023      	str	r3, [r4, #0]
 80104f8:	bd38      	pop	{r3, r4, r5, pc}
 80104fa:	bf00      	nop
 80104fc:	20002154 	.word	0x20002154

08010500 <_isatty_r>:
 8010500:	b538      	push	{r3, r4, r5, lr}
 8010502:	4d06      	ldr	r5, [pc, #24]	; (801051c <_isatty_r+0x1c>)
 8010504:	2300      	movs	r3, #0
 8010506:	4604      	mov	r4, r0
 8010508:	4608      	mov	r0, r1
 801050a:	602b      	str	r3, [r5, #0]
 801050c:	f7f1 fb1b 	bl	8001b46 <_isatty>
 8010510:	1c43      	adds	r3, r0, #1
 8010512:	d102      	bne.n	801051a <_isatty_r+0x1a>
 8010514:	682b      	ldr	r3, [r5, #0]
 8010516:	b103      	cbz	r3, 801051a <_isatty_r+0x1a>
 8010518:	6023      	str	r3, [r4, #0]
 801051a:	bd38      	pop	{r3, r4, r5, pc}
 801051c:	20002154 	.word	0x20002154

08010520 <_lseek_r>:
 8010520:	b538      	push	{r3, r4, r5, lr}
 8010522:	4d07      	ldr	r5, [pc, #28]	; (8010540 <_lseek_r+0x20>)
 8010524:	4604      	mov	r4, r0
 8010526:	4608      	mov	r0, r1
 8010528:	4611      	mov	r1, r2
 801052a:	2200      	movs	r2, #0
 801052c:	602a      	str	r2, [r5, #0]
 801052e:	461a      	mov	r2, r3
 8010530:	f7f1 fb14 	bl	8001b5c <_lseek>
 8010534:	1c43      	adds	r3, r0, #1
 8010536:	d102      	bne.n	801053e <_lseek_r+0x1e>
 8010538:	682b      	ldr	r3, [r5, #0]
 801053a:	b103      	cbz	r3, 801053e <_lseek_r+0x1e>
 801053c:	6023      	str	r3, [r4, #0]
 801053e:	bd38      	pop	{r3, r4, r5, pc}
 8010540:	20002154 	.word	0x20002154

08010544 <_read_r>:
 8010544:	b538      	push	{r3, r4, r5, lr}
 8010546:	4d07      	ldr	r5, [pc, #28]	; (8010564 <_read_r+0x20>)
 8010548:	4604      	mov	r4, r0
 801054a:	4608      	mov	r0, r1
 801054c:	4611      	mov	r1, r2
 801054e:	2200      	movs	r2, #0
 8010550:	602a      	str	r2, [r5, #0]
 8010552:	461a      	mov	r2, r3
 8010554:	f7f1 faa2 	bl	8001a9c <_read>
 8010558:	1c43      	adds	r3, r0, #1
 801055a:	d102      	bne.n	8010562 <_read_r+0x1e>
 801055c:	682b      	ldr	r3, [r5, #0]
 801055e:	b103      	cbz	r3, 8010562 <_read_r+0x1e>
 8010560:	6023      	str	r3, [r4, #0]
 8010562:	bd38      	pop	{r3, r4, r5, pc}
 8010564:	20002154 	.word	0x20002154

08010568 <_init>:
 8010568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801056a:	bf00      	nop
 801056c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801056e:	bc08      	pop	{r3}
 8010570:	469e      	mov	lr, r3
 8010572:	4770      	bx	lr

08010574 <_fini>:
 8010574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010576:	bf00      	nop
 8010578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801057a:	bc08      	pop	{r3}
 801057c:	469e      	mov	lr, r3
 801057e:	4770      	bx	lr
