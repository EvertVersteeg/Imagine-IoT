/**
 ******************************************************************************
 * @file           : main.c
 * @author         : E. Versteeg @ Imagine Solutions BV
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2021 Imagine Solutions BV.
 * All rights reserved.
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 * Select "SWD" as interface under debug configuration => debugger tab.
 * select under window (in debug mode) => Show View => SWV => SWV ITM Data Console
 * Configure trace in the data console => select port 1 => start trace
 **/

#include "main.h"

// Function declaration of the interrupt fault handlers
void HardFault_Handler(void);
void MemManage_Handler(void);
void BusFault_Handler(void);
void EXTI0_IRQHandler(void);

uint32_t volatile *pEXTI_Pending_Reg			= (uint32_t) (0x40013C00 + 0x14);    // Pending register => Base address from the memory map + offset (reference manual page 66)
uint32_t volatile *pEXTI_Int_Mask_Reg			= (uint32_t) (0x40013C00 + 0x00);    // Interrupt mask register


int main(void)
{
    printf("Hello World\n");
	/* Loop forever */
	for(;;);
}


// Implementation of fault handlers
void HardFault_Handler(void)
{
	printf("Exeption : Hardfault\n");
	while(1);
}

void MemManage_Handler(void)
{
	printf("Exeption : MemManage\n");
	while(1);
}

void BusFault_Handler(void)
{
	printf("Exeption : Busfault\n");
	while(1);
}
// Implementation of wake up button

void EXTI0_IRQHandler(void)
{
	printf("Interrupt : Wake up button pressed\n");

	// Clearing of exti interrupt pending
	*pEXTI_Pending_Reg |= (1 << 0);
}

}
