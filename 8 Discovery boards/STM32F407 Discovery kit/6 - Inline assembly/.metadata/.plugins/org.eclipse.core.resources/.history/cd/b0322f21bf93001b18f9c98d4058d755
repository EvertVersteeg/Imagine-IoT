/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
	// (asm : output : input : clobber list)
	// asm => naar, van

	// Zet de waarden handmatig in memory op een gewenste waarde en de rest op 0
	__asm volatile("LDR R1,=#0x20001000": : :); // load het adres in r1
	__asm volatile("LDR R2,=#0x20001004": : :);
    __asm volatile("LDR R0,[R1]": : :); // load de waarde van adres in r1
    __asm volatile("LDR R1,[R2]": : :);
    __asm volatile("ADD R0,R0,R1": : :); // optellen
    __asm volatile("STR R0,[R2]": : :); // set de waarde van optelling in r0

    // Move a value of a "C variable => val " in een register (R0)
    int val = 11;

    __asm volatile ("MOV R0,%0": : "r"(val):);
    // ipv variabele een vast getal met immediate value (constant in rante 0 .. 255
    __asm volatile ("MOV R0,%0": : "I"(0x50):); // compiler maakt van 0x50 => #80  (=5*16)
    // variant wordt door twee instucties uitgevoerd ipv 1 zoals de vorige, R3 wordt als tussenstap gebruikt ( door de r)
    __asm volatile ("MOV R0,%0": : "r"(0x50):); // compiler maakt van 0x50 => #80  (=5*16)
	/* Loop forever */
	for(;;);
}
